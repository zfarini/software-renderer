internal v4 V3(float x, float y, float z)
{
    return (v4){x, y, z};
}

internal v4 operator+(v4 a, v4 b)
{
    return {a.x + b.x, a.y + b.y, a.z + b.z};
}

internal v4 operator-(v4 a, v4 b)
{
    return {a.x - b.x, a.y - b.y, a.z - b.z};
}

internal v4 operator-(v4 a)
{
	return {-a.x, -a.y, -a.z};
}

internal v4 operator*(v4 a, float b)
{
    return {a.x * b, a.y * b, a.z * b};
}

internal v4 operator*(float b, v4 a)
{
	return a * b;
}

internal v4 operator*(v4 a, v4 b)
{
	return {a.x * b.x, a.y * b.y, a.z * b.z};
}

internal v4 operator/(v4 a, float b)
{
    return a * (1.f / b);
}

internal v4 &operator+=(v4 &a, v4 b)
{
	return a = a + b;
}

internal v4 &operator-=(v4 &a, v4 b)
{
	return a = a - b;
}

internal v4 &operator*=(v4 &a, v4 b)
{
	return a = a * b;
}

internal v4 &operator*=(v4 &a, float b)
{
	return a = a * b;
}

internal v4 &operator/=(v4 &a, float b)
{
	return a = a / b;
}

internal float dot(v4 a, v4 b)
{
    return a.x * b.x + a.y * b.y + a.z * b.z;
}

internal float length(v4 a)
{
    return sqrtf(dot(a, a));
}

internal v4 lerp(v4 a, float t, v4 b)
{
	return {
		lerp(a.x, t, b.x),
		lerp(a.y, t, b.y),
		lerp(a.z, t, b.z)
	};
}

internal v4 noz(v4 a)
{
    float len = length(a);

    if (len <= 0.00001f)
        return (v4){};
	return a / len;
}
