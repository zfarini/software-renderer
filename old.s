	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	__Z10init_arenaP5ArenaPvm       ## -- Begin function _Z10init_arenaP5ArenaPvm
	.p2align	4, 0x90
__Z10init_arenaP5ArenaPvm:              ## @_Z10init_arenaP5ArenaPvm
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rsi, (%rdi)
	movq	%rdx, 16(%rdi)
	movq	$0, 8(%rdi)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z11clear_arenaP5Arena         ## -- Begin function _Z11clear_arenaP5Arena
	.p2align	4, 0x90
__Z11clear_arenaP5Arena:                ## @_Z11clear_arenaP5Arena
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	$0, 8(%rdi)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z20default_arena_paramsv      ## -- Begin function _Z20default_arena_paramsv
	.p2align	4, 0x90
__Z20default_arena_paramsv:             ## @_Z20default_arena_paramsv
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movabsq	$137438953472, %rax             ## imm = 0x2000000000
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z11arena_clearv               ## -- Begin function _Z11arena_clearv
	.p2align	4, 0x90
__Z11arena_clearv:                      ## @_Z11arena_clearv
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	$1, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z11arena_alignii              ## -- Begin function _Z11arena_alignii
	.p2align	4, 0x90
__Z11arena_alignii:                     ## @_Z11arena_alignii
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
                                        ## kill: def $edi killed $edi def $rdi
	shlq	$32, %rdi
	leaq	1(%rdi), %rax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z10push_size_PKciP5Arenam15ArenaPushParams ## -- Begin function _Z10push_size_PKciP5Arenam15ArenaPushParams
	.p2align	4, 0x90
__Z10push_size_PKciP5Arenam15ArenaPushParams: ## @_Z10push_size_PKciP5Arenam15ArenaPushParams
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r10
	movl	%esi, %r9d
	movq	%rdi, %r11
	movq	%r8, %rsi
	shrq	$32, %rsi
	movq	(%rdx), %r14
	movq	8(%rdx), %rax
	addq	%r14, %rax
	leaq	(%rsi,%rax), %rdi
	decq	%rdi
	movq	%rdi, %rax
	shrq	$32, %rax
	je	LBB5_1
## %bb.2:
	movq	%rdi, %rax
	xorl	%edx, %edx
	divq	%rsi
	movq	%rdx, %r15
	jmp	LBB5_3
LBB5_1:
	movl	%edi, %eax
	xorl	%edx, %edx
	divl	%esi
	movl	%edx, %r15d
LBB5_3:
	movq	%rdi, %rbx
	subq	%r15, %rbx
	movq	%rbx, %rax
	shrq	$32, %rax
	je	LBB5_4
## %bb.5:
	movq	%rbx, %rax
	xorl	%edx, %edx
	divq	%rsi
	testq	%rdx, %rdx
	jne	LBB5_7
LBB5_8:
	addq	%r14, %r15
	subq	%r15, %rdi
	addq	%rcx, %rdi
	cmpq	16(%r10), %rdi
	ja	LBB5_13
## %bb.9:
	movq	%rdi, 8(%r10)
	testb	$1, %r8b
	je	LBB5_11
## %bb.10:
	movq	%rbx, %rdi
	movq	%rcx, %rsi
	callq	___bzero
LBB5_11:
	movq	%rbx, %rax
LBB5_12:
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB5_4:
	movl	%ebx, %eax
	xorl	%edx, %edx
	divl	%esi
                                        ## kill: def $edx killed $edx def $rdx
	testq	%rdx, %rdx
	je	LBB5_8
LBB5_7:
	callq	__Z10push_size_PKciP5Arenam15ArenaPushParams.cold.1
	xorl	%eax, %eax
	jmp	LBB5_12
LBB5_13:
	leaq	L_.str.2(%rip), %rdi
	movq	%r11, %rsi
	movl	%r9d, %edx
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	movl	$72, %edx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.globl	__Z10init_arenaP5ArenaS0_m      ## -- Begin function _Z10init_arenaP5ArenaS0_m
	.p2align	4, 0x90
__Z10init_arenaP5ArenaS0_m:             ## @_Z10init_arenaP5ArenaS0_m
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movb	$1, %al
	testb	%al, %al
	je	LBB6_3
## %bb.1:
	movq	(%rsi), %rcx
	movq	8(%rsi), %rax
	leaq	(%rcx,%rax), %r8
	addq	$31, %r8
	movl	%r8d, %eax
	andl	$31, %eax
	addq	%rcx, %rax
	movq	%r8, %rcx
	subq	%rax, %rcx
	addq	%rdx, %rcx
	cmpq	16(%rsi), %rcx
	ja	LBB6_4
## %bb.2:
	andq	$-32, %r8
	movq	%rcx, 8(%rsi)
	movq	%r8, (%rdi)
	movq	%rdx, 16(%rdi)
	movq	$0, 8(%rdi)
	popq	%rbp
	retq
LBB6_4:
	movq	%rdx, %rdi
	callq	__Z10init_arenaP5ArenaS0_m.cold.1
	popq	%rbp
	retq
LBB6_3:
	callq	__Z10init_arenaP5ArenaS0_m.cold.2
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z16read_entire_fileP5ArenaPKc ## -- Begin function _Z16read_entire_fileP5ArenaPKc
	.p2align	4, 0x90
__Z16read_entire_fileP5ArenaPKc:        ## @_Z16read_entire_fileP5ArenaPKc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rsi, %rbx
	movq	%rdi, %r14
	leaq	L_.str.5(%rip), %rsi
	movq	%rbx, %rdi
	callq	_fopen
	testq	%rax, %rax
	je	LBB7_1
## %bb.2:
	movq	%rax, %r12
	movq	%rax, %rdi
	xorl	%esi, %esi
	movl	$2, %edx
	callq	_fseek
	movq	%r12, %rdi
	callq	_ftell
	movq	%rax, %r15
	movq	%r12, %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	_fseek
	movb	$1, %al
	testb	%al, %al
	je	LBB7_3
## %bb.6:
	leaq	1(%r15), %rdi
	movq	(%r14), %rax
	movq	8(%r14), %rcx
	leaq	(%rax,%rcx), %rbx
	addq	$31, %rbx
	movl	%ebx, %edx
	andl	$31, %edx
	addq	%rax, %rdx
	movq	%rbx, %rcx
	subq	%rdx, %rcx
	addq	%rdi, %rcx
	cmpq	16(%r14), %rcx
	ja	LBB7_7
## %bb.8:
	movq	%rcx, 8(%r14)
	testq	%rax, %rax
	je	LBB7_9
## %bb.10:
	andq	$-32, %rbx
	movl	$1, %esi
	movq	%rbx, %rdi
	movq	%r15, %rdx
	movq	%r12, %rcx
	callq	_fread
	movb	$0, (%rbx,%r15)
	movq	%r12, %rdi
	callq	_fclose
	movq	%rbx, %rax
LBB7_5:
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB7_1:
	movq	%rbx, %rdi
	callq	__Z16read_entire_fileP5ArenaPKc.cold.1
	jmp	LBB7_4
LBB7_7:
	callq	__Z16read_entire_fileP5ArenaPKc.cold.2
LBB7_4:
	xorl	%eax, %eax
	jmp	LBB7_5
LBB7_3:
	callq	__Z16read_entire_fileP5ArenaPKc.cold.4
	jmp	LBB7_4
LBB7_9:
	callq	__Z16read_entire_fileP5ArenaPKc.cold.3
	jmp	LBB7_4
	.cfi_endproc
                                        ## -- End function
	.globl	__Z7cstringPKc                  ## -- Begin function _Z7cstringPKc
	.p2align	4, 0x90
__Z7cstringPKc:                         ## @_Z7cstringPKc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rax
	xorl	%edx, %edx
	.p2align	4, 0x90
LBB8_1:                                 ## =>This Inner Loop Header: Depth=1
	cmpb	$0, (%rax,%rdx)
	leaq	1(%rdx), %rdx
	jne	LBB8_1
## %bb.2:
	decl	%edx
                                        ## kill: def $edx killed $edx killed $rdx
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z10string_dupP5Arena6String   ## -- Begin function _Z10string_dupP5Arena6String
	.p2align	4, 0x90
__Z10string_dupP5Arena6String:          ## @_Z10string_dupP5Arena6String
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movb	$1, %al
	testb	%al, %al
	je	LBB9_1
## %bb.4:
	movslq	%edx, %r14
	leaq	1(%r14), %rax
	movq	(%rdi), %rcx
	movq	8(%rdi), %rdx
	leaq	(%rcx,%rdx), %rbx
	addq	$31, %rbx
	movl	%ebx, %edx
	andl	$31, %edx
	addq	%rcx, %rdx
	movq	%rbx, %rcx
	subq	%rdx, %rcx
	addq	%rax, %rcx
	cmpq	16(%rdi), %rcx
	ja	LBB9_5
## %bb.6:
	andq	$-32, %rbx
	movq	%rcx, 8(%rdi)
	movb	$0, (%rbx,%r14)
	movq	%rbx, %rdi
	movq	%r14, %rdx
	callq	_memcpy
	movq	%rbx, %rax
	movl	%r14d, %edx
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
LBB9_5:
	movq	%rax, %rdi
	callq	__Z10string_dupP5Arena6String.cold.1
LBB9_2:
	xorl	%eax, %eax
	xorl	%edx, %edx
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
LBB9_1:
	callq	__Z10string_dupP5Arena6String.cold.2
	jmp	LBB9_2
	.cfi_endproc
                                        ## -- End function
	.globl	__Z8rand_pcgPj                  ## -- Begin function _Z8rand_pcgPj
	.p2align	4, 0x90
__Z8rand_pcgPj:                         ## @_Z8rand_pcgPj
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	(%rdi), %eax
	imull	$747796405, %eax, %ecx          ## imm = 0x2C9277B5
	addl	$-1403630843, %ecx              ## imm = 0xAC564B05
	movl	%ecx, (%rdi)
	movl	%eax, %ecx
	shrl	$28, %ecx
	addb	$4, %cl
	movl	%eax, %edx
                                        ## kill: def $cl killed $cl killed $ecx
	shrl	%cl, %edx
	xorl	%eax, %edx
	imull	$277803737, %edx, %ecx          ## imm = 0x108EF2D9
	movl	%ecx, %eax
	shrl	$22, %eax
	xorl	%ecx, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3                               ## -- Begin function _Z12random_floatff
LCPI11_0:
	.quad	0x3df0000000100000              ## double 2.3283064370807974E-10
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z12random_floatff
	.p2align	4, 0x90
__Z12random_floatff:                    ## @_Z12random_floatff
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	__ZZ12random_floatffE9rng_state(%rip), %eax
	imull	$747796405, %eax, %edx          ## imm = 0x2C9277B5
	addl	$-1403630843, %edx              ## imm = 0xAC564B05
	movl	%eax, %ecx
	shrl	$28, %ecx
	addb	$4, %cl
	movl	%eax, %esi
                                        ## kill: def $cl killed $cl killed $ecx
	shrl	%cl, %esi
	movl	%edx, __ZZ12random_floatffE9rng_state(%rip)
	vcvtss2sd	%xmm0, %xmm0, %xmm2
	xorl	%eax, %esi
	imull	$277803737, %esi, %eax          ## imm = 0x108EF2D9
	movl	%eax, %ecx
	shrl	$22, %ecx
	xorl	%eax, %ecx
	vcvtsi2sd	%rcx, %xmm3, %xmm3
	vmulsd	LCPI11_0(%rip), %xmm3, %xmm3
	vsubss	%xmm0, %xmm1, %xmm0
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	vmulsd	%xmm0, %xmm3, %xmm0
	vaddsd	%xmm2, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z18new_render_contextP5ArenaP4Game7Texturefffi
LCPI12_0:
	.long	0x3f000000                      ## float 0.5
LCPI12_2:
	.long	0x80000000                      ## float -0
LCPI12_3:
	.long	0x3f800000                      ## float 1
LCPI12_4:
	.long	0x3727c5ac                      ## float 9.99999974E-6
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3
LCPI12_1:
	.quad	0x3f91df46a2529d39              ## double 0.017453292519943295
LCPI12_5:
	.quad	4557642823947517952             ## 0x3f4000003e800000
LCPI12_7:
	.quad	4503599628431654912             ## 0x3e8000003f400000
	.section	__TEXT,__const
	.p2align	5
LCPI12_6:
	.long	0x3e800000                      ## float 0.25
	.long	0x3e800000                      ## float 0.25
	.long	0x3f400000                      ## float 0.75
	.long	0x3f400000                      ## float 0.75
	.long	0x3e800000                      ## float 0.25
	.long	0x3e800000                      ## float 0.25
	.long	0x3f400000                      ## float 0.75
	.long	0x3f400000                      ## float 0.75
LCPI12_8:
	.long	0x3e800000                      ## float 0.25
	.long	0x3f400000                      ## float 0.75
	.long	0x3f400000                      ## float 0.75
	.long	0x3e800000                      ## float 0.25
	.long	0x3e800000                      ## float 0.25
	.long	0x3f400000                      ## float 0.75
	.long	0x3f400000                      ## float 0.75
	.long	0x3e800000                      ## float 0.25
LCPI12_9:
	.long	0x3f400000                      ## float 0.75
	.long	0x3f400000                      ## float 0.75
	.long	0x3e800000                      ## float 0.25
	.long	0x3e800000                      ## float 0.25
	.long	0x3f400000                      ## float 0.75
	.long	0x3f400000                      ## float 0.75
	.long	0x3e800000                      ## float 0.25
	.long	0x3e800000                      ## float 0.25
LCPI12_10:
	.long	0x3f400000                      ## float 0.75
	.long	0x3e800000                      ## float 0.25
	.long	0x3e800000                      ## float 0.25
	.long	0x3f400000                      ## float 0.75
	.long	0x3f400000                      ## float 0.75
	.long	0x3e800000                      ## float 0.25
	.long	0x3e800000                      ## float 0.25
	.long	0x3f400000                      ## float 0.75
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z18new_render_contextP5ArenaP4Game7Texturefffi
	.p2align	4, 0x90
__Z18new_render_contextP5ArenaP4Game7Texturefffi: ## @_Z18new_render_contextP5ArenaP4Game7Texturefffi
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	vmovss	%xmm2, -48(%rbp)                ## 4-byte Spill
	vmovss	%xmm1, -44(%rbp)                ## 4-byte Spill
	vmovaps	%xmm0, -64(%rbp)                ## 16-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	%rdi, %r13
	movl	$395104, %esi                   ## imm = 0x60760
	callq	___bzero
	movq	%r15, 395056(%r13)
	movq	%r12, 1760(%r13)
	vmovaps	16(%rbp), %xmm0
	vmovups	%xmm0, (%r13)
	movq	32(%rbp), %rax
	movq	%rax, 16(%r13)
	movslq	(%r13), %rsi
	shlq	$2, %rsi
	movl	%esi, 24(%r13)
	movl	%esi, 32(%r13)
	movslq	4(%r13), %rax
	movl	%eax, 28(%r13)
	movb	$1, %cl
	testb	%cl, %cl
	je	LBB12_1
## %bb.3:
	imulq	%rax, %rsi
	shlq	$2, %rsi
	movq	(%r15), %rax
	movq	8(%r15), %rcx
	leaq	(%rax,%rcx), %r12
	addq	$63, %r12
	movl	%r12d, %ecx
	andl	$63, %ecx
	addq	%rax, %rcx
	movq	%r12, %rax
	subq	%rcx, %rax
	addq	%rsi, %rax
	cmpq	16(%r15), %rax
	ja	LBB12_4
## %bb.5:
	andq	$-64, %r12
	movq	%rax, 8(%r15)
	movq	%r12, %rdi
	callq	___bzero
	movq	%r12, 40(%r13)
	movb	$1, %al
	testb	%al, %al
	je	LBB12_6
## %bb.7:
	movq	395056(%r13), %rax
	movslq	24(%r13), %rcx
	movslq	28(%r13), %rsi
	imulq	%rcx, %rsi
	shlq	$2, %rsi
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	leaq	(%rcx,%rdx), %r15
	addq	$63, %r15
	movl	%r15d, %edx
	andl	$63, %edx
	addq	%rcx, %rdx
	movq	%r15, %rcx
	subq	%rdx, %rcx
	addq	%rsi, %rcx
	cmpq	16(%rax), %rcx
	ja	LBB12_8
## %bb.9:
	andq	$-64, %r15
	movq	%rcx, 8(%rax)
	movq	%r15, %rdi
	callq	___bzero
	movq	%r15, 48(%r13)
	vmovss	-48(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, 148(%r13)
	vmovaps	-64(%rbp), %xmm0                ## 16-byte Reload
	vmovss	%xmm0, 56(%r13)
	vmovss	-44(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	%xmm0, 60(%r13)
	movb	$1, %al
	testb	%al, %al
	je	LBB12_10
## %bb.11:
	movq	395056(%r13), %rbx
	movslq	%r14d, %r15
	movq	%r15, %rdi
	shlq	$7, %rdi
	movq	(%rbx), %r12
	movq	8(%rbx), %rax
	leaq	(%r12,%rax), %rcx
	addq	$31, %rcx
	movl	%ecx, %eax
	andl	$31, %eax
	addq	%r12, %rax
	movq	%rcx, %rdx
	subq	%rax, %rdx
	addq	%rdi, %rdx
	movq	16(%rbx), %rax
	cmpq	%rax, %rdx
	ja	LBB12_12
## %bb.13:
	andq	$-32, %rcx
	movq	%rdx, 8(%rbx)
	movq	%rcx, 184(%r13)
	movb	$1, %cl
	testb	%cl, %cl
	je	LBB12_14
## %bb.15:
	movl	%r14d, -44(%rbp)                ## 4-byte Spill
	leaq	(%r12,%rdx), %rcx
	addq	$31, %rcx
	movl	%ecx, %edx
	andl	$31, %edx
	addq	%r12, %rdx
	movq	%rcx, %r14
	subq	%rdx, %r14
	addq	$12800000, %r14                 ## imm = 0xC35000
	cmpq	%rax, %r14
	ja	LBB12_16
## %bb.17:
	andq	$-32, %rcx
	movq	%r14, 8(%rbx)
	movq	%rcx, 192(%r13)
	cmpq	$0, 40(%r13)
	je	LBB12_19
## %bb.18:
	cmpq	$0, 184(%r13)
	je	LBB12_19
## %bb.20:
	vmulss	LCPI12_0(%rip), %xmm1, %xmm0
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	vmulsd	LCPI12_1(%rip), %xmm0, %xmm0
	callq	_tan
	vaddsd	%xmm0, %xmm0, %xmm0
	vmovaps	-64(%rbp), %xmm1                ## 16-byte Reload
	vcvtss2sd	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm1
	vmovss	%xmm1, 152(%r13)
	vcvtsi2ssl	4(%r13), %xmm2, %xmm0
	vcvtsi2ssl	(%r13), %xmm2, %xmm2
	vdivss	%xmm2, %xmm0, %xmm0
	vmulss	%xmm1, %xmm0, %xmm0
	vmovss	%xmm0, 156(%r13)
	vmovss	LCPI12_0(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vmulss	%xmm2, %xmm0, %xmm0
	vmovss	%xmm0, 168(%r13)
	vmulss	%xmm2, %xmm1, %xmm2
	vmovss	%xmm2, 164(%r13)
	vbroadcastss	LCPI12_2(%rip), %xmm3   ## xmm3 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vxorps	%xmm3, %xmm0, %xmm1
	vmovss	%xmm1, 172(%r13)
	vxorps	%xmm3, %xmm2, %xmm5
	vmovss	%xmm5, 160(%r13)
	xorl	%eax, %eax
	testb	%al, %al
	jne	LBB12_26
## %bb.21:
	shlq	$2, %r15
	leaq	(%r12,%r14), %rax
	addq	$31, %rax
	movl	%eax, %ecx
	andl	$31, %ecx
	addq	%r12, %rcx
	movq	%rax, %rsi
	subq	%rcx, %rsi
	andq	$-32, %rax
	movl	$26, %ecx
	movb	$1, %dl
	.p2align	4, 0x90
LBB12_22:                               ## =>This Inner Loop Header: Depth=1
	addq	%r15, %rsi
	cmpq	16(%rbx), %rsi
	ja	LBB12_23
## %bb.24:                              ##   in Loop: Header=BB12_22 Depth=1
	movq	%rsi, 8(%rbx)
	movq	%rax, (%r13,%rcx,8)
	cmpq	$125, %rcx
	je	LBB12_27
## %bb.25:                              ##   in Loop: Header=BB12_22 Depth=1
	movq	395056(%r13), %rbx
	movq	(%rbx), %rsi
	movq	8(%rbx), %rax
	addq	%rsi, %rax
	addq	$31, %rax
	movl	%eax, %edi
	andl	$31, %edi
	addq	%rsi, %rdi
	movq	%rax, %rsi
	subq	%rdi, %rsi
	andq	$-32, %rax
	incq	%rcx
	testb	%dl, %dl
	jne	LBB12_22
LBB12_26:
	callq	__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.7
	jmp	LBB12_2
LBB12_27:
	vbroadcastss	LCPI12_2(%rip), %xmm4   ## xmm4 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	-64(%rbp), %xmm6                ## 16-byte Reload
	vxorps	%xmm4, %xmm6, %xmm3
	movq	$0, 1676(%r13)
	vmovss	%xmm3, 1688(%r13)
	vmulss	%xmm6, %xmm0, %xmm14
	vaddss	%xmm14, %xmm14, %xmm10
	vmulss	%xmm3, %xmm2, %xmm13
	vmulss	%xmm2, %xmm6, %xmm6
	vmovss	%xmm6, -64(%rbp)                ## 4-byte Spill
	vaddss	%xmm6, %xmm13, %xmm11
	vmulss	%xmm5, %xmm0, %xmm15
	vaddss	%xmm15, %xmm15, %xmm12
	movl	$0, 1704(%r13)
	vmulss	%xmm3, %xmm0, %xmm0
	vmulss	%xmm1, %xmm2, %xmm2
	movl	$0, 1720(%r13)
	movl	$0, 1736(%r13)
	movl	$0, 1752(%r13)
	vmovsd	1676(%r13), %xmm1               ## xmm1 = mem[0],zero
	vmulps	%xmm1, %xmm1, %xmm3
	vmovshdup	%xmm3, %xmm3            ## xmm3 = xmm3[1,1,3,3]
	vmulss	%xmm1, %xmm1, %xmm5
	vaddss	%xmm3, %xmm5, %xmm3
	vaddss	LCPI12_3(%rip), %xmm3, %xmm3
	vsqrtss	%xmm3, %xmm3, %xmm8
	vxorps	%xmm6, %xmm6, %xmm6
	vxorps	%xmm7, %xmm7, %xmm7
	vmovss	LCPI12_4(%rip), %xmm3           ## xmm3 = mem[0],zero,zero,zero
	vucomiss	%xmm8, %xmm3
	vxorps	%xmm3, %xmm3, %xmm3
	vxorps	%xmm5, %xmm5, %xmm5
	jae	LBB12_29
## %bb.28:
	vmovss	LCPI12_3(%rip), %xmm3           ## xmm3 = mem[0],zero,zero,zero
	vdivss	%xmm8, %xmm3, %xmm3
	vbroadcastss	%xmm3, %xmm5
	vmulps	%xmm5, %xmm1, %xmm3
	vxorps	%xmm4, %xmm5, %xmm5
LBB12_29:
	vaddss	%xmm0, %xmm0, %xmm4
	vaddss	%xmm2, %xmm2, %xmm9
	vmovlps	%xmm3, 1676(%r13)
	vmovss	%xmm5, 1684(%r13)
	vmulss	%xmm11, %xmm11, %xmm3
	vmulss	%xmm10, %xmm10, %xmm5
	vaddss	%xmm3, %xmm5, %xmm5
	vmulss	%xmm12, %xmm12, %xmm1
	vaddss	%xmm5, %xmm1, %xmm1
	vsqrtss	%xmm1, %xmm1, %xmm5
	vmovss	LCPI12_4(%rip), %xmm1           ## xmm1 = mem[0],zero,zero,zero
	vucomiss	%xmm5, %xmm1
	movl	-44(%rbp), %eax                 ## 4-byte Reload
	jae	LBB12_31
## %bb.30:
	vmovss	LCPI12_3(%rip), %xmm1           ## xmm1 = mem[0],zero,zero,zero
	vdivss	%xmm5, %xmm1, %xmm1
	vmulss	%xmm1, %xmm10, %xmm5
	vmulss	%xmm1, %xmm11, %xmm6
	vinsertps	$16, %xmm6, %xmm5, %xmm7 ## xmm7 = xmm5[0],xmm6[0],xmm5[2,3]
	vmulss	%xmm1, %xmm12, %xmm6
LBB12_31:
	vmovaps	%xmm11, %xmm12
	vaddss	%xmm0, %xmm14, %xmm11
	vaddss	%xmm13, %xmm13, %xmm0
	vaddss	%xmm2, %xmm15, %xmm8
	vmovlps	%xmm7, 1692(%r13)
	vmovss	%xmm6, 1700(%r13)
	vmulss	%xmm4, %xmm4, %xmm1
	vaddss	%xmm3, %xmm1, %xmm1
	vmulss	%xmm9, %xmm9, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vsqrtss	%xmm1, %xmm1, %xmm2
	vxorps	%xmm5, %xmm5, %xmm5
	vxorps	%xmm6, %xmm6, %xmm6
	vmovss	LCPI12_4(%rip), %xmm10          ## xmm10 = mem[0],zero,zero,zero
	vucomiss	%xmm2, %xmm10
	vxorps	%xmm3, %xmm3, %xmm3
	vxorps	%xmm7, %xmm7, %xmm7
	jae	LBB12_33
## %bb.32:
	vmovss	LCPI12_3(%rip), %xmm1           ## xmm1 = mem[0],zero,zero,zero
	vdivss	%xmm2, %xmm1, %xmm1
	vmulss	%xmm1, %xmm4, %xmm2
	vmulss	%xmm1, %xmm12, %xmm3
	vinsertps	$16, %xmm3, %xmm2, %xmm3 ## xmm3 = xmm2[0],xmm3[0],xmm2[2,3]
	vmulss	%xmm1, %xmm9, %xmm7
LBB12_33:
	vmovss	-64(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vaddss	%xmm1, %xmm1, %xmm1
	vmovlps	%xmm3, 1708(%r13)
	vmovss	%xmm7, 1716(%r13)
	vmulss	%xmm0, %xmm0, %xmm2
	vmulss	%xmm11, %xmm11, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vmulss	%xmm8, %xmm8, %xmm4
	vaddss	%xmm2, %xmm4, %xmm2
	vsqrtss	%xmm2, %xmm2, %xmm2
	vucomiss	%xmm2, %xmm10
	jae	LBB12_35
## %bb.34:
	vmovss	LCPI12_3(%rip), %xmm5           ## xmm5 = mem[0],zero,zero,zero
	vdivss	%xmm2, %xmm5, %xmm2
	vmulss	%xmm2, %xmm11, %xmm5
	vmulss	%xmm2, %xmm0, %xmm0
	vinsertps	$16, %xmm0, %xmm5, %xmm6 ## xmm6 = xmm5[0],xmm0[0],xmm5[2,3]
	vmulss	%xmm2, %xmm8, %xmm5
LBB12_35:
	vmovlps	%xmm6, 1724(%r13)
	vmovss	%xmm5, 1732(%r13)
	vmulss	%xmm1, %xmm1, %xmm0
	vaddss	%xmm0, %xmm3, %xmm0
	vaddss	%xmm0, %xmm4, %xmm0
	vsqrtss	%xmm0, %xmm0, %xmm0
	vucomiss	%xmm0, %xmm10
	jae	LBB12_36
## %bb.37:
	vmovss	LCPI12_3(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vdivss	%xmm0, %xmm2, %xmm0
	vmulss	%xmm0, %xmm11, %xmm2
	vmulss	%xmm0, %xmm1, %xmm1
	vinsertps	$16, %xmm1, %xmm2, %xmm1 ## xmm1 = xmm2[0],xmm1[0],xmm2[2,3]
	vmulss	%xmm0, %xmm8, %xmm0
	jmp	LBB12_38
LBB12_36:
	vxorps	%xmm0, %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
LBB12_38:
	vmovlps	%xmm1, 1740(%r13)
	vmovss	%xmm0, 1748(%r13)
	movl	%eax, 176(%r13)
	vbroadcastsd	LCPI12_5(%rip), %ymm0   ## ymm0 = [4557642823947517952,4557642823947517952,4557642823947517952,4557642823947517952]
	vmovaps	%ymm0, 1408(%r13)
	vmovaps	LCPI12_6(%rip), %ymm1           ## ymm1 = [2.5E-1,2.5E-1,7.5E-1,7.5E-1,2.5E-1,2.5E-1,7.5E-1,7.5E-1]
	vmovaps	%ymm1, 1440(%r13)
	vbroadcastsd	LCPI12_7(%rip), %ymm1   ## ymm1 = [4503599628431654912,4503599628431654912,4503599628431654912,4503599628431654912]
	vmovaps	%ymm1, 1472(%r13)
	vmovaps	LCPI12_8(%rip), %ymm2           ## ymm2 = [2.5E-1,7.5E-1,7.5E-1,2.5E-1,2.5E-1,7.5E-1,7.5E-1,2.5E-1]
	vmovaps	%ymm2, 1504(%r13)
	vmovaps	%ymm0, 1536(%r13)
	vmovaps	LCPI12_9(%rip), %ymm0           ## ymm0 = [7.5E-1,7.5E-1,2.5E-1,2.5E-1,7.5E-1,7.5E-1,2.5E-1,2.5E-1]
	vmovaps	%ymm0, 1568(%r13)
	vmovaps	%ymm1, 1600(%r13)
	vmovaps	LCPI12_10(%rip), %ymm0          ## ymm0 = [7.5E-1,2.5E-1,2.5E-1,7.5E-1,7.5E-1,2.5E-1,2.5E-1,7.5E-1]
	vmovaps	%ymm0, 1632(%r13)
LBB12_2:
	movq	%r13, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
LBB12_4:
	movq	%rsi, %rdi
	callq	__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.1
	jmp	LBB12_2
LBB12_8:
	movq	%rsi, %rdi
	callq	__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.2
	jmp	LBB12_2
LBB12_12:
	callq	__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.3
	jmp	LBB12_2
LBB12_16:
	callq	__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.4
	jmp	LBB12_2
LBB12_23:
	movq	%r15, %rdi
	callq	__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.6
	jmp	LBB12_2
LBB12_1:
	callq	__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.11
	jmp	LBB12_2
LBB12_6:
	callq	__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.10
	jmp	LBB12_2
LBB12_10:
	callq	__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.9
	jmp	LBB12_2
LBB12_14:
	callq	__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.8
	jmp	LBB12_2
LBB12_19:
	callq	__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.5
	jmp	LBB12_2
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z15color_v3_to_u322v3
LCPI13_0:
	.long	0x437f0000                      ## float 255
LCPI13_1:
	.long	0x3f000000                      ## float 0.5
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z15color_v3_to_u322v3
	.p2align	4, 0x90
__Z15color_v3_to_u322v3:                ## @_Z15color_v3_to_u322v3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vmovss	LCPI13_0(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vmulss	%xmm2, %xmm0, %xmm3
	vmovss	LCPI13_1(%rip), %xmm4           ## xmm4 = mem[0],zero,zero,zero
	vaddss	%xmm4, %xmm3, %xmm3
	vcvttss2si	%xmm3, %rax
	shll	$24, %eax
	vmovshdup	%xmm0, %xmm0            ## xmm0 = xmm0[1,1,3,3]
	vmulss	%xmm2, %xmm0, %xmm0
	vaddss	%xmm4, %xmm0, %xmm0
	vcvttss2si	%xmm0, %rcx
	shll	$16, %ecx
	orl	%eax, %ecx
	vmulss	%xmm2, %xmm1, %xmm0
	vaddss	%xmm4, %xmm0, %xmm0
	vcvttss2si	%xmm0, %rax
	shll	$8, %eax
	orl	%ecx, %eax
                                        ## kill: def $eax killed $eax killed $rax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z15color_v4_to_u322v4
LCPI14_0:
	.long	0x437f0000                      ## float 255
LCPI14_1:
	.long	0x3f000000                      ## float 0.5
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z15color_v4_to_u322v4
	.p2align	4, 0x90
__Z15color_v4_to_u322v4:                ## @_Z15color_v4_to_u322v4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vmovss	LCPI14_0(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vmulss	%xmm2, %xmm0, %xmm3
	vmovss	LCPI14_1(%rip), %xmm4           ## xmm4 = mem[0],zero,zero,zero
	vaddss	%xmm4, %xmm3, %xmm3
	vcvttss2si	%xmm3, %rax
	shll	$24, %eax
	vmovshdup	%xmm0, %xmm0            ## xmm0 = xmm0[1,1,3,3]
	vmulss	%xmm2, %xmm0, %xmm0
	vaddss	%xmm4, %xmm0, %xmm0
	vcvttss2si	%xmm0, %rcx
	shll	$16, %ecx
	orl	%eax, %ecx
	vmulss	%xmm2, %xmm1, %xmm0
	vaddss	%xmm4, %xmm0, %xmm0
	vcvttss2si	%xmm0, %rdx
	shll	$8, %edx
	vmovshdup	%xmm1, %xmm0            ## xmm0 = xmm1[1,1,3,3]
	vmulss	%xmm2, %xmm0, %xmm0
	vaddss	%xmm4, %xmm0, %xmm0
	vcvttss2si	%xmm0, %rax
	orl	%edx, %eax
	orl	%ecx, %eax
                                        ## kill: def $eax killed $eax killed $rax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z15color_u32_to_v3j
LCPI15_0:
	.long	0x3b808081                      ## float 0.00392156886
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z15color_u32_to_v3j
	.p2align	4, 0x90
__Z15color_u32_to_v3j:                  ## @_Z15color_u32_to_v3j
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, %eax
	movl	%edi, %ecx
	movzbl	%ah, %edx
	shrl	$24, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	shrl	$16, %ecx
	movzbl	%cl, %eax
	vcvtsi2ss	%eax, %xmm1, %xmm1
	vcvtsi2ss	%edx, %xmm2, %xmm2
	vmovss	LCPI15_0(%rip), %xmm3           ## xmm3 = mem[0],zero,zero,zero
	vmulss	%xmm3, %xmm0, %xmm0
	vmulss	%xmm3, %xmm1, %xmm1
	vinsertps	$16, %xmm1, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm1[0],xmm0[2,3]
	vmulss	%xmm3, %xmm2, %xmm1
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z12begin_renderP14Render_Context2v34m3x3S1_S1_
LCPI16_0:
	.long	0x437f0000                      ## float 255
LCPI16_1:
	.long	0x3f000000                      ## float 0.5
	.section	__TEXT,__const
	.p2align	5
LCPI16_2:
	.long	0                               ## 0x0
	.long	3                               ## 0x3
	.long	6                               ## 0x6
	.long	1                               ## 0x1
	.long	4                               ## 0x4
	.long	7                               ## 0x7
	.long	2                               ## 0x2
	.long	5                               ## 0x5
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z12begin_renderP14Render_Context2v34m3x3S1_S1_
	.p2align	4, 0x90
__Z12begin_renderP14Render_Context2v34m3x3S1_S1_: ## @_Z12begin_renderP14Render_Context2v34m3x3S1_S1_
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	16(%rbp), %rax
	movl	28(%rdi), %ecx
	imull	24(%rdi), %ecx
	testl	%ecx, %ecx
	jle	LBB16_3
## %bb.1:
	vmovss	LCPI16_0(%rip), %xmm8           ## xmm8 = mem[0],zero,zero,zero
	vmulss	%xmm2, %xmm8, %xmm7
	vmovss	LCPI16_1(%rip), %xmm6           ## xmm6 = mem[0],zero,zero,zero
	vaddss	%xmm6, %xmm7, %xmm7
	vcvttss2si	%xmm7, %rcx
	shll	$24, %ecx
	vmovshdup	%xmm2, %xmm2            ## xmm2 = xmm2[1,1,3,3]
	vmulss	%xmm2, %xmm8, %xmm2
	vaddss	%xmm6, %xmm2, %xmm2
	vcvttss2si	%xmm2, %rdx
	shll	$16, %edx
	orl	%ecx, %edx
	vmulss	%xmm3, %xmm8, %xmm2
	vaddss	%xmm6, %xmm2, %xmm2
	vcvttss2si	%xmm2, %rcx
	shll	$8, %ecx
	orl	%edx, %ecx
	vmovd	%ecx, %xmm2
	vpbroadcastd	%xmm2, %ymm2
	vbroadcastss	60(%rdi), %ymm3
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB16_2:                                ## =>This Inner Loop Header: Depth=1
	movq	48(%rdi), %rdx
	vmovaps	%ymm3, (%rdx,%rcx,4)
	movq	40(%rdi), %rdx
	vmovdqa	%ymm2, (%rdx,%rcx,4)
	addq	$8, %rcx
	movslq	24(%rdi), %rdx
	movslq	28(%rdi), %rsi
	imulq	%rdx, %rsi
	cmpq	%rsi, %rcx
	jl	LBB16_2
LBB16_3:
	movq	$0, 200(%rdi)
	vpxor	%xmm2, %xmm2, %xmm2
	vmovdqu	%ymm2, 1008(%rdi)
	vmovdqu	%ymm2, 1040(%rdi)
	vmovdqu	%ymm2, 1072(%rdi)
	vmovdqu	%ymm2, 1104(%rdi)
	vmovdqu	%ymm2, 1136(%rdi)
	vmovdqu	%ymm2, 1168(%rdi)
	vmovdqu	%ymm2, 1200(%rdi)
	vmovdqu	%ymm2, 1232(%rdi)
	vmovdqu	%ymm2, 1264(%rdi)
	vmovdqu	%ymm2, 1296(%rdi)
	vmovdqu	%ymm2, 1328(%rdi)
	vmovdqu	%ymm2, 1360(%rdi)
	vmovdqu	%ymm2, 1376(%rdi)
	vmovlps	%xmm0, 64(%rdi)
	vmovss	%xmm1, 72(%rdi)
	vmovups	(%rax), %ymm0
	vmovups	%ymm0, 76(%rdi)
	movl	32(%rax), %eax
	movl	%eax, 108(%rdi)
	vmovaps	LCPI16_2(%rip), %ymm0           ## ymm0 = [0,3,6,1,4,7,2,5]
	vpermps	76(%rdi), %ymm0, %ymm0
	vmovss	108(%rdi), %xmm1                ## xmm1 = mem[0],zero,zero,zero
	vmovups	%ymm0, 112(%rdi)
	vmovss	%xmm1, 144(%rdi)
	vmovlps	%xmm4, 1664(%rdi)
	vmovss	%xmm5, 1672(%rdi)
	movq	$0, 1768(%rdi)
	movq	$0, 1784(%rdi)
	movl	$0, 395048(%rdi)
	popq	%rbp
	vzeroupper
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z15world_to_cameraP14Render_Context2v3 ## -- Begin function _Z15world_to_cameraP14Render_Context2v3
	.p2align	4, 0x90
__Z15world_to_cameraP14Render_Context2v3: ## @_Z15world_to_cameraP14Render_Context2v3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vmovsd	64(%rdi), %xmm2                 ## xmm2 = mem[0],zero
	vsubps	%xmm2, %xmm0, %xmm2
	vmovshdup	%xmm2, %xmm3            ## xmm3 = xmm2[1,1,3,3]
	vsubss	72(%rdi), %xmm1, %xmm1
	vmovss	112(%rdi), %xmm0                ## xmm0 = mem[0],zero,zero,zero
	vinsertps	$16, 124(%rdi), %xmm0, %xmm0 ## xmm0 = xmm0[0],mem[0],xmm0[2,3]
	vbroadcastss	%xmm2, %xmm4
	vmulps	%xmm4, %xmm0, %xmm0
	vxorps	%xmm4, %xmm4, %xmm4
	vaddps	%xmm4, %xmm0, %xmm0
	vmovss	116(%rdi), %xmm4                ## xmm4 = mem[0],zero,zero,zero
	vinsertps	$16, 128(%rdi), %xmm4, %xmm4 ## xmm4 = xmm4[0],mem[0],xmm4[2,3]
	vmulps	%xmm3, %xmm4, %xmm4
	vaddps	%xmm0, %xmm4, %xmm0
	vmovss	120(%rdi), %xmm4                ## xmm4 = mem[0],zero,zero,zero
	vinsertps	$16, 132(%rdi), %xmm4, %xmm4 ## xmm4 = xmm4[0],mem[0],xmm4[2,3]
	vbroadcastss	%xmm1, %xmm5
	vmulps	%xmm5, %xmm4, %xmm4
	vaddps	%xmm0, %xmm4, %xmm0
	vmulss	136(%rdi), %xmm2, %xmm2
	vxorps	%xmm4, %xmm4, %xmm4
	vaddss	%xmm4, %xmm2, %xmm2
	vmulss	140(%rdi), %xmm3, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vmulss	144(%rdi), %xmm1, %xmm1
	vaddss	%xmm2, %xmm1, %xmm1
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z15camera_to_worldP14Render_Context2v3 ## -- Begin function _Z15camera_to_worldP14Render_Context2v3
	.p2align	4, 0x90
__Z15camera_to_worldP14Render_Context2v3: ## @_Z15camera_to_worldP14Render_Context2v3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vmovshdup	%xmm0, %xmm2            ## xmm2 = xmm0[1,1,3,3]
	vmulss	100(%rdi), %xmm0, %xmm3
	vxorps	%xmm4, %xmm4, %xmm4
	vaddss	%xmm4, %xmm3, %xmm3
	vmulss	104(%rdi), %xmm2, %xmm4
	vmulss	108(%rdi), %xmm1, %xmm5
	vaddss	%xmm3, %xmm4, %xmm3
	vmovss	76(%rdi), %xmm4                 ## xmm4 = mem[0],zero,zero,zero
	vinsertps	$16, 88(%rdi), %xmm4, %xmm4 ## xmm4 = xmm4[0],mem[0],xmm4[2,3]
	vaddss	%xmm3, %xmm5, %xmm3
	vbroadcastss	%xmm0, %xmm0
	vmulps	%xmm0, %xmm4, %xmm0
	vxorps	%xmm4, %xmm4, %xmm4
	vaddps	%xmm4, %xmm0, %xmm0
	vmovss	80(%rdi), %xmm4                 ## xmm4 = mem[0],zero,zero,zero
	vinsertps	$16, 92(%rdi), %xmm4, %xmm4 ## xmm4 = xmm4[0],mem[0],xmm4[2,3]
	vmovsd	64(%rdi), %xmm5                 ## xmm5 = mem[0],zero
	vmulps	%xmm2, %xmm4, %xmm2
	vaddps	%xmm0, %xmm2, %xmm0
	vmovss	84(%rdi), %xmm2                 ## xmm2 = mem[0],zero,zero,zero
	vinsertps	$16, 96(%rdi), %xmm2, %xmm2 ## xmm2 = xmm2[0],mem[0],xmm2[2,3]
	vbroadcastss	%xmm1, %xmm1
	vmulps	%xmm1, %xmm2, %xmm1
	vaddps	%xmm0, %xmm1, %xmm0
	vaddps	%xmm5, %xmm0, %xmm0
	vaddss	72(%rdi), %xmm3, %xmm1
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z22prespective_projectionP14Render_Context2v3
LCPI19_0:
	.long	0x80000000                      ## float -0
LCPI19_1:
	.long	0x3f800000                      ## float 1
LCPI19_2:
	.long	0x3f000000                      ## float 0.5
LCPI19_3:
	.long	0xbf800000                      ## float -1
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z22prespective_projectionP14Render_Context2v3
	.p2align	4, 0x90
__Z22prespective_projectionP14Render_Context2v3: ## @_Z22prespective_projectionP14Render_Context2v3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vmovss	56(%rdi), %xmm2                 ## xmm2 = mem[0],zero,zero,zero
	vbroadcastss	LCPI19_0(%rip), %xmm3   ## xmm3 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vxorps	%xmm3, %xmm2, %xmm2
	vbroadcastss	%xmm2, %xmm2
	vmulps	%xmm0, %xmm2, %xmm0
	vbroadcastss	%xmm1, %xmm2
	vdivps	%xmm2, %xmm0, %xmm0
	vaddps	%xmm0, %xmm0, %xmm0
	vmovsd	152(%rdi), %xmm2                ## xmm2 = mem[0],zero
	vdivps	%xmm2, %xmm0, %xmm0
	vmovss	LCPI19_1(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vaddps	%xmm2, %xmm0, %xmm2
	vbroadcastss	LCPI19_1(%rip), %xmm3   ## xmm3 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vsubps	%xmm0, %xmm3, %xmm0
	vblendps	$2, %xmm0, %xmm2, %xmm0         ## xmm0 = xmm2[0],xmm0[1],xmm2[2,3]
	vbroadcastss	LCPI19_2(%rip), %xmm2   ## xmm2 = [5.0E-1,5.0E-1,5.0E-1,5.0E-1]
	vmulps	%xmm2, %xmm0, %xmm0
	vmovsd	(%rdi), %xmm2                   ## xmm2 = mem[0],zero
	vcvtdq2ps	%xmm2, %xmm2
	vmulps	%xmm2, %xmm0, %xmm0
	vmovss	LCPI19_3(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vdivss	%xmm1, %xmm2, %xmm1
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z20get_tile_clip_boundsP14Render_ContextiR2v2S2_ ## -- Begin function _Z20get_tile_clip_boundsP14Render_ContextiR2v2S2_
	.p2align	4, 0x90
__Z20get_tile_clip_boundsP14Render_ContextiR2v2S2_: ## @_Z20get_tile_clip_boundsP14Render_ContextiR2v2S2_
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movslq	(%rdi), %rax
	imulq	$1717986919, %rax, %r10         ## imm = 0x66666667
	movq	%r10, %r8
	shrq	$63, %r8
	sarq	$34, %r10
	addl	%r8d, %r10d
	movslq	%esi, %r8
	imulq	$1717986919, %r8, %rsi          ## imm = 0x66666667
	movq	%rsi, %r9
	shrq	$63, %r9
	sarq	$34, %rsi
	addl	%r9d, %esi
	leal	(%rsi,%rsi), %eax
	leal	(%rax,%rax,4), %eax
	subl	%eax, %r8d
	imull	%r10d, %r8d
	movslq	4(%rdi), %rax
	imulq	$1717986919, %rax, %rax         ## imm = 0x66666667
	movq	%rax, %rdi
	shrq	$63, %rdi
	sarq	$34, %rax
	addl	%edi, %eax
	vcvtsi2ss	%r8d, %xmm0, %xmm0
	imull	%eax, %esi
	vcvtsi2ss	%esi, %xmm1, %xmm1
	addl	%r8d, %r10d
	vcvtsi2ss	%r10d, %xmm2, %xmm2
	addl	%esi, %eax
	vcvtsi2ss	%eax, %xmm3, %xmm3
	vinsertps	$16, %xmm1, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm1[0],xmm0[2,3]
	vmovlps	%xmm0, (%rdx)
	vinsertps	$16, %xmm3, %xmm2, %xmm0 ## xmm0 = xmm2[0],xmm3[0],xmm2[2,3]
	vmovlps	%xmm0, (%rcx)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z13push_triangleP14Render_ContextP8Triangle
LCPI21_0:
	.long	0x80000000                      ## float -0
LCPI21_1:
	.long	0x3f800000                      ## float 1
LCPI21_2:
	.long	0x3727c5ac                      ## float 9.99999974E-6
LCPI21_3:
	.long	0x3f000000                      ## float 0.5
LCPI21_4:
	.long	0x00000000                      ## float 0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z13push_triangleP14Render_ContextP8Triangle
	.p2align	4, 0x90
__Z13push_triangleP14Render_ContextP8Triangle: ## @_Z13push_triangleP14Render_ContextP8Triangle
Lfunc_begin0:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception0
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	$8728, %eax                     ## imm = 0x2218
	callq	____chkstk_darwin
	subq	%rax, %rsp
	popq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdi, %r14
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -8528(%rbp)
	movq	_g_thread_info@TLVP(%rip), %rdi
	vzeroupper
	callq	*(%rdi)
	movq	%rax, %rcx
	movslq	(%rax), %rax
	movl	%eax, -8524(%rbp)
	movq	_timed_blocks(%rip), %rbx
	imulq	$7168, %rax, %rdi               ## imm = 0x1C00
	movq	$181, 24(%rbx,%rdi)
	leaq	L___FUNCTION__._Z13push_triangleP14Render_ContextP8Triangle(%rip), %rax
	movq	%rax, 8(%rbx,%rdi)
	leaq	L_.str.11(%rip), %rdx
	movq	%rdx, 16(%rbx,%rdi)
	movq	%rax, (%rbx,%rdi)
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	movq	%rdx, -8520(%rbp)
	incl	32(%rbx,%rdi)
	movslq	516(%rcx), %rax
	leal	1(%rax), %edx
	movl	%edx, 516(%rcx)
	movl	$0, 4(%rcx,%rax,4)
	vmovups	(%rsi), %ymm0
	vmovups	32(%rsi), %ymm1
	vmovups	64(%rsi), %ymm2
	vmovups	96(%rsi), %ymm3
	vmovups	%ymm3, -4048(%rbp)
	vmovups	%ymm2, -4080(%rbp)
	vmovups	%ymm1, -4112(%rbp)
	vmovups	%ymm0, -4144(%rbp)
	movq	%rsi, -8504(%rbp)               ## 8-byte Spill
	movl	120(%rsi), %eax
	movl	$1, %r12d
	testb	$2, %al
	jne	LBB21_14
## %bb.1:
	movq	-8504(%rbp), %rcx               ## 8-byte Reload
	vmovsd	(%rcx), %xmm5                   ## xmm5 = mem[0],zero
	vmovss	8(%rcx), %xmm8                  ## xmm8 = mem[0],zero,zero,zero
	vmovss	112(%r14), %xmm6                ## xmm6 = mem[0],zero,zero,zero
	vmovss	%xmm6, -8256(%rbp)              ## 4-byte Spill
	vmovss	116(%r14), %xmm12               ## xmm12 = mem[0],zero,zero,zero
	vmovss	120(%r14), %xmm11               ## xmm11 = mem[0],zero,zero,zero
	vmovss	124(%r14), %xmm9                ## xmm9 = mem[0],zero,zero,zero
	vmovss	128(%r14), %xmm13               ## xmm13 = mem[0],zero,zero,zero
	vmovss	132(%r14), %xmm1                ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, -8416(%rbp)              ## 4-byte Spill
	vmovss	136(%r14), %xmm15               ## xmm15 = mem[0],zero,zero,zero
	vmovss	%xmm15, -8432(%rbp)             ## 4-byte Spill
	vmovsd	64(%r14), %xmm14                ## xmm14 = mem[0],zero
	vmovss	72(%r14), %xmm3                 ## xmm3 = mem[0],zero,zero,zero
	vmovss	%xmm3, -8496(%rbp)              ## 4-byte Spill
	vsubps	%xmm14, %xmm5, %xmm5
	vmovshdup	%xmm5, %xmm10           ## xmm10 = xmm5[1,1,3,3]
	vsubss	%xmm3, %xmm8, %xmm8
	vmulss	%xmm5, %xmm6, %xmm3
	vxorps	%xmm2, %xmm2, %xmm2
	vaddss	%xmm2, %xmm3, %xmm3
	vmulss	%xmm10, %xmm12, %xmm6
	vaddss	%xmm3, %xmm6, %xmm3
	vmulss	%xmm8, %xmm11, %xmm6
	vmovss	%xmm11, -8384(%rbp)             ## 4-byte Spill
	vaddss	%xmm3, %xmm6, %xmm0
	vmulss	%xmm5, %xmm9, %xmm3
	vmovss	%xmm9, -8464(%rbp)              ## 4-byte Spill
	vaddss	%xmm2, %xmm3, %xmm3
	vmulss	%xmm10, %xmm13, %xmm6
	vmovss	%xmm13, -8480(%rbp)             ## 4-byte Spill
	vaddss	%xmm3, %xmm6, %xmm3
	vmulss	%xmm1, %xmm8, %xmm6
	vaddss	%xmm3, %xmm6, %xmm1
	vmovss	140(%r14), %xmm3                ## xmm3 = mem[0],zero,zero,zero
	vmovss	%xmm3, -8400(%rbp)              ## 4-byte Spill
	vmulss	%xmm5, %xmm15, %xmm5
	vaddss	%xmm2, %xmm5, %xmm5
	vmulss	%xmm3, %xmm10, %xmm6
	vaddss	%xmm5, %xmm6, %xmm6
	vmovss	144(%r14), %xmm15               ## xmm15 = mem[0],zero,zero,zero
	vmulss	%xmm8, %xmm15, %xmm7
	vaddss	%xmm6, %xmm7, %xmm2
	vmovaps	%xmm0, -8352(%rbp)              ## 16-byte Spill
	vmovaps	%xmm1, -8336(%rbp)              ## 16-byte Spill
	vinsertps	$16, %xmm1, %xmm0, %xmm6 ## xmm6 = xmm0[0],xmm1[0],xmm0[2,3]
	vmovlps	%xmm6, -4144(%rbp)
	vmovss	%xmm2, -8320(%rbp)              ## 4-byte Spill
	vmovss	%xmm2, -4136(%rbp)
	vmovsd	12(%rcx), %xmm6                 ## xmm6 = mem[0],zero
	vsubps	%xmm14, %xmm6, %xmm7
	vmovss	-8256(%rbp), %xmm5              ## 4-byte Reload
                                        ## xmm5 = mem[0],zero,zero,zero
	vmulss	%xmm7, %xmm5, %xmm6
	vxorps	%xmm10, %xmm10, %xmm10
	vaddss	%xmm6, %xmm10, %xmm8
	vmovshdup	%xmm7, %xmm6            ## xmm6 = xmm7[1,1,3,3]
	vmulss	%xmm6, %xmm12, %xmm0
	vaddss	%xmm0, %xmm8, %xmm0
	vmovss	20(%rcx), %xmm1                 ## xmm1 = mem[0],zero,zero,zero
	vmovss	-8496(%rbp), %xmm4              ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vsubss	%xmm4, %xmm1, %xmm1
	vmulss	%xmm1, %xmm11, %xmm2
	vaddss	%xmm0, %xmm2, %xmm3
	vmulss	%xmm7, %xmm9, %xmm0
	vaddss	%xmm0, %xmm10, %xmm0
	vxorps	%xmm11, %xmm11, %xmm11
	vmulss	%xmm6, %xmm13, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vmovss	-8416(%rbp), %xmm8              ## 4-byte Reload
                                        ## xmm8 = mem[0],zero,zero,zero
	vmulss	%xmm1, %xmm8, %xmm2
	vaddss	%xmm0, %xmm2, %xmm13
	vmovss	-8432(%rbp), %xmm10             ## 4-byte Reload
                                        ## xmm10 = mem[0],zero,zero,zero
	vmulss	%xmm7, %xmm10, %xmm0
	vaddss	%xmm0, %xmm11, %xmm0
	vmovss	-8400(%rbp), %xmm9              ## 4-byte Reload
                                        ## xmm9 = mem[0],zero,zero,zero
	vmulss	%xmm6, %xmm9, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vmulss	%xmm1, %xmm15, %xmm1
	vaddss	%xmm0, %xmm1, %xmm1
	vmovaps	%xmm3, -8368(%rbp)              ## 16-byte Spill
	vinsertps	$16, %xmm13, %xmm3, %xmm0 ## xmm0 = xmm3[0],xmm13[0],xmm3[2,3]
	vmovlps	%xmm0, -4132(%rbp)
	vmovss	%xmm1, -8248(%rbp)              ## 4-byte Spill
	vmovss	%xmm1, -4124(%rbp)
	vmovsd	24(%rcx), %xmm0                 ## xmm0 = mem[0],zero
	vsubps	%xmm14, %xmm0, %xmm2
	vmovss	32(%rcx), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vsubss	%xmm4, %xmm0, %xmm4
	vmulss	%xmm2, %xmm5, %xmm0
	vaddss	%xmm0, %xmm11, %xmm0
	vmovshdup	%xmm2, %xmm6            ## xmm6 = xmm2[1,1,3,3]
	vmulss	%xmm6, %xmm12, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmulss	-8384(%rbp), %xmm4, %xmm1       ## 4-byte Folded Reload
	vaddss	%xmm0, %xmm1, %xmm0
	vmulss	-8464(%rbp), %xmm2, %xmm1       ## 4-byte Folded Reload
	vaddss	%xmm1, %xmm11, %xmm1
	vmulss	-8480(%rbp), %xmm6, %xmm7       ## 4-byte Folded Reload
	vaddss	%xmm1, %xmm7, %xmm1
	vmulss	%xmm4, %xmm8, %xmm7
	vaddss	%xmm1, %xmm7, %xmm1
	vmulss	%xmm2, %xmm10, %xmm2
	vmulss	%xmm6, %xmm9, %xmm3
	vaddss	%xmm2, %xmm11, %xmm2
	vaddss	%xmm2, %xmm3, %xmm2
	vmulss	%xmm4, %xmm15, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vinsertps	$16, %xmm1, %xmm0, %xmm3 ## xmm3 = xmm0[0],xmm1[0],xmm0[2,3]
	vmovlps	%xmm3, -4120(%rbp)
	vmovss	%xmm2, -4112(%rbp)
	testb	$4, %al
	jne	LBB21_3
## %bb.2:
	vmovaps	-8352(%rbp), %xmm7              ## 16-byte Reload
	vmovaps	-8368(%rbp), %xmm3              ## 16-byte Reload
	vsubss	%xmm7, %xmm3, %xmm3
	vmovaps	-8336(%rbp), %xmm5              ## 16-byte Reload
	vsubss	%xmm5, %xmm1, %xmm11
	vsubss	%xmm7, %xmm0, %xmm0
	vsubss	%xmm5, %xmm13, %xmm1
	vmulss	%xmm1, %xmm0, %xmm9
	vmulss	%xmm3, %xmm11, %xmm6
	vsubss	%xmm9, %xmm6, %xmm9
	vmovss	-8320(%rbp), %xmm4              ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vmovss	-8248(%rbp), %xmm6              ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	vsubss	%xmm4, %xmm6, %xmm6
	vsubss	%xmm4, %xmm2, %xmm2
	vmulss	%xmm3, %xmm2, %xmm3
	vmulss	%xmm0, %xmm6, %xmm0
	vsubss	%xmm3, %xmm0, %xmm0
	vmulss	%xmm6, %xmm11, %xmm3
	vmulss	%xmm2, %xmm1, %xmm2
	vsubss	%xmm3, %xmm2, %xmm1
	vmulss	%xmm0, %xmm5, %xmm0
	vmulss	%xmm7, %xmm1, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmulss	%xmm4, %xmm9, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vucomiss	LCPI21_4(%rip), %xmm0
	ja	LBB21_64
LBB21_3:
	movl	$1, %r12d
	xorl	%r13d, %r13d
	vbroadcastss	LCPI21_0(%rip), %xmm0   ## xmm0 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	%xmm0, -8688(%rbp)              ## 16-byte Spill
	vbroadcastss	LCPI21_0(%rip), %xmm9   ## xmm9 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	%xmm9, -8544(%rbp)              ## 16-byte Spill
	.p2align	4, 0x90
LBB21_4:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB21_6 Depth 2
	testl	%r12d, %r12d
	jle	LBB21_64
## %bb.5:                               ##   in Loop: Header=BB21_4 Depth=1
	movq	%r13, %rax
	shlq	$4, %rax
	vmovsd	1676(%r14,%rax), %xmm0          ## xmm0 = mem[0],zero
	vmovss	1684(%r14,%rax), %xmm1          ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, -8256(%rbp)              ## 4-byte Spill
	vmovaps	%xmm0, -8496(%rbp)              ## 16-byte Spill
	vmovshdup	%xmm0, %xmm0            ## xmm0 = xmm0[1,1,3,3]
	vmovaps	%xmm0, -8480(%rbp)              ## 16-byte Spill
	vmovss	1688(%r14,%rax), %xmm14         ## xmm14 = mem[0],zero,zero,zero
	vxorps	-8688(%rbp), %xmm14, %xmm0      ## 16-byte Folded Reload
	vmovaps	%xmm0, -8704(%rbp)              ## 16-byte Spill
	movl	%r12d, %r8d
	shlq	$7, %r8
	xorl	%ecx, %ecx
	xorl	%r12d, %r12d
	vmovaps	%xmm14, -8560(%rbp)             ## 16-byte Spill
	jmp	LBB21_6
	.p2align	4, 0x90
LBB21_34:                               ##   in Loop: Header=BB21_6 Depth=2
	movl	%r15d, %r12d
	vmovaps	-8544(%rbp), %xmm9              ## 16-byte Reload
	vmovaps	-8560(%rbp), %xmm14             ## 16-byte Reload
LBB21_35:                               ##   in Loop: Header=BB21_6 Depth=2
	subq	$-128, %rcx
	cmpq	%rcx, %r8
	je	LBB21_9
LBB21_6:                                ##   Parent Loop BB21_4 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovsd	-4144(%rbp,%rcx), %xmm1         ## xmm1 = mem[0],zero
	vmovshdup	%xmm1, %xmm12           ## xmm12 = xmm1[1,1,3,3]
	vmovss	-4136(%rbp,%rcx), %xmm15        ## xmm15 = mem[0],zero,zero,zero
	vmovsd	-4132(%rbp,%rcx), %xmm4         ## xmm4 = mem[0],zero
	vmovshdup	%xmm4, %xmm2            ## xmm2 = xmm4[1,1,3,3]
	vmovss	-4124(%rbp,%rcx), %xmm5         ## xmm5 = mem[0],zero,zero,zero
	vmovsd	-4120(%rbp,%rcx), %xmm13        ## xmm13 = mem[0],zero
	vmovaps	-8480(%rbp), %xmm7              ## 16-byte Reload
	vmulss	%xmm7, %xmm12, %xmm0
	vmovaps	-8496(%rbp), %xmm3              ## 16-byte Reload
	vmovaps	%xmm1, -8416(%rbp)              ## 16-byte Spill
	vmulss	%xmm3, %xmm1, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmovss	-8256(%rbp), %xmm6              ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	vmulss	%xmm6, %xmm15, %xmm1
	vaddss	%xmm0, %xmm1, %xmm11
	vxorps	%xmm9, %xmm11, %xmm1
	xorl	%eax, %eax
	vucomiss	%xmm14, %xmm1
	seta	%al
	vmovshdup	%xmm13, %xmm10          ## xmm10 = xmm13[1,1,3,3]
	vmovaps	%xmm2, -8432(%rbp)              ## 16-byte Spill
	vmulss	%xmm7, %xmm2, %xmm0
	vmovaps	%xmm4, -8464(%rbp)              ## 16-byte Spill
	vmulss	%xmm3, %xmm4, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vmulss	%xmm6, %xmm5, %xmm2
	vaddss	%xmm0, %xmm2, %xmm4
	vxorps	%xmm4, %xmm9, %xmm0
	xorl	%edx, %edx
	vucomiss	%xmm14, %xmm0
	seta	%dl
	vmovss	-4112(%rbp,%rcx), %xmm8         ## xmm8 = mem[0],zero,zero,zero
	vmulss	%xmm7, %xmm10, %xmm2
	vmovaps	%xmm13, -8384(%rbp)             ## 16-byte Spill
	vmulss	%xmm3, %xmm13, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vmovss	%xmm8, -8400(%rbp)              ## 4-byte Spill
	vmulss	%xmm6, %xmm8, %xmm3
	vaddss	%xmm2, %xmm3, %xmm3
	vxorps	%xmm3, %xmm9, %xmm2
	xorl	%esi, %esi
	vucomiss	%xmm14, %xmm2
	seta	%sil
	addl	%eax, %edx
	addl	%esi, %edx
	cmpl	$3, %edx
	je	LBB21_35
## %bb.7:                               ##   in Loop: Header=BB21_6 Depth=2
	testl	%edx, %edx
	jne	LBB21_17
## %bb.8:                               ##   in Loop: Header=BB21_6 Depth=2
	movslq	%r12d, %rax
	incl	%r12d
	shlq	$7, %rax
	vmovups	-4144(%rbp,%rcx), %ymm0
	vmovups	-4112(%rbp,%rcx), %ymm1
	vmovups	-4080(%rbp,%rcx), %ymm2
	vmovups	-4048(%rbp,%rcx), %ymm3
	vmovups	%ymm3, -8144(%rbp,%rax)
	vmovups	%ymm2, -8176(%rbp,%rax)
	vmovups	%ymm1, -8208(%rbp,%rax)
	vmovups	%ymm0, -8240(%rbp,%rax)
	jmp	LBB21_35
	.p2align	4, 0x90
LBB21_17:                               ##   in Loop: Header=BB21_6 Depth=2
	vmovss	%xmm5, -8320(%rbp)              ## 4-byte Spill
	vmovaps	%xmm12, -8336(%rbp)             ## 16-byte Spill
	vmovss	%xmm15, -8352(%rbp)             ## 4-byte Spill
	vmovaps	-8464(%rbp), %xmm2              ## 16-byte Reload
	vmovaps	%xmm2, %xmm9
	vucomiss	%xmm14, %xmm1
	seta	%bl
	cmpl	$2, %edx
	sete	%al
	movq	-4108(%rbp,%rcx), %r11
	movq	-4100(%rbp,%rcx), %r10
	movq	-4092(%rbp,%rcx), %rsi
	vmovsd	-4084(%rbp,%rcx), %xmm1         ## xmm1 = mem[0],zero
	vmovss	-4076(%rbp,%rcx), %xmm8         ## xmm8 = mem[0],zero,zero,zero
	vmovsd	-4072(%rbp,%rcx), %xmm13        ## xmm13 = mem[0],zero
	vmovss	-4064(%rbp,%rcx), %xmm6         ## xmm6 = mem[0],zero,zero,zero
	vmovsd	-4060(%rbp,%rcx), %xmm5         ## xmm5 = mem[0],zero
	vmovss	-4052(%rbp,%rcx), %xmm12        ## xmm12 = mem[0],zero,zero,zero
	xorb	%bl, %al
	vmovaps	%xmm10, -8672(%rbp)             ## 16-byte Spill
	je	LBB21_19
## %bb.18:                              ##   in Loop: Header=BB21_6 Depth=2
	vmovaps	-8432(%rbp), %xmm0              ## 16-byte Reload
	vmovss	%xmm0, -8280(%rbp)              ## 4-byte Spill
	vmovss	%xmm9, -8276(%rbp)              ## 4-byte Spill
	vmovaps	%xmm10, -8448(%rbp)             ## 16-byte Spill
	vmovaps	-8384(%rbp), %xmm3              ## 16-byte Reload
	vmovaps	%xmm3, %xmm14
	vmovaps	%xmm11, %xmm4
	vmovaps	-8336(%rbp), %xmm15             ## 16-byte Reload
	vmovaps	-8416(%rbp), %xmm0              ## 16-byte Reload
	vmovaps	%xmm0, %xmm9
	vmovaps	%xmm5, -8368(%rbp)              ## 16-byte Spill
	vmovaps	%xmm12, %xmm7
	movq	%r11, %r9
	vmovss	%xmm6, -8284(%rbp)              ## 4-byte Spill
	vmovaps	%xmm13, -8624(%rbp)             ## 16-byte Spill
	movq	%rsi, %r11
	vmovaps	%xmm8, %xmm12
	vmovaps	%xmm1, %xmm13
	vmovaps	%xmm0, -8592(%rbp)              ## 16-byte Spill
	vmovss	-8352(%rbp), %xmm10             ## 4-byte Reload
                                        ## xmm10 = mem[0],zero,zero,zero
	vmovaps	%xmm2, -8608(%rbp)              ## 16-byte Spill
	vmovss	-8320(%rbp), %xmm0              ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	%xmm0, -8248(%rbp)              ## 4-byte Spill
	vmovaps	%xmm3, -8576(%rbp)              ## 16-byte Spill
	vmovss	-8400(%rbp), %xmm5              ## 4-byte Reload
                                        ## xmm5 = mem[0],zero,zero,zero
	jmp	LBB21_22
LBB21_19:                               ##   in Loop: Header=BB21_6 Depth=2
	cmpl	$2, %edx
	sete	%al
	vucomiss	%xmm14, %xmm0
	seta	%bl
	cmpb	%al, %bl
	je	LBB21_20
## %bb.21:                              ##   in Loop: Header=BB21_6 Depth=2
	vmovss	%xmm10, -8280(%rbp)             ## 4-byte Spill
	vmovaps	-8384(%rbp), %xmm3              ## 16-byte Reload
	vmovss	%xmm3, -8276(%rbp)              ## 4-byte Spill
	vmovaps	-8336(%rbp), %xmm0              ## 16-byte Reload
	vmovaps	%xmm0, -8448(%rbp)              ## 16-byte Spill
	vmovaps	-8416(%rbp), %xmm0              ## 16-byte Reload
	vmovaps	%xmm0, %xmm14
	vmovaps	-8432(%rbp), %xmm15             ## 16-byte Reload
	vmovaps	%xmm1, -8368(%rbp)              ## 16-byte Spill
	vmovaps	%xmm8, %xmm7
	movq	%r10, %r9
	vmovss	%xmm12, -8284(%rbp)             ## 4-byte Spill
	vmovaps	%xmm5, -8624(%rbp)              ## 16-byte Spill
	movq	%rsi, %r10
	vmovaps	%xmm2, -8592(%rbp)              ## 16-byte Spill
	vmovss	-8320(%rbp), %xmm10             ## 4-byte Reload
                                        ## xmm10 = mem[0],zero,zero,zero
	vmovaps	%xmm3, -8608(%rbp)              ## 16-byte Spill
	vmovss	-8400(%rbp), %xmm1              ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, -8248(%rbp)              ## 4-byte Spill
	vmovaps	%xmm0, -8576(%rbp)              ## 16-byte Spill
	vmovss	-8352(%rbp), %xmm5              ## 4-byte Reload
                                        ## xmm5 = mem[0],zero,zero,zero
	vmovaps	%xmm6, %xmm12
	jmp	LBB21_22
LBB21_20:                               ##   in Loop: Header=BB21_6 Depth=2
	vmovaps	-8432(%rbp), %xmm0              ## 16-byte Reload
	vmovss	%xmm0, -8280(%rbp)              ## 4-byte Spill
	vmovss	%xmm9, -8276(%rbp)              ## 4-byte Spill
	vmovaps	-8336(%rbp), %xmm0              ## 16-byte Reload
	vmovaps	%xmm0, -8448(%rbp)              ## 16-byte Spill
	vmovaps	-8416(%rbp), %xmm0              ## 16-byte Reload
	vmovaps	%xmm0, %xmm14
	vmovaps	%xmm3, %xmm4
	vmovaps	%xmm10, %xmm15
	vmovaps	-8384(%rbp), %xmm3              ## 16-byte Reload
	vmovaps	%xmm3, %xmm9
	vmovaps	%xmm1, -8368(%rbp)              ## 16-byte Spill
	vmovaps	%xmm8, %xmm7
	movq	%rsi, %r9
	vmovss	%xmm6, -8284(%rbp)              ## 4-byte Spill
	vmovaps	%xmm13, -8624(%rbp)             ## 16-byte Spill
	vmovaps	%xmm5, %xmm13
	vmovaps	%xmm3, -8592(%rbp)              ## 16-byte Spill
	vmovss	-8400(%rbp), %xmm10             ## 4-byte Reload
                                        ## xmm10 = mem[0],zero,zero,zero
	vmovaps	%xmm2, -8608(%rbp)              ## 16-byte Spill
	vmovss	-8320(%rbp), %xmm1              ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, -8248(%rbp)              ## 4-byte Spill
	vmovaps	%xmm0, -8576(%rbp)              ## 16-byte Spill
	vmovss	-8352(%rbp), %xmm5              ## 4-byte Reload
                                        ## xmm5 = mem[0],zero,zero,zero
LBB21_22:                               ##   in Loop: Header=BB21_6 Depth=2
	vmovss	%xmm7, -8508(%rbp)              ## 4-byte Spill
	vmovaps	-8704(%rbp), %xmm0              ## 16-byte Reload
	vsubss	%xmm4, %xmm0, %xmm11
	vsubss	%xmm9, %xmm14, %xmm1
	vmovaps	-8448(%rbp), %xmm4              ## 16-byte Reload
	vsubss	%xmm15, %xmm4, %xmm2
	vsubss	%xmm10, %xmm5, %xmm0
	vmulss	-8480(%rbp), %xmm2, %xmm6       ## 16-byte Folded Reload
	vmulss	-8496(%rbp), %xmm1, %xmm3       ## 16-byte Folded Reload
	vaddss	%xmm6, %xmm3, %xmm3
	vmulss	-8256(%rbp), %xmm0, %xmm6       ## 4-byte Folded Reload
	vaddss	%xmm3, %xmm6, %xmm3
	vdivss	%xmm3, %xmm11, %xmm3
	vmulss	%xmm3, %xmm1, %xmm1
	vmulss	%xmm3, %xmm2, %xmm2
	vmulss	%xmm3, %xmm0, %xmm0
	vaddss	%xmm1, %xmm9, %xmm1
	vaddss	%xmm2, %xmm15, %xmm2
	vaddss	%xmm0, %xmm10, %xmm3
	vmovaps	%xmm1, -8768(%rbp)              ## 16-byte Spill
	vinsertps	$16, %xmm9, %xmm1, %xmm0 ## xmm0 = xmm1[0],xmm9[0],xmm1[2,3]
	vbroadcastss	%xmm14, %xmm1
	vsubps	%xmm1, %xmm0, %xmm0
	vmovaps	%xmm2, -8752(%rbp)              ## 16-byte Spill
	vinsertps	$16, %xmm15, %xmm2, %xmm1 ## xmm1 = xmm2[0],xmm15[0],xmm2[2,3]
	vbroadcastss	%xmm4, %xmm2
	vsubps	%xmm2, %xmm1, %xmm1
	vmovaps	%xmm3, -8656(%rbp)              ## 16-byte Spill
	vinsertps	$16, %xmm10, %xmm3, %xmm2 ## xmm2 = xmm3[0],xmm10[0],xmm3[2,3]
	vmovaps	%xmm5, -8720(%rbp)              ## 16-byte Spill
	vbroadcastss	%xmm5, %xmm3
	vsubps	%xmm3, %xmm2, %xmm2
	vmulps	%xmm1, %xmm1, %xmm1
	vmulps	%xmm0, %xmm0, %xmm0
	vaddps	%xmm1, %xmm0, %xmm0
	vmulps	%xmm2, %xmm2, %xmm1
	vaddps	%xmm0, %xmm1, %xmm0
	vsqrtps	%xmm0, %xmm0
	vmovshdup	%xmm0, %xmm1            ## xmm1 = xmm0[1,1,3,3]
	vdivps	%xmm1, %xmm0, %xmm1
	vmovss	LCPI21_1(%rip), %xmm14          ## xmm14 = mem[0],zero,zero,zero
	vsubss	%xmm1, %xmm14, %xmm2
	vbroadcastss	%xmm1, %xmm8
	vbroadcastss	%xmm2, %xmm3
	vmulps	%xmm8, %xmm13, %xmm0
	vmovaps	%xmm3, -8736(%rbp)              ## 16-byte Spill
	vmulps	-8368(%rbp), %xmm3, %xmm3       ## 16-byte Folded Reload
	vaddps	%xmm0, %xmm3, %xmm0
	vmovss	%xmm12, -8512(%rbp)             ## 4-byte Spill
	vmulss	%xmm1, %xmm12, %xmm1
	vmulss	%xmm7, %xmm2, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vmulps	%xmm0, %xmm0, %xmm2
	vmovshdup	%xmm2, %xmm2            ## xmm2 = xmm2[1,1,3,3]
	vmulss	%xmm0, %xmm0, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vmulss	%xmm1, %xmm1, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vsqrtss	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	vmovaps	%xmm3, -8448(%rbp)              ## 16-byte Spill
	vmovss	LCPI21_2(%rip), %xmm3           ## xmm3 = mem[0],zero,zero,zero
	vucomiss	%xmm2, %xmm3
	vxorps	%xmm3, %xmm3, %xmm3
	vxorps	%xmm4, %xmm4, %xmm4
	jae	LBB21_24
## %bb.23:                              ##   in Loop: Header=BB21_6 Depth=2
	vdivss	%xmm2, %xmm14, %xmm2
	vbroadcastss	%xmm2, %xmm3
	vmulps	%xmm3, %xmm0, %xmm3
	vmulss	%xmm2, %xmm1, %xmm4
LBB21_24:                               ##   in Loop: Header=BB21_6 Depth=2
	vmovss	%xmm4, -8292(%rbp)              ## 4-byte Spill
	vmovaps	%xmm3, -8640(%rbp)              ## 16-byte Spill
	vmovss	-8276(%rbp), %xmm7              ## 4-byte Reload
                                        ## xmm7 = mem[0],zero,zero,zero
	vsubss	%xmm9, %xmm7, %xmm0
	vmovss	-8280(%rbp), %xmm5              ## 4-byte Reload
                                        ## xmm5 = mem[0],zero,zero,zero
	vsubss	%xmm15, %xmm5, %xmm1
	vmovss	-8248(%rbp), %xmm4              ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vsubss	%xmm10, %xmm4, %xmm2
	vmulss	-8480(%rbp), %xmm1, %xmm3       ## 16-byte Folded Reload
	vmulss	-8496(%rbp), %xmm0, %xmm6       ## 16-byte Folded Reload
	vaddss	%xmm3, %xmm6, %xmm3
	vmulss	-8256(%rbp), %xmm2, %xmm6       ## 4-byte Folded Reload
	vaddss	%xmm3, %xmm6, %xmm3
	vdivss	%xmm3, %xmm11, %xmm3
	vmulss	%xmm3, %xmm0, %xmm0
	vmulss	%xmm3, %xmm1, %xmm1
	vmulss	%xmm3, %xmm2, %xmm2
	vaddss	%xmm0, %xmm9, %xmm3
	vaddss	%xmm1, %xmm15, %xmm11
	vaddss	%xmm2, %xmm10, %xmm2
	vsubss	%xmm7, %xmm3, %xmm0
	vsubss	%xmm5, %xmm11, %xmm1
	vmulss	%xmm1, %xmm1, %xmm1
	vmulss	%xmm0, %xmm0, %xmm0
	vaddss	%xmm1, %xmm0, %xmm0
	vmovss	%xmm2, -8288(%rbp)              ## 4-byte Spill
	vsubss	%xmm4, %xmm2, %xmm1
	vmulss	%xmm1, %xmm1, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vsqrtss	%xmm0, %xmm0, %xmm0
	vsubss	%xmm7, %xmm9, %xmm1
	vsubss	%xmm5, %xmm15, %xmm2
	vsubss	%xmm4, %xmm10, %xmm4
	vmulss	%xmm2, %xmm2, %xmm2
	vmulss	%xmm1, %xmm1, %xmm1
	vaddss	%xmm2, %xmm1, %xmm1
	vmulss	%xmm4, %xmm4, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vsqrtss	%xmm1, %xmm1, %xmm1
	vdivss	%xmm1, %xmm0, %xmm1
	vsubss	%xmm1, %xmm14, %xmm2
	vbroadcastss	%xmm1, %xmm4
	vbroadcastss	%xmm2, %xmm7
	vmulps	%xmm4, %xmm13, %xmm0
	vmovaps	-8624(%rbp), %xmm14             ## 16-byte Reload
	vmulps	%xmm7, %xmm14, %xmm6
	vaddps	%xmm0, %xmm6, %xmm0
	vmovss	-8512(%rbp), %xmm9              ## 4-byte Reload
                                        ## xmm9 = mem[0],zero,zero,zero
	vmulss	%xmm1, %xmm9, %xmm1
	vmovss	-8284(%rbp), %xmm12             ## 4-byte Reload
                                        ## xmm12 = mem[0],zero,zero,zero
	vmulss	%xmm2, %xmm12, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vmulps	%xmm0, %xmm0, %xmm2
	vmovshdup	%xmm2, %xmm2            ## xmm2 = xmm2[1,1,3,3]
	vmulss	%xmm0, %xmm0, %xmm6
	vaddss	%xmm2, %xmm6, %xmm2
	vmulss	%xmm1, %xmm1, %xmm6
	vaddss	%xmm2, %xmm6, %xmm2
	vsqrtss	%xmm2, %xmm2, %xmm2
	vmovss	LCPI21_2(%rip), %xmm6           ## xmm6 = mem[0],zero,zero,zero
	vucomiss	%xmm2, %xmm6
	vxorps	%xmm15, %xmm15, %xmm15
	jae	LBB21_26
## %bb.25:                              ##   in Loop: Header=BB21_6 Depth=2
	vmovss	LCPI21_1(%rip), %xmm6           ## xmm6 = mem[0],zero,zero,zero
	vdivss	%xmm2, %xmm6, %xmm2
	vbroadcastss	%xmm2, %xmm6
	vmulps	%xmm6, %xmm0, %xmm0
	vmovaps	%xmm0, -8448(%rbp)              ## 16-byte Spill
	vmulss	%xmm2, %xmm1, %xmm15
LBB21_26:                               ##   in Loop: Header=BB21_6 Depth=2
	vmovq	%r11, %xmm0
	vmovq	%r9, %xmm1
	vmulps	%xmm1, %xmm8, %xmm2
	vmulps	-8736(%rbp), %xmm0, %xmm0       ## 16-byte Folded Reload
	vaddps	%xmm2, %xmm0, %xmm0
	vmovq	%r10, %xmm2
	vmulps	%xmm1, %xmm4, %xmm1
	vmulps	%xmm2, %xmm7, %xmm2
	vaddps	%xmm1, %xmm2, %xmm1
	vmovaps	-8768(%rbp), %xmm2              ## 16-byte Reload
	vinsertps	$16, -8752(%rbp), %xmm2, %xmm4 ## 16-byte Folded Reload
                                        ## xmm4 = xmm2[0],mem[0],xmm2[2,3]
	vinsertps	$16, %xmm11, %xmm3, %xmm3 ## xmm3 = xmm3[0],xmm11[0],xmm3[2,3]
	leal	1(%r12), %r15d
	movslq	%r12d, %rbx
	movq	%rbx, %rsi
	shlq	$7, %rsi
	leaq	(%rsi,%rbp), %rdi
	addq	$-8240, %rdi                    ## imm = 0xDFD0
	cmpl	$2, %edx
	vmovaps	-8368(%rbp), %xmm2              ## 16-byte Reload
	jne	LBB21_28
## %bb.27:                              ##   in Loop: Header=BB21_6 Depth=2
	vmovlps	%xmm4, (%rdi)
	vmovaps	-8656(%rbp), %xmm2              ## 16-byte Reload
	vmovss	%xmm2, -8232(%rbp,%rsi)
	vmovlps	%xmm3, -8228(%rbp,%rsi)
	vmovss	-8288(%rbp), %xmm2              ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	%xmm2, -8220(%rbp,%rsi)
	vmovaps	-8592(%rbp), %xmm2              ## 16-byte Reload
	vmovlps	%xmm2, -8216(%rbp,%rsi)
	vmovss	%xmm10, -8208(%rbp,%rsi)
	vmovlhps	%xmm1, %xmm0, %xmm0             ## xmm0 = xmm0[0],xmm1[0]
	vmovups	%xmm0, -8204(%rbp,%rsi)
	movq	%r9, -8188(%rbp,%rsi)
	vmovaps	-8640(%rbp), %xmm14             ## 16-byte Reload
	vmovss	-8292(%rbp), %xmm12             ## 4-byte Reload
                                        ## xmm12 = mem[0],zero,zero,zero
	vxorps	%xmm2, %xmm2, %xmm2
	jmp	LBB21_29
LBB21_28:                               ##   in Loop: Header=BB21_6 Depth=2
	vmovaps	-8576(%rbp), %xmm5              ## 16-byte Reload
	vmovlps	%xmm5, (%rdi)
	vmovaps	-8720(%rbp), %xmm5              ## 16-byte Reload
	vmovss	%xmm5, -8232(%rbp,%rsi)
	vmovaps	-8608(%rbp), %xmm5              ## 16-byte Reload
	vmovlps	%xmm5, -8228(%rbp,%rsi)
	vmovss	-8248(%rbp), %xmm6              ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	vmovss	%xmm6, -8220(%rbp,%rsi)
	vmovlps	%xmm4, -8216(%rbp,%rsi)
	vmovaps	-8656(%rbp), %xmm7              ## 16-byte Reload
	vmovss	%xmm7, -8208(%rbp,%rsi)
	movq	%r11, -8204(%rbp,%rsi)
	movq	%r10, -8196(%rbp,%rsi)
	vmovlhps	%xmm2, %xmm0, %xmm2             ## xmm2 = xmm0[0],xmm2[0]
	vmovups	%xmm2, -8188(%rbp,%rsi)
	vmovss	-8508(%rbp), %xmm2              ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	%xmm2, -8172(%rbp,%rsi)
	vmovlps	%xmm14, -8168(%rbp,%rsi)
	vmovss	%xmm12, -8160(%rbp,%rsi)
	vmovaps	-8640(%rbp), %xmm13             ## 16-byte Reload
	vmovlps	%xmm13, -8156(%rbp,%rsi)
	vmovss	-8292(%rbp), %xmm9              ## 4-byte Reload
                                        ## xmm9 = mem[0],zero,zero,zero
	vmovss	%xmm9, -8148(%rbp,%rsi)
	movslq	%r15d, %rbx
	movq	%rbx, %rax
	shlq	$7, %rax
	vxorps	%xmm2, %xmm2, %xmm2
	vmovaps	%xmm2, -8144(%rbp,%rsi)
	vmovups	%xmm2, -8132(%rbp,%rsi)
	vmovlps	%xmm5, -8240(%rbp,%rax)
	vmovss	%xmm6, -8232(%rbp,%rax)
	vmovlps	%xmm3, -8228(%rbp,%rax)
	vmovss	-8288(%rbp), %xmm3              ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovss	%xmm3, -8220(%rbp,%rax)
	vmovlps	%xmm4, -8216(%rbp,%rax)
	vmovss	%xmm7, -8208(%rbp,%rax)
	vmovlhps	%xmm0, %xmm1, %xmm0             ## xmm0 = xmm1[0],xmm0[0]
	movq	%r10, -8204(%rbp,%rax)
	vmovups	%xmm0, -8196(%rbp,%rax)
	addl	$2, %r12d
	movl	%r12d, %r15d
LBB21_29:                               ##   in Loop: Header=BB21_6 Depth=2
	vmovss	-8352(%rbp), %xmm0              ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovaps	-8336(%rbp), %xmm5              ## 16-byte Reload
	vmovss	-8320(%rbp), %xmm1              ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	-8672(%rbp), %xmm6              ## 16-byte Reload
	vmovaps	-8464(%rbp), %xmm3              ## 16-byte Reload
	vmovaps	-8448(%rbp), %xmm4              ## 16-byte Reload
	shlq	$7, %rbx
	vmovlps	%xmm14, -8180(%rbp,%rbx)
	vmovss	%xmm12, -8172(%rbp,%rbx)
	vmovlps	%xmm4, -8168(%rbp,%rbx)
	vmovss	%xmm15, -8160(%rbp,%rbx)
	vmovlps	%xmm13, -8156(%rbp,%rbx)
	vmovss	%xmm9, -8148(%rbp,%rbx)
	vmovaps	%xmm2, -8144(%rbp,%rbx)
	vmovups	%xmm2, -8132(%rbp,%rbx)
	vmovaps	-8416(%rbp), %xmm4              ## 16-byte Reload
	vsubss	%xmm4, %xmm3, %xmm2
	vmovaps	-8432(%rbp), %xmm3              ## 16-byte Reload
	vsubss	%xmm5, %xmm3, %xmm3
	vsubss	%xmm0, %xmm1, %xmm1
	vmovaps	-8384(%rbp), %xmm7              ## 16-byte Reload
	vsubss	%xmm4, %xmm7, %xmm4
	vsubss	%xmm5, %xmm6, %xmm5
	vmovss	-8400(%rbp), %xmm6              ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	vsubss	%xmm0, %xmm6, %xmm6
	vmulss	%xmm5, %xmm1, %xmm0
	vmulss	%xmm6, %xmm3, %xmm7
	vsubss	%xmm0, %xmm7, %xmm8
	vmulss	%xmm2, %xmm6, %xmm6
	vmulss	%xmm4, %xmm1, %xmm1
	vsubss	%xmm6, %xmm1, %xmm9
	vmulss	%xmm3, %xmm4, %xmm3
	vmulss	%xmm5, %xmm2, %xmm2
	vsubss	%xmm3, %xmm2, %xmm10
	leal	-1(%r15), %esi
	movslq	%esi, %rsi
	shlq	$7, %rsi
	vmovsd	-8228(%rbp,%rsi), %xmm3         ## xmm3 = mem[0],zero
	vmovss	-8220(%rbp,%rsi), %xmm4         ## xmm4 = mem[0],zero,zero,zero
	vmovsd	-8240(%rbp,%rsi), %xmm5         ## xmm5 = mem[0],zero
	vmovss	-8232(%rbp,%rsi), %xmm6         ## xmm6 = mem[0],zero,zero,zero
	vsubps	%xmm5, %xmm3, %xmm3
	vmovshdup	%xmm3, %xmm7            ## xmm7 = xmm3[1,1,3,3]
	vsubss	%xmm6, %xmm4, %xmm4
	vmovsd	-8216(%rbp,%rsi), %xmm0         ## xmm0 = mem[0],zero
	vmovss	-8208(%rbp,%rsi), %xmm1         ## xmm1 = mem[0],zero,zero,zero
	vsubps	%xmm5, %xmm0, %xmm0
	vmovshdup	%xmm0, %xmm5            ## xmm5 = xmm0[1,1,3,3]
	vsubss	%xmm6, %xmm1, %xmm1
	vmulss	%xmm5, %xmm4, %xmm6
	vmulss	%xmm1, %xmm7, %xmm2
	vsubss	%xmm6, %xmm2, %xmm2
	vmulss	%xmm3, %xmm1, %xmm1
	vmulss	%xmm0, %xmm4, %xmm4
	vsubss	%xmm1, %xmm4, %xmm1
	vmulss	%xmm7, %xmm0, %xmm0
	vmulss	%xmm5, %xmm3, %xmm3
	vsubss	%xmm0, %xmm3, %xmm0
	vmulss	%xmm1, %xmm9, %xmm1
	vmulss	%xmm2, %xmm8, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vmulss	%xmm0, %xmm10, %xmm0
	vaddss	%xmm1, %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomiss	%xmm0, %xmm1
	jbe	LBB21_31
## %bb.30:                              ##   in Loop: Header=BB21_6 Depth=2
	leaq	(%rsi,%rbp), %rdi
	addq	$-8228, %rdi                    ## imm = 0xDFDC
	movl	8(%rdi), %ebx
	movl	%ebx, -8264(%rbp)
	movq	(%rdi), %rbx
	movq	%rbx, -8272(%rbp)
	movl	20(%rdi), %ebx
	movl	%ebx, 8(%rdi)
	movq	12(%rdi), %rbx
	movq	%rbx, (%rdi)
	movl	-8264(%rbp), %ebx
	movl	%ebx, 20(%rdi)
	movq	-8272(%rbp), %rbx
	movq	%rbx, 12(%rdi)
	vpermilps	$78, -8196(%rbp,%rsi), %xmm0 ## xmm0 = mem[2,3,0,1]
	vmovups	%xmm0, -8196(%rbp,%rsi)
	movl	-8160(%rbp,%rsi), %edi
	movl	%edi, -8264(%rbp)
	movq	-8168(%rbp,%rsi), %rbx
	movq	%rbx, -8272(%rbp)
	movq	-8156(%rbp,%rsi), %rax
	movq	%rax, -8168(%rbp,%rsi)
	movl	-8148(%rbp,%rsi), %eax
	movl	%eax, -8160(%rbp,%rsi)
	movq	%rbx, -8156(%rbp,%rsi)
	movl	%edi, -8148(%rbp,%rsi)
LBB21_31:                               ##   in Loop: Header=BB21_6 Depth=2
	cmpl	$2, %edx
	je	LBB21_34
## %bb.32:                              ##   in Loop: Header=BB21_6 Depth=2
	leal	-2(%r15), %eax
	movslq	%eax, %rdx
	shlq	$7, %rdx
	vmovsd	-8228(%rbp,%rdx), %xmm0         ## xmm0 = mem[0],zero
	vmovss	-8220(%rbp,%rdx), %xmm1         ## xmm1 = mem[0],zero,zero,zero
	vmovsd	-8240(%rbp,%rdx), %xmm2         ## xmm2 = mem[0],zero
	vmovss	-8232(%rbp,%rdx), %xmm3         ## xmm3 = mem[0],zero,zero,zero
	vsubps	%xmm2, %xmm0, %xmm0
	vmovshdup	%xmm0, %xmm4            ## xmm4 = xmm0[1,1,3,3]
	vsubss	%xmm3, %xmm1, %xmm1
	vmovsd	-8216(%rbp,%rdx), %xmm5         ## xmm5 = mem[0],zero
	vmovss	-8208(%rbp,%rdx), %xmm6         ## xmm6 = mem[0],zero,zero,zero
	vsubps	%xmm2, %xmm5, %xmm2
	vmovshdup	%xmm2, %xmm5            ## xmm5 = xmm2[1,1,3,3]
	vsubss	%xmm3, %xmm6, %xmm3
	vmulss	%xmm5, %xmm1, %xmm6
	vmulss	%xmm3, %xmm4, %xmm7
	vsubss	%xmm6, %xmm7, %xmm6
	vmulss	%xmm0, %xmm3, %xmm3
	vmulss	%xmm2, %xmm1, %xmm1
	vsubss	%xmm3, %xmm1, %xmm1
	vmulss	%xmm4, %xmm2, %xmm2
	vmulss	%xmm5, %xmm0, %xmm0
	vsubss	%xmm2, %xmm0, %xmm0
	vmulss	%xmm1, %xmm9, %xmm1
	vmulss	%xmm6, %xmm8, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vmulss	%xmm0, %xmm10, %xmm0
	vaddss	%xmm1, %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomiss	%xmm0, %xmm1
	jbe	LBB21_34
## %bb.33:                              ##   in Loop: Header=BB21_6 Depth=2
	leaq	(%rdx,%rbp), %rax
	addq	$-8228, %rax                    ## imm = 0xDFDC
	movl	8(%rax), %esi
	movl	%esi, -8264(%rbp)
	movq	(%rax), %rsi
	movq	%rsi, -8272(%rbp)
	movl	20(%rax), %esi
	movl	%esi, 8(%rax)
	movq	12(%rax), %rsi
	movq	%rsi, (%rax)
	movl	-8264(%rbp), %esi
	movl	%esi, 20(%rax)
	movq	-8272(%rbp), %rsi
	movq	%rsi, 12(%rax)
	vpermilps	$78, -8196(%rbp,%rdx), %xmm0 ## xmm0 = mem[2,3,0,1]
	vmovups	%xmm0, -8196(%rbp,%rdx)
	movl	-8160(%rbp,%rdx), %eax
	movl	%eax, -8264(%rbp)
	movq	-8168(%rbp,%rdx), %rsi
	movq	%rsi, -8272(%rbp)
	movq	-8156(%rbp,%rdx), %rdi
	movq	%rdi, -8168(%rbp,%rdx)
	movl	-8148(%rbp,%rdx), %edi
	movl	%edi, -8160(%rbp,%rdx)
	movq	%rsi, -8156(%rbp,%rdx)
	movl	%eax, -8148(%rbp,%rdx)
	jmp	LBB21_34
	.p2align	4, 0x90
LBB21_9:                                ##   in Loop: Header=BB21_4 Depth=1
	testl	%r12d, %r12d
	jle	LBB21_11
## %bb.10:                              ##   in Loop: Header=BB21_4 Depth=1
	movl	%r12d, %edx
	shlq	$7, %rdx
	leaq	-4144(%rbp), %rdi
	leaq	-8240(%rbp), %rsi
	vzeroupper
	callq	_memcpy
	vmovaps	-8544(%rbp), %xmm9              ## 16-byte Reload
LBB21_11:                               ##   in Loop: Header=BB21_4 Depth=1
	cmpq	$3, %r13
	ja	LBB21_13
## %bb.12:                              ##   in Loop: Header=BB21_4 Depth=1
	incq	%r13
	testl	%r12d, %r12d
	jne	LBB21_4
LBB21_13:
	testl	%r12d, %r12d
	jle	LBB21_64
LBB21_14:
	movq	-8504(%rbp), %rax               ## 8-byte Reload
	addq	$96, %rax
	movq	%rax, -8496(%rbp)               ## 8-byte Spill
	movl	%r12d, %eax
	movq	%rax, -8256(%rbp)               ## 8-byte Spill
	leaq	208(%r14), %rax
	movq	%rax, -8368(%rbp)               ## 8-byte Spill
	leaq	1008(%r14), %rax
	movq	%rax, -8248(%rbp)               ## 8-byte Spill
	xorl	%r13d, %r13d
	vbroadcastss	LCPI21_0(%rip), %xmm0   ## xmm0 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	%xmm0, -8352(%rbp)              ## 16-byte Spill
	vbroadcastss	LCPI21_1(%rip), %xmm0   ## xmm0 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vmovaps	%xmm0, -8336(%rbp)              ## 16-byte Spill
	vbroadcastss	LCPI21_3(%rip), %xmm0   ## xmm0 = [5.0E-1,5.0E-1,5.0E-1,5.0E-1]
	vmovaps	%xmm0, -8320(%rbp)              ## 16-byte Spill
	vxorps	%xmm12, %xmm12, %xmm12
	jmp	LBB21_15
	.p2align	4, 0x90
LBB21_63:                               ##   in Loop: Header=BB21_15 Depth=1
	incq	%r13
	cmpq	-8256(%rbp), %r13               ## 8-byte Folded Reload
	je	LBB21_64
LBB21_15:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB21_45 Depth 2
                                        ##       Child Loop BB21_46 Depth 3
	movq	%r13, %rcx
	shlq	$7, %rcx
	leaq	(%rcx,%rbp), %rax
	addq	$-4144, %rax                    ## imm = 0xEFD0
	movq	-8504(%rbp), %rsi               ## 8-byte Reload
	movq	112(%rsi), %rdx
	movq	%rdx, -4032(%rbp,%rcx)
	movq	-8496(%rbp), %rdx               ## 8-byte Reload
	vmovups	(%rdx), %xmm0
	vmovups	%xmm0, -4048(%rbp,%rcx)
	movl	120(%rsi), %edx
	movl	%edx, -4024(%rbp,%rcx)
	testb	$2, %dl
	jne	LBB21_16
## %bb.36:                              ##   in Loop: Header=BB21_15 Depth=1
	vmovsd	(%rax), %xmm3                   ## xmm3 = mem[0],zero
	vmovss	56(%r14), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vxorps	-8352(%rbp), %xmm0, %xmm0       ## 16-byte Folded Reload
	vmovsd	-4132(%rbp,%rcx), %xmm15        ## xmm15 = mem[0],zero
	vmovsd	-4120(%rbp,%rcx), %xmm11        ## xmm11 = mem[0],zero
	vmovaps	%xmm11, -8416(%rbp)             ## 16-byte Spill
	vmovsd	152(%r14), %xmm2                ## xmm2 = mem[0],zero
	vmovsd	(%r14), %xmm1                   ## xmm1 = mem[0],zero
	vcvtdq2ps	%xmm1, %xmm7
	vbroadcastss	%xmm0, %xmm5
	vmulps	%xmm5, %xmm3, %xmm0
	vbroadcastss	-4136(%rbp,%rcx), %xmm1
	vdivps	%xmm1, %xmm0, %xmm0
	vmovaps	%xmm1, %xmm9
	vmovaps	%xmm1, -8400(%rbp)              ## 16-byte Spill
	vaddps	%xmm0, %xmm0, %xmm0
	vdivps	%xmm2, %xmm0, %xmm0
	vmovss	LCPI21_1(%rip), %xmm8           ## xmm8 = mem[0],zero,zero,zero
	vaddps	%xmm0, %xmm8, %xmm1
	vmovaps	-8336(%rbp), %xmm6              ## 16-byte Reload
	vsubps	%xmm0, %xmm6, %xmm0
	vblendps	$2, %xmm0, %xmm1, %xmm0         ## xmm0 = xmm1[0],xmm0[1],xmm1[2,3]
	vmovaps	-8320(%rbp), %xmm4              ## 16-byte Reload
	vmulps	%xmm4, %xmm0, %xmm0
	vmulps	%xmm7, %xmm0, %xmm10
	vmulps	%xmm5, %xmm15, %xmm1
	vbroadcastss	-4124(%rbp,%rcx), %xmm0
	vmovaps	%xmm0, -8432(%rbp)              ## 16-byte Spill
	vdivps	%xmm0, %xmm1, %xmm1
	vaddps	%xmm1, %xmm1, %xmm1
	vdivps	%xmm2, %xmm1, %xmm1
	vaddps	%xmm1, %xmm8, %xmm0
	vsubps	%xmm1, %xmm6, %xmm1
	vblendps	$2, %xmm1, %xmm0, %xmm0         ## xmm0 = xmm0[0],xmm1[1],xmm0[2,3]
	vmulps	%xmm4, %xmm0, %xmm0
	vmulps	%xmm7, %xmm0, %xmm1
	vmulps	%xmm5, %xmm11, %xmm0
	vbroadcastss	-4112(%rbp,%rcx), %xmm5
	vmovaps	%xmm5, -8464(%rbp)              ## 16-byte Spill
	vdivps	%xmm5, %xmm0, %xmm0
	vaddps	%xmm0, %xmm0, %xmm0
	vdivps	%xmm2, %xmm0, %xmm0
	vaddps	%xmm0, %xmm8, %xmm2
	vsubps	%xmm0, %xmm6, %xmm0
	vblendps	$2, %xmm0, %xmm2, %xmm0         ## xmm0 = xmm2[0],xmm0[1],xmm2[2,3]
	vmulps	%xmm4, %xmm0, %xmm0
	vmulps	%xmm7, %xmm0, %xmm7
	vmovss	100(%r14), %xmm0                ## xmm0 = mem[0],zero,zero,zero
	vmovss	104(%r14), %xmm11               ## xmm11 = mem[0],zero,zero,zero
	vmovss	108(%r14), %xmm12               ## xmm12 = mem[0],zero,zero,zero
	vmulss	%xmm3, %xmm0, %xmm2
	vxorps	%xmm8, %xmm8, %xmm8
	vaddss	%xmm2, %xmm8, %xmm2
	vmovshdup	%xmm3, %xmm4            ## xmm4 = xmm3[1,1,3,3]
	vmulss	%xmm4, %xmm11, %xmm5
	vaddss	%xmm2, %xmm5, %xmm2
	vmulss	%xmm9, %xmm12, %xmm5
	vaddss	%xmm2, %xmm5, %xmm5
	vmovsd	64(%r14), %xmm14                ## xmm14 = mem[0],zero
	vmovss	72(%r14), %xmm2                 ## xmm2 = mem[0],zero,zero,zero
	vaddss	%xmm2, %xmm5, %xmm5
	vmovss	%xmm2, -8480(%rbp)              ## 4-byte Spill
	vmovss	%xmm5, -4136(%rbp,%rcx)
	vmovaps	%xmm15, -8384(%rbp)             ## 16-byte Spill
	vmulss	%xmm0, %xmm15, %xmm5
	vaddss	%xmm5, %xmm8, %xmm5
	vmovshdup	%xmm15, %xmm13          ## xmm13 = xmm15[1,1,3,3]
	vmulss	%xmm13, %xmm11, %xmm15
	vaddss	%xmm5, %xmm15, %xmm5
	vmovaps	-8432(%rbp), %xmm9              ## 16-byte Reload
	vmulss	%xmm9, %xmm12, %xmm6
	vaddss	%xmm5, %xmm6, %xmm5
	vaddss	%xmm2, %xmm5, %xmm5
	vmovss	%xmm5, -4124(%rbp,%rcx)
	vmovaps	-8416(%rbp), %xmm2              ## 16-byte Reload
	vmulss	%xmm2, %xmm0, %xmm0
	vaddss	%xmm0, %xmm8, %xmm0
	vmovshdup	%xmm2, %xmm8            ## xmm8 = xmm2[1,1,3,3]
	vmovaps	%xmm2, %xmm15
	vmulss	%xmm8, %xmm11, %xmm6
	vaddss	%xmm0, %xmm6, %xmm0
	vbroadcastss	%xmm3, %xmm3
	vmovaps	-8464(%rbp), %xmm5              ## 16-byte Reload
	vmulss	%xmm5, %xmm12, %xmm6
	vxorps	%xmm12, %xmm12, %xmm12
	vaddss	%xmm0, %xmm6, %xmm11
	vmovss	76(%r14), %xmm6                 ## xmm6 = mem[0],zero,zero,zero
	vinsertps	$16, 88(%r14), %xmm6, %xmm6 ## xmm6 = xmm6[0],mem[0],xmm6[2,3]
	vmulps	%xmm3, %xmm6, %xmm3
	vaddps	%xmm3, %xmm12, %xmm3
	vmovss	80(%r14), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vinsertps	$16, 92(%r14), %xmm0, %xmm0 ## xmm0 = xmm0[0],mem[0],xmm0[2,3]
	vmulps	%xmm4, %xmm0, %xmm4
	vaddps	%xmm3, %xmm4, %xmm3
	vmovss	84(%r14), %xmm4                 ## xmm4 = mem[0],zero,zero,zero
	vinsertps	$16, 96(%r14), %xmm4, %xmm4 ## xmm4 = xmm4[0],mem[0],xmm4[2,3]
	vmulps	-8400(%rbp), %xmm4, %xmm2       ## 16-byte Folded Reload
	vaddps	%xmm3, %xmm2, %xmm2
	vaddps	%xmm2, %xmm14, %xmm2
	vmovlps	%xmm2, (%rax)
	vbroadcastss	-8384(%rbp), %xmm2      ## 16-byte Folded Reload
	vmulps	%xmm2, %xmm6, %xmm2
	vaddps	%xmm2, %xmm12, %xmm2
	vmulps	%xmm0, %xmm13, %xmm3
	vaddps	%xmm2, %xmm3, %xmm2
	vmulps	%xmm4, %xmm9, %xmm3
	vaddps	%xmm2, %xmm3, %xmm2
	vaddps	%xmm2, %xmm14, %xmm2
	vmovlps	%xmm2, -4132(%rbp,%rcx)
	vbroadcastss	%xmm15, %xmm2
	vmulps	%xmm2, %xmm6, %xmm2
	vmulps	%xmm0, %xmm8, %xmm0
	vaddps	%xmm2, %xmm12, %xmm2
	vaddps	%xmm2, %xmm0, %xmm0
	vmulps	%xmm5, %xmm4, %xmm2
	vaddps	%xmm0, %xmm2, %xmm0
	vaddps	%xmm0, %xmm14, %xmm0
	vaddss	-8480(%rbp), %xmm11, %xmm2      ## 4-byte Folded Reload
	vmovlps	%xmm0, -4120(%rbp,%rcx)
	vmovss	%xmm2, -4112(%rbp,%rcx)
	jmp	LBB21_37
	.p2align	4, 0x90
LBB21_16:                               ##   in Loop: Header=BB21_15 Depth=1
	vmovsd	(%rsi), %xmm10                  ## xmm10 = mem[0],zero
	vmovsd	12(%rsi), %xmm1                 ## xmm1 = mem[0],zero
	vmovsd	24(%rsi), %xmm7                 ## xmm7 = mem[0],zero
LBB21_37:                               ##   in Loop: Header=BB21_15 Depth=1
	vminps	%xmm1, %xmm7, %xmm0
	vcmpunordps	%xmm1, %xmm1, %xmm2
	vblendvps	%xmm2, %xmm7, %xmm0, %xmm0
	vminps	%xmm10, %xmm0, %xmm3
	vcmpunordps	%xmm10, %xmm10, %xmm4
	vblendvps	%xmm4, %xmm0, %xmm3, %xmm0
	vmaxps	%xmm1, %xmm7, %xmm1
	vblendvps	%xmm2, %xmm7, %xmm1, %xmm1
	vmaxps	%xmm10, %xmm1, %xmm2
	vblendvps	%xmm4, %xmm1, %xmm2, %xmm1
	vroundps	$9, %xmm0, %xmm0
	vcvttps2dq	%xmm0, %xmm0
	vroundps	$10, %xmm1, %xmm1
	vcvttps2dq	%xmm1, %xmm2
	vpmaxsd	%xmm12, %xmm0, %xmm1
	vmovq	(%r14), %xmm0                   ## xmm0 = mem[0],zero
	vpminsd	%xmm2, %xmm0, %xmm0
	vpcmpgtd	%xmm1, %xmm0, %xmm2
	vpmovsxdq	%xmm2, %xmm2
	vmovmskpd	%xmm2, %ecx
	cmpb	$3, %cl
	jne	LBB21_63
## %bb.38:                              ##   in Loop: Header=BB21_15 Depth=1
	movslq	200(%r14), %rcx
	cmpl	176(%r14), %ecx
	jge	LBB21_39
## %bb.42:                              ##   in Loop: Header=BB21_15 Depth=1
	movq	184(%r14), %rdx
	leal	1(%rcx), %esi
	movl	%esi, 200(%r14)
	shlq	$7, %rcx
	vmovupd	(%rax), %ymm2
	vmovups	32(%rax), %ymm3
	vmovups	64(%rax), %ymm4
	vmovups	96(%rax), %ymm5
	vmovups	%ymm5, 96(%rdx,%rcx)
	vmovups	%ymm4, 64(%rdx,%rcx)
	vmovups	%ymm3, 32(%rdx,%rcx)
	vmovupd	%ymm2, (%rdx,%rcx)
	movslq	(%r14), %rax
	imulq	$1717986919, %rax, %rsi         ## imm = 0x66666667
	movq	%rsi, %rax
	shrq	$63, %rax
	shrq	$32, %rsi
	sarl	$2, %esi
	addl	%eax, %esi
	movslq	4(%r14), %rax
	imulq	$1717986919, %rax, %rbx         ## imm = 0x66666667
	movq	%rbx, %rax
	shrq	$63, %rax
	shrq	$32, %rbx
	sarl	$2, %ebx
	addl	%eax, %ebx
	vmovd	%xmm1, %r8d
	movl	%r8d, %eax
	cltd
	idivl	%esi
	movl	%eax, %r10d
	vpextrd	$1, %xmm1, %ecx
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %r15d
	vmovd	%xmm0, %edi
	leal	(%rdi,%rsi), %eax
	decl	%eax
	cltd
	idivl	%esi
	movl	%eax, %r9d
	vpextrd	$1, %xmm0, %esi
	leal	(%rsi,%rbx), %eax
	decl	%eax
	cltd
	idivl	%ebx
	cmpl	%eax, %r15d
	jge	LBB21_63
## %bb.43:                              ##   in Loop: Header=BB21_15 Depth=1
	cmpl	%r9d, %r10d
	jge	LBB21_63
## %bb.44:                              ##   in Loop: Header=BB21_15 Depth=1
	vcvtsi2ss	%r8d, %xmm13, %xmm8
	vcvtsi2ss	%ecx, %xmm13, %xmm14
	vcvtsi2ss	%edi, %xmm13, %xmm0
	vcvtsi2ss	%esi, %xmm13, %xmm1
	movslq	%r10d, %rcx
	movq	%r10, %rsi
	movslq	%r15d, %r10
	movslq	%eax, %r12
	movslq	%r9d, %r8
	leaq	(%r10,%r10,4), %rax
	leaq	(%rcx,%rax,2), %rax
	movq	-8368(%rbp), %rdx               ## 8-byte Reload
	leaq	(%rdx,%rax,8), %r9
	movq	-8248(%rbp), %rdx               ## 8-byte Reload
	leaq	(%rdx,%rax,4), %r11
	leal	(%r15,%r15,4), %eax
	leal	(%rsi,%rax,2), %r15d
	subq	%rcx, %r8
	jmp	LBB21_45
	.p2align	4, 0x90
LBB21_62:                               ##   in Loop: Header=BB21_45 Depth=2
	incq	%r10
	addq	$80, %r9
	addq	$40, %r11
	addq	$10, %r15
	cmpq	%r12, %r10
	je	LBB21_63
LBB21_45:                               ##   Parent Loop BB21_15 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB21_46 Depth 3
	xorl	%ecx, %ecx
	jmp	LBB21_46
	.p2align	4, 0x90
LBB21_61:                               ##   in Loop: Header=BB21_46 Depth=3
	incq	%rcx
	cmpq	%rcx, %r8
	je	LBB21_62
LBB21_46:                               ##   Parent Loop BB21_15 Depth=1
                                        ##     Parent Loop BB21_45 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	leaq	(%r15,%rcx), %rdx
	movslq	(%r14), %rsi
	imulq	$1717986919, %rsi, %rdi         ## imm = 0x66666667
	movq	%rdi, %rsi
	shrq	$63, %rsi
	sarq	$34, %rdi
	addl	%esi, %edi
	movslq	%edx, %rsi
	imulq	$1717986919, %rsi, %rbx         ## imm = 0x66666667
	movq	%rbx, %rdx
	shrq	$63, %rdx
	sarq	$34, %rbx
	addl	%edx, %ebx
	leal	(%rbx,%rbx), %edx
	leal	(%rdx,%rdx,4), %edx
	subl	%edx, %esi
	imull	%edi, %esi
	movslq	4(%r14), %rdx
	imulq	$1717986919, %rdx, %rdx         ## imm = 0x66666667
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$34, %rdx
	addl	%eax, %edx
	vcvtsi2ss	%esi, %xmm9, %xmm2
	addl	%esi, %edi
	vcvtsi2ss	%edi, %xmm9, %xmm3
	imull	%edx, %ebx
	addl	%ebx, %edx
	vucomiss	%xmm8, %xmm2
	vmovaps	%xmm2, %xmm6
	ja	LBB21_49
## %bb.47:                              ##   in Loop: Header=BB21_46 Depth=3
	vucomiss	%xmm3, %xmm8
	vmovaps	%xmm8, %xmm6
	jbe	LBB21_49
## %bb.48:                              ##   in Loop: Header=BB21_46 Depth=3
	vmovaps	%xmm3, %xmm6
LBB21_49:                               ##   in Loop: Header=BB21_46 Depth=3
	vcvtsi2ss	%ebx, %xmm9, %xmm4
	vcvtsi2ss	%edx, %xmm9, %xmm5
	vucomiss	%xmm14, %xmm4
	vmovaps	%xmm4, %xmm7
	ja	LBB21_52
## %bb.50:                              ##   in Loop: Header=BB21_46 Depth=3
	vucomiss	%xmm5, %xmm14
	vmovaps	%xmm14, %xmm7
	jbe	LBB21_52
## %bb.51:                              ##   in Loop: Header=BB21_46 Depth=3
	vmovaps	%xmm5, %xmm7
LBB21_52:                               ##   in Loop: Header=BB21_46 Depth=3
	vucomiss	%xmm0, %xmm2
	ja	LBB21_55
## %bb.53:                              ##   in Loop: Header=BB21_46 Depth=3
	vucomiss	%xmm3, %xmm0
	vmovaps	%xmm0, %xmm2
	jbe	LBB21_55
## %bb.54:                              ##   in Loop: Header=BB21_46 Depth=3
	vmovaps	%xmm3, %xmm2
LBB21_55:                               ##   in Loop: Header=BB21_46 Depth=3
	vucomiss	%xmm1, %xmm4
	ja	LBB21_58
## %bb.56:                              ##   in Loop: Header=BB21_46 Depth=3
	vucomiss	%xmm5, %xmm1
	vmovaps	%xmm1, %xmm4
	jbe	LBB21_58
## %bb.57:                              ##   in Loop: Header=BB21_46 Depth=3
	vmovaps	%xmm5, %xmm4
LBB21_58:                               ##   in Loop: Header=BB21_46 Depth=3
	vcvttss2si	%xmm6, %eax
	vcvttss2si	%xmm2, %edx
	cmpl	%edx, %eax
	jge	LBB21_61
## %bb.59:                              ##   in Loop: Header=BB21_46 Depth=3
	vcvttss2si	%xmm4, %eax
	vcvttss2si	%xmm7, %edx
	cmpl	%eax, %edx
	jge	LBB21_61
## %bb.60:                              ##   in Loop: Header=BB21_46 Depth=3
	movl	200(%r14), %eax
	decl	%eax
	movq	(%r9,%rcx,8), %rdx
	movslq	(%r11,%rcx,4), %rsi
	leal	1(%rsi), %edi
	movl	%edi, (%r11,%rcx,4)
	movl	%eax, (%rdx,%rsi,4)
	jmp	LBB21_61
LBB21_64:
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	subq	-8520(%rbp), %rdx
	movq	_timed_blocks(%rip), %rcx
	movslq	-8524(%rbp), %rsi
	shlq	$7, %rsi
	movslq	-8528(%rbp), %rax
	addq	%rsi, %rax
	imulq	$56, %rax, %rax
	addq	%rdx, 40(%rcx,%rax)
	movq	_g_thread_info@TLVP(%rip), %rdi
	vzeroupper
	callq	*(%rdi)
	movslq	516(%rax), %rbx
	movl	%ebx, %edi
	decl	%edi
	movl	%edi, 516(%rax)
	je	LBB21_66
## %bb.65:
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movslq	-4(%rax,%rbx,4), %rax
	movslq	%esi, %rsi
	addq	%rax, %rsi
	imulq	$56, %rsi, %rax
	addq	%rdx, 48(%rcx,%rax)
LBB21_66:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB21_68
## %bb.67:
	addq	$8728, %rsp                     ## imm = 0x2218
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB21_39:
Ltmp0:
	leaq	L___FUNCTION__._Z13push_triangleP14Render_ContextP8Triangle(%rip), %rdi
	leaq	L_.str.12(%rip), %rsi
	leaq	L_.str.14(%rip), %rcx
	movl	$346, %edx                      ## imm = 0x15A
	vzeroupper
	callq	___assert_rtn
Ltmp1:
## %bb.40:
	ud2
LBB21_68:
	callq	___stack_chk_fail
LBB21_41:
Ltmp2:
	movq	%rax, %rbx
	leaq	-8528(%rbp), %rdi
	callq	__ZN10TimedBlockD1Ev
	movq	%rbx, %rdi
	callq	__Unwind_Resume
Lfunc_end0:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.p2align	2
GCC_except_table21:
Lexception0:
	.byte	255                             ## @LPStart Encoding = omit
	.byte	255                             ## @TType Encoding = omit
	.byte	1                               ## Call site Encoding = uleb128
	.uleb128 Lcst_end0-Lcst_begin0
Lcst_begin0:
	.uleb128 Lfunc_begin0-Lfunc_begin0      ## >> Call Site 1 <<
	.uleb128 Ltmp0-Lfunc_begin0             ##   Call between Lfunc_begin0 and Ltmp0
	.byte	0                               ##     has no landing pad
	.byte	0                               ##   On action: cleanup
	.uleb128 Ltmp0-Lfunc_begin0             ## >> Call Site 2 <<
	.uleb128 Ltmp1-Ltmp0                    ##   Call between Ltmp0 and Ltmp1
	.uleb128 Ltmp2-Lfunc_begin0             ##     jumps to Ltmp2
	.byte	0                               ##   On action: cleanup
	.uleb128 Ltmp1-Lfunc_begin0             ## >> Call Site 3 <<
	.uleb128 Lfunc_end0-Ltmp1               ##   Call between Ltmp1 and Lfunc_end0
	.byte	0                               ##     has no landing pad
	.byte	0                               ##   On action: cleanup
Lcst_end0:
	.p2align	2
                                        ## -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN10TimedBlockD1Ev            ## -- Begin function _ZN10TimedBlockD1Ev
	.weak_def_can_be_hidden	__ZN10TimedBlockD1Ev
	.p2align	4, 0x90
__ZN10TimedBlockD1Ev:                   ## @_ZN10TimedBlockD1Ev
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	subq	8(%rdi), %rdx
	movq	_timed_blocks(%rip), %r8
	movslq	4(%rdi), %rsi
	shlq	$7, %rsi
	movslq	(%rdi), %rax
	addq	%rsi, %rax
	imulq	$56, %rax, %rax
	addq	%rdx, 40(%r8,%rax)
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movslq	516(%rax), %rcx
	movl	%ecx, %edi
	decl	%edi
	movl	%edi, 516(%rax)
	je	LBB22_2
## %bb.1:
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movslq	-4(%rax,%rcx,4), %rax
	movslq	%esi, %rcx
	addq	%rax, %rcx
	imulq	$56, %rcx, %rax
	addq	%rdx, 48(%r8,%rax)
LBB22_2:
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z9push_cubeP14Render_Context2v3S1_2v4S1_S1_S1_
LCPI23_0:
	.long	0x3727c5ac                      ## float 9.99999974E-6
LCPI23_1:
	.long	0x3f800000                      ## float 1
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4
LCPI23_2:
	.long	0x00000000                      ## float 0
	.long	0x3f800000                      ## float 1
	.space	4
	.space	4
LCPI23_3:
	.space	16
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z9push_cubeP14Render_Context2v3S1_2v4S1_S1_S1_
	.p2align	4, 0x90
__Z9push_cubeP14Render_Context2v3S1_2v4S1_S1_S1_: ## @_Z9push_cubeP14Render_Context2v3S1_2v4S1_S1_S1_
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$664, %rsp                      ## imm = 0x298
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovaps	%xmm5, -544(%rbp)               ## 16-byte Spill
	vmovaps	%xmm4, -704(%rbp)               ## 16-byte Spill
	vmovaps	%xmm0, %xmm13
	movq	%rdi, %r14
	leaq	16(%rbp), %rcx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	vmulps	%xmm6, %xmm6, %xmm4
	vmovshdup	%xmm4, %xmm4            ## xmm4 = xmm4[1,1,3,3]
	vmulss	%xmm6, %xmm6, %xmm5
	vaddss	%xmm4, %xmm5, %xmm4
	vmulss	%xmm7, %xmm7, %xmm5
	vaddss	%xmm4, %xmm5, %xmm4
	vsqrtss	%xmm4, %xmm4, %xmm5
	vxorps	%xmm8, %xmm8, %xmm8
	vxorps	%xmm9, %xmm9, %xmm9
	vmovss	LCPI23_0(%rip), %xmm0           ## xmm0 = mem[0],zero,zero,zero
	vucomiss	%xmm5, %xmm0
	vxorps	%xmm10, %xmm10, %xmm10
	vxorps	%xmm12, %xmm12, %xmm12
	jae	LBB23_2
## %bb.1:
	vmovss	LCPI23_1(%rip), %xmm4           ## xmm4 = mem[0],zero,zero,zero
	vdivss	%xmm5, %xmm4, %xmm4
	vbroadcastss	%xmm4, %xmm5
	vmulps	%xmm6, %xmm5, %xmm10
	vmulss	%xmm7, %xmm4, %xmm12
LBB23_2:
	leaq	32(%rbp), %rax
	vbroadcastss	%xmm2, %xmm11
	vmovsd	(%rcx), %xmm7                   ## xmm7 = mem[0],zero
	vmovss	8(%rcx), %xmm5                  ## xmm5 = mem[0],zero,zero,zero
	vmulps	%xmm7, %xmm7, %xmm6
	vmovshdup	%xmm6, %xmm6            ## xmm6 = xmm6[1,1,3,3]
	vmulss	%xmm7, %xmm7, %xmm4
	vaddss	%xmm6, %xmm4, %xmm4
	vmulss	%xmm5, %xmm5, %xmm6
	vaddss	%xmm4, %xmm6, %xmm4
	vsqrtss	%xmm4, %xmm4, %xmm6
	vmovss	LCPI23_0(%rip), %xmm0           ## xmm0 = mem[0],zero,zero,zero
	vucomiss	%xmm6, %xmm0
	jae	LBB23_4
## %bb.3:
	vmovss	LCPI23_1(%rip), %xmm4           ## xmm4 = mem[0],zero,zero,zero
	vdivss	%xmm6, %xmm4, %xmm4
	vbroadcastss	%xmm4, %xmm6
	vmulps	%xmm6, %xmm7, %xmm9
	vmulss	%xmm4, %xmm5, %xmm8
LBB23_4:
	vmulps	%xmm10, %xmm11, %xmm6
	vmulss	%xmm2, %xmm12, %xmm11
	vmovshdup	%xmm2, %xmm2            ## xmm2 = xmm2[1,1,3,3]
	vmulps	%xmm2, %xmm9, %xmm15
	vmulss	%xmm2, %xmm8, %xmm2
	vmovlps	%xmm15, (%rcx)
	vmovss	%xmm2, 8(%rcx)
	vmovsd	(%rax), %xmm4                   ## xmm4 = mem[0],zero
	vmovss	8(%rax), %xmm8                  ## xmm8 = mem[0],zero,zero,zero
	vmulps	%xmm4, %xmm4, %xmm5
	vmovshdup	%xmm5, %xmm5            ## xmm5 = xmm5[1,1,3,3]
	vmulss	%xmm4, %xmm4, %xmm7
	vaddss	%xmm5, %xmm7, %xmm5
	vmulss	%xmm8, %xmm8, %xmm7
	vaddss	%xmm5, %xmm7, %xmm5
	vsqrtss	%xmm5, %xmm5, %xmm7
	vxorps	%xmm9, %xmm9, %xmm9
	vmovss	LCPI23_0(%rip), %xmm0           ## xmm0 = mem[0],zero,zero,zero
	vucomiss	%xmm7, %xmm0
	vxorps	%xmm5, %xmm5, %xmm5
	jae	LBB23_6
## %bb.5:
	vmovss	LCPI23_1(%rip), %xmm5           ## xmm5 = mem[0],zero,zero,zero
	vdivss	%xmm7, %xmm5, %xmm7
	vbroadcastss	%xmm7, %xmm5
	vmulps	%xmm5, %xmm4, %xmm5
	vmulss	%xmm7, %xmm8, %xmm9
LBB23_6:
	vbroadcastss	%xmm3, %xmm4
	vmulps	%xmm4, %xmm5, %xmm4
	vmulss	%xmm3, %xmm9, %xmm14
	vmovlps	%xmm4, (%rax)
	vmovss	%xmm14, 8(%rax)
	vsubss	%xmm11, %xmm1, %xmm3
	vsubss	%xmm2, %xmm3, %xmm12
	vaddss	%xmm1, %xmm11, %xmm1
	vsubss	%xmm2, %xmm1, %xmm10
	vaddss	%xmm2, %xmm1, %xmm0
	vaddss	%xmm2, %xmm3, %xmm5
	vaddps	%xmm6, %xmm13, %xmm1
	vaddps	%xmm1, %xmm15, %xmm2
	vaddps	%xmm4, %xmm2, %xmm11
	vsubps	%xmm15, %xmm1, %xmm1
	vaddps	%xmm4, %xmm1, %xmm9
	vmovaps	%xmm13, %xmm3
	vsubps	%xmm4, %xmm1, %xmm13
	vsubps	%xmm4, %xmm2, %xmm2
	vsubps	%xmm6, %xmm3, %xmm3
	vaddps	%xmm3, %xmm15, %xmm6
	vaddps	%xmm4, %xmm6, %xmm1
	vsubps	%xmm15, %xmm3, %xmm3
	vaddps	%xmm4, %xmm3, %xmm7
	vsubps	%xmm4, %xmm3, %xmm15
	vsubps	%xmm4, %xmm6, %xmm3
	vmovaps	%xmm3, -688(%rbp)               ## 16-byte Spill
	vaddss	%xmm14, %xmm12, %xmm6
	vsubss	%xmm14, %xmm12, %xmm8
	vaddss	%xmm14, %xmm10, %xmm12
	vsubss	%xmm14, %xmm10, %xmm10
	vaddss	%xmm0, %xmm14, %xmm4
	vsubss	%xmm14, %xmm0, %xmm3
	vaddss	%xmm5, %xmm14, %xmm0
	vsubss	%xmm14, %xmm5, %xmm14
	vmovlps	%xmm7, -528(%rbp)
	vmovss	%xmm6, -520(%rbp)
	vmovlps	%xmm9, -516(%rbp)
	vmovss	%xmm12, -508(%rbp)
	vmovlps	%xmm11, -504(%rbp)
	vmovss	%xmm4, -496(%rbp)
	movl	$0, -492(%rbp)
	vmovlps	%xmm7, -488(%rbp)
	vmovss	%xmm6, -480(%rbp)
	vmovlps	%xmm11, -476(%rbp)
	vmovss	%xmm4, -468(%rbp)
	vmovlps	%xmm1, -464(%rbp)
	vmovss	%xmm0, -456(%rbp)
	movl	$0, -452(%rbp)
	vmovlps	%xmm15, -448(%rbp)
	vmovss	%xmm8, -440(%rbp)
	vmovlps	%xmm2, -436(%rbp)
	vmovss	%xmm3, -428(%rbp)
	vmovlps	%xmm13, -424(%rbp)
	vmovss	%xmm10, -416(%rbp)
	movl	$1, -412(%rbp)
	vmovlps	%xmm15, -408(%rbp)
	vmovss	%xmm8, -400(%rbp)
	vmovaps	-688(%rbp), %xmm5               ## 16-byte Reload
	vmovlps	%xmm5, -396(%rbp)
	vmovss	%xmm14, -388(%rbp)
	vmovlps	%xmm2, -384(%rbp)
	vmovss	%xmm3, -376(%rbp)
	movl	$1, -372(%rbp)
	vmovlps	%xmm9, -368(%rbp)
	vmovss	%xmm12, -360(%rbp)
	vmovlps	%xmm13, -356(%rbp)
	vmovss	%xmm10, -348(%rbp)
	vmovlps	%xmm2, -344(%rbp)
	vmovss	%xmm3, -336(%rbp)
	movl	$0, -332(%rbp)
	vmovlps	%xmm9, -328(%rbp)
	vmovss	%xmm12, -320(%rbp)
	vmovlps	%xmm2, -316(%rbp)
	vmovss	%xmm3, -308(%rbp)
	vmovlps	%xmm11, -304(%rbp)
	vmovss	%xmm4, -296(%rbp)
	movl	$0, -292(%rbp)
	vmovlps	%xmm15, -288(%rbp)
	vmovss	%xmm8, -280(%rbp)
	vmovlps	%xmm7, -276(%rbp)
	vmovss	%xmm6, -268(%rbp)
	vmovlps	%xmm1, -264(%rbp)
	vmovss	%xmm0, -256(%rbp)
	movl	$0, -252(%rbp)
	vmovlps	%xmm15, -248(%rbp)
	vmovss	%xmm8, -240(%rbp)
	vmovlps	%xmm1, -236(%rbp)
	vmovss	%xmm0, -228(%rbp)
	vmovlps	%xmm5, -224(%rbp)
	vmovss	%xmm14, -216(%rbp)
	movl	$0, -212(%rbp)
	vmovlps	%xmm1, -208(%rbp)
	vmovss	%xmm0, -200(%rbp)
	vmovlps	%xmm11, -196(%rbp)
	vmovss	%xmm4, -188(%rbp)
	vmovlps	%xmm2, -184(%rbp)
	vmovss	%xmm3, -176(%rbp)
	movl	$0, -172(%rbp)
	vmovlps	%xmm1, -168(%rbp)
	vmovss	%xmm0, -160(%rbp)
	vmovlps	%xmm2, -156(%rbp)
	vmovss	%xmm3, -148(%rbp)
	vmovlps	%xmm5, -144(%rbp)
	vmovss	%xmm14, -136(%rbp)
	movl	$0, -132(%rbp)
	vmovlps	%xmm7, -128(%rbp)
	vmovss	%xmm6, -120(%rbp)
	vmovlps	%xmm13, -116(%rbp)
	vmovss	%xmm10, -108(%rbp)
	vmovlps	%xmm9, -104(%rbp)
	vmovss	%xmm12, -96(%rbp)
	movl	$1, -92(%rbp)
	vmovlps	%xmm7, -88(%rbp)
	vmovss	%xmm6, -80(%rbp)
	vmovlps	%xmm15, -76(%rbp)
	vmovss	%xmm8, -68(%rbp)
	vmovlps	%xmm13, -64(%rbp)
	vmovss	%xmm10, -56(%rbp)
	movl	$1, -52(%rbp)
	leaq	-660(%rbp), %r12
	leaq	-528(%rbp), %rbx
	xorl	%r13d, %r13d
	vmovaps	-704(%rbp), %xmm0               ## 16-byte Reload
	vunpcklpd	-544(%rbp), %xmm0, %xmm0 ## 16-byte Folded Reload
                                        ## xmm0 = xmm0[0],mem[0]
	vmovaps	%xmm0, -544(%rbp)               ## 16-byte Spill
	leaq	-672(%rbp), %r15
	jmp	LBB23_7
	.p2align	4, 0x90
LBB23_18:                               ##   in Loop: Header=BB23_7 Depth=1
	vmovlps	%xmm0, -612(%rbp)
	vmovss	%xmm4, -604(%rbp)
	vmovlps	%xmm0, -600(%rbp)
	vmovss	%xmm4, -592(%rbp)
	vmovlps	%xmm0, -588(%rbp)
	vmovss	%xmm4, -580(%rbp)
	vmovaps	-544(%rbp), %xmm0               ## 16-byte Reload
	vmovups	%xmm0, -576(%rbp)
	movq	%r14, %rdi
	movq	%r15, %rsi
	callq	__Z13push_triangleP14Render_ContextP8Triangle
	incq	%r13
	addq	$40, %rbx
	cmpq	$12, %r13
	je	LBB23_13
LBB23_7:                                ## =>This Inner Loop Header: Depth=1
	vbroadcastss	LCPI23_1(%rip), %xmm0   ## xmm0 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vmovss	LCPI23_1(%rip), %xmm1           ## xmm1 = mem[0],zero,zero,zero
	testb	$1, %r13b
	jne	LBB23_8
## %bb.9:                               ##   in Loop: Header=BB23_7 Depth=1
	jne	LBB23_10
LBB23_11:                               ##   in Loop: Header=BB23_7 Depth=1
	cmpl	$0, 36(%rbx)
	je	LBB23_12
LBB23_15:                               ##   in Loop: Header=BB23_7 Depth=1
	vmovaps	%xmm0, %xmm2
	jmp	LBB23_16
	.p2align	4, 0x90
LBB23_8:                                ##   in Loop: Header=BB23_7 Depth=1
	vmovaps	%xmm0, %xmm1
	je	LBB23_11
LBB23_10:                               ##   in Loop: Header=BB23_7 Depth=1
	vmovaps	LCPI23_2(%rip), %xmm0           ## xmm0 = <0.0E+0,1.0E+0,u,u>
	cmpl	$0, 36(%rbx)
	jne	LBB23_15
LBB23_12:                               ##   in Loop: Header=BB23_7 Depth=1
	vmovaps	%xmm1, %xmm2
	vmovaps	%xmm0, %xmm1
LBB23_16:                               ##   in Loop: Header=BB23_7 Depth=1
	movl	8(%rbx), %eax
	movl	%eax, -664(%rbp)
	movq	(%rbx), %rax
	movq	%rax, -672(%rbp)
	movl	20(%rbx), %eax
	movl	%eax, 8(%r12)
	movq	12(%rbx), %rax
	movq	%rax, (%r12)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, 100(%r12)
	movl	32(%rbx), %eax
	movl	%eax, 20(%r12)
	movq	24(%rbx), %rax
	movq	%rax, 12(%r12)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovlhps	%xmm2, %xmm0, %xmm2             ## xmm2 = xmm0[0],xmm2[0]
	vmovups	%xmm2, -636(%rbp)
	vmovlps	%xmm1, -620(%rbp)
	vmovsd	-660(%rbp), %xmm1               ## xmm1 = mem[0],zero
	vmovss	-652(%rbp), %xmm2               ## xmm2 = mem[0],zero,zero,zero
	vmovsd	-672(%rbp), %xmm3               ## xmm3 = mem[0],zero
	vmovss	-664(%rbp), %xmm4               ## xmm4 = mem[0],zero,zero,zero
	vsubps	%xmm3, %xmm1, %xmm5
	vmovshdup	%xmm5, %xmm6            ## xmm6 = xmm5[1,1,3,3]
	vsubss	%xmm4, %xmm2, %xmm2
	vmovsd	-648(%rbp), %xmm1               ## xmm1 = mem[0],zero
	vmovss	-640(%rbp), %xmm7               ## xmm7 = mem[0],zero,zero,zero
	vsubps	%xmm3, %xmm1, %xmm3
	vmovshdup	%xmm3, %xmm1            ## xmm1 = xmm3[1,1,3,3]
	vsubss	%xmm4, %xmm7, %xmm4
	vmulss	%xmm1, %xmm2, %xmm8
	vmulss	%xmm4, %xmm6, %xmm7
	vsubss	%xmm8, %xmm7, %xmm7
	vmulss	%xmm5, %xmm4, %xmm4
	vmulss	%xmm3, %xmm2, %xmm2
	vsubss	%xmm4, %xmm2, %xmm2
	vmulss	%xmm6, %xmm3, %xmm3
	vmulss	%xmm1, %xmm5, %xmm1
	vsubss	%xmm3, %xmm1, %xmm3
	vmulss	%xmm2, %xmm2, %xmm1
	vmulss	%xmm7, %xmm7, %xmm4
	vaddss	%xmm1, %xmm4, %xmm1
	vmulss	%xmm3, %xmm3, %xmm4
	vaddss	%xmm1, %xmm4, %xmm1
	vsqrtss	%xmm1, %xmm1, %xmm5
	vxorps	%xmm4, %xmm4, %xmm4
	vmovss	LCPI23_0(%rip), %xmm1           ## xmm1 = mem[0],zero,zero,zero
	vucomiss	%xmm5, %xmm1
	jae	LBB23_18
## %bb.17:                              ##   in Loop: Header=BB23_7 Depth=1
	vmovss	LCPI23_1(%rip), %xmm0           ## xmm0 = mem[0],zero,zero,zero
	vdivss	%xmm5, %xmm0, %xmm1
	vmulss	%xmm1, %xmm7, %xmm0
	vmulss	%xmm1, %xmm2, %xmm2
	vinsertps	$16, %xmm2, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm2[0],xmm0[2,3]
	vmulss	%xmm1, %xmm3, %xmm4
	jmp	LBB23_18
LBB23_13:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB23_19
## %bb.14:
	addq	$664, %rsp                      ## imm = 0x298
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB23_19:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	__Z15clip_line_pointRiS_iiii    ## -- Begin function _Z15clip_line_pointRiS_iiii
	.p2align	4, 0x90
__Z15clip_line_pointRiS_iiii:           ## @_Z15clip_line_pointRiS_iiii
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
                                        ## kill: def $r9d killed $r9d def $r9
                                        ## kill: def $r8d killed $r8d def $r8
	movl	(%rdi), %r10d
	testl	%r10d, %r10d
	js	LBB24_1
## %bb.2:
	cmpl	%r8d, %r10d
	jge	LBB24_3
LBB24_4:
	movl	(%rsi), %r11d
	testl	%r11d, %r11d
	js	LBB24_5
LBB24_6:
	cmpl	%r9d, %r11d
	jge	LBB24_7
LBB24_8:
	movl	(%rdi), %ecx
	testl	%ecx, %ecx
	js	LBB24_9
LBB24_10:
	testl	%r11d, %r11d
	js	LBB24_11
LBB24_12:
	cmpl	%r8d, %ecx
	jge	LBB24_13
LBB24_14:
	cmpl	%r9d, %r11d
	jge	LBB24_15
LBB24_16:
	popq	%rbp
	retq
LBB24_1:
	vcvtsi2ss	%r10d, %xmm0, %xmm0
	movl	%edx, %eax
	subl	%r10d, %eax
	vcvtsi2ss	%eax, %xmm1, %xmm1
	movl	(%rsi), %r10d
	movl	%ecx, %eax
	subl	%r10d, %eax
	vcvtsi2ss	%eax, %xmm2, %xmm2
	vdivss	%xmm1, %xmm0, %xmm0
	vcvtsi2ss	%r10d, %xmm3, %xmm1
	vmulss	%xmm2, %xmm0, %xmm0
	vsubss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, (%rsi)
	movl	$0, (%rdi)
	xorl	%r10d, %r10d
	cmpl	%r8d, %r10d
	jl	LBB24_4
LBB24_3:
	leal	-1(%r8), %r11d
	movl	%r11d, %eax
	subl	%r10d, %eax
	vcvtsi2ss	%eax, %xmm3, %xmm0
	movl	%edx, %eax
	subl	%r10d, %eax
	vcvtsi2ss	%eax, %xmm3, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movl	(%rsi), %r10d
	movl	%ecx, %eax
	subl	%r10d, %eax
	vcvtsi2ss	%eax, %xmm3, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	vcvtsi2ss	%r10d, %xmm3, %xmm1
	vaddss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, (%rsi)
	movl	%r11d, (%rdi)
	movl	%r11d, %r10d
	movl	(%rsi), %r11d
	testl	%r11d, %r11d
	jns	LBB24_6
LBB24_5:
	vcvtsi2ss	%r11d, %xmm3, %xmm0
	movl	%ecx, %eax
	subl	%r11d, %eax
	vcvtsi2ss	%eax, %xmm3, %xmm1
	movl	%edx, %eax
	subl	%r10d, %eax
	vcvtsi2ss	%eax, %xmm3, %xmm2
	vdivss	%xmm1, %xmm0, %xmm0
	vcvtsi2ss	%r10d, %xmm3, %xmm1
	vmulss	%xmm2, %xmm0, %xmm0
	vsubss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, (%rdi)
	movl	$0, (%rsi)
	xorl	%r11d, %r11d
	cmpl	%r9d, %r11d
	jl	LBB24_8
LBB24_7:
	leal	-1(%r9), %r10d
	movl	%r10d, %eax
	subl	%r11d, %eax
	vcvtsi2ss	%eax, %xmm3, %xmm0
	subl	%r11d, %ecx
	vcvtsi2ss	%ecx, %xmm3, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movl	(%rdi), %eax
	subl	%eax, %edx
	vcvtsi2ss	%edx, %xmm3, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	vcvtsi2ss	%eax, %xmm3, %xmm1
	vaddss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, (%rdi)
	movl	%r10d, (%rsi)
	movl	%r10d, %r11d
	movl	(%rdi), %ecx
	testl	%ecx, %ecx
	jns	LBB24_10
LBB24_9:
	movl	$0, (%rdi)
	movl	(%rsi), %r11d
	xorl	%ecx, %ecx
	testl	%r11d, %r11d
	jns	LBB24_12
LBB24_11:
	movl	$0, (%rsi)
	movl	(%rdi), %ecx
	xorl	%r11d, %r11d
	cmpl	%r8d, %ecx
	jl	LBB24_14
LBB24_13:
	decl	%r8d
	movl	%r8d, (%rdi)
	movl	(%rsi), %r11d
	cmpl	%r9d, %r11d
	jl	LBB24_16
LBB24_15:
	decl	%r9d
	movl	%r9d, (%rsi)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z9push_lineP14Render_Context2v3S1_2v4
LCPI25_0:
	.long	0x3727c5ac                      ## float 9.99999974E-6
LCPI25_1:
	.long	0x3f800000                      ## float 1
LCPI25_2:
	.long	0x7fffffff                      ## float NaN
LCPI25_4:
	.long	0x3b449ba6                      ## float 0.00300000003
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3
LCPI25_3:
	.quad	0x3fefae147ae147ae              ## double 0.98999999999999999
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z9push_lineP14Render_Context2v3S1_2v4
	.p2align	4, 0x90
__Z9push_lineP14Render_Context2v3S1_2v4: ## @_Z9push_lineP14Render_Context2v3S1_2v4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$224, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovaps	%xmm5, -80(%rbp)                ## 16-byte Spill
	vmovaps	%xmm4, -64(%rbp)                ## 16-byte Spill
	movq	%rdi, %rbx
	vmovss	100(%rdi), %xmm6                ## xmm6 = mem[0],zero,zero,zero
	vmovss	104(%rdi), %xmm7                ## xmm7 = mem[0],zero,zero,zero
	vmovss	76(%rdi), %xmm5                 ## xmm5 = mem[0],zero,zero,zero
	vmovss	80(%rdi), %xmm4                 ## xmm4 = mem[0],zero,zero,zero
	vinsertps	$16, 88(%rdi), %xmm5, %xmm9 ## xmm9 = xmm5[0],mem[0],xmm5[2,3]
	vxorps	%xmm10, %xmm10, %xmm10
	vmulps	%xmm10, %xmm9, %xmm5
	vaddps	%xmm5, %xmm10, %xmm5
	vinsertps	$16, 92(%rdi), %xmm4, %xmm12 ## xmm12 = xmm4[0],mem[0],xmm4[2,3]
	vmulps	%xmm10, %xmm12, %xmm4
	vaddps	%xmm5, %xmm4, %xmm8
	vxorps	%xmm11, %xmm11, %xmm11
	vmovss	%xmm6, -48(%rbp)                ## 4-byte Spill
	vmulss	%xmm6, %xmm11, %xmm5
	vaddss	%xmm5, %xmm11, %xmm5
	vmovss	%xmm7, -20(%rbp)                ## 4-byte Spill
	vmulss	%xmm7, %xmm11, %xmm6
	vaddss	%xmm5, %xmm6, %xmm15
	vmovaps	%xmm2, -240(%rbp)               ## 16-byte Spill
	vmovaps	%xmm0, -96(%rbp)                ## 16-byte Spill
	vsubps	%xmm0, %xmm2, %xmm7
	vmulps	%xmm7, %xmm7, %xmm5
	vmovshdup	%xmm5, %xmm5            ## xmm5 = xmm5[1,1,3,3]
	vmulss	%xmm7, %xmm7, %xmm6
	vaddss	%xmm5, %xmm6, %xmm6
	vmovss	84(%rdi), %xmm5                 ## xmm5 = mem[0],zero,zero,zero
	vinsertps	$16, 96(%rdi), %xmm5, %xmm14 ## xmm14 = xmm5[0],mem[0],xmm5[2,3]
	vmovss	%xmm3, -28(%rbp)                ## 4-byte Spill
	vmovss	%xmm1, -24(%rbp)                ## 4-byte Spill
	vsubss	%xmm1, %xmm3, %xmm5
	vmulss	%xmm5, %xmm5, %xmm4
	vaddss	%xmm6, %xmm4, %xmm4
	vsubps	%xmm14, %xmm8, %xmm6
	vmovss	108(%rdi), %xmm13               ## xmm13 = mem[0],zero,zero,zero
	vsubss	%xmm13, %xmm15, %xmm8
	vsqrtss	%xmm4, %xmm4, %xmm4
	vmovss	LCPI25_0(%rip), %xmm0           ## xmm0 = mem[0],zero,zero,zero
	vucomiss	%xmm4, %xmm0
	jae	LBB25_2
## %bb.1:
	vmovss	LCPI25_1(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vdivss	%xmm4, %xmm2, %xmm2
	vbroadcastss	%xmm2, %xmm3
	vmulps	%xmm3, %xmm7, %xmm10
	vmulss	%xmm2, %xmm5, %xmm11
LBB25_2:
	vmovshdup	%xmm10, %xmm15          ## xmm15 = xmm10[1,1,3,3]
	vmulps	%xmm6, %xmm10, %xmm4
	vmovshdup	%xmm4, %xmm4            ## xmm4 = xmm4[1,1,3,3]
	vmulss	%xmm6, %xmm10, %xmm5
	vaddss	%xmm4, %xmm5, %xmm4
	vmulss	%xmm11, %xmm8, %xmm5
	vaddss	%xmm4, %xmm5, %xmm4
	vbroadcastss	LCPI25_2(%rip), %xmm5   ## xmm5 = [NaN,NaN,NaN,NaN]
	vandps	%xmm5, %xmm4, %xmm4
	vcvtss2sd	%xmm4, %xmm4, %xmm4
	vucomisd	LCPI25_3(%rip), %xmm4
	jb	LBB25_4
## %bb.3:
	vxorps	%xmm4, %xmm4, %xmm4
	vaddps	%xmm4, %xmm9, %xmm5
	vmulps	%xmm4, %xmm12, %xmm6
	vaddps	%xmm5, %xmm6, %xmm5
	vmulps	%xmm4, %xmm14, %xmm4
	vaddps	%xmm5, %xmm4, %xmm6
	vxorps	%xmm4, %xmm4, %xmm4
	vaddss	-48(%rbp), %xmm4, %xmm5         ## 4-byte Folded Reload
	vmulss	-20(%rbp), %xmm4, %xmm7         ## 4-byte Folded Reload
	vaddss	%xmm5, %xmm7, %xmm5
	vmulss	%xmm4, %xmm13, %xmm4
	vaddss	%xmm5, %xmm4, %xmm8
LBB25_4:
	vmovshdup	%xmm6, %xmm4            ## xmm4 = xmm6[1,1,3,3]
	vmulss	%xmm15, %xmm8, %xmm5
	vmulss	%xmm4, %xmm11, %xmm7
	vsubss	%xmm5, %xmm7, %xmm9
	vmulss	%xmm6, %xmm11, %xmm2
	vmulss	%xmm10, %xmm8, %xmm5
	vsubss	%xmm2, %xmm5, %xmm2
	vmulss	%xmm4, %xmm10, %xmm3
	vmulss	%xmm6, %xmm15, %xmm4
	vsubss	%xmm3, %xmm4, %xmm7
	vmulss	%xmm2, %xmm2, %xmm3
	vmulss	%xmm9, %xmm9, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vmulss	%xmm7, %xmm7, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vsqrtss	%xmm3, %xmm3, %xmm5
	vxorps	%xmm8, %xmm8, %xmm8
	vxorps	%xmm10, %xmm10, %xmm10
	vmovaps	%xmm0, %xmm11
	vucomiss	%xmm5, %xmm0
	vxorps	%xmm4, %xmm4, %xmm4
	vxorps	%xmm3, %xmm3, %xmm3
	jae	LBB25_6
## %bb.5:
	vmovss	LCPI25_1(%rip), %xmm4           ## xmm4 = mem[0],zero,zero,zero
	vdivss	%xmm5, %xmm4, %xmm4
	vmulss	%xmm4, %xmm9, %xmm5
	vmulss	%xmm4, %xmm2, %xmm2
	vinsertps	$16, %xmm2, %xmm5, %xmm2 ## xmm2 = xmm5[0],xmm2[0],xmm5[2,3]
	vmulss	%xmm4, %xmm7, %xmm4
	vmulss	LCPI25_4(%rip), %xmm4, %xmm3
	vbroadcastss	LCPI25_4(%rip), %xmm4   ## xmm4 = [3.00000003E-3,3.00000003E-3,3.00000003E-3,3.00000003E-3]
	vmulps	%xmm4, %xmm2, %xmm4
LBB25_6:
	vxorps	%xmm2, %xmm2, %xmm2
	vmovups	%ymm2, -128(%rbp)
	vmovups	%ymm2, -192(%rbp)
	vmovups	%ymm2, -160(%rbp)
	movl	$5, -104(%rbp)
	vmovaps	-64(%rbp), %xmm0                ## 16-byte Reload
	vunpcklpd	-80(%rbp), %xmm0, %xmm2 ## 16-byte Folded Reload
                                        ## xmm2 = xmm0[0],mem[0]
	vmovups	%xmm2, -128(%rbp)
	vmovaps	-96(%rbp), %xmm0                ## 16-byte Reload
	vsubps	%xmm4, %xmm0, %xmm5
	vmovss	-24(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vsubss	%xmm3, %xmm1, %xmm6
	vmovlps	%xmm5, -224(%rbp)
	vmovss	%xmm6, -216(%rbp)
	vaddps	%xmm0, %xmm4, %xmm0
	vaddss	%xmm1, %xmm3, %xmm1
	vmovlps	%xmm0, -212(%rbp)
	vmovss	%xmm1, -204(%rbp)
	vmovaps	%xmm4, -96(%rbp)                ## 16-byte Spill
	vaddps	-240(%rbp), %xmm4, %xmm9        ## 16-byte Folded Reload
	vmovss	%xmm3, -24(%rbp)                ## 4-byte Spill
	vaddss	-28(%rbp), %xmm3, %xmm12        ## 4-byte Folded Reload
	vsubps	%xmm5, %xmm0, %xmm2
	vmovshdup	%xmm2, %xmm4            ## xmm4 = xmm2[1,1,3,3]
	vsubss	%xmm6, %xmm1, %xmm1
	vmovaps	%xmm5, -80(%rbp)                ## 16-byte Spill
	vsubps	%xmm5, %xmm9, %xmm5
	vmovshdup	%xmm5, %xmm7            ## xmm7 = xmm5[1,1,3,3]
	vmovss	%xmm6, -64(%rbp)                ## 4-byte Spill
	vsubss	%xmm6, %xmm12, %xmm3
	vmulss	%xmm7, %xmm1, %xmm0
	vmulss	%xmm3, %xmm4, %xmm6
	vsubss	%xmm0, %xmm6, %xmm0
	vmulss	%xmm2, %xmm3, %xmm3
	vmulss	%xmm5, %xmm1, %xmm1
	vsubss	%xmm3, %xmm1, %xmm1
	vmulss	%xmm4, %xmm5, %xmm3
	vmulss	%xmm7, %xmm2, %xmm2
	vsubss	%xmm3, %xmm2, %xmm2
	vmulss	%xmm1, %xmm1, %xmm3
	vmulss	%xmm0, %xmm0, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vmulss	%xmm2, %xmm2, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vsqrtss	%xmm3, %xmm3, %xmm5
	vucomiss	%xmm5, %xmm11
	vmovaps	%xmm9, -48(%rbp)                ## 16-byte Spill
	vmovlps	%xmm9, -200(%rbp)
	vmovss	%xmm12, -20(%rbp)               ## 4-byte Spill
	vmovss	%xmm12, -192(%rbp)
	jae	LBB25_8
## %bb.7:
	vmovss	LCPI25_1(%rip), %xmm3           ## xmm3 = mem[0],zero,zero,zero
	vdivss	%xmm5, %xmm3, %xmm3
	vmulss	%xmm3, %xmm0, %xmm0
	vmulss	%xmm3, %xmm1, %xmm1
	vinsertps	$16, %xmm1, %xmm0, %xmm10 ## xmm10 = xmm0[0],xmm1[0],xmm0[2,3]
	vmulss	%xmm3, %xmm2, %xmm8
LBB25_8:
	vmovlps	%xmm10, -140(%rbp)
	vmovss	%xmm8, -132(%rbp)
	movq	-140(%rbp), %rax
	movq	%rax, -152(%rbp)
	movl	-132(%rbp), %ecx
	movl	%ecx, -144(%rbp)
	movq	%rax, -164(%rbp)
	movl	%ecx, -156(%rbp)
	leaq	-224(%rbp), %r14
	movq	%rbx, %rdi
	movq	%r14, %rsi
	vzeroupper
	callq	__Z13push_triangleP14Render_ContextP8Triangle
	vmovaps	-80(%rbp), %xmm0                ## 16-byte Reload
	vmovlps	%xmm0, -224(%rbp)
	vmovss	-64(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	%xmm0, -216(%rbp)
	vmovaps	-48(%rbp), %xmm0                ## 16-byte Reload
	vmovlps	%xmm0, -212(%rbp)
	vmovss	-20(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	%xmm0, -204(%rbp)
	vmovaps	-240(%rbp), %xmm0               ## 16-byte Reload
	vsubps	-96(%rbp), %xmm0, %xmm0         ## 16-byte Folded Reload
	vmovss	-28(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vsubss	-24(%rbp), %xmm1, %xmm1         ## 4-byte Folded Reload
	vmovlps	%xmm0, -200(%rbp)
	vmovss	%xmm1, -192(%rbp)
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	__Z13push_triangleP14Render_ContextP8Triangle
	addq	$224, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z16push_box_outlineP14Render_Context2v3S1_2v4 ## -- Begin function _Z16push_box_outlineP14Render_Context2v3S1_2v4
	.p2align	4, 0x90
__Z16push_box_outlineP14Render_Context2v3S1_2v4: ## @_Z16push_box_outlineP14Render_Context2v3S1_2v4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$200, %rsp
	.cfi_offset %rbx, -24
	vmovaps	%xmm5, -64(%rbp)                ## 16-byte Spill
	vmovaps	%xmm4, -48(%rbp)                ## 16-byte Spill
	movq	%rdi, %rbx
	vxorps	%xmm4, %xmm4, %xmm4
	vmulss	%xmm4, %xmm2, %xmm6
	vmovshdup	%xmm2, %xmm14           ## xmm14 = xmm2[1,1,3,3]
	vmulss	%xmm4, %xmm14, %xmm5
	vmulss	%xmm4, %xmm3, %xmm4
	vsubss	%xmm2, %xmm0, %xmm8
	vmovshdup	%xmm0, %xmm9            ## xmm9 = xmm0[1,1,3,3]
	vsubss	%xmm6, %xmm9, %xmm10
	vsubss	%xmm5, %xmm8, %xmm7
	vmovss	%xmm7, -96(%rbp)                ## 4-byte Spill
	vsubss	%xmm14, %xmm10, %xmm12
	vaddss	%xmm7, %xmm4, %xmm13
	vaddss	%xmm4, %xmm12, %xmm7
	vinsertps	$16, %xmm7, %xmm13, %xmm7 ## xmm7 = xmm13[0],xmm7[0],xmm13[2,3]
	vmovaps	%xmm7, -176(%rbp)               ## 16-byte Spill
	vaddss	%xmm2, %xmm0, %xmm0
	vsubss	%xmm6, %xmm1, %xmm15
	vaddss	%xmm6, %xmm9, %xmm7
	vaddss	%xmm1, %xmm6, %xmm1
	vsubss	%xmm5, %xmm0, %xmm13
	vsubss	%xmm14, %xmm7, %xmm11
	vaddss	%xmm4, %xmm13, %xmm6
	vaddss	%xmm4, %xmm11, %xmm2
	vinsertps	$16, %xmm2, %xmm6, %xmm2 ## xmm2 = xmm6[0],xmm2[0],xmm6[2,3]
	vmovaps	%xmm2, -160(%rbp)               ## 16-byte Spill
	vaddss	%xmm5, %xmm0, %xmm9
	vaddss	%xmm7, %xmm14, %xmm2
	vaddss	%xmm4, %xmm9, %xmm6
	vaddss	%xmm2, %xmm4, %xmm7
	vinsertps	$16, %xmm7, %xmm6, %xmm0 ## xmm0 = xmm6[0],xmm7[0],xmm6[2,3]
	vmovaps	%xmm0, -192(%rbp)               ## 16-byte Spill
	vaddss	%xmm10, %xmm14, %xmm6
	vsubss	%xmm5, %xmm1, %xmm14
	vaddss	%xmm1, %xmm5, %xmm10
	vaddss	%xmm5, %xmm8, %xmm1
	vsubss	%xmm5, %xmm15, %xmm7
	vaddss	%xmm5, %xmm15, %xmm8
	vaddss	%xmm1, %xmm4, %xmm5
	vaddss	%xmm6, %xmm4, %xmm0
	vinsertps	$16, %xmm0, %xmm5, %xmm0 ## xmm0 = xmm5[0],xmm0[0],xmm5[2,3]
	vmovaps	%xmm0, -208(%rbp)               ## 16-byte Spill
	vmovss	-96(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vsubss	%xmm4, %xmm0, %xmm0
	vsubss	%xmm4, %xmm12, %xmm5
	vinsertps	$16, %xmm5, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm5[0],xmm0[2,3]
	vmovaps	%xmm0, -112(%rbp)               ## 16-byte Spill
	vsubss	%xmm4, %xmm13, %xmm0
	vsubss	%xmm4, %xmm11, %xmm5
	vinsertps	$16, %xmm5, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm5[0],xmm0[2,3]
	vmovaps	%xmm0, -128(%rbp)               ## 16-byte Spill
	vsubss	%xmm4, %xmm9, %xmm0
	vsubss	%xmm4, %xmm2, %xmm2
	vinsertps	$16, %xmm2, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm2[0],xmm0[2,3]
	vmovaps	%xmm0, -144(%rbp)               ## 16-byte Spill
	vsubss	%xmm4, %xmm1, %xmm0
	vsubss	%xmm4, %xmm6, %xmm1
	vinsertps	$16, %xmm1, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm1[0],xmm0[2,3]
	vmovaps	%xmm0, -96(%rbp)                ## 16-byte Spill
	vaddss	%xmm3, %xmm7, %xmm1
	vmovss	%xmm1, -68(%rbp)                ## 4-byte Spill
	vsubss	%xmm3, %xmm7, %xmm0
	vmovss	%xmm0, -12(%rbp)                ## 4-byte Spill
	vaddss	%xmm3, %xmm14, %xmm4
	vmovss	%xmm4, -72(%rbp)                ## 4-byte Spill
	vsubss	%xmm3, %xmm14, %xmm0
	vmovss	%xmm0, -16(%rbp)                ## 4-byte Spill
	vaddss	%xmm3, %xmm10, %xmm0
	vmovss	%xmm0, -20(%rbp)                ## 4-byte Spill
	vsubss	%xmm3, %xmm10, %xmm0
	vmovss	%xmm0, -24(%rbp)                ## 4-byte Spill
	vaddss	%xmm3, %xmm8, %xmm0
	vmovss	%xmm0, -28(%rbp)                ## 4-byte Spill
	vsubss	%xmm3, %xmm8, %xmm0
	vmovss	%xmm0, -32(%rbp)                ## 4-byte Spill
	vmovaps	-176(%rbp), %xmm0               ## 16-byte Reload
	vmovaps	-160(%rbp), %xmm2               ## 16-byte Reload
	vmovaps	%xmm4, %xmm3
	vmovaps	-48(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	callq	__Z9push_lineP14Render_Context2v3S1_2v4
	movq	%rbx, %rdi
	vmovaps	-160(%rbp), %xmm0               ## 16-byte Reload
	vmovss	-72(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	-192(%rbp), %xmm2               ## 16-byte Reload
	vmovss	-20(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovaps	-48(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	callq	__Z9push_lineP14Render_Context2v3S1_2v4
	movq	%rbx, %rdi
	vmovaps	-192(%rbp), %xmm0               ## 16-byte Reload
	vmovss	-20(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	-208(%rbp), %xmm2               ## 16-byte Reload
	vmovss	-28(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovaps	-48(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	callq	__Z9push_lineP14Render_Context2v3S1_2v4
	movq	%rbx, %rdi
	vmovaps	-176(%rbp), %xmm0               ## 16-byte Reload
	vmovss	-68(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	-208(%rbp), %xmm2               ## 16-byte Reload
	vmovss	-28(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovaps	-48(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	callq	__Z9push_lineP14Render_Context2v3S1_2v4
	movq	%rbx, %rdi
	vmovaps	-112(%rbp), %xmm0               ## 16-byte Reload
	vmovss	-12(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	-128(%rbp), %xmm2               ## 16-byte Reload
	vmovss	-16(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovaps	-48(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	callq	__Z9push_lineP14Render_Context2v3S1_2v4
	movq	%rbx, %rdi
	vmovaps	-128(%rbp), %xmm0               ## 16-byte Reload
	vmovss	-16(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	-144(%rbp), %xmm2               ## 16-byte Reload
	vmovss	-24(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovaps	-48(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	callq	__Z9push_lineP14Render_Context2v3S1_2v4
	movq	%rbx, %rdi
	vmovaps	-144(%rbp), %xmm0               ## 16-byte Reload
	vmovss	-24(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	-96(%rbp), %xmm2                ## 16-byte Reload
	vmovss	-32(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovaps	-48(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	callq	__Z9push_lineP14Render_Context2v3S1_2v4
	movq	%rbx, %rdi
	vmovaps	-112(%rbp), %xmm0               ## 16-byte Reload
	vmovss	-12(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	-96(%rbp), %xmm2                ## 16-byte Reload
	vmovss	-32(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovaps	-48(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	callq	__Z9push_lineP14Render_Context2v3S1_2v4
	movq	%rbx, %rdi
	vmovaps	-176(%rbp), %xmm0               ## 16-byte Reload
	vmovss	-68(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	-112(%rbp), %xmm2               ## 16-byte Reload
	vmovss	-12(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovaps	-48(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	callq	__Z9push_lineP14Render_Context2v3S1_2v4
	movq	%rbx, %rdi
	vmovaps	-160(%rbp), %xmm0               ## 16-byte Reload
	vmovss	-72(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	-128(%rbp), %xmm2               ## 16-byte Reload
	vmovss	-16(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovaps	-48(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	callq	__Z9push_lineP14Render_Context2v3S1_2v4
	movq	%rbx, %rdi
	vmovaps	-192(%rbp), %xmm0               ## 16-byte Reload
	vmovss	-20(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	-144(%rbp), %xmm2               ## 16-byte Reload
	vmovss	-24(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovaps	-48(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	callq	__Z9push_lineP14Render_Context2v3S1_2v4
	movq	%rbx, %rdi
	vmovaps	-208(%rbp), %xmm0               ## 16-byte Reload
	vmovss	-28(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	-96(%rbp), %xmm2                ## 16-byte Reload
	vmovss	-32(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovaps	-48(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	addq	$200, %rsp
	popq	%rbx
	popq	%rbp
	jmp	__Z9push_lineP14Render_Context2v3S1_2v4 ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z9push_meshP14Render_ContextP4Mesh2v3S3_S3_2v4
LCPI27_0:
	.long	0x80000000                      ## float -0
LCPI27_1:
	.long	0x00000000                      ## float 0
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4
LCPI27_2:
	.space	16
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z9push_meshP14Render_ContextP4Mesh2v3S3_S3_2v4
	.p2align	4, 0x90
__Z9push_meshP14Render_ContextP4Mesh2v3S3_S3_2v4: ## @_Z9push_meshP14Render_ContextP4Mesh2v3S3_S3_2v4
Lfunc_begin1:
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
	.cfi_lsda 16, Lexception1
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$440, %rsp                      ## imm = 0x1B8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovaps	%xmm7, -144(%rbp)               ## 16-byte Spill
	vmovaps	%xmm6, -432(%rbp)               ## 16-byte Spill
	vmovss	%xmm5, -208(%rbp)               ## 4-byte Spill
	vmovaps	%xmm4, -128(%rbp)               ## 16-byte Spill
	vmovss	%xmm3, -68(%rbp)                ## 4-byte Spill
	vmovaps	%xmm2, -480(%rbp)               ## 16-byte Spill
	vmovss	%xmm1, -64(%rbp)                ## 4-byte Spill
	vmovaps	%xmm0, -464(%rbp)               ## 16-byte Spill
	movq	%rsi, %r12
	movq	%rdi, %r14
	movl	$1, -88(%rbp)
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rax, %rcx
	movslq	(%rax), %rax
	movl	%eax, -84(%rbp)
	movq	_timed_blocks(%rip), %rsi
	shlq	$7, %rax
	orq	$1, %rax
	imulq	$56, %rax, %rdi
	movabsq	$4294968051, %rax               ## imm = 0x1000002F3
	movq	%rax, 24(%rsi,%rdi)
	leaq	L___FUNCTION__._Z9push_meshP14Render_ContextP4Mesh2v3S3_S3_2v4(%rip), %rax
	movq	%rax, 8(%rsi,%rdi)
	leaq	L_.str.11(%rip), %rdx
	movq	%rdx, 16(%rsi,%rdi)
	movq	%rax, (%rsi,%rdi)
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	movq	%rdx, -80(%rbp)
	incl	32(%rsi,%rdi)
	movslq	516(%rcx), %rax
	leal	1(%rax), %edx
	movl	%edx, 516(%rcx)
	movl	$1, 4(%rcx,%rax,4)
	vmovss	-208(%rbp), %xmm0               ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	callq	___sincosf_stret
	vmovaps	%xmm0, -176(%rbp)               ## 16-byte Spill
	vmovshdup	-128(%rbp), %xmm0       ## 16-byte Folded Reload
                                        ## xmm0 = mem[1,1,3,3]
	callq	___sincosf_stret
	vmovaps	%xmm0, -160(%rbp)               ## 16-byte Spill
	vmovaps	-128(%rbp), %xmm0               ## 16-byte Reload
	callq	___sincosf_stret
	cmpl	$0, 8(%r12)
	jle	LBB27_4
## %bb.1:
	vmovaps	%xmm0, %xmm13
	vbroadcastss	LCPI27_0(%rip), %xmm1   ## xmm1 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	-160(%rbp), %xmm10              ## 16-byte Reload
	vmovshdup	%xmm10, %xmm5           ## xmm5 = xmm10[1,1,3,3]
	vmovshdup	%xmm0, %xmm4            ## xmm4 = xmm0[1,1,3,3]
	vxorps	%xmm1, %xmm0, %xmm2
	vxorps	%xmm0, %xmm0, %xmm0
	vmulss	%xmm0, %xmm5, %xmm3
	vmovaps	%xmm5, %xmm11
	vmovaps	%xmm3, -112(%rbp)               ## 16-byte Spill
	vaddss	%xmm0, %xmm3, %xmm7
	vmovss	%xmm7, -52(%rbp)                ## 4-byte Spill
	vmulss	%xmm0, %xmm4, %xmm5
	vaddss	%xmm7, %xmm5, %xmm3
	vmovaps	%xmm5, %xmm8
	vmulss	%xmm13, %xmm10, %xmm6
	vaddss	%xmm3, %xmm6, %xmm9
	vmovaps	%xmm9, -192(%rbp)               ## 16-byte Spill
	vmulss	%xmm0, %xmm2, %xmm3
	vaddss	%xmm7, %xmm3, %xmm2
	vmovaps	%xmm3, %xmm5
	vmovss	%xmm3, -44(%rbp)                ## 4-byte Spill
	vmulss	%xmm4, %xmm10, %xmm3
	vaddss	%xmm2, %xmm3, %xmm15
	vmovaps	%xmm15, -368(%rbp)              ## 16-byte Spill
	vaddss	%xmm0, %xmm4, %xmm2
	vmovaps	%xmm4, -416(%rbp)               ## 16-byte Spill
	vmulss	%xmm0, %xmm13, %xmm3
	vaddss	%xmm2, %xmm3, %xmm12
	vmovaps	%xmm12, -352(%rbp)              ## 16-byte Spill
	vmulss	%xmm0, %xmm10, %xmm2
	vmovaps	%xmm2, -384(%rbp)               ## 16-byte Spill
	vsubss	%xmm2, %xmm0, %xmm2
	vmovaps	%xmm8, %xmm6
	vmovss	%xmm8, -48(%rbp)                ## 4-byte Spill
	vaddss	%xmm2, %xmm8, %xmm3
	vmulss	%xmm13, %xmm11, %xmm7
	vaddss	%xmm3, %xmm7, %xmm14
	vaddss	%xmm2, %xmm5, %xmm2
	vmulss	%xmm4, %xmm11, %xmm3
	vmovaps	%xmm11, %xmm4
	vmovaps	%xmm11, -400(%rbp)              ## 16-byte Spill
	vaddss	%xmm2, %xmm3, %xmm2
	vmovss	%xmm2, -56(%rbp)                ## 4-byte Spill
	vmovaps	-176(%rbp), %xmm11              ## 16-byte Reload
	vxorps	%xmm1, %xmm11, %xmm1
	vblendps	$2, %xmm11, %xmm1, %xmm1        ## xmm1 = xmm1[0],xmm11[1],xmm1[2,3]
	vpermilps	$225, %xmm11, %xmm2     ## xmm2 = xmm11[1,0,2,3]
	vbroadcastss	%xmm9, %xmm3
	vmulps	%xmm3, %xmm2, %xmm3
	vxorps	%xmm9, %xmm9, %xmm9
	vaddps	%xmm3, %xmm9, %xmm3
	vbroadcastss	%xmm12, %xmm8
	vmulps	%xmm1, %xmm8, %xmm7
	vaddps	%xmm3, %xmm7, %xmm8
	vsubss	%xmm13, %xmm0, %xmm7
	vaddss	%xmm7, %xmm6, %xmm7
	vbroadcastss	%xmm15, %xmm5
	vmulps	%xmm5, %xmm2, %xmm5
	vaddps	%xmm5, %xmm9, %xmm5
	vbroadcastss	%xmm7, %xmm6
	vmulps	%xmm6, %xmm1, %xmm6
	vaddps	%xmm5, %xmm6, %xmm15
	vaddss	%xmm0, %xmm4, %xmm6
	vmovaps	-384(%rbp), %xmm5               ## 16-byte Reload
	vaddss	%xmm6, %xmm5, %xmm6
	vsubss	%xmm10, %xmm0, %xmm3
	vaddss	%xmm0, %xmm3, %xmm3
	vaddss	-112(%rbp), %xmm3, %xmm3        ## 16-byte Folded Reload
	vbroadcastss	%xmm6, %xmm12
	vmulps	%xmm2, %xmm12, %xmm4
	vaddps	%xmm4, %xmm9, %xmm4
	vmulps	%xmm1, %xmm9, %xmm12
	vaddps	%xmm4, %xmm12, %xmm4
	vmulss	%xmm0, %xmm3, %xmm1
	vbroadcastss	%xmm1, %xmm1
	vaddps	%xmm4, %xmm1, %xmm1
	vmovaps	%xmm1, -128(%rbp)               ## 16-byte Spill
	vmulss	%xmm0, %xmm14, %xmm1
	vbroadcastss	%xmm1, %xmm1
	vaddps	%xmm1, %xmm8, %xmm1
	vmovaps	%xmm1, -208(%rbp)               ## 16-byte Spill
	vmovss	-56(%rbp), %xmm4                ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vmulss	%xmm0, %xmm4, %xmm1
	vbroadcastss	%xmm1, %xmm1
	vaddps	%xmm1, %xmm15, %xmm1
	vmovaps	%xmm1, -448(%rbp)               ## 16-byte Spill
	vmulss	%xmm0, %xmm6, %xmm1
	vaddss	%xmm0, %xmm1, %xmm1
	vaddss	%xmm0, %xmm1, %xmm1
	vaddss	%xmm1, %xmm3, %xmm1
	vmovss	%xmm1, -60(%rbp)                ## 4-byte Spill
	vmulss	-192(%rbp), %xmm0, %xmm1        ## 16-byte Folded Reload
	vaddss	%xmm0, %xmm1, %xmm1
	vmulss	-352(%rbp), %xmm0, %xmm3        ## 16-byte Folded Reload
	vaddss	%xmm1, %xmm3, %xmm1
	vaddss	%xmm1, %xmm14, %xmm1
	vmovss	%xmm1, -192(%rbp)               ## 4-byte Spill
	vmulss	-368(%rbp), %xmm0, %xmm1        ## 16-byte Folded Reload
	vaddss	%xmm0, %xmm1, %xmm1
	vmulss	%xmm0, %xmm7, %xmm3
	vaddss	%xmm1, %xmm3, %xmm1
	vaddss	%xmm1, %xmm4, %xmm1
	vmovss	%xmm1, -56(%rbp)                ## 4-byte Spill
	vaddss	%xmm0, %xmm5, %xmm1
	vmovaps	%xmm5, %xmm6
	vaddss	%xmm0, %xmm1, %xmm1
	vaddss	-400(%rbp), %xmm1, %xmm3        ## 16-byte Folded Reload
	vaddss	-52(%rbp), %xmm0, %xmm1         ## 4-byte Folded Reload
	vsubss	%xmm10, %xmm1, %xmm1
	vaddss	%xmm0, %xmm1, %xmm4
	vmulss	%xmm0, %xmm3, %xmm5
	vaddss	%xmm4, %xmm5, %xmm4
	vmovss	%xmm4, -52(%rbp)                ## 4-byte Spill
	vmulss	%xmm0, %xmm1, %xmm1
	vaddss	%xmm0, %xmm1, %xmm8
	vaddss	-48(%rbp), %xmm8, %xmm1         ## 4-byte Folded Reload
	vmulss	%xmm3, %xmm13, %xmm5
	vaddss	%xmm1, %xmm5, %xmm0
	vmovss	%xmm0, -48(%rbp)                ## 4-byte Spill
	vpermilps	$85, %xmm10, %xmm1      ## xmm1 = xmm10[1,1,1,1]
	vmulps	%xmm2, %xmm1, %xmm1
	vaddps	%xmm1, %xmm9, %xmm1
	vaddps	%xmm1, %xmm12, %xmm1
	vbroadcastss	%xmm6, %xmm5
	vsubps	%xmm5, %xmm1, %xmm1
	vmulps	%xmm2, %xmm9, %xmm5
	vaddps	%xmm5, %xmm9, %xmm5
	vsubps	%xmm11, %xmm5, %xmm6
	vaddps	%xmm5, %xmm11, %xmm5
	vblendps	$2, %xmm5, %xmm6, %xmm5         ## xmm5 = xmm6[0],xmm5[1],xmm6[2,3]
	vbroadcastss	%xmm10, %xmm6
	vmulps	%xmm2, %xmm6, %xmm2
	vaddps	%xmm2, %xmm9, %xmm2
	vaddps	%xmm2, %xmm12, %xmm2
	vbroadcastss	-112(%rbp), %xmm6       ## 16-byte Folded Reload
	vaddps	%xmm2, %xmm6, %xmm2
	vaddps	%xmm5, %xmm9, %xmm5
	vaddps	%xmm1, %xmm9, %xmm6
	vmulps	%xmm5, %xmm9, %xmm7
	vaddps	%xmm6, %xmm7, %xmm6
	vmulps	%xmm2, %xmm9, %xmm7
	vaddps	%xmm6, %xmm7, %xmm0
	vmovaps	%xmm0, -112(%rbp)               ## 16-byte Spill
	vmulps	%xmm1, %xmm9, %xmm1
	vaddps	%xmm1, %xmm9, %xmm1
	vpermilps	$85, %xmm13, %xmm6      ## xmm6 = xmm13[1,1,1,1]
	vmulps	%xmm5, %xmm6, %xmm7
	vaddps	%xmm1, %xmm7, %xmm7
	vbroadcastss	%xmm13, %xmm0
	vmulps	%xmm2, %xmm0, %xmm4
	vaddps	%xmm7, %xmm4, %xmm4
	vmovaps	%xmm4, -176(%rbp)               ## 16-byte Spill
	vmulps	%xmm5, %xmm0, %xmm0
	vsubps	%xmm0, %xmm1, %xmm0
	vmulps	%xmm2, %xmm6, %xmm1
	vaddps	%xmm0, %xmm1, %xmm0
	vmovaps	%xmm0, -160(%rbp)               ## 16-byte Spill
	vaddss	-44(%rbp), %xmm8, %xmm0         ## 4-byte Folded Reload
	vmulss	-416(%rbp), %xmm3, %xmm1        ## 16-byte Folded Reload
	vaddss	%xmm0, %xmm1, %xmm0
	vmovss	%xmm0, -44(%rbp)                ## 4-byte Spill
	vmovaps	-432(%rbp), %xmm0               ## 16-byte Reload
	vunpcklpd	-144(%rbp), %xmm0, %xmm0 ## 16-byte Folded Reload
                                        ## xmm0 = xmm0[0],mem[0]
	vmovaps	%xmm0, -144(%rbp)               ## 16-byte Spill
	xorl	%ebx, %ebx
	leaq	-336(%rbp), %r15
	xorl	%r13d, %r13d
	.p2align	4, 0x90
LBB27_2:                                ## =>This Inner Loop Header: Depth=1
	movq	(%r12), %rax
	vmovups	(%rax,%rbx), %ymm0
	vmovups	32(%rax,%rbx), %ymm1
	vmovups	64(%rax,%rbx), %ymm2
	vmovups	96(%rax,%rbx), %ymm3
	vmovups	%ymm0, -336(%rbp)
	vmovups	%ymm1, -304(%rbp)
	vmovups	%ymm3, -240(%rbp)
	vmovups	%ymm2, -272(%rbp)
	vmovsd	-336(%rbp), %xmm1               ## xmm1 = mem[0],zero
	vmovsd	-324(%rbp), %xmm2               ## xmm2 = mem[0],zero
	vmovshdup	%xmm1, %xmm3            ## xmm3 = xmm1[1,1,3,3]
	vmovss	-60(%rbp), %xmm15               ## 4-byte Reload
                                        ## xmm15 = mem[0],zero,zero,zero
	vmulss	%xmm1, %xmm15, %xmm0
	vxorps	%xmm4, %xmm4, %xmm4
	vaddss	%xmm4, %xmm0, %xmm0
	vmovss	-192(%rbp), %xmm10              ## 4-byte Reload
                                        ## xmm10 = mem[0],zero,zero,zero
	vmulss	%xmm3, %xmm10, %xmm4
	vaddss	%xmm0, %xmm4, %xmm0
	vbroadcastss	-328(%rbp), %xmm4
	vmovss	-56(%rbp), %xmm11               ## 4-byte Reload
                                        ## xmm11 = mem[0],zero,zero,zero
	vmulss	%xmm4, %xmm11, %xmm5
	vaddss	%xmm0, %xmm5, %xmm5
	vmovsd	-312(%rbp), %xmm0               ## xmm0 = mem[0],zero
	vmovss	-68(%rbp), %xmm6                ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	vmulss	%xmm6, %xmm5, %xmm5
	vbroadcastss	%xmm1, %xmm1
	vmovaps	-128(%rbp), %xmm12              ## 16-byte Reload
	vmulps	%xmm1, %xmm12, %xmm1
	vxorps	%xmm7, %xmm7, %xmm7
	vaddps	%xmm7, %xmm1, %xmm1
	vmovaps	-208(%rbp), %xmm13              ## 16-byte Reload
	vmulps	%xmm3, %xmm13, %xmm3
	vaddps	%xmm1, %xmm3, %xmm1
	vmovaps	-448(%rbp), %xmm14              ## 16-byte Reload
	vmulps	%xmm4, %xmm14, %xmm3
	vaddps	%xmm1, %xmm3, %xmm1
	vmovaps	-480(%rbp), %xmm7               ## 16-byte Reload
	vmulps	%xmm7, %xmm1, %xmm1
	vmovaps	-464(%rbp), %xmm9               ## 16-byte Reload
	vaddps	%xmm1, %xmm9, %xmm1
	vmovss	-64(%rbp), %xmm8                ## 4-byte Reload
                                        ## xmm8 = mem[0],zero,zero,zero
	vaddss	%xmm5, %xmm8, %xmm3
	vmovlps	%xmm1, -336(%rbp)
	vmovss	%xmm3, -328(%rbp)
	vmovshdup	%xmm2, %xmm1            ## xmm1 = xmm2[1,1,3,3]
	vmulss	%xmm2, %xmm15, %xmm3
	vaddss	LCPI27_1(%rip), %xmm3, %xmm3
	vmulss	%xmm1, %xmm10, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vbroadcastss	-316(%rbp), %xmm4
	vmulss	%xmm4, %xmm11, %xmm5
	vaddss	%xmm3, %xmm5, %xmm3
	vmulss	%xmm6, %xmm3, %xmm3
	vbroadcastss	%xmm2, %xmm2
	vmulps	%xmm2, %xmm12, %xmm2
	vaddps	LCPI27_2(%rip), %xmm2, %xmm2
	vmulps	%xmm1, %xmm13, %xmm1
	vaddps	%xmm2, %xmm1, %xmm1
	vmulps	%xmm4, %xmm14, %xmm2
	vaddps	%xmm1, %xmm2, %xmm1
	vmulps	%xmm7, %xmm1, %xmm1
	vaddps	%xmm1, %xmm9, %xmm1
	vaddss	%xmm3, %xmm8, %xmm2
	vmovlps	%xmm1, -324(%rbp)
	vmovss	%xmm2, -316(%rbp)
	vmovshdup	%xmm0, %xmm1            ## xmm1 = xmm0[1,1,3,3]
	vmulss	%xmm0, %xmm15, %xmm2
	vaddss	LCPI27_1(%rip), %xmm2, %xmm2
	vmulss	%xmm1, %xmm10, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vbroadcastss	-304(%rbp), %xmm3
	vmulss	%xmm3, %xmm11, %xmm4
	vaddss	%xmm2, %xmm4, %xmm2
	vmulss	%xmm6, %xmm2, %xmm2
	vbroadcastss	%xmm0, %xmm0
	vmulps	%xmm0, %xmm12, %xmm0
	vxorps	%xmm4, %xmm4, %xmm4
	vaddps	%xmm4, %xmm0, %xmm0
	vmulps	%xmm1, %xmm13, %xmm1
	vaddps	%xmm0, %xmm1, %xmm0
	vmulps	%xmm3, %xmm14, %xmm1
	vaddps	%xmm0, %xmm1, %xmm0
	vmulps	%xmm7, %xmm0, %xmm0
	vaddps	%xmm0, %xmm9, %xmm0
	vaddss	%xmm2, %xmm8, %xmm1
	vmovlps	%xmm0, -312(%rbp)
	vmovss	%xmm1, -304(%rbp)
	vmovsd	-276(%rbp), %xmm0               ## xmm0 = mem[0],zero
	vmovshdup	%xmm0, %xmm1            ## xmm1 = xmm0[1,1,3,3]
	vbroadcastss	%xmm0, %xmm2
	vmovaps	-112(%rbp), %xmm7               ## 16-byte Reload
	vmulps	%xmm2, %xmm7, %xmm2
	vaddps	%xmm4, %xmm2, %xmm2
	vxorps	%xmm12, %xmm12, %xmm12
	vmovaps	-176(%rbp), %xmm8               ## 16-byte Reload
	vmulps	%xmm1, %xmm8, %xmm3
	vaddps	%xmm2, %xmm3, %xmm2
	vbroadcastss	-268(%rbp), %xmm3
	vmovaps	-160(%rbp), %xmm9               ## 16-byte Reload
	vmulps	%xmm3, %xmm9, %xmm4
	vaddps	%xmm2, %xmm4, %xmm2
	vmovss	-52(%rbp), %xmm5                ## 4-byte Reload
                                        ## xmm5 = mem[0],zero,zero,zero
	vmulss	%xmm0, %xmm5, %xmm0
	vxorps	%xmm11, %xmm11, %xmm11
	vaddss	%xmm0, %xmm11, %xmm0
	vmovss	-48(%rbp), %xmm6                ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	vmulss	%xmm1, %xmm6, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmovss	-44(%rbp), %xmm10               ## 4-byte Reload
                                        ## xmm10 = mem[0],zero,zero,zero
	vmulss	%xmm3, %xmm10, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmovlps	%xmm2, -276(%rbp)
	vmovss	%xmm0, -268(%rbp)
	vmovsd	-264(%rbp), %xmm0               ## xmm0 = mem[0],zero
	vmovshdup	%xmm0, %xmm1            ## xmm1 = xmm0[1,1,3,3]
	vbroadcastss	%xmm0, %xmm2
	vmulps	%xmm2, %xmm7, %xmm2
	vaddps	%xmm2, %xmm12, %xmm2
	vmulps	%xmm1, %xmm8, %xmm3
	vaddps	%xmm2, %xmm3, %xmm2
	vbroadcastss	-256(%rbp), %xmm3
	vmulps	%xmm3, %xmm9, %xmm4
	vaddps	%xmm2, %xmm4, %xmm2
	vmulss	%xmm0, %xmm5, %xmm0
	vaddss	%xmm0, %xmm11, %xmm0
	vmulss	%xmm1, %xmm6, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmulss	%xmm3, %xmm10, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmovlps	%xmm2, -264(%rbp)
	vmovss	%xmm0, -256(%rbp)
	vmovsd	-252(%rbp), %xmm0               ## xmm0 = mem[0],zero
	vmovshdup	%xmm0, %xmm1            ## xmm1 = xmm0[1,1,3,3]
	vbroadcastss	%xmm0, %xmm2
	vmulps	%xmm2, %xmm7, %xmm2
	vaddps	%xmm2, %xmm12, %xmm2
	vmulps	%xmm1, %xmm8, %xmm3
	vaddps	%xmm2, %xmm3, %xmm2
	vbroadcastss	-244(%rbp), %xmm3
	vmulps	%xmm3, %xmm9, %xmm4
	vaddps	%xmm2, %xmm4, %xmm2
	vmulss	%xmm0, %xmm5, %xmm0
	vaddss	%xmm0, %xmm11, %xmm0
	vmulss	%xmm1, %xmm6, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmulss	%xmm3, %xmm10, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmovlps	%xmm2, -252(%rbp)
	vmovss	%xmm0, -244(%rbp)
	vmovaps	-144(%rbp), %xmm0               ## 16-byte Reload
	vmovaps	%xmm0, -240(%rbp)
Ltmp3:
	movq	%r14, %rdi
	movq	%r15, %rsi
	vzeroupper
	callq	__Z13push_triangleP14Render_ContextP8Triangle
Ltmp4:
## %bb.3:                               ##   in Loop: Header=BB27_2 Depth=1
	incq	%r13
	movslq	8(%r12), %rax
	subq	$-128, %rbx
	cmpq	%rax, %r13
	jl	LBB27_2
LBB27_4:
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	subq	-80(%rbp), %rdx
	movq	_timed_blocks(%rip), %rcx
	movslq	-84(%rbp), %rsi
	shlq	$7, %rsi
	movslq	-88(%rbp), %rax
	addq	%rsi, %rax
	imulq	$56, %rax, %rax
	addq	%rdx, 40(%rcx,%rax)
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movslq	516(%rax), %rbx
	movl	%ebx, %edi
	decl	%edi
	movl	%edi, 516(%rax)
	je	LBB27_6
## %bb.5:
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movslq	-4(%rax,%rbx,4), %rax
	movslq	%esi, %rsi
	addq	%rax, %rsi
	imulq	$56, %rsi, %rax
	addq	%rdx, 48(%rcx,%rax)
LBB27_6:
	addq	$440, %rsp                      ## imm = 0x1B8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB27_7:
Ltmp5:
	movq	%rax, %rbx
	leaq	-88(%rbp), %rdi
	callq	__ZN10TimedBlockD1Ev
	movq	%rbx, %rdi
	callq	__Unwind_Resume
Lfunc_end1:
	.cfi_endproc
	.section	__TEXT,__gcc_except_tab
	.p2align	2
GCC_except_table27:
Lexception1:
	.byte	255                             ## @LPStart Encoding = omit
	.byte	255                             ## @TType Encoding = omit
	.byte	1                               ## Call site Encoding = uleb128
	.uleb128 Lcst_end1-Lcst_begin1
Lcst_begin1:
	.uleb128 Lfunc_begin1-Lfunc_begin1      ## >> Call Site 1 <<
	.uleb128 Ltmp3-Lfunc_begin1             ##   Call between Lfunc_begin1 and Ltmp3
	.byte	0                               ##     has no landing pad
	.byte	0                               ##   On action: cleanup
	.uleb128 Ltmp3-Lfunc_begin1             ## >> Call Site 2 <<
	.uleb128 Ltmp4-Ltmp3                    ##   Call between Ltmp3 and Ltmp4
	.uleb128 Ltmp5-Lfunc_begin1             ##     jumps to Ltmp5
	.byte	0                               ##   On action: cleanup
	.uleb128 Ltmp4-Lfunc_begin1             ## >> Call Site 3 <<
	.uleb128 Lfunc_end1-Ltmp4               ##   Call between Ltmp4 and Lfunc_end1
	.byte	0                               ##     has no landing pad
	.byte	0                               ##   On action: cleanup
Lcst_end1:
	.p2align	2
                                        ## -- End function
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z16push_2d_triangleP14Render_Context2v2S1_S1_2v4P7TextureS1_S1_S1_ ## -- Begin function _Z16push_2d_triangleP14Render_Context2v2S1_S1_2v4P7TextureS1_S1_S1_
	.p2align	4, 0x90
__Z16push_2d_triangleP14Render_Context2v2S1_S1_2v4P7TextureS1_S1_S1_: ## @_Z16push_2d_triangleP14Render_Context2v2S1_S1_2v4P7TextureS1_S1_S1_
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vmovsd	(%rdi), %xmm8                   ## xmm8 = mem[0],zero
	vcvtdq2ps	%xmm8, %xmm8
	vmulps	%xmm0, %xmm8, %xmm0
	vmulps	%xmm1, %xmm8, %xmm1
	vmulps	%xmm2, %xmm8, %xmm2
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm0, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm1, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm2, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovlhps	%xmm6, %xmm5, %xmm0             ## xmm0 = xmm5[0],xmm6[0]
	vmovups	%xmm0, 36(%rax,%rcx)
	vmovlps	%xmm7, 52(%rax,%rcx)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%ymm0, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovlhps	%xmm4, %xmm3, %xmm0             ## xmm0 = xmm3[0],xmm4[0]
	vmovups	%xmm0, 96(%rax,%rcx)
	movq	%rsi, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	popq	%rbp
	vzeroupper
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z11render_tileP14Render_Contexti
LCPI29_0:
	.long	0x80000000                      ## float -0
LCPI29_1:
	.long	0xbf800000                      ## float -1
LCPI29_2:
	.long	0x3f800000                      ## float 1
LCPI29_3:
	.long	0x3f000000                      ## float 0.5
LCPI29_4:
	.long	0x7fffffff                      ## float NaN
LCPI29_5:
	.long	0x38d1b717                      ## float 9.99999974E-5
LCPI29_6:
	.long	0x3727c5ac                      ## float 9.99999974E-6
LCPI29_7:
	.long	0x7f7fffff                      ## float 3.40282347E+38
LCPI29_8:
	.long	0x00800000                      ## float 1.17549435E-38
LCPI29_10:
	.long	0x437f0000                      ## float 255
LCPI29_13:
	.long	255                             ## 0xff
LCPI29_14:
	.long	0x3f4ccccd                      ## float 0.800000011
LCPI29_15:
	.long	0x3e1fbe77                      ## float 0.156000003
LCPI29_16:
	.long	0x3e75c290                      ## float 0.24000001
LCPI29_17:
	.long	0x3e8a3d71                      ## float 0.270000011
LCPI29_20:
	.long	0x40ff7fe0                      ## float 7.98435974
LCPI29_22:
	.long	0x00000000                      ## float 0
	.section	__TEXT,__const
	.p2align	5
LCPI29_9:
	.long	0                               ## 0x0
	.long	1                               ## 0x1
	.long	2                               ## 0x2
	.long	3                               ## 0x3
	.long	4                               ## 0x4
	.long	5                               ## 0x5
	.long	6                               ## 0x6
	.long	7                               ## 0x7
LCPI29_11:
	.byte	2                               ## 0x2
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	6                               ## 0x6
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	10                              ## 0xa
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	14                              ## 0xe
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	18                              ## 0x12
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	22                              ## 0x16
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	26                              ## 0x1a
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	30                              ## 0x1e
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
LCPI29_12:
	.byte	1                               ## 0x1
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	5                               ## 0x5
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	9                               ## 0x9
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	13                              ## 0xd
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	17                              ## 0x11
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	21                              ## 0x15
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	25                              ## 0x19
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	29                              ## 0x1d
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4
LCPI29_18:
	.byte	2                               ## 0x2
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	6                               ## 0x6
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	10                              ## 0xa
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	14                              ## 0xe
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
LCPI29_19:
	.byte	1                               ## 0x1
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	5                               ## 0x5
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	9                               ## 0x9
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	13                              ## 0xd
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
LCPI29_21:
	.space	16
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z11render_tileP14Render_Contexti
	.p2align	4, 0x90
__Z11render_tileP14Render_Contexti:     ## @_Z11render_tileP14Render_Contexti
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$2016, %rsp                     ## imm = 0x7E0
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdi, %r14
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rax, %rdi
	movslq	(%rax), %rcx
	movq	_timed_blocks(%rip), %rbx
	shlq	$7, %rcx
	movq	%rcx, %rax
	movq	%rcx, 344(%rsp)                 ## 8-byte Spill
	leaq	2(%rcx), %rax
	imulq	$56, %rax, %rcx
	movabsq	$8589935430, %rax               ## imm = 0x200000346
	movq	%rax, 24(%rbx,%rcx)
	leaq	L___FUNCTION__._Z11render_tileP14Render_Contexti(%rip), %rax
	movq	%rax, 8(%rbx,%rcx)
	leaq	L_.str.11(%rip), %rdx
	movq	%rdx, 16(%rbx,%rcx)
	movq	%rax, (%rbx,%rcx)
	rdtsc
	movq	%rax, 352(%rsp)                 ## 8-byte Spill
	movq	%rdx, 24(%rsp)                  ## 8-byte Spill
	movq	%rcx, 360(%rsp)                 ## 8-byte Spill
	incl	32(%rbx,%rcx)
	movslq	516(%rdi), %rax
	leal	1(%rax), %edx
	movl	%edx, 516(%rdi)
	movl	$2, 4(%rdi,%rax,4)
	movslq	(%r14), %rax
	imulq	$1717986919, %rax, %rax         ## imm = 0x66666667
	movq	%rax, %rdx
	shrq	$63, %rdx
	shrq	$32, %rax
	sarl	$2, %eax
	addl	%edx, %eax
	movslq	%esi, %rbx
	imulq	$1717986919, %rbx, %rdx         ## imm = 0x66666667
	movq	%rdx, %rsi
	shrq	$63, %rsi
	shrq	$32, %rdx
	sarl	$2, %edx
	addl	%esi, %edx
	leal	(%rdx,%rdx), %esi
	leal	(%rsi,%rsi,4), %esi
	movl	%ebx, %edi
	subl	%esi, %edi
	imull	%eax, %edi
	movslq	4(%r14), %rsi
	imulq	$1717986919, %rsi, %rsi         ## imm = 0x66666667
	movq	%rsi, %rcx
	shrq	$63, %rcx
	shrq	$32, %rsi
	sarl	$2, %esi
	addl	%ecx, %esi
	vcvtsi2ss	%edi, %xmm0, %xmm0
	imull	%esi, %edx
	vcvtsi2ss	%edx, %xmm1, %xmm1
	addl	%edi, %eax
	vcvtsi2ss	%eax, %xmm2, %xmm2
	addl	%edx, %esi
	vcvtsi2ss	%esi, %xmm3, %xmm3
	vcvttss2si	%xmm0, %eax
	movl	%eax, 8(%rsp)                   ## 4-byte Spill
	vcvttss2si	%xmm1, %ecx
	vcvttss2si	%xmm2, %eax
	movl	%eax, 4(%rsp)                   ## 4-byte Spill
	vcvttss2si	%xmm3, %eax
	movl	%eax, 12(%rsp)                  ## 4-byte Spill
	cmpl	$0, 1008(%r14,%rbx,4)
	jle	LBB29_17
## %bb.1:
	vmovss	144(%r14), %xmm7                ## xmm7 = mem[0],zero,zero,zero
	vmovss	1672(%r14), %xmm1               ## xmm1 = mem[0],zero,zero,zero
	vmovss	72(%r14), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vsubss	%xmm0, %xmm1, %xmm1
	vmovss	140(%r14), %xmm6                ## xmm6 = mem[0],zero,zero,zero
	vmovsd	1664(%r14), %xmm3               ## xmm3 = mem[0],zero
	vmovsd	64(%r14), %xmm2                 ## xmm2 = mem[0],zero
	vsubps	%xmm2, %xmm3, %xmm3
	vmovshdup	%xmm3, %xmm4            ## xmm4 = xmm3[1,1,3,3]
	vmovss	136(%r14), %xmm10               ## xmm10 = mem[0],zero,zero,zero
	vmulss	%xmm3, %xmm10, %xmm5
	vxorps	%xmm12, %xmm12, %xmm12
	vaddss	%xmm5, %xmm12, %xmm5
	vmovss	%xmm6, 224(%rsp)                ## 4-byte Spill
	vmulss	%xmm4, %xmm6, %xmm6
	vaddss	%xmm5, %xmm6, %xmm5
	vmovss	%xmm7, 192(%rsp)                ## 4-byte Spill
	vmulss	%xmm1, %xmm7, %xmm6
	vaddss	%xmm5, %xmm6, %xmm8
	vmovss	132(%r14), %xmm15               ## xmm15 = mem[0],zero,zero,zero
	vmovss	124(%r14), %xmm9                ## xmm9 = mem[0],zero,zero,zero
	vmulss	%xmm3, %xmm9, %xmm5
	vaddss	%xmm5, %xmm12, %xmm5
	vmovss	128(%r14), %xmm7                ## xmm7 = mem[0],zero,zero,zero
	vmulss	%xmm4, %xmm7, %xmm6
	vaddss	%xmm5, %xmm6, %xmm5
	vmulss	%xmm1, %xmm15, %xmm6
	vaddss	%xmm5, %xmm6, %xmm11
	vmovss	116(%r14), %xmm6                ## xmm6 = mem[0],zero,zero,zero
	vmovss	112(%r14), %xmm5                ## xmm5 = mem[0],zero,zero,zero
	vmulss	%xmm3, %xmm5, %xmm3
	vaddss	%xmm3, %xmm12, %xmm3
	vmulss	%xmm4, %xmm6, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vmovss	120(%r14), %xmm4                ## xmm4 = mem[0],zero,zero,zero
	vmulss	%xmm1, %xmm4, %xmm1
	vaddss	%xmm3, %xmm1, %xmm1
	vbroadcastss	%xmm1, %ymm1
	vmovaps	%ymm1, 1280(%rsp)               ## 32-byte Spill
	vbroadcastss	%xmm11, %ymm1
	vmovaps	%ymm1, 1248(%rsp)               ## 32-byte Spill
	vbroadcastss	%xmm8, %ymm1
	vmovaps	%ymm1, 1216(%rsp)               ## 32-byte Spill
	vinsertps	$16, %xmm15, %xmm4, %xmm15 ## xmm15 = xmm4[0],xmm15[0],xmm4[2,3]
	vinsertps	$16, %xmm7, %xmm6, %xmm7 ## xmm7 = xmm6[0],xmm7[0],xmm6[2,3]
	vinsertps	$16, %xmm9, %xmm5, %xmm14 ## xmm14 = xmm5[0],xmm9[0],xmm5[2,3]
	xorl	%edx, %edx
	vbroadcastss	LCPI29_0(%rip), %xmm1   ## xmm1 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	%xmm1, 688(%rsp)                ## 16-byte Spill
	vbroadcastss	LCPI29_4(%rip), %xmm1   ## xmm1 = [NaN,NaN,NaN,NaN]
	vmovaps	%xmm1, 1200(%rsp)               ## 16-byte Spill
	vxorps	%xmm11, %xmm11, %xmm11
	movl	%ecx, 20(%rsp)                  ## 4-byte Spill
	movq	%rbx, 368(%rsp)                 ## 8-byte Spill
	.p2align	4, 0x90
LBB29_2:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB29_45 Depth 2
                                        ##       Child Loop BB29_47 Depth 3
	movq	184(%r14), %r10
	movq	208(%r14,%rbx,8), %rax
	movslq	(%rax,%rdx,4), %r11
	shlq	$7, %r11
	vmovsd	(%r10,%r11), %xmm1              ## xmm1 = mem[0],zero
	vmovss	8(%r10,%r11), %xmm3             ## xmm3 = mem[0],zero,zero,zero
	vsubps	%xmm2, %xmm1, %xmm1
	vmovshdup	%xmm1, %xmm4            ## xmm4 = xmm1[1,1,3,3]
	vsubss	%xmm0, %xmm3, %xmm3
	vbroadcastss	%xmm1, %xmm5
	vmulps	%xmm5, %xmm14, %xmm5
	vxorps	%xmm6, %xmm6, %xmm6
	vaddps	%xmm6, %xmm5, %xmm5
	vmulps	%xmm4, %xmm7, %xmm6
	vaddps	%xmm5, %xmm6, %xmm5
	vbroadcastss	%xmm3, %xmm6
	vmulps	%xmm6, %xmm15, %xmm6
	vaddps	%xmm5, %xmm6, %xmm13
	vmulss	%xmm1, %xmm10, %xmm1
	vxorps	%xmm5, %xmm5, %xmm5
	vaddss	%xmm5, %xmm1, %xmm1
	vmovss	224(%rsp), %xmm8                ## 4-byte Reload
                                        ## xmm8 = mem[0],zero,zero,zero
	vmulss	%xmm4, %xmm8, %xmm4
	vaddss	%xmm1, %xmm4, %xmm1
	vmovss	192(%rsp), %xmm12               ## 4-byte Reload
                                        ## xmm12 = mem[0],zero,zero,zero
	vmulss	%xmm3, %xmm12, %xmm3
	vaddss	%xmm1, %xmm3, %xmm9
	vmovsd	12(%r10,%r11), %xmm1            ## xmm1 = mem[0],zero
	vmovss	20(%r10,%r11), %xmm3            ## xmm3 = mem[0],zero,zero,zero
	vsubps	%xmm2, %xmm1, %xmm1
	vmovshdup	%xmm1, %xmm4            ## xmm4 = xmm1[1,1,3,3]
	vsubss	%xmm0, %xmm3, %xmm3
	vbroadcastss	%xmm1, %xmm5
	vmulps	%xmm5, %xmm14, %xmm5
	vaddps	LCPI29_21(%rip), %xmm5, %xmm5
	vmulps	%xmm4, %xmm7, %xmm6
	vaddps	%xmm5, %xmm6, %xmm5
	vbroadcastss	%xmm3, %xmm6
	vmulps	%xmm6, %xmm15, %xmm6
	vaddps	%xmm5, %xmm6, %xmm5
	vmulss	%xmm1, %xmm10, %xmm1
	vaddss	LCPI29_22(%rip), %xmm1, %xmm1
	vmulss	%xmm4, %xmm8, %xmm4
	vaddss	%xmm1, %xmm4, %xmm1
	vmulss	%xmm3, %xmm12, %xmm3
	vaddss	%xmm1, %xmm3, %xmm6
	vmovsd	24(%r10,%r11), %xmm1            ## xmm1 = mem[0],zero
	vmovss	32(%r10,%r11), %xmm3            ## xmm3 = mem[0],zero,zero,zero
	vsubps	%xmm2, %xmm1, %xmm1
	vmovshdup	%xmm1, %xmm2            ## xmm2 = xmm1[1,1,3,3]
	vsubss	%xmm0, %xmm3, %xmm0
	vbroadcastss	%xmm1, %xmm3
	vmovaps	%xmm14, 128(%rsp)               ## 16-byte Spill
	vmulps	%xmm3, %xmm14, %xmm3
	vaddps	LCPI29_21(%rip), %xmm3, %xmm3
	vmovaps	%xmm7, 512(%rsp)                ## 16-byte Spill
	vmulps	%xmm2, %xmm7, %xmm4
	vaddps	%xmm3, %xmm4, %xmm3
	vbroadcastss	%xmm0, %xmm4
	vmovaps	%xmm15, 1152(%rsp)              ## 16-byte Spill
	vmulps	%xmm4, %xmm15, %xmm4
	vaddps	%xmm3, %xmm4, %xmm14
	vmovss	%xmm10, 640(%rsp)               ## 4-byte Spill
	vmulss	%xmm1, %xmm10, %xmm1
	vaddss	LCPI29_22(%rip), %xmm1, %xmm1
	vmulss	%xmm2, %xmm8, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vmulss	%xmm0, %xmm12, %xmm0
	vmovaps	%xmm9, %xmm12
	vaddss	%xmm1, %xmm0, %xmm0
	movl	120(%r10,%r11), %esi
	vmovaps	%xmm14, %xmm10
	vmovaps	%xmm0, 80(%rsp)                 ## 16-byte Spill
	vmovaps	%xmm5, 480(%rsp)                ## 16-byte Spill
	vmovaps	%xmm5, %xmm9
	vmovaps	%xmm6, 704(%rsp)                ## 16-byte Spill
	vmovaps	%xmm6, 160(%rsp)                ## 16-byte Spill
	vmovaps	%xmm13, 448(%rsp)               ## 16-byte Spill
	vmovaps	%xmm12, 544(%rsp)               ## 16-byte Spill
	testb	$2, %sil
	je	LBB29_3
## %bb.4:                               ##   in Loop: Header=BB29_2 Depth=1
	vucomiss	%xmm9, %xmm9
	vmovaps	%xmm10, %xmm6
	jnp	LBB29_5
LBB29_6:                                ##   in Loop: Header=BB29_2 Depth=1
	vucomiss	%xmm13, %xmm13
	vmovaps	%xmm14, 1088(%rsp)              ## 16-byte Spill
	jp	LBB29_8
LBB29_7:                                ##   in Loop: Header=BB29_2 Depth=1
	vminss	%xmm13, %xmm6, %xmm6
LBB29_8:                                ##   in Loop: Header=BB29_2 Depth=1
	vmovshdup	%xmm10, %xmm8           ## xmm8 = xmm10[1,1,3,3]
	vmovshdup	%xmm9, %xmm1            ## xmm1 = xmm9[1,1,3,3]
	vucomiss	%xmm1, %xmm1
	vmovaps	%xmm8, %xmm3
	jp	LBB29_10
## %bb.9:                               ##   in Loop: Header=BB29_2 Depth=1
	vminss	%xmm1, %xmm8, %xmm3
LBB29_10:                               ##   in Loop: Header=BB29_2 Depth=1
	vmovaps	%xmm1, 256(%rsp)                ## 16-byte Spill
	vsubps	%xmm13, %xmm9, %xmm1
	vmovaps	%xmm1, 32(%rsp)                 ## 16-byte Spill
	vmovshdup	%xmm1, %xmm15           ## xmm15 = xmm1[1,1,3,3]
	vsubss	%xmm13, %xmm10, %xmm7
	vmovshdup	%xmm13, %xmm2           ## xmm2 = xmm13[1,1,3,3]
	vsubss	%xmm2, %xmm8, %xmm14
	vucomiss	%xmm2, %xmm2
	movq	%rdx, 376(%rsp)                 ## 8-byte Spill
	jp	LBB29_12
## %bb.11:                              ##   in Loop: Header=BB29_2 Depth=1
	vminss	%xmm2, %xmm3, %xmm3
LBB29_12:                               ##   in Loop: Header=BB29_2 Depth=1
	vmaxss	%xmm9, %xmm10, %xmm1
	vcmpunordss	%xmm9, %xmm9, %xmm5
	vblendvps	%xmm5, %xmm10, %xmm1, %xmm1
	vmaxss	%xmm13, %xmm1, %xmm5
	vcmpunordss	%xmm13, %xmm13, %xmm4
	vblendvps	%xmm4, %xmm1, %xmm5, %xmm1
	vmovaps	256(%rsp), %xmm5                ## 16-byte Reload
	vmaxss	%xmm5, %xmm8, %xmm4
	vcmpunordss	%xmm5, %xmm5, %xmm5
	vblendvps	%xmm5, %xmm8, %xmm4, %xmm4
	vmaxss	%xmm2, %xmm4, %xmm5
	vmovaps	%xmm2, 736(%rsp)                ## 16-byte Spill
	vcmpunordss	%xmm2, %xmm2, %xmm2
	vblendvps	%xmm2, %xmm4, %xmm5, %xmm2
	vroundss	$9, %xmm6, %xmm6, %xmm4
	vcvttss2si	%xmm4, %r8d
	vroundss	$10, %xmm1, %xmm1, %xmm1
	vcvttss2si	%xmm1, %edx
	vroundss	$9, %xmm3, %xmm3, %xmm1
	vcvttss2si	%xmm1, %eax
	vroundss	$10, %xmm2, %xmm2, %xmm1
	vcvttss2si	%xmm1, %ebx
	movl	8(%rsp), %edi                   ## 4-byte Reload
	cmpl	%edi, %r8d
	cmovlel	%edi, %r8d
	cmpl	%ecx, %eax
	cmovlel	%ecx, %eax
	movl	4(%rsp), %ecx                   ## 4-byte Reload
	cmpl	%ecx, %edx
	cmovgel	%ecx, %edx
	movl	12(%rsp), %ecx                  ## 4-byte Reload
	cmpl	%ecx, %ebx
	cmovgel	%ecx, %ebx
	movl	%ebx, 16(%rsp)                  ## 4-byte Spill
	vmovaps	%xmm7, 576(%rsp)                ## 16-byte Spill
	vmulss	%xmm7, %xmm15, %xmm1
	vmulss	32(%rsp), %xmm14, %xmm2         ## 16-byte Folded Reload
	vsubss	%xmm1, %xmm2, %xmm1
	vmovaps	%xmm1, 1056(%rsp)               ## 16-byte Spill
	vandps	1200(%rsp), %xmm1, %xmm1        ## 16-byte Folded Reload
	vmovss	LCPI29_5(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vucomiss	%xmm1, %xmm2
	ja	LBB29_69
## %bb.13:                              ##   in Loop: Header=BB29_2 Depth=1
	vmovaps	%xmm15, %xmm5
	vmovaps	%xmm14, %xmm4
	vmovaps	%xmm12, 1024(%rsp)              ## 16-byte Spill
	vmovaps	160(%rsp), %xmm1                ## 16-byte Reload
	vmovaps	544(%rsp), %xmm2                ## 16-byte Reload
	vsubss	%xmm2, %xmm1, %xmm6
	vsubss	%xmm2, %xmm0, %xmm12
	vucomiss	LCPI29_22(%rip), %xmm15
	vmovaps	256(%rsp), %xmm7                ## 16-byte Reload
	vmovss	%xmm6, (%rsp)                   ## 4-byte Spill
	jne	LBB29_15
	jp	LBB29_15
## %bb.14:                              ##   in Loop: Header=BB29_2 Depth=1
	movb	$1, %dil
	vucomiss	%xmm7, %xmm8
	ja	LBB29_30
LBB29_15:                               ##   in Loop: Header=BB29_2 Depth=1
	vmulss	%xmm5, %xmm5, %xmm1
	vmovaps	32(%rsp), %xmm2                 ## 16-byte Reload
	vmulss	%xmm2, %xmm2, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vmulss	%xmm6, %xmm6, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vsqrtss	%xmm1, %xmm1, %xmm1
	vmovss	LCPI29_6(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vucomiss	%xmm1, %xmm2
	jae	LBB29_16
## %bb.28:                              ##   in Loop: Header=BB29_2 Depth=1
	vmovss	LCPI29_2(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vdivss	%xmm1, %xmm2, %xmm1
	vbroadcastss	%xmm1, %xmm2
	vmulps	32(%rsp), %xmm2, %xmm3          ## 16-byte Folded Reload
	vmovshdup	%xmm3, %xmm2            ## xmm2 = xmm3[1,1,3,3]
	vmulss	%xmm1, %xmm6, %xmm1
	vmulss	%xmm2, %xmm4, %xmm2
	vmulss	576(%rsp), %xmm3, %xmm4         ## 16-byte Folded Reload
	vaddss	%xmm2, %xmm4, %xmm2
	vmovaps	%xmm14, %xmm4
	vmulss	%xmm1, %xmm12, %xmm1
	vaddss	%xmm2, %xmm1, %xmm1
	jmp	LBB29_29
	.p2align	4, 0x90
LBB29_3:                                ##   in Loop: Header=BB29_2 Depth=1
	vmovss	56(%r14), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vxorps	688(%rsp), %xmm0, %xmm0         ## 16-byte Folded Reload
	vmovsd	152(%r14), %xmm1                ## xmm1 = mem[0],zero
	vbroadcastss	%xmm0, %xmm0
	vmulps	448(%rsp), %xmm0, %xmm2         ## 16-byte Folded Reload
	vbroadcastss	%xmm12, %xmm3
	vdivps	%xmm3, %xmm2, %xmm2
	vaddps	%xmm2, %xmm2, %xmm2
	vdivps	%xmm1, %xmm2, %xmm2
	vmovss	LCPI29_2(%rip), %xmm9           ## xmm9 = mem[0],zero,zero,zero
	vaddps	%xmm2, %xmm9, %xmm3
	vbroadcastss	LCPI29_2(%rip), %xmm4   ## xmm4 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vsubps	%xmm2, %xmm4, %xmm2
	vblendps	$2, %xmm2, %xmm3, %xmm2         ## xmm2 = xmm3[0],xmm2[1],xmm3[2,3]
	vmulps	480(%rsp), %xmm0, %xmm3         ## 16-byte Folded Reload
	vmovaps	704(%rsp), %xmm7                ## 16-byte Reload
	vbroadcastss	%xmm7, %xmm5
	vdivps	%xmm5, %xmm3, %xmm3
	vaddps	%xmm3, %xmm3, %xmm3
	vdivps	%xmm1, %xmm3, %xmm3
	vaddps	%xmm3, %xmm9, %xmm5
	vsubps	%xmm3, %xmm4, %xmm3
	vblendps	$2, %xmm3, %xmm5, %xmm3         ## xmm3 = xmm5[0],xmm3[1],xmm5[2,3]
	vmulps	%xmm0, %xmm14, %xmm0
	vmovaps	80(%rsp), %xmm10                ## 16-byte Reload
	vbroadcastss	%xmm10, %xmm5
	vdivps	%xmm5, %xmm0, %xmm0
	vmovss	LCPI29_1(%rip), %xmm5           ## xmm5 = mem[0],zero,zero,zero
	vdivss	%xmm12, %xmm5, %xmm6
	vmovaps	%xmm6, 544(%rsp)                ## 16-byte Spill
	vaddps	%xmm0, %xmm0, %xmm0
	vdivps	%xmm1, %xmm0, %xmm0
	vdivss	%xmm7, %xmm5, %xmm1
	vmovaps	%xmm1, 160(%rsp)                ## 16-byte Spill
	vsubps	%xmm0, %xmm4, %xmm1
	vaddps	%xmm0, %xmm9, %xmm0
	vblendps	$2, %xmm1, %xmm0, %xmm0         ## xmm0 = xmm0[0],xmm1[1],xmm0[2,3]
	vbroadcastss	LCPI29_3(%rip), %xmm1   ## xmm1 = [5.0E-1,5.0E-1,5.0E-1,5.0E-1]
	vmulps	%xmm1, %xmm2, %xmm2
	vmulps	%xmm1, %xmm3, %xmm3
	vmulps	%xmm1, %xmm0, %xmm1
	vmovsd	(%r14), %xmm0                   ## xmm0 = mem[0],zero
	vcvtdq2ps	%xmm0, %xmm4
	vmulps	%xmm4, %xmm2, %xmm13
	vmulps	%xmm4, %xmm3, %xmm9
	vmulps	%xmm4, %xmm1, %xmm7
	vdivss	%xmm10, %xmm5, %xmm0
	vmovaps	%xmm7, %xmm10
	vucomiss	%xmm9, %xmm9
	vmovaps	%xmm10, %xmm6
	jp	LBB29_6
LBB29_5:                                ##   in Loop: Header=BB29_2 Depth=1
	vminss	%xmm9, %xmm10, %xmm6
	vucomiss	%xmm13, %xmm13
	vmovaps	%xmm14, 1088(%rsp)              ## 16-byte Spill
	jnp	LBB29_7
	jmp	LBB29_8
LBB29_16:                               ##   in Loop: Header=BB29_2 Depth=1
	vxorps	%xmm3, %xmm3, %xmm3
	vmulss	%xmm3, %xmm4, %xmm1
	vmulss	576(%rsp), %xmm3, %xmm2         ## 16-byte Folded Reload
	vaddss	%xmm1, %xmm2, %xmm1
	vmulss	%xmm3, %xmm12, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vxorps	%xmm3, %xmm3, %xmm3
LBB29_29:                               ##   in Loop: Header=BB29_2 Depth=1
	vmulss	%xmm3, %xmm1, %xmm1
	vaddss	%xmm1, %xmm13, %xmm1
	vucomiss	%xmm1, %xmm10
	seta	%dil
LBB29_30:                               ##   in Loop: Header=BB29_2 Depth=1
	vucomiss	LCPI29_22(%rip), %xmm4
	jne	LBB29_32
	jp	LBB29_32
## %bb.31:                              ##   in Loop: Header=BB29_2 Depth=1
	movb	$1, %r15b
	vucomiss	%xmm8, %xmm7
	ja	LBB29_36
LBB29_32:                               ##   in Loop: Header=BB29_2 Depth=1
	vmulss	%xmm4, %xmm4, %xmm1
	vmovaps	576(%rsp), %xmm3                ## 16-byte Reload
	vmulss	%xmm3, %xmm3, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vmulss	%xmm12, %xmm12, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vsqrtss	%xmm1, %xmm1, %xmm1
	vmovss	LCPI29_6(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vucomiss	%xmm1, %xmm2
	jae	LBB29_33
## %bb.34:                              ##   in Loop: Header=BB29_2 Depth=1
	vmovss	LCPI29_2(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vdivss	%xmm1, %xmm2, %xmm1
	vmulss	%xmm1, %xmm3, %xmm2
	vmulss	%xmm1, %xmm4, %xmm3
	vmulss	%xmm1, %xmm12, %xmm1
	vmulss	%xmm3, %xmm5, %xmm4
	vmulss	32(%rsp), %xmm2, %xmm5          ## 16-byte Folded Reload
	vaddss	%xmm4, %xmm5, %xmm4
	vmovaps	%xmm15, %xmm5
	vmulss	(%rsp), %xmm1, %xmm1            ## 4-byte Folded Reload
	vaddss	%xmm4, %xmm1, %xmm1
	vmovaps	%xmm14, %xmm4
	vinsertps	$16, %xmm3, %xmm2, %xmm3 ## xmm3 = xmm2[0],xmm3[0],xmm2[2,3]
	jmp	LBB29_35
LBB29_33:                               ##   in Loop: Header=BB29_2 Depth=1
	vxorps	%xmm3, %xmm3, %xmm3
	vmulss	%xmm3, %xmm5, %xmm1
	vmulss	32(%rsp), %xmm3, %xmm2          ## 16-byte Folded Reload
	vaddss	%xmm1, %xmm2, %xmm1
	vmulss	(%rsp), %xmm3, %xmm2            ## 4-byte Folded Reload
	vaddss	%xmm1, %xmm2, %xmm1
	vxorps	%xmm3, %xmm3, %xmm3
LBB29_35:                               ##   in Loop: Header=BB29_2 Depth=1
	vmulss	%xmm3, %xmm1, %xmm1
	vaddss	%xmm1, %xmm13, %xmm1
	vucomiss	%xmm1, %xmm9
	seta	%r15b
LBB29_36:                               ##   in Loop: Header=BB29_2 Depth=1
	vsubss	%xmm8, %xmm7, %xmm1
	vucomiss	LCPI29_22(%rip), %xmm1
	jne	LBB29_38
	jp	LBB29_38
## %bb.37:                              ##   in Loop: Header=BB29_2 Depth=1
	movb	$1, %cl
	vmovaps	736(%rsp), %xmm1                ## 16-byte Reload
	vucomiss	%xmm7, %xmm1
	ja	LBB29_42
LBB29_38:                               ##   in Loop: Header=BB29_2 Depth=1
	vsubss	%xmm9, %xmm10, %xmm3
	vsubss	%xmm7, %xmm8, %xmm6
	vsubss	160(%rsp), %xmm0, %xmm1         ## 16-byte Folded Reload
	vmulss	%xmm6, %xmm6, %xmm2
	vmulss	%xmm3, %xmm3, %xmm4
	vaddss	%xmm2, %xmm4, %xmm2
	vmulss	%xmm1, %xmm1, %xmm4
	vaddss	%xmm2, %xmm4, %xmm2
	vsqrtss	%xmm2, %xmm2, %xmm5
	vmovss	LCPI29_6(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vucomiss	%xmm5, %xmm2
	jae	LBB29_39
## %bb.40:                              ##   in Loop: Header=BB29_2 Depth=1
	vmovss	LCPI29_2(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vdivss	%xmm5, %xmm2, %xmm2
	vmulss	%xmm2, %xmm3, %xmm3
	vmulss	%xmm2, %xmm6, %xmm4
	vmulss	%xmm2, %xmm1, %xmm1
	vmulss	%xmm4, %xmm15, %xmm2
	vmulss	32(%rsp), %xmm3, %xmm5          ## 16-byte Folded Reload
	vaddss	%xmm2, %xmm5, %xmm2
	vmovaps	%xmm15, %xmm5
	vmulss	(%rsp), %xmm1, %xmm1            ## 4-byte Folded Reload
	vaddss	%xmm2, %xmm1, %xmm1
	vinsertps	$16, %xmm4, %xmm3, %xmm3 ## xmm3 = xmm3[0],xmm4[0],xmm3[2,3]
	jmp	LBB29_41
LBB29_39:                               ##   in Loop: Header=BB29_2 Depth=1
	vxorps	%xmm3, %xmm3, %xmm3
	vmovaps	%xmm15, %xmm5
	vmulss	%xmm3, %xmm15, %xmm1
	vmulss	32(%rsp), %xmm3, %xmm2          ## 16-byte Folded Reload
	vaddss	%xmm1, %xmm2, %xmm1
	vmulss	(%rsp), %xmm3, %xmm2            ## 4-byte Folded Reload
	vaddss	%xmm1, %xmm2, %xmm1
	vxorps	%xmm3, %xmm3, %xmm3
LBB29_41:                               ##   in Loop: Header=BB29_2 Depth=1
	vmulss	%xmm3, %xmm1, %xmm1
	vaddss	%xmm1, %xmm9, %xmm1
	vucomiss	%xmm1, %xmm13
	seta	%cl
	vmovaps	%xmm14, %xmm4
LBB29_42:                               ##   in Loop: Header=BB29_2 Depth=1
	testb	$2, %sil
	sete	%bl
	movq	1760(%r14), %rsi
	cmpl	$0, 6448(%rsi)
	setne	%r12b
	cmpl	$0, 6460(%rsi)
	setne	(%rsp)                          ## 1-byte Folded Spill
	cmpl	16(%rsp), %eax                  ## 4-byte Folded Reload
	jge	LBB29_69
## %bb.43:                              ##   in Loop: Header=BB29_2 Depth=1
	vmovsd	60(%r10,%r11), %xmm1            ## xmm1 = mem[0],zero
	vmovaps	%xmm0, 992(%rsp)                ## 16-byte Spill
	vmovaps	128(%rsp), %xmm0                ## 16-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	vmovaps	%xmm9, 832(%rsp)                ## 16-byte Spill
	vxorps	%xmm9, %xmm9, %xmm9
	vaddss	%xmm2, %xmm9, %xmm2
	vmovshdup	%xmm1, %xmm3            ## xmm3 = xmm1[1,1,3,3]
	vmovaps	512(%rsp), %xmm15               ## 16-byte Reload
	vmovaps	%xmm4, 304(%rsp)                ## 16-byte Spill
	vmulss	%xmm3, %xmm15, %xmm4
	vaddss	%xmm2, %xmm4, %xmm2
	vmovss	%xmm2, 416(%rsp)                ## 4-byte Spill
	vmovsd	72(%r10,%r11), %xmm4            ## xmm4 = mem[0],zero
	vmovaps	%xmm5, 960(%rsp)                ## 16-byte Spill
	vmulss	%xmm4, %xmm0, %xmm5
	vaddss	%xmm5, %xmm9, %xmm5
	vmovshdup	%xmm4, %xmm6            ## xmm6 = xmm4[1,1,3,3]
	vmulss	%xmm6, %xmm15, %xmm2
	vaddss	%xmm5, %xmm2, %xmm2
	vmovss	%xmm2, 384(%rsp)                ## 4-byte Spill
	vmovsd	84(%r10,%r11), %xmm5            ## xmm5 = mem[0],zero
	vmulss	%xmm5, %xmm0, %xmm14
	vaddss	%xmm9, %xmm14, %xmm14
	vmovshdup	%xmm5, %xmm2            ## xmm2 = xmm5[1,1,3,3]
	vmovaps	%xmm2, 928(%rsp)                ## 16-byte Spill
	vmulss	%xmm2, %xmm15, %xmm2
	vaddss	%xmm2, %xmm14, %xmm2
	vmovss	%xmm2, 896(%rsp)                ## 4-byte Spill
	vmovshdup	%xmm0, %xmm2            ## xmm2 = xmm0[1,1,3,3]
	vmulss	%xmm1, %xmm2, %xmm12
	vmovaps	%xmm10, 128(%rsp)               ## 16-byte Spill
	vmovss	640(%rsp), %xmm10               ## 4-byte Reload
                                        ## xmm10 = mem[0],zero,zero,zero
	vmulss	%xmm1, %xmm10, %xmm14
	vmulss	%xmm4, %xmm2, %xmm7
	vmulss	%xmm4, %xmm10, %xmm4
	vmulss	%xmm5, %xmm2, %xmm0
	vmovss	%xmm0, 864(%rsp)                ## 4-byte Spill
	vmulss	%xmm5, %xmm10, %xmm0
	vmovss	%xmm0, 1120(%rsp)               ## 4-byte Spill
	vmovss	68(%r10,%r11), %xmm10           ## xmm10 = mem[0],zero,zero,zero
	vmovaps	1152(%rsp), %xmm1               ## 16-byte Reload
	vmulss	%xmm1, %xmm10, %xmm5
	vaddss	416(%rsp), %xmm5, %xmm0         ## 4-byte Folded Reload
	vmovaps	%xmm0, 416(%rsp)                ## 16-byte Spill
	vaddss	%xmm9, %xmm12, %xmm12
	vmovshdup	%xmm15, %xmm5           ## xmm5 = xmm15[1,1,3,3]
	vmulss	%xmm3, %xmm5, %xmm2
	vaddss	%xmm2, %xmm12, %xmm15
	vaddss	%xmm9, %xmm14, %xmm2
	vmovss	224(%rsp), %xmm14               ## 4-byte Reload
                                        ## xmm14 = mem[0],zero,zero,zero
	vmulss	%xmm3, %xmm14, %xmm3
	vaddss	%xmm2, %xmm3, %xmm0
	vmovss	%xmm0, 640(%rsp)                ## 4-byte Spill
	vmovss	80(%r10,%r11), %xmm3            ## xmm3 = mem[0],zero,zero,zero
	vmulss	%xmm3, %xmm1, %xmm2
	vaddss	384(%rsp), %xmm2, %xmm0         ## 4-byte Folded Reload
	vmovaps	%xmm0, 384(%rsp)                ## 16-byte Spill
	vaddss	%xmm7, %xmm9, %xmm2
	vmulss	%xmm6, %xmm5, %xmm12
	vaddss	%xmm2, %xmm12, %xmm0
	vmovss	%xmm0, 512(%rsp)                ## 4-byte Spill
	vaddss	%xmm4, %xmm9, %xmm4
	vmulss	%xmm6, %xmm14, %xmm6
	vmovaps	%xmm14, %xmm7
	vaddss	%xmm4, %xmm6, %xmm14
	vmovss	92(%r10,%r11), %xmm6            ## xmm6 = mem[0],zero,zero,zero
	vmulss	%xmm6, %xmm1, %xmm2
	vaddss	896(%rsp), %xmm2, %xmm0         ## 4-byte Folded Reload
	vmovaps	%xmm0, 320(%rsp)                ## 16-byte Spill
	vaddss	864(%rsp), %xmm9, %xmm2         ## 4-byte Folded Reload
	vmovaps	928(%rsp), %xmm0                ## 16-byte Reload
	vmulss	%xmm0, %xmm5, %xmm5
	vaddss	%xmm2, %xmm5, %xmm12
	vmulss	%xmm0, %xmm7, %xmm5
	vaddss	1120(%rsp), %xmm9, %xmm4        ## 4-byte Folded Reload
	vaddss	%xmm4, %xmm5, %xmm9
	vmovshdup	%xmm1, %xmm4            ## xmm4 = xmm1[1,1,3,3]
	vmulss	%xmm4, %xmm10, %xmm5
	vmovss	192(%rsp), %xmm7                ## 4-byte Reload
                                        ## xmm7 = mem[0],zero,zero,zero
	vmulss	%xmm7, %xmm10, %xmm1
	vmulss	%xmm3, %xmm4, %xmm2
	vmulss	%xmm3, %xmm7, %xmm3
	vmulss	%xmm6, %xmm4, %xmm4
	vmulss	%xmm6, %xmm7, %xmm6
	vaddss	%xmm5, %xmm15, %xmm0
	vmovaps	%xmm0, 800(%rsp)                ## 16-byte Spill
	vaddss	640(%rsp), %xmm1, %xmm15        ## 4-byte Folded Reload
	vaddss	512(%rsp), %xmm2, %xmm2         ## 4-byte Folded Reload
	vaddss	%xmm3, %xmm14, %xmm0
	vmovaps	%xmm0, 96(%rsp)                 ## 16-byte Spill
	vaddss	%xmm4, %xmm12, %xmm0
	vmovaps	%xmm0, 608(%rsp)                ## 16-byte Spill
	vaddss	%xmm6, %xmm9, %xmm0
	vmovaps	%xmm0, 768(%rsp)                ## 16-byte Spill
	vbroadcastss	LCPI29_1(%rip), %ymm12  ## ymm12 = [-1.0E+0,-1.0E+0,-1.0E+0,-1.0E+0,-1.0E+0,-1.0E+0,-1.0E+0,-1.0E+0]
	vbroadcastss	%xmm13, %ymm3
	vblendps	$32, %ymm3, %ymm12, %ymm4       ## ymm4 = ymm12[0,1,2,3,4],ymm3[5],ymm12[6,7]
	vmovaps	832(%rsp), %xmm10               ## 16-byte Reload
	vbroadcastss	%xmm10, %ymm5
	vblendps	$64, %ymm5, %ymm4, %ymm4        ## ymm4 = ymm4[0,1,2,3,4,5],ymm5[6],ymm4[7]
	vblendps	$128, %ymm3, %ymm4, %ymm0       ## ymm0 = ymm4[0,1,2,3,4,5,6],ymm3[7]
	vmovaps	128(%rsp), %xmm7                ## 16-byte Reload
	vbroadcastss	%xmm7, %ymm3
	vblendps	$96, %ymm3, %ymm12, %ymm3       ## ymm3 = ymm12[0,1,2,3,4],ymm3[5,6],ymm12[7]
	vblendps	$128, %ymm5, %ymm3, %ymm3       ## ymm3 = ymm3[0,1,2,3,4,5,6],ymm5[7]
	vbroadcastss	256(%rsp), %ymm4        ## 16-byte Folded Reload
	vmovaps	736(%rsp), %xmm1                ## 16-byte Reload
	vbroadcastss	%xmm1, %ymm5
	vblendps	$32, %ymm5, %ymm12, %ymm6       ## ymm6 = ymm12[0,1,2,3,4],ymm5[5],ymm12[6,7]
	vblendps	$64, %ymm4, %ymm6, %ymm9        ## ymm9 = ymm6[0,1,2,3,4,5],ymm4[6],ymm6[7]
	vblendps	$128, %ymm5, %ymm9, %ymm14      ## ymm14 = ymm9[0,1,2,3,4,5,6],ymm5[7]
	vbroadcastss	%xmm8, %ymm8
	vblendps	$96, %ymm8, %ymm12, %ymm9       ## ymm9 = ymm12[0,1,2,3,4],ymm8[5,6],ymm12[7]
	vblendps	$128, %ymm4, %ymm9, %ymm9       ## ymm9 = ymm9[0,1,2,3,4,5,6],ymm4[7]
	vmovaps	%ymm0, 928(%rsp)                ## 32-byte Spill
	vsubps	%ymm0, %ymm3, %ymm3
	vmovaps	%ymm14, 896(%rsp)               ## 32-byte Spill
	vsubps	%ymm14, %ymm9, %ymm9
	vdivps	%ymm9, %ymm3, %ymm3
	vmovaps	%ymm3, 864(%rsp)                ## 32-byte Spill
	vmovaps	%ymm12, 1120(%rsp)              ## 32-byte Spill
	vblendps	$32, %ymm8, %ymm12, %ymm3       ## ymm3 = ymm12[0,1,2,3,4],ymm8[5],ymm12[6,7]
	vblendps	$64, %ymm4, %ymm3, %ymm3        ## ymm3 = ymm3[0,1,2,3,4,5],ymm4[6],ymm3[7]
	vblendps	$128, %ymm5, %ymm3, %ymm3       ## ymm3 = ymm3[0,1,2,3,4,5,6],ymm5[7]
	vmovaps	%ymm3, 1952(%rsp)               ## 32-byte Spill
	vblendps	$64, %ymm8, %ymm6, %ymm3        ## ymm3 = ymm6[0,1,2,3,4,5],ymm8[6],ymm6[7]
	vblendps	$128, %ymm4, %ymm3, %ymm3       ## ymm3 = ymm3[0,1,2,3,4,5,6],ymm4[7]
	vmovaps	%ymm3, 1920(%rsp)               ## 32-byte Spill
	vinsertps	$28, %xmm13, %xmm10, %xmm0 ## xmm0 = xmm10[0],xmm13[0],zero,zero
	vblendps	$14, LCPI29_21(%rip), %xmm7, %xmm3 ## xmm3 = xmm7[0],mem[1,2,3]
	vshufps	$65, %xmm0, %xmm3, %xmm0        ## xmm0 = xmm3[1,0],xmm0[0,1]
	leaq	60(%r10,%r11), %r9
	vmovaps	688(%rsp), %xmm6                ## 16-byte Reload
	vxorps	576(%rsp), %xmm6, %xmm3         ## 16-byte Folded Reload
	vmovss	LCPI29_2(%rip), %xmm4           ## xmm4 = mem[0],zero,zero,zero
	vdivss	1056(%rsp), %xmm4, %xmm4        ## 16-byte Folded Reload
	movzbl	%dil, %esi
	negl	%esi
	movzbl	%r15b, %edi
	negl	%edi
	andb	%bl, %r12b
	andb	%bl, (%rsp)                     ## 1-byte Folded Spill
	movzbl	%cl, %ebx
	negl	%ebx
	vinsertf128	$1, %xmm0, %ymm11, %ymm0
	vmovaps	%ymm0, 832(%rsp)                ## 32-byte Spill
	vbroadcastss	%xmm13, %ymm14
	vbroadcastsd	%xmm1, %ymm0
	vmovaps	%ymm0, 256(%rsp)                ## 32-byte Spill
	vbroadcastss	304(%rsp), %ymm0        ## 16-byte Folded Reload
	vmovaps	%ymm0, 224(%rsp)                ## 32-byte Spill
	vbroadcastss	%xmm3, %ymm0
	vmovaps	%ymm0, 192(%rsp)                ## 32-byte Spill
	vbroadcastss	%xmm4, %ymm5
	vxorps	960(%rsp), %xmm6, %xmm0         ## 16-byte Folded Reload
	vmovdqa	LCPI29_9(%rip), %ymm6           ## ymm6 = [0,1,2,3,4,5,6,7]
	vbroadcastss	%xmm0, %ymm0
	vmovaps	%ymm0, 576(%rsp)                ## 32-byte Spill
	vbroadcastss	32(%rsp), %ymm0         ## 16-byte Folded Reload
	vmovaps	%ymm0, 32(%rsp)                 ## 32-byte Spill
	vmovd	%ebx, %xmm0
	vpbroadcastd	%xmm0, %ymm0
	vmovdqa	%ymm0, 736(%rsp)                ## 32-byte Spill
	vmovd	%edi, %xmm0
	vpbroadcastd	%xmm0, %ymm0
	vmovdqa	%ymm0, 640(%rsp)                ## 32-byte Spill
	vmovd	%esi, %xmm0
	vpbroadcastd	%xmm0, %ymm0
	vmovdqa	%ymm0, 1152(%rsp)               ## 32-byte Spill
	vbroadcastss	544(%rsp), %ymm0        ## 16-byte Folded Reload
	vmovaps	%ymm0, 544(%rsp)                ## 32-byte Spill
	vbroadcastss	160(%rsp), %ymm0        ## 16-byte Folded Reload
	vmovaps	%ymm0, 160(%rsp)                ## 32-byte Spill
	vbroadcastss	992(%rsp), %ymm0        ## 16-byte Folded Reload
	vmovaps	%ymm0, 512(%rsp)                ## 32-byte Spill
	vmovaps	448(%rsp), %xmm1                ## 16-byte Reload
	vbroadcastss	%xmm1, %ymm0
	vmovaps	%ymm0, 1856(%rsp)               ## 32-byte Spill
	vmovshdup	%xmm1, %xmm0            ## xmm0 = xmm1[1,1,3,3]
	vbroadcastsd	%xmm0, %ymm0
	vmovaps	%ymm0, 1824(%rsp)               ## 32-byte Spill
	vbroadcastss	1024(%rsp), %ymm0       ## 16-byte Folded Reload
	vmovaps	%ymm0, 1792(%rsp)               ## 32-byte Spill
	vmovaps	480(%rsp), %xmm3                ## 16-byte Reload
	vbroadcastss	%xmm3, %ymm0
	vmovaps	%ymm0, 1760(%rsp)               ## 32-byte Spill
	vmovshdup	%xmm3, %xmm0            ## xmm0 = xmm3[1,1,3,3]
	vbroadcastsd	%xmm0, %ymm0
	vmovaps	%ymm0, 1728(%rsp)               ## 32-byte Spill
	vbroadcastss	704(%rsp), %ymm0        ## 16-byte Folded Reload
	vmovaps	%ymm0, 1696(%rsp)               ## 32-byte Spill
	vmovaps	1088(%rsp), %xmm3               ## 16-byte Reload
	vbroadcastss	%xmm3, %ymm0
	vmovaps	%ymm0, 1664(%rsp)               ## 32-byte Spill
	vmovshdup	%xmm3, %xmm0            ## xmm0 = xmm3[1,1,3,3]
	vbroadcastsd	%xmm0, %ymm0
	vmovaps	%ymm0, 1632(%rsp)               ## 32-byte Spill
	vbroadcastss	80(%rsp), %ymm0         ## 16-byte Folded Reload
	vmovaps	%ymm0, 1600(%rsp)               ## 32-byte Spill
	vmovsd	36(%r10,%r11), %xmm0            ## xmm0 = mem[0],zero
	vbroadcastss	%xmm0, %ymm3
	vmovaps	%ymm3, 704(%rsp)                ## 32-byte Spill
	vmovshdup	%xmm0, %xmm0            ## xmm0 = xmm0[1,1,3,3]
	vbroadcastsd	%xmm0, %ymm0
	vmovaps	%ymm0, 1088(%rsp)               ## 32-byte Spill
	vmovsd	44(%r10,%r11), %xmm0            ## xmm0 = mem[0],zero
	vbroadcastss	%xmm0, %ymm3
	vmovaps	%ymm3, 1056(%rsp)               ## 32-byte Spill
	vmovshdup	%xmm0, %xmm0            ## xmm0 = xmm0[1,1,3,3]
	vbroadcastsd	%xmm0, %ymm0
	vmovaps	%ymm0, 1024(%rsp)               ## 32-byte Spill
	vmovsd	52(%r10,%r11), %xmm0            ## xmm0 = mem[0],zero
	vbroadcastss	%xmm0, %ymm3
	vmovaps	%ymm3, 992(%rsp)                ## 32-byte Spill
	vmovshdup	%xmm0, %xmm0            ## xmm0 = xmm0[1,1,3,3]
	vbroadcastsd	%xmm0, %ymm0
	vmovaps	%ymm0, 960(%rsp)                ## 32-byte Spill
	vbroadcastss	416(%rsp), %ymm0        ## 16-byte Folded Reload
	vmovaps	%ymm0, 1568(%rsp)               ## 32-byte Spill
	vbroadcastss	800(%rsp), %ymm0        ## 16-byte Folded Reload
	vmovaps	%ymm0, 1536(%rsp)               ## 32-byte Spill
	vbroadcastss	%xmm15, %ymm0
	vmovaps	%ymm0, 1504(%rsp)               ## 32-byte Spill
	vbroadcastss	384(%rsp), %ymm0        ## 16-byte Folded Reload
	vmovaps	%ymm0, 1472(%rsp)               ## 32-byte Spill
	vbroadcastss	%xmm2, %ymm0
	vmovaps	%ymm0, 1440(%rsp)               ## 32-byte Spill
	vbroadcastss	96(%rsp), %ymm0         ## 16-byte Folded Reload
	vmovaps	%ymm0, 1408(%rsp)               ## 32-byte Spill
	vbroadcastss	320(%rsp), %ymm0        ## 16-byte Folded Reload
	vmovaps	%ymm0, 1376(%rsp)               ## 32-byte Spill
	vbroadcastss	608(%rsp), %ymm0        ## 16-byte Folded Reload
	vmovaps	%ymm0, 1344(%rsp)               ## 32-byte Spill
	vcvtsi2ss	%r8d, %xmm2, %xmm0
	vmovss	%xmm0, 320(%rsp)                ## 4-byte Spill
	vbroadcastss	768(%rsp), %ymm0        ## 16-byte Folded Reload
	vmovaps	%ymm0, 1312(%rsp)               ## 32-byte Spill
	vcvtsi2ss	%edx, %xmm2, %xmm0
	vmovss	%xmm0, 304(%rsp)                ## 4-byte Spill
	vmovaps	%ymm14, 128(%rsp)               ## 32-byte Spill
	jmp	LBB29_45
	.p2align	4, 0x90
LBB29_44:                               ##   in Loop: Header=BB29_45 Depth=2
	movl	80(%rsp), %eax                  ## 4-byte Reload
	cmpl	16(%rsp), %eax                  ## 4-byte Folded Reload
	je	LBB29_69
LBB29_45:                               ##   Parent Loop BB29_2 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB29_47 Depth 3
	movl	%eax, %r10d
	vcvtsi2ss	%eax, %xmm11, %xmm0
	vbroadcastss	%xmm0, %ymm9
	leal	1(%r10), %eax
	movl	%eax, 80(%rsp)                  ## 4-byte Spill
	vcvtsi2ss	%eax, %xmm11, %xmm0
	vmovaps	1952(%rsp), %ymm14              ## 32-byte Reload
	vcmpleps	%ymm14, %ymm9, %ymm1
	vbroadcastss	%xmm0, %ymm0
	vcmpleps	%ymm0, %ymm14, %ymm2
	vandps	%ymm1, %ymm2, %ymm1
	vbroadcastss	LCPI29_7(%rip), %ymm2   ## ymm2 = [3.40282347E+38,3.40282347E+38,3.40282347E+38,3.40282347E+38,3.40282347E+38,3.40282347E+38,3.40282347E+38,3.40282347E+38]
	vmovaps	832(%rsp), %ymm4                ## 32-byte Reload
	vblendvps	%ymm1, %ymm4, %ymm2, %ymm2
	vbroadcastss	LCPI29_8(%rip), %ymm3   ## ymm3 = [1.17549435E-38,1.17549435E-38,1.17549435E-38,1.17549435E-38,1.17549435E-38,1.17549435E-38,1.17549435E-38,1.17549435E-38]
	vblendvps	%ymm1, %ymm4, %ymm3, %ymm1
	vmovaps	896(%rsp), %ymm12               ## 32-byte Reload
	vsubps	%ymm12, %ymm9, %ymm3
	vmovaps	864(%rsp), %ymm13               ## 32-byte Reload
	vmulps	%ymm3, %ymm13, %ymm3
	vmovaps	928(%rsp), %ymm8                ## 32-byte Reload
	vaddps	%ymm3, %ymm8, %ymm3
	vcmpltps	%ymm9, %ymm14, %ymm4
	vmovaps	1920(%rsp), %ymm15              ## 32-byte Reload
	vcmpltps	%ymm9, %ymm15, %ymm7
	vxorps	%ymm4, %ymm7, %ymm4
	vcmpltps	%ymm2, %ymm3, %ymm7
	vandps	%ymm4, %ymm7, %ymm7
	vblendvps	%ymm7, %ymm3, %ymm2, %ymm2
	vcmpltps	%ymm3, %ymm1, %ymm7
	vandps	%ymm4, %ymm7, %ymm4
	vblendvps	%ymm4, %ymm3, %ymm1, %ymm1
	vsubps	%ymm12, %ymm0, %ymm3
	vmulps	%ymm3, %ymm13, %ymm3
	vaddps	%ymm3, %ymm8, %ymm3
	vcmpltps	%ymm0, %ymm14, %ymm4
	vmovaps	128(%rsp), %ymm14               ## 32-byte Reload
	vcmpltps	%ymm0, %ymm15, %ymm0
	vxorps	%ymm4, %ymm0, %ymm0
	vcmpltps	%ymm2, %ymm3, %ymm4
	vandps	%ymm0, %ymm4, %ymm4
	vblendvps	%ymm4, %ymm3, %ymm2, %ymm2
	vcmpltps	%ymm3, %ymm1, %ymm4
	vandps	%ymm0, %ymm4, %ymm0
	vblendvps	%ymm0, %ymm3, %ymm1, %ymm0
	vextractf128	$1, %ymm2, %xmm1
	vmovshdup	%xmm1, %xmm2            ## xmm2 = xmm1[1,1,3,3]
	vpermilpd	$1, %xmm1, %xmm3        ## xmm3 = xmm1[1,0]
	vpermilps	$255, %xmm1, %xmm1      ## xmm1 = xmm1[3,3,3,3]
	vminss	%xmm1, %xmm3, %xmm1
	vminss	%xmm1, %xmm2, %xmm1
	vextractf128	$1, %ymm0, %xmm0
	vpermilpd	$1, %xmm0, %xmm2        ## xmm2 = xmm0[1,0]
	vpermilps	$255, %xmm0, %xmm3      ## xmm3 = xmm0[3,3,3,3]
	vmaxss	%xmm3, %xmm2, %xmm2
	vmovshdup	%xmm0, %xmm0            ## xmm0 = xmm0[1,1,3,3]
	vmaxss	%xmm2, %xmm0, %xmm0
	vcvttps2dq	%xmm1, %xmm1
	vcvtdq2ps	%xmm1, %xmm1
	vmovss	320(%rsp), %xmm2                ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmaxss	%xmm1, %xmm2, %xmm1
	vcvttss2si	%xmm1, %r11d
	vaddss	LCPI29_2(%rip), %xmm0, %xmm0
	vcvttps2dq	%xmm0, %xmm0
	vcvtdq2ps	%xmm0, %xmm0
	vmovss	304(%rsp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vminss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %r8d
	subl	%r11d, %r8d
	testl	%r8d, %r8d
	jle	LBB29_44
## %bb.46:                              ##   in Loop: Header=BB29_45 Depth=2
	shll	$2, %r8d
	vmovd	%r11d, %xmm0
	vpbroadcastd	%xmm0, %ymm8
	shll	$2, %r11d
	xorl	%esi, %esi
	jmp	LBB29_47
LBB29_62:                               ##   in Loop: Header=BB29_47 Depth=3
	vmovsd	(%r9), %xmm2                    ## xmm2 = mem[0],zero
	vbroadcastss	%xmm2, %ymm4
	vmulps	%ymm4, %ymm0, %ymm4
	vmovshdup	%xmm2, %xmm2            ## xmm2 = xmm2[1,1,3,3]
	vbroadcastsd	%xmm2, %ymm2
	vmulps	%ymm2, %ymm0, %ymm2
	vbroadcastss	8(%r9), %ymm6
	vmulps	%ymm6, %ymm0, %ymm0
	vmovsd	12(%r9), %xmm6                  ## xmm6 = mem[0],zero
	vbroadcastss	%xmm6, %ymm13
	vmulps	%ymm3, %ymm13, %ymm13
	vaddps	%ymm4, %ymm13, %ymm4
	vmovshdup	%xmm6, %xmm6            ## xmm6 = xmm6[1,1,3,3]
	vbroadcastsd	%xmm6, %ymm6
	vmulps	%ymm6, %ymm3, %ymm6
	vaddps	%ymm6, %ymm2, %ymm2
	vbroadcastss	20(%r9), %ymm6
	vmulps	%ymm6, %ymm3, %ymm3
	vaddps	%ymm3, %ymm0, %ymm0
	vmovsd	24(%r9), %xmm3                  ## xmm3 = mem[0],zero
	vbroadcastss	%xmm3, %ymm6
	vmulps	%ymm6, %ymm1, %ymm6
	vaddps	%ymm6, %ymm4, %ymm4
	vmovshdup	%xmm3, %xmm3            ## xmm3 = xmm3[1,1,3,3]
	vbroadcastsd	%xmm3, %ymm3
	vmulps	%ymm3, %ymm1, %ymm3
	vaddps	%ymm3, %ymm2, %ymm2
	vbroadcastss	32(%r9), %ymm3
	vmulps	%ymm3, %ymm1, %ymm1
	vaddps	%ymm1, %ymm0, %ymm0
	vbroadcastss	LCPI29_2(%rip), %ymm1   ## ymm1 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vaddps	%ymm1, %ymm4, %ymm3
	vaddps	%ymm1, %ymm2, %ymm2
	vaddps	%ymm1, %ymm0, %ymm4
	vbroadcastss	LCPI29_3(%rip), %ymm6   ## ymm6 = [5.0E-1,5.0E-1,5.0E-1,5.0E-1,5.0E-1,5.0E-1,5.0E-1,5.0E-1]
	vmulps	%ymm6, %ymm3, %ymm0
	vmulps	%ymm6, %ymm2, %ymm1
	vmulps	%ymm6, %ymm4, %ymm2
LBB29_67:                               ##   in Loop: Header=BB29_47 Depth=3
	movq	40(%r14), %rdx
	movslq	%edi, %rax
	vpmaskmovd	(%rdx,%rax,4), %ymm7, %ymm3
	vpsrld	$24, %ymm3, %ymm4
	vcvtdq2ps	%ymm4, %ymm4
	vpshufb	LCPI29_11(%rip), %ymm3, %ymm6   ## ymm6 = ymm3[2],zero,zero,zero,ymm3[6],zero,zero,zero,ymm3[10],zero,zero,zero,ymm3[14],zero,zero,zero,ymm3[18],zero,zero,zero,ymm3[22],zero,zero,zero,ymm3[26],zero,zero,zero,ymm3[30],zero,zero,zero
	vcvtdq2ps	%ymm6, %ymm6
	vbroadcastss	LCPI29_10(%rip), %ymm13 ## ymm13 = [2.55E+2,2.55E+2,2.55E+2,2.55E+2,2.55E+2,2.55E+2,2.55E+2,2.55E+2]
	vdivps	%ymm13, %ymm4, %ymm4
	vpshufb	LCPI29_12(%rip), %ymm3, %ymm3   ## ymm3 = ymm3[1],zero,zero,zero,ymm3[5],zero,zero,zero,ymm3[9],zero,zero,zero,ymm3[13],zero,zero,zero,ymm3[17],zero,zero,zero,ymm3[21],zero,zero,zero,ymm3[25],zero,zero,zero,ymm3[29],zero,zero,zero
	vdivps	%ymm13, %ymm6, %ymm6
	vcvtdq2ps	%ymm3, %ymm3
	vdivps	%ymm13, %ymm3, %ymm3
	vsubps	%ymm4, %ymm0, %ymm0
	vsubps	%ymm6, %ymm1, %ymm1
	vsubps	%ymm3, %ymm2, %ymm2
	vmulps	%ymm0, %ymm12, %ymm0
	vmulps	%ymm1, %ymm12, %ymm1
	vmulps	%ymm2, %ymm12, %ymm2
	vaddps	%ymm0, %ymm4, %ymm0
	vaddps	%ymm1, %ymm6, %ymm1
	vaddps	%ymm2, %ymm3, %ymm2
	vbroadcastss	LCPI29_2(%rip), %ymm3   ## ymm3 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vminps	%ymm3, %ymm0, %ymm0
	vminps	%ymm3, %ymm1, %ymm1
	vminps	%ymm3, %ymm2, %ymm2
	vmulps	%ymm0, %ymm13, %ymm0
	vmulps	%ymm1, %ymm13, %ymm1
	vmulps	%ymm2, %ymm13, %ymm2
	vbroadcastss	LCPI29_3(%rip), %ymm3   ## ymm3 = [5.0E-1,5.0E-1,5.0E-1,5.0E-1,5.0E-1,5.0E-1,5.0E-1,5.0E-1]
	vaddps	%ymm3, %ymm0, %ymm0
	vaddps	%ymm3, %ymm1, %ymm1
	vaddps	%ymm3, %ymm2, %ymm2
	vcvttps2dq	%ymm0, %ymm0
	vpslld	$24, %ymm0, %ymm0
	vcvttps2dq	%ymm1, %ymm1
	vpslld	$16, %ymm1, %ymm1
	vpor	%ymm0, %ymm1, %ymm0
	vcvttps2dq	%ymm2, %ymm1
	vpslld	$8, %ymm1, %ymm1
	vpor	%ymm1, %ymm0, %ymm0
	vpmaskmovd	%ymm0, %ymm7, (%rdx,%rax,4)
	movq	48(%r14), %rcx
	vmaskmovps	%ymm15, %ymm7, (%rcx,%rax,4)
	vmovdqa	LCPI29_9(%rip), %ymm6           ## ymm6 = [0,1,2,3,4,5,6,7]
	.p2align	4, 0x90
LBB29_68:                               ##   in Loop: Header=BB29_47 Depth=3
	cmpl	%r8d, %esi
	jge	LBB29_44
LBB29_47:                               ##   Parent Loop BB29_2 Depth=1
                                        ##     Parent Loop BB29_45 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movl	%esi, %edi
	vmovd	%esi, %xmm0
	vpbroadcastd	%xmm0, %ymm0
	vpor	%ymm6, %ymm0, %ymm0
	vpsrld	$2, %ymm0, %ymm0
	vpaddd	%ymm0, %ymm8, %ymm0
	vcvtdq2ps	%ymm0, %ymm0
	vaddps	1408(%r14), %ymm0, %ymm0
	vsubps	%ymm14, %ymm0, %ymm0
	vaddps	1440(%r14), %ymm9, %ymm1
	vsubps	256(%rsp), %ymm1, %ymm1         ## 32-byte Folded Reload
	vmulps	224(%rsp), %ymm0, %ymm2         ## 32-byte Folded Reload
	vmulps	192(%rsp), %ymm1, %ymm3         ## 32-byte Folded Reload
	vaddps	%ymm3, %ymm2, %ymm2
	vmulps	%ymm2, %ymm5, %ymm3
	vmulps	576(%rsp), %ymm0, %ymm0         ## 32-byte Folded Reload
	vmulps	32(%rsp), %ymm1, %ymm1          ## 32-byte Folded Reload
	vaddps	%ymm1, %ymm0, %ymm0
	vmulps	%ymm0, %ymm5, %ymm1
	vaddps	%ymm1, %ymm3, %ymm0
	vbroadcastss	LCPI29_2(%rip), %ymm2   ## ymm2 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vsubps	%ymm0, %ymm2, %ymm0
	vcmpltps	%ymm0, %ymm11, %ymm4
	vcmpeqps	%ymm0, %ymm11, %ymm7
	vandps	736(%rsp), %ymm7, %ymm7         ## 32-byte Folded Reload
	vorps	%ymm7, %ymm4, %ymm4
	vcmpltps	%ymm3, %ymm11, %ymm7
	vcmpeqps	%ymm3, %ymm11, %ymm12
	vandps	640(%rsp), %ymm12, %ymm12       ## 32-byte Folded Reload
	vorps	%ymm7, %ymm12, %ymm7
	vcmpltps	%ymm1, %ymm11, %ymm12
	vcmpeqps	%ymm1, %ymm11, %ymm13
	vandps	1152(%rsp), %ymm13, %ymm13      ## 32-byte Folded Reload
	vorps	%ymm13, %ymm12, %ymm12
	vandps	%ymm7, %ymm12, %ymm7
	vandps	%ymm4, %ymm7, %ymm7
	leal	8(%rdi), %esi
	cmpl	%r8d, %esi
	jle	LBB29_49
## %bb.48:                              ##   in Loop: Header=BB29_47 Depth=3
	vmovaps	%xmm7, %xmm7
LBB29_49:                               ##   in Loop: Header=BB29_47 Depth=3
	vptest	%ymm7, %ymm7
	je	LBB29_68
## %bb.50:                              ##   in Loop: Header=BB29_47 Depth=3
	movl	24(%r14), %eax
	imull	%r10d, %eax
	addl	%r11d, %edi
	addl	%eax, %edi
	movl	60(%r9), %r13d
	testb	$2, %r13b
	jne	LBB29_56
## %bb.51:                              ##   in Loop: Header=BB29_47 Depth=3
	vmulps	544(%rsp), %ymm0, %ymm4         ## 32-byte Folded Reload
	vmulps	160(%rsp), %ymm3, %ymm12        ## 32-byte Folded Reload
	vaddps	%ymm4, %ymm12, %ymm4
	vmulps	512(%rsp), %ymm1, %ymm12        ## 32-byte Folded Reload
	vaddps	%ymm4, %ymm12, %ymm4
	vdivps	%ymm4, %ymm2, %ymm15
	movq	48(%r14), %r15
	movslq	%edi, %rdx
	vmaskmovps	(%r15,%rdx,4), %ymm7, %ymm12
	vcmpltps	%ymm12, %ymm15, %ymm12
	vptest	%ymm12, %ymm7
	je	LBB29_68
## %bb.52:                              ##   in Loop: Header=BB29_47 Depth=3
	vandps	%ymm7, %ymm12, %ymm7
	testb	%r12b, %r12b
	jne	LBB29_59
## %bb.53:                              ##   in Loop: Header=BB29_47 Depth=3
	vmulps	544(%rsp), %ymm15, %ymm12       ## 32-byte Folded Reload
	vmulps	%ymm0, %ymm12, %ymm0
	vmulps	160(%rsp), %ymm15, %ymm12       ## 32-byte Folded Reload
	vmulps	%ymm3, %ymm12, %ymm3
	vmulps	512(%rsp), %ymm15, %ymm12       ## 32-byte Folded Reload
	vmulps	%ymm1, %ymm12, %ymm1
	vbroadcastss	48(%r9), %ymm12
	movq	52(%r9), %rdx
	testq	%rdx, %rdx
	jne	LBB29_60
LBB29_55:                               ##   in Loop: Header=BB29_47 Depth=3
	vmovaps	%ymm2, 480(%rsp)                ## 32-byte Spill
	vmovaps	%ymm2, 448(%rsp)                ## 32-byte Spill
	cmpb	$0, (%rsp)                      ## 1-byte Folded Reload
	jne	LBB29_62
	jmp	LBB29_63
LBB29_56:                               ##   in Loop: Header=BB29_47 Depth=3
	testb	%r12b, %r12b
	je	LBB29_57
## %bb.58:                              ##   in Loop: Header=BB29_47 Depth=3
	movslq	%edi, %rdx
	vbroadcastss	LCPI29_1(%rip), %ymm15  ## ymm15 = [-1.0E+0,-1.0E+0,-1.0E+0,-1.0E+0,-1.0E+0,-1.0E+0,-1.0E+0,-1.0E+0]
LBB29_59:                               ##   in Loop: Header=BB29_47 Depth=3
	vbroadcastss	60(%r14), %ymm0
	vdivps	%ymm0, %ymm15, %ymm0
	vbroadcastss	LCPI29_2(%rip), %ymm1   ## ymm1 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vminps	%ymm1, %ymm0, %ymm0
	vbroadcastss	LCPI29_10(%rip), %ymm1  ## ymm1 = [2.55E+2,2.55E+2,2.55E+2,2.55E+2,2.55E+2,2.55E+2,2.55E+2,2.55E+2]
	vmulps	%ymm1, %ymm0, %ymm0
	vcvttps2dq	%ymm0, %ymm0
	vpslld	$24, %ymm0, %ymm1
	vpslld	$16, %ymm0, %ymm2
	vpor	%ymm1, %ymm2, %ymm1
	vpslld	$8, %ymm0, %ymm0
	vpor	%ymm0, %ymm1, %ymm0
	movq	40(%r14), %rax
	vpmaskmovd	%ymm0, %ymm7, (%rax,%rdx,4)
	movq	48(%r14), %rax
	vmaskmovps	%ymm15, %ymm7, (%rax,%rdx,4)
	jmp	LBB29_68
LBB29_57:                               ##   in Loop: Header=BB29_47 Depth=3
	vmovaps	1120(%rsp), %ymm15              ## 32-byte Reload
	vbroadcastss	48(%r9), %ymm12
	movq	52(%r9), %rdx
	testq	%rdx, %rdx
	je	LBB29_55
LBB29_60:                               ##   in Loop: Header=BB29_47 Depth=3
	vmulps	704(%rsp), %ymm0, %ymm2         ## 32-byte Folded Reload
	vmulps	1088(%rsp), %ymm0, %ymm13       ## 32-byte Folded Reload
	vmulps	1056(%rsp), %ymm3, %ymm14       ## 32-byte Folded Reload
	vaddps	%ymm2, %ymm14, %ymm2
	vmulps	1024(%rsp), %ymm3, %ymm14       ## 32-byte Folded Reload
	vaddps	%ymm14, %ymm13, %ymm13
	vmulps	992(%rsp), %ymm1, %ymm14        ## 32-byte Folded Reload
	vaddps	%ymm2, %ymm14, %ymm2
	vmulps	960(%rsp), %ymm1, %ymm14        ## 32-byte Folded Reload
	vaddps	%ymm13, %ymm14, %ymm13
	vroundps	$1, %ymm2, %ymm14
	vsubps	%ymm14, %ymm2, %ymm2
	vroundps	$1, %ymm13, %ymm14
	vsubps	%ymm14, %ymm13, %ymm13
	vmovaps	128(%rsp), %ymm14               ## 32-byte Reload
	movl	(%rdx), %ecx
	vcvtsi2ss	%ecx, %xmm5, %xmm6
	movl	4(%rdx), %ebx
	vbroadcastss	%xmm6, %ymm6
	vmulps	%ymm6, %ymm2, %ymm2
	vcvttps2dq	%ymm2, %ymm2
	vcvtsi2ss	%ebx, %xmm5, %xmm6
	vbroadcastss	%xmm6, %ymm6
	vmulps	%ymm6, %ymm13, %ymm6
	vcvttps2dq	%ymm6, %ymm6
	leal	-1(%rcx), %eax
	vmovd	%eax, %xmm4
	vpbroadcastd	%xmm4, %ymm4
	vpminsd	%ymm4, %ymm2, %ymm2
	decl	%ebx
	vmovd	%ebx, %xmm4
	vpbroadcastd	%xmm4, %ymm4
	vpminsd	%ymm4, %ymm6, %ymm4
	vmovd	%ecx, %xmm6
	vpbroadcastd	%xmm6, %ymm6
	vpmulld	%ymm6, %ymm4, %ymm4
	vpaddd	%ymm2, %ymm4, %ymm2
	movq	16(%rdx), %rax
	vpxor	%xmm4, %xmm4, %xmm4
	vmovdqa	%ymm7, %ymm6
	vpgatherdd	%ymm6, (%rax,%ymm2,4), %ymm4
	vpsrld	$24, %ymm4, %ymm2
	vcvtdq2ps	%ymm2, %ymm2
	vbroadcastss	LCPI29_10(%rip), %ymm6  ## ymm6 = [2.55E+2,2.55E+2,2.55E+2,2.55E+2,2.55E+2,2.55E+2,2.55E+2,2.55E+2]
	vdivps	%ymm6, %ymm2, %ymm2
	vmovaps	%ymm2, 448(%rsp)                ## 32-byte Spill
	vpshufb	LCPI29_11(%rip), %ymm4, %ymm2   ## ymm2 = ymm4[2],zero,zero,zero,ymm4[6],zero,zero,zero,ymm4[10],zero,zero,zero,ymm4[14],zero,zero,zero,ymm4[18],zero,zero,zero,ymm4[22],zero,zero,zero,ymm4[26],zero,zero,zero,ymm4[30],zero,zero,zero
	vcvtdq2ps	%ymm2, %ymm2
	vdivps	%ymm6, %ymm2, %ymm2
	vmovaps	%ymm2, 480(%rsp)                ## 32-byte Spill
	vpbroadcastd	LCPI29_13(%rip), %ymm2  ## ymm2 = [255,255,255,255,255,255,255,255]
	vpand	%ymm4, %ymm2, %ymm13
	vpshufb	LCPI29_12(%rip), %ymm4, %ymm2   ## ymm2 = ymm4[1],zero,zero,zero,ymm4[5],zero,zero,zero,ymm4[9],zero,zero,zero,ymm4[13],zero,zero,zero,ymm4[17],zero,zero,zero,ymm4[21],zero,zero,zero,ymm4[25],zero,zero,zero,ymm4[29],zero,zero,zero
	vcvtdq2ps	%ymm2, %ymm2
	vdivps	%ymm6, %ymm2, %ymm2
	vcvtdq2ps	%ymm13, %ymm4
	vdivps	%ymm6, %ymm4, %ymm4
	vmulps	%ymm4, %ymm12, %ymm12
	cmpb	$0, (%rsp)                      ## 1-byte Folded Reload
	jne	LBB29_62
LBB29_63:                               ##   in Loop: Header=BB29_47 Depth=3
	testb	$3, %r13b
	je	LBB29_65
## %bb.64:                              ##   in Loop: Header=BB29_47 Depth=3
	vmovsd	36(%r9), %xmm0                  ## xmm0 = mem[0],zero
	vbroadcastss	%xmm0, %ymm1
	vmovshdup	%xmm0, %xmm0            ## xmm0 = xmm0[1,1,3,3]
	vbroadcastsd	%xmm0, %ymm3
	vbroadcastss	44(%r9), %ymm4
	vmulps	448(%rsp), %ymm1, %ymm0         ## 32-byte Folded Reload
	vmulps	480(%rsp), %ymm3, %ymm1         ## 32-byte Folded Reload
	jmp	LBB29_66
LBB29_65:                               ##   in Loop: Header=BB29_47 Depth=3
	vmulps	1856(%rsp), %ymm0, %ymm4        ## 32-byte Folded Reload
	vmulps	1824(%rsp), %ymm0, %ymm6        ## 32-byte Folded Reload
	vmulps	1792(%rsp), %ymm0, %ymm13       ## 32-byte Folded Reload
	vmulps	1760(%rsp), %ymm3, %ymm14       ## 32-byte Folded Reload
	vaddps	%ymm4, %ymm14, %ymm4
	vmulps	1728(%rsp), %ymm3, %ymm14       ## 32-byte Folded Reload
	vaddps	%ymm6, %ymm14, %ymm6
	vmulps	1696(%rsp), %ymm3, %ymm14       ## 32-byte Folded Reload
	vaddps	%ymm14, %ymm13, %ymm13
	vmulps	1664(%rsp), %ymm1, %ymm14       ## 32-byte Folded Reload
	vaddps	%ymm4, %ymm14, %ymm14
	vmovaps	%ymm14, 800(%rsp)               ## 32-byte Spill
	vmulps	1632(%rsp), %ymm1, %ymm4        ## 32-byte Folded Reload
	vaddps	%ymm6, %ymm4, %ymm4
	vmovaps	%ymm4, 384(%rsp)                ## 32-byte Spill
	vmulps	1600(%rsp), %ymm1, %ymm4        ## 32-byte Folded Reload
	vaddps	%ymm4, %ymm13, %ymm4
	vmovaps	%ymm4, 416(%rsp)                ## 32-byte Spill
	vmulps	1568(%rsp), %ymm0, %ymm4        ## 32-byte Folded Reload
	vmulps	1536(%rsp), %ymm0, %ymm6        ## 32-byte Folded Reload
	vmulps	1504(%rsp), %ymm0, %ymm0        ## 32-byte Folded Reload
	vmulps	1472(%rsp), %ymm3, %ymm13       ## 32-byte Folded Reload
	vaddps	%ymm4, %ymm13, %ymm4
	vmulps	1440(%rsp), %ymm3, %ymm13       ## 32-byte Folded Reload
	vaddps	%ymm6, %ymm13, %ymm6
	vmulps	1408(%rsp), %ymm3, %ymm3        ## 32-byte Folded Reload
	vaddps	%ymm3, %ymm0, %ymm0
	vmovaps	%ymm0, 608(%rsp)                ## 32-byte Spill
	vmulps	1376(%rsp), %ymm1, %ymm3        ## 32-byte Folded Reload
	vaddps	%ymm4, %ymm3, %ymm0
	vmovaps	%ymm0, 96(%rsp)                 ## 32-byte Spill
	vmulps	1344(%rsp), %ymm1, %ymm4        ## 32-byte Folded Reload
	vaddps	%ymm6, %ymm4, %ymm10
	vmovaps	1280(%rsp), %ymm0               ## 32-byte Reload
	vsubps	%ymm14, %ymm0, %ymm6
	vmovaps	1248(%rsp), %ymm0               ## 32-byte Reload
	vsubps	384(%rsp), %ymm0, %ymm13        ## 32-byte Folded Reload
	vmovaps	1216(%rsp), %ymm0               ## 32-byte Reload
	vsubps	416(%rsp), %ymm0, %ymm14        ## 32-byte Folded Reload
	vmulps	%ymm6, %ymm6, %ymm0
	vmulps	%ymm13, %ymm13, %ymm3
	vaddps	%ymm3, %ymm0, %ymm0
	vmulps	%ymm14, %ymm14, %ymm3
	vaddps	%ymm0, %ymm3, %ymm0
	vrsqrtps	%ymm0, %ymm0
	vmulps	1312(%rsp), %ymm1, %ymm1        ## 32-byte Folded Reload
	vaddps	608(%rsp), %ymm1, %ymm1         ## 32-byte Folded Reload
	vmulps	%ymm0, %ymm6, %ymm3
	vmulps	%ymm0, %ymm13, %ymm6
	vmulps	%ymm0, %ymm14, %ymm4
	vmovaps	96(%rsp), %ymm0                 ## 32-byte Reload
	vmulps	%ymm3, %ymm0, %ymm13
	vmulps	%ymm6, %ymm10, %ymm14
	vaddps	%ymm14, %ymm13, %ymm13
	vmulps	%ymm4, %ymm1, %ymm14
	vaddps	%ymm13, %ymm14, %ymm13
	vaddps	%ymm0, %ymm0, %ymm14
	vaddps	%ymm10, %ymm10, %ymm0
	vaddps	%ymm1, %ymm1, %ymm1
	vmulps	%ymm13, %ymm14, %ymm14
	vmulps	%ymm0, %ymm13, %ymm0
	vmulps	%ymm1, %ymm13, %ymm1
	vsubps	%ymm14, %ymm3, %ymm3
	vmovaps	%ymm3, 96(%rsp)                 ## 32-byte Spill
	vsubps	%ymm0, %ymm6, %ymm0
	vmovaps	%ymm0, 608(%rsp)                ## 32-byte Spill
	vsubps	%ymm1, %ymm4, %ymm4
	vmovaps	%ymm4, 1888(%rsp)               ## 32-byte Spill
	vmulps	%ymm3, %ymm3, %ymm1
	vmulps	%ymm0, %ymm0, %ymm6
	vaddps	%ymm6, %ymm1, %ymm1
	vmulps	%ymm4, %ymm4, %ymm6
	vaddps	%ymm1, %ymm6, %ymm1
	vmovaps	800(%rsp), %ymm3                ## 32-byte Reload
	vmulps	%ymm3, %ymm3, %ymm6
	vmovaps	384(%rsp), %ymm0                ## 32-byte Reload
	vmulps	%ymm0, %ymm0, %ymm14
	vaddps	%ymm6, %ymm14, %ymm6
	vmovaps	416(%rsp), %ymm10               ## 32-byte Reload
	vmulps	%ymm10, %ymm10, %ymm14
	vaddps	%ymm6, %ymm14, %ymm6
	vmovaps	128(%rsp), %ymm14               ## 32-byte Reload
	vrsqrtps	%ymm1, %ymm1
	vmulps	96(%rsp), %ymm1, %ymm4          ## 32-byte Folded Reload
	vmovaps	%ymm4, 768(%rsp)                ## 32-byte Spill
	vrsqrtps	%ymm6, %ymm6
	vmulps	608(%rsp), %ymm1, %ymm4         ## 32-byte Folded Reload
	vmulps	1888(%rsp), %ymm1, %ymm1        ## 32-byte Folded Reload
	vmovaps	%ymm1, 96(%rsp)                 ## 32-byte Spill
	vmulps	%ymm6, %ymm3, %ymm1
	vmulps	768(%rsp), %ymm1, %ymm1         ## 32-byte Folded Reload
	vmulps	%ymm6, %ymm0, %ymm3
	vmulps	%ymm4, %ymm3, %ymm3
	vaddps	%ymm3, %ymm1, %ymm1
	vmaxps	%ymm11, %ymm13, %ymm3
	vmulps	%ymm6, %ymm10, %ymm4
	vmulps	96(%rsp), %ymm4, %ymm0          ## 32-byte Folded Reload
	vaddps	%ymm1, %ymm0, %ymm0
	vmaxps	%ymm11, %ymm0, %ymm0
	vmulps	%ymm0, %ymm0, %ymm0
	vmulps	%ymm0, %ymm0, %ymm0
	vmulps	%ymm0, %ymm0, %ymm0
	vmulps	%ymm0, %ymm0, %ymm0
	vbroadcastss	LCPI29_14(%rip), %ymm1  ## ymm1 = [8.00000011E-1,8.00000011E-1,8.00000011E-1,8.00000011E-1,8.00000011E-1,8.00000011E-1,8.00000011E-1,8.00000011E-1]
	vmulps	%ymm1, %ymm3, %ymm1
	vaddps	%ymm0, %ymm1, %ymm0
	vbroadcastss	LCPI29_15(%rip), %ymm1  ## ymm1 = [1.56000003E-1,1.56000003E-1,1.56000003E-1,1.56000003E-1,1.56000003E-1,1.56000003E-1,1.56000003E-1,1.56000003E-1]
	vaddps	%ymm1, %ymm0, %ymm1
	vbroadcastss	LCPI29_16(%rip), %ymm3  ## ymm3 = [2.4000001E-1,2.4000001E-1,2.4000001E-1,2.4000001E-1,2.4000001E-1,2.4000001E-1,2.4000001E-1,2.4000001E-1]
	vaddps	%ymm3, %ymm0, %ymm3
	vbroadcastss	LCPI29_17(%rip), %ymm4  ## ymm4 = [2.70000011E-1,2.70000011E-1,2.70000011E-1,2.70000011E-1,2.70000011E-1,2.70000011E-1,2.70000011E-1,2.70000011E-1]
	vaddps	%ymm4, %ymm0, %ymm4
	vmovsd	36(%r9), %xmm6                  ## xmm6 = mem[0],zero
	vbroadcastss	%xmm6, %ymm0
	vmulps	448(%rsp), %ymm0, %ymm0         ## 32-byte Folded Reload
	vmulps	%ymm1, %ymm0, %ymm0
	vmovshdup	%xmm6, %xmm1            ## xmm1 = xmm6[1,1,3,3]
	vbroadcastsd	%xmm1, %ymm1
	vmulps	480(%rsp), %ymm1, %ymm1         ## 32-byte Folded Reload
	vmulps	%ymm3, %ymm1, %ymm1
	vbroadcastss	44(%r9), %ymm3
	vmulps	%ymm3, %ymm2, %ymm2
LBB29_66:                               ##   in Loop: Header=BB29_47 Depth=3
	vmulps	%ymm4, %ymm2, %ymm2
	jmp	LBB29_67
	.p2align	4, 0x90
LBB29_69:                               ##   in Loop: Header=BB29_2 Depth=1
	movq	376(%rsp), %rdx                 ## 8-byte Reload
	incq	%rdx
	movq	368(%rsp), %rbx                 ## 8-byte Reload
	movslq	1008(%r14,%rbx,4), %rax
	cmpq	%rax, %rdx
	movl	20(%rsp), %ecx                  ## 4-byte Reload
	jge	LBB29_17
## %bb.70:                              ##   in Loop: Header=BB29_2 Depth=1
	vmovss	136(%r14), %xmm10               ## xmm10 = mem[0],zero,zero,zero
	vmovss	140(%r14), %xmm0                ## xmm0 = mem[0],zero,zero,zero
	vmovss	%xmm0, 224(%rsp)                ## 4-byte Spill
	vmovss	144(%r14), %xmm0                ## xmm0 = mem[0],zero,zero,zero
	vmovss	%xmm0, 192(%rsp)                ## 4-byte Spill
	vmovss	120(%r14), %xmm0                ## xmm0 = mem[0],zero,zero,zero
	vinsertps	$16, 132(%r14), %xmm0, %xmm15 ## xmm15 = xmm0[0],mem[0],xmm0[2,3]
	vmovsd	64(%r14), %xmm2                 ## xmm2 = mem[0],zero
	vmovss	116(%r14), %xmm0                ## xmm0 = mem[0],zero,zero,zero
	vinsertps	$16, 128(%r14), %xmm0, %xmm7 ## xmm7 = xmm0[0],mem[0],xmm0[2,3]
	vmovss	72(%r14), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vmovss	112(%r14), %xmm1                ## xmm1 = mem[0],zero,zero,zero
	vinsertps	$16, 124(%r14), %xmm1, %xmm14 ## xmm14 = xmm1[0],mem[0],xmm1[2,3]
	jmp	LBB29_2
LBB29_17:
	shlq	$32, 24(%rsp)                   ## 8-byte Folded Spill
	movq	_g_thread_info@TLVP(%rip), %rdi
	vzeroupper
	callq	*(%rdi)
	movq	%rax, %rsi
	movslq	(%rax), %rdx
	movq	_timed_blocks(%rip), %rdi
	shlq	$7, %rdx
	movq	%rdx, %rax
	movq	%rdx, 192(%rsp)                 ## 8-byte Spill
	leaq	3(%rdx), %rax
	imulq	$56, %rax, %rbx
	movabsq	$12884903412, %rax              ## imm = 0x3000005F4
	movq	%rax, 24(%rdi,%rbx)
	leaq	L___FUNCTION__._Z11render_tileP14Render_Contexti(%rip), %rax
	movq	%rax, 8(%rdi,%rbx)
	leaq	L_.str.11(%rip), %rax
	movq	%rax, 16(%rdi,%rbx)
	leaq	L_.str.15(%rip), %rax
	movq	%rax, (%rdi,%rbx)
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	movq	%rdx, 224(%rsp)                 ## 8-byte Spill
	movq	%rbx, 256(%rsp)                 ## 8-byte Spill
	incl	32(%rdi,%rbx)
	movslq	516(%rsi), %rax
	leal	1(%rax), %edx
	movl	%edx, 516(%rsi)
	movl	$3, 4(%rsi,%rax,4)
	cmpl	12(%rsp), %ecx                  ## 4-byte Folded Reload
	jge	LBB29_23
## %bb.18:
	movl	4(%rsp), %eax                   ## 4-byte Reload
	cmpl	%eax, 8(%rsp)                   ## 4-byte Folded Reload
	jge	LBB29_23
## %bb.19:
	movq	16(%r14), %r10
	movq	40(%r14), %r12
	movl	8(%rsp), %r15d                  ## 4-byte Reload
	movslq	%r15d, %r11
	movslq	4(%rsp), %r13                   ## 4-byte Folded Reload
	shll	$2, %r15d
	vmovdqa	LCPI29_18(%rip), %xmm0          ## xmm0 = [2,128,128,128,6,128,128,128,10,128,128,128,14,128,128,128]
	vmovdqa	LCPI29_19(%rip), %xmm1          ## xmm1 = [1,128,128,128,5,128,128,128,9,128,128,128,13,128,128,128]
	vxorps	%xmm2, %xmm2, %xmm2
	vbroadcastss	LCPI29_20(%rip), %xmm3  ## xmm3 = [7.98435974E+0,7.98435974E+0,7.98435974E+0,7.98435974E+0]
	vbroadcastss	LCPI29_3(%rip), %xmm4   ## xmm4 = [5.0E-1,5.0E-1,5.0E-1,5.0E-1]
	.p2align	4, 0x90
LBB29_20:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB29_21 Depth 2
	movl	%r15d, %ebx
	movq	%r11, %rsi
	.p2align	4, 0x90
LBB29_21:                               ##   Parent Loop BB29_20 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movslq	24(%r14), %rdx
	movslq	%ecx, %rax
	imulq	%rax, %rdx
	leaq	(%r12,%rdx,4), %rdx
	movslq	%ebx, %rbx
	vmovdqu	(%rdx,%rbx,4), %xmm5
	vpsrld	$24, %xmm5, %xmm6
	vcvtdq2ps	%xmm6, %xmm6
	vpshufb	%xmm0, %xmm5, %xmm7
	vcvtdq2ps	%xmm7, %xmm7
	vpshufb	%xmm1, %xmm5, %xmm5
	vhaddps	%xmm2, %xmm6, %xmm6
	vcvtdq2ps	%xmm5, %xmm5
	vhaddps	%xmm7, %xmm5, %xmm5
	vhaddps	%xmm6, %xmm5, %xmm5
	vsqrtps	%xmm5, %xmm5
	vmulps	%xmm3, %xmm5, %xmm5
	vaddps	%xmm4, %xmm5, %xmm5
	vpermilpd	$1, %xmm5, %xmm6        ## xmm6 = xmm5[1,0]
	vmovshdup	%xmm5, %xmm7            ## xmm7 = xmm5[1,1,3,3]
	vcvttss2si	%xmm6, %rdx
	shll	$24, %edx
	vcvttss2si	%xmm7, %rdi
	shll	$16, %edi
	vcvttss2si	%xmm5, %r8
	movslq	(%r14), %r9
	orl	%edx, %edi
	imulq	%rax, %r9
	shll	$8, %r8d
	addq	%rsi, %r9
	orl	%edi, %r8d
	movl	%r8d, (%r10,%r9,4)
	incq	%rsi
	addl	$4, %ebx
	cmpq	%rsi, %r13
	jne	LBB29_21
## %bb.22:                              ##   in Loop: Header=BB29_20 Depth=1
	incl	%ecx
	cmpl	12(%rsp), %ecx                  ## 4-byte Folded Reload
	jne	LBB29_20
LBB29_23:
	movq	352(%rsp), %rbx                 ## 8-byte Reload
	orq	24(%rsp), %rbx                  ## 8-byte Folded Reload
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	subq	224(%rsp), %rdx                 ## 8-byte Folded Reload
	movq	_timed_blocks(%rip), %rcx
	movq	256(%rsp), %rax                 ## 8-byte Reload
	addq	%rdx, 40(%rcx,%rax)
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movslq	516(%rax), %rsi
	movl	%esi, %edi
	decl	%edi
	movl	%edi, 516(%rax)
	je	LBB29_25
## %bb.24:
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movslq	-4(%rax,%rsi,4), %rax
	movslq	192(%rsp), %rsi                 ## 4-byte Folded Reload
	addq	%rax, %rsi
	imulq	$56, %rsi, %rax
	addq	%rdx, 48(%rcx,%rax)
LBB29_25:
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	subq	%rbx, %rdx
	movq	_timed_blocks(%rip), %rcx
	movq	360(%rsp), %rax                 ## 8-byte Reload
	addq	%rdx, 40(%rcx,%rax)
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movslq	516(%rax), %rsi
	movl	%esi, %edi
	decl	%edi
	movl	%edi, 516(%rax)
	je	LBB29_27
## %bb.26:
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movslq	-4(%rax,%rsi,4), %rax
	movslq	344(%rsp), %rsi                 ## 4-byte Folded Reload
	addq	%rax, %rsi
	imulq	$56, %rsi, %rax
	addq	%rdx, 48(%rcx,%rax)
LBB29_27:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z10end_renderP14Render_Context ## -- Begin function _Z10end_renderP14Render_Context
	.p2align	4, 0x90
__Z10end_renderP14Render_Context:       ## @_Z10end_renderP14Render_Context
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdi, %r14
	cmpl	$0, 204(%rdi)
	jle	LBB30_3
## %bb.1:
	xorl	%r15d, %r15d
	xorl	%ebx, %ebx
	.p2align	4, 0x90
LBB30_2:                                ## =>This Inner Loop Header: Depth=1
	movq	192(%r14), %rsi
	addq	%r15, %rsi
	movq	%r14, %rdi
	callq	__Z13push_triangleP14Render_ContextP8Triangle
	incq	%rbx
	movslq	204(%r14), %rax
	subq	$-128, %r15
	cmpq	%rax, %rbx
	jl	LBB30_2
LBB30_3:
	mfence
	movq	1760(%r14), %rax
	movl	$0, 6320(%rax)
	xorl	%ecx, %ecx
	xchgl	%ecx, 6316(%rax)
	movq	1760(%r14), %rax
	movl	$1, %esi
	lock		xaddl	%esi, 6316(%rax)
	cmpl	$99, %esi
	jg	LBB30_5
	.p2align	4, 0x90
LBB30_4:                                ## =>This Inner Loop Header: Depth=1
	movq	%r14, %rdi
	callq	__Z11render_tileP14Render_Contexti
	movq	1760(%r14), %rax
	lock		incl	6320(%rax)
	movq	1760(%r14), %rax
	movl	$1, %esi
	lock		xaddl	%esi, 6316(%rax)
	cmpl	$100, %esi
	jl	LBB30_4
	.p2align	4, 0x90
LBB30_5:                                ## =>This Inner Loop Header: Depth=1
	movq	1760(%r14), %rax
	mfence
	movl	6320(%rax), %eax
	cmpl	$100, %eax
	jne	LBB30_5
## %bb.6:
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z12push_2d_rectP14Render_Context2v2S1_2v4
LCPI31_0:
	.long	0x3f800000                      ## float 1
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4
LCPI31_1:
	.long	0x00000000                      ## float 0
	.long	0x3f800000                      ## float 1
	.space	4
	.space	4
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z12push_2d_rectP14Render_Context2v2S1_2v4
	.p2align	4, 0x90
__Z12push_2d_rectP14Render_Context2v2S1_2v4: ## @_Z12push_2d_rectP14Render_Context2v2S1_2v4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vmovsd	(%rdi), %xmm4                   ## xmm4 = mem[0],zero
	vcvtdq2ps	%xmm4, %xmm4
	vmulps	%xmm0, %xmm4, %xmm5
	vmulps	%xmm1, %xmm4, %xmm4
	vblendps	$2, %xmm5, %xmm4, %xmm6         ## xmm6 = xmm4[0],xmm5[1],xmm4[2,3]
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm5, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm6, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm4, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovss	LCPI31_0(%rip), %xmm4           ## xmm4 = mem[0],zero,zero,zero
	vunpcklpd	LCPI31_1(%rip), %xmm4, %xmm4 ## xmm4 = xmm4[0],mem[0]
	vmovups	%xmm4, 36(%rax,%rcx)
	vbroadcastss	LCPI31_0(%rip), %xmm5   ## xmm5 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vmovlps	%xmm5, 52(%rax,%rcx)
	vxorps	%xmm6, %xmm6, %xmm6
	vmovups	%ymm6, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovlhps	%xmm3, %xmm2, %xmm2             ## xmm2 = xmm2[0],xmm3[0]
	vmovups	%xmm2, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vmovsd	(%rdi), %xmm3                   ## xmm3 = mem[0],zero
	vcvtdq2ps	%xmm3, %xmm3
	vmulps	%xmm0, %xmm3, %xmm0
	vmulps	%xmm1, %xmm3, %xmm1
	vblendps	$2, %xmm1, %xmm0, %xmm3         ## xmm3 = xmm0[0],xmm1[1],xmm0[2,3]
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm0, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm3, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm1, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm4, 36(%rax,%rcx)
	vmovlps	%xmm5, 52(%rax,%rcx)
	vmovups	%ymm6, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovups	%xmm2, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	popq	%rbp
	vzeroupper
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z20push_2d_rect_outlineP14Render_Context2v2S1_2v4f
LCPI32_0:
	.long	0x3f800000                      ## float 1
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4
LCPI32_1:
	.long	0x00000000                      ## float 0
	.long	0x3f800000                      ## float 1
	.space	4
	.space	4
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z20push_2d_rect_outlineP14Render_Context2v2S1_2v4f
	.p2align	4, 0x90
__Z20push_2d_rect_outlineP14Render_Context2v2S1_2v4f: ## @_Z20push_2d_rect_outlineP14Render_Context2v2S1_2v4f
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vmovshdup	%xmm0, %xmm9            ## xmm9 = xmm0[1,1,3,3]
	vaddss	%xmm4, %xmm0, %xmm10
	vmovsd	(%rdi), %xmm5                   ## xmm5 = mem[0],zero
	vcvtdq2ps	%xmm5, %xmm5
	vmulps	%xmm0, %xmm5, %xmm6
	vmulss	%xmm5, %xmm10, %xmm7
	vblendps	$2, %xmm6, %xmm7, %xmm8         ## xmm8 = xmm7[0],xmm6[1],xmm7[2,3]
	vmulps	%xmm1, %xmm5, %xmm5
	vblendps	$2, %xmm5, %xmm7, %xmm5         ## xmm5 = xmm7[0],xmm5[1],xmm7[2,3]
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm6, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm8, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm5, 24(%rax,%rcx)
	vmovss	LCPI32_0(%rip), %xmm5           ## xmm5 = mem[0],zero,zero,zero
	vunpcklpd	LCPI32_1(%rip), %xmm5, %xmm11 ## xmm11 = xmm5[0],mem[0]
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm11, 36(%rax,%rcx)
	vbroadcastss	LCPI32_0(%rip), %xmm12  ## xmm12 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vmovlps	%xmm12, 52(%rax,%rcx)
	vxorps	%xmm8, %xmm8, %xmm8
	vmovups	%ymm8, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovlhps	%xmm3, %xmm2, %xmm13            ## xmm13 = xmm2[0],xmm3[0]
	vmovups	%xmm13, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vmovsd	(%rdi), %xmm3                   ## xmm3 = mem[0],zero
	vcvtdq2ps	%xmm3, %xmm3
	vmulps	%xmm0, %xmm3, %xmm5
	vblendps	$1, %xmm10, %xmm1, %xmm6        ## xmm6 = xmm10[0],xmm1[1,2,3]
	vmulps	%xmm3, %xmm6, %xmm3
	vblendps	$2, %xmm3, %xmm5, %xmm6         ## xmm6 = xmm5[0],xmm3[1],xmm5[2,3]
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm5, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm6, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm3, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm11, 36(%rax,%rcx)
	vmovlps	%xmm12, 52(%rax,%rcx)
	vmovups	%ymm8, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovups	%xmm13, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vsubss	%xmm4, %xmm1, %xmm14
	vmovsd	(%rdi), %xmm5                   ## xmm5 = mem[0],zero
	vcvtdq2ps	%xmm5, %xmm5
	vblendps	$1, %xmm14, %xmm0, %xmm6        ## xmm6 = xmm14[0],xmm0[1,2,3]
	vmulps	%xmm5, %xmm6, %xmm6
	vmulps	%xmm1, %xmm5, %xmm5
	vblendps	$2, %xmm6, %xmm5, %xmm7         ## xmm7 = xmm5[0],xmm6[1],xmm5[2,3]
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm6, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm7, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm5, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm11, 36(%rax,%rcx)
	vmovlps	%xmm12, 52(%rax,%rcx)
	vmovups	%ymm8, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovups	%xmm13, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vmovsd	(%rdi), %xmm5                   ## xmm5 = mem[0],zero
	vcvtdq2ps	%xmm5, %xmm5
	vmulss	%xmm5, %xmm14, %xmm6
	vmulps	%xmm0, %xmm5, %xmm7
	vblendps	$2, %xmm7, %xmm6, %xmm7         ## xmm7 = xmm6[0],xmm7[1],xmm6[2,3]
	vmulps	%xmm1, %xmm5, %xmm5
	vblendps	$2, %xmm5, %xmm6, %xmm6         ## xmm6 = xmm6[0],xmm5[1],xmm6[2,3]
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm7, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm6, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm5, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm11, 36(%rax,%rcx)
	vmovlps	%xmm12, 52(%rax,%rcx)
	vmovups	%ymm8, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovups	%xmm13, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vaddss	%xmm4, %xmm9, %xmm5
	vmovsd	(%rdi), %xmm6                   ## xmm6 = mem[0],zero
	vcvtdq2ps	%xmm6, %xmm6
	vaddss	%xmm4, %xmm0, %xmm0
	vmulps	%xmm6, %xmm0, %xmm0
	vmulss	%xmm6, %xmm14, %xmm7
	vblendps	$2, %xmm0, %xmm7, %xmm2         ## xmm2 = xmm7[0],xmm0[1],xmm7[2,3]
	vmovshdup	%xmm6, %xmm6            ## xmm6 = xmm6[1,1,3,3]
	vmulss	%xmm6, %xmm5, %xmm6
	vinsertps	$16, %xmm6, %xmm7, %xmm6 ## xmm6 = xmm7[0],xmm6[0],xmm7[2,3]
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm0, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm2, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm6, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm11, 36(%rax,%rcx)
	vmovlps	%xmm12, 52(%rax,%rcx)
	vmovups	%ymm8, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovups	%xmm13, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vcvtsi2ssl	(%rdi), %xmm1, %xmm2
	vmovshdup	%xmm1, %xmm0            ## xmm0 = xmm1[1,1,3,3]
	vcvtsi2ssl	4(%rdi), %xmm1, %xmm6
	vmulss	%xmm2, %xmm10, %xmm7
	vmulss	%xmm6, %xmm9, %xmm3
	vinsertps	$16, %xmm3, %xmm7, %xmm3 ## xmm3 = xmm7[0],xmm3[0],xmm7[2,3]
	vmulss	%xmm6, %xmm5, %xmm5
	vinsertps	$16, %xmm5, %xmm7, %xmm6 ## xmm6 = xmm7[0],xmm5[0],xmm7[2,3]
	vmulss	%xmm2, %xmm14, %xmm2
	vinsertps	$16, %xmm5, %xmm2, %xmm2 ## xmm2 = xmm2[0],xmm5[0],xmm2[2,3]
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm3, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm6, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm2, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm11, 36(%rax,%rcx)
	vmovlps	%xmm12, 52(%rax,%rcx)
	vmovups	%ymm8, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovups	%xmm13, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vcvtsi2ssl	(%rdi), %xmm1, %xmm2
	vsubss	%xmm4, %xmm0, %xmm5
	vcvtsi2ssl	4(%rdi), %xmm1, %xmm3
	vmulss	%xmm2, %xmm10, %xmm6
	vmulss	%xmm3, %xmm5, %xmm7
	vinsertps	$16, %xmm7, %xmm6, %xmm6 ## xmm6 = xmm6[0],xmm7[0],xmm6[2,3]
	vmulss	%xmm2, %xmm14, %xmm2
	vinsertps	$16, %xmm7, %xmm2, %xmm7 ## xmm7 = xmm2[0],xmm7[0],xmm2[2,3]
	vmulss	%xmm3, %xmm0, %xmm0
	vinsertps	$16, %xmm0, %xmm2, %xmm0 ## xmm0 = xmm2[0],xmm0[0],xmm2[2,3]
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm6, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm7, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm0, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm11, 36(%rax,%rcx)
	vmovlps	%xmm12, 52(%rax,%rcx)
	vmovups	%ymm8, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovups	%xmm13, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vmovsd	(%rdi), %xmm0                   ## xmm0 = mem[0],zero
	vcvtdq2ps	%xmm0, %xmm0
	vmulss	%xmm0, %xmm10, %xmm2
	vmovshdup	%xmm0, %xmm3            ## xmm3 = xmm0[1,1,3,3]
	vmulss	%xmm3, %xmm5, %xmm3
	vinsertps	$16, %xmm3, %xmm2, %xmm3 ## xmm3 = xmm2[0],xmm3[0],xmm2[2,3]
	vsubss	%xmm4, %xmm1, %xmm1
	vmulps	%xmm0, %xmm1, %xmm0
	vblendps	$2, %xmm0, %xmm2, %xmm1         ## xmm1 = xmm2[0],xmm0[1],xmm2[2,3]
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm3, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm1, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm0, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm11, 36(%rax,%rcx)
	vmovlps	%xmm12, 52(%rax,%rcx)
	vmovups	%ymm8, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovups	%xmm13, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	popq	%rbp
	vzeroupper
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z12push_2d_textP14Render_Context6String2v22v4f
LCPI33_0:
	.long	0x3f800000                      ## float 1
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4
LCPI33_1:
	.long	0x00000000                      ## float 0
	.long	0x3f800000                      ## float 1
	.space	4
	.space	4
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z12push_2d_textP14Render_Context6String2v22v4f
	.p2align	4, 0x90
__Z12push_2d_textP14Render_Context6String2v22v4f: ## @_Z12push_2d_textP14Render_Context6String2v22v4f
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	testl	%edx, %edx
	jle	LBB33_12
## %bb.1:
	movq	1760(%rdi), %rax
	vmovsd	6304(%rax), %xmm4               ## xmm4 = mem[0],zero
	vbroadcastss	%xmm3, %xmm3
	vmulps	%xmm3, %xmm4, %xmm8
	leaq	1792(%rdi), %r8
	movl	%edx, %r9d
	vxorps	%xmm11, %xmm11, %xmm11
	xorl	%r10d, %r10d
	vmovss	LCPI33_0(%rip), %xmm12          ## xmm12 = mem[0],zero,zero,zero
	vunpcklpd	LCPI33_1(%rip), %xmm12, %xmm13 ## xmm13 = xmm12[0],mem[0]
	vbroadcastss	LCPI33_0(%rip), %xmm14  ## xmm14 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vxorps	%xmm9, %xmm9, %xmm9
	vmovlhps	%xmm2, %xmm1, %xmm1             ## xmm1 = xmm1[0],xmm2[0]
	vmovaps	%xmm1, -16(%rbp)                ## 16-byte Spill
	vxorps	%xmm2, %xmm2, %xmm2
	jmp	LBB33_2
	.p2align	4, 0x90
LBB33_5:                                ##   in Loop: Header=BB33_2 Depth=1
	vaddps	%xmm2, %xmm8, %xmm1
	vblendps	$2, %xmm2, %xmm1, %xmm2         ## xmm2 = xmm1[0],xmm2[1],xmm1[2,3]
LBB33_11:                               ##   in Loop: Header=BB33_2 Depth=1
	incq	%r10
	cmpq	%r10, %r9
	je	LBB33_12
LBB33_2:                                ## =>This Inner Loop Header: Depth=1
	movsbl	(%rsi,%r10), %eax
	cmpl	$32, %eax
	je	LBB33_5
## %bb.3:                               ##   in Loop: Header=BB33_2 Depth=1
	cmpb	$10, %al
	jne	LBB33_6
## %bb.4:                               ##   in Loop: Header=BB33_2 Depth=1
	vaddps	%xmm2, %xmm8, %xmm1
	vblendps	$2, %xmm1, %xmm11, %xmm2        ## xmm2 = xmm11[0],xmm1[1],xmm11[2,3]
	jmp	LBB33_11
	.p2align	4, 0x90
LBB33_6:                                ##   in Loop: Header=BB33_2 Depth=1
	vaddps	%xmm0, %xmm2, %xmm1
	vaddps	%xmm1, %xmm8, %xmm4
	movl	1820(%rdi), %ecx
	cmpl	%eax, %ecx
	jg	LBB33_8
## %bb.7:                               ##   in Loop: Header=BB33_2 Depth=1
	cmpl	%eax, 1824(%rdi)
	jle	LBB33_8
## %bb.9:                               ##   in Loop: Header=BB33_2 Depth=1
	subl	%ecx, %eax
	vmovss	1816(%rdi), %xmm5               ## xmm5 = mem[0],zero,zero,zero
	vmovsd	(%rdi), %xmm15                  ## xmm15 = mem[0],zero
	movq	192(%rdi), %r11
	movslq	204(%rdi), %rdx
	leal	1(%rdx), %ecx
	movl	%ecx, 204(%rdi)
	vmovshdup	%xmm1, %xmm7            ## xmm7 = xmm1[1,1,3,3]
	vxorps	%xmm3, %xmm3, %xmm3
	vaddss	%xmm3, %xmm7, %xmm7
	vaddss	%xmm3, %xmm1, %xmm6
	vcvtdq2ps	%xmm15, %xmm3
	vblendps	$1, %xmm6, %xmm4, %xmm15        ## xmm15 = xmm6[0],xmm4[1,2,3]
	vmulps	%xmm3, %xmm15, %xmm6
	vmulps	%xmm3, %xmm4, %xmm10
	vmovshdup	%xmm3, %xmm3            ## xmm3 = xmm3[1,1,3,3]
	vmulss	%xmm3, %xmm7, %xmm3
	vinsertps	$16, %xmm3, %xmm10, %xmm3 ## xmm3 = xmm10[0],xmm3[0],xmm10[2,3]
	vblendps	$2, %xmm6, %xmm10, %xmm10       ## xmm10 = xmm10[0],xmm6[1],xmm10[2,3]
	shlq	$7, %rdx
	vmovlps	%xmm6, (%r11,%rdx)
	vcvtsi2ss	%eax, %xmm0, %xmm6
	movl	$0, 8(%r11,%rdx)
	vmovlps	%xmm10, 12(%r11,%rdx)
	vmulss	%xmm6, %xmm5, %xmm6
	vaddss	%xmm6, %xmm5, %xmm5
	movl	$0, 20(%r11,%rdx)
	vmovlps	%xmm3, 24(%r11,%rdx)
	movl	$0, 32(%r11,%rdx)
	vinsertps	$42, %xmm5, %xmm6, %xmm3 ## xmm3 = xmm6[0],zero,xmm5[0],zero
	vmovups	%xmm3, 36(%r11,%rdx)
	vinsertps	$16, %xmm12, %xmm5, %xmm3 ## xmm3 = xmm5[0],xmm12[0],xmm5[2,3]
	vmovlps	%xmm3, 52(%r11,%rdx)
	vmovups	%ymm9, 60(%r11,%rdx)
	movl	$0, 92(%r11,%rdx)
	vmovaps	-16(%rbp), %xmm10               ## 16-byte Reload
	vmovups	%xmm10, 96(%r11,%rdx)
	movq	%r8, 112(%r11,%rdx)
	movq	$2, 120(%r11,%rdx)
	vinsertps	$16, %xmm7, %xmm4, %xmm4 ## xmm4 = xmm4[0],xmm7[0],xmm4[2,3]
	vmovsd	(%rdi), %xmm5                   ## xmm5 = mem[0],zero
	vcvtdq2ps	%xmm5, %xmm5
	vmulps	%xmm5, %xmm15, %xmm7
	vmulps	%xmm5, %xmm4, %xmm4
	vmulps	%xmm5, %xmm1, %xmm1
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm7, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm4, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm1, 24(%rax,%rcx)
	vblendps	$1, %xmm6, %xmm11, %xmm1        ## xmm1 = xmm6[0],xmm11[1,2,3]
	vmovlhps	%xmm3, %xmm1, %xmm1             ## xmm1 = xmm1[0],xmm3[0]
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm1, 36(%rax,%rcx)
	vinsertps	$16, %xmm12, %xmm6, %xmm1 ## xmm1 = xmm6[0],xmm12[0],xmm6[2,3]
	vmovlps	%xmm1, 52(%rax,%rcx)
	vaddps	%xmm2, %xmm8, %xmm1
	vblendps	$2, %xmm2, %xmm1, %xmm2         ## xmm2 = xmm1[0],xmm2[1],xmm1[2,3]
	vmovups	%ymm9, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovups	%xmm10, 96(%rax,%rcx)
	movq	%r8, 112(%rax,%rcx)
	jmp	LBB33_10
	.p2align	4, 0x90
LBB33_8:                                ##   in Loop: Header=BB33_2 Depth=1
	vmovsd	(%rdi), %xmm6                   ## xmm6 = mem[0],zero
	vcvtdq2ps	%xmm6, %xmm6
	vmulps	%xmm6, %xmm1, %xmm7
	vmulps	%xmm6, %xmm4, %xmm6
	vblendps	$2, %xmm7, %xmm6, %xmm5         ## xmm5 = xmm6[0],xmm7[1],xmm6[2,3]
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm7, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm5, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm6, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm13, 36(%rax,%rcx)
	vmovlps	%xmm14, 52(%rax,%rcx)
	vmovups	%ymm9, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovlhps	%xmm14, %xmm12, %xmm5           ## xmm5 = xmm12[0],xmm14[0]
	vmovups	%xmm5, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vmovsd	(%rdi), %xmm6                   ## xmm6 = mem[0],zero
	vcvtdq2ps	%xmm6, %xmm6
	vmulps	%xmm6, %xmm1, %xmm1
	vmulps	%xmm6, %xmm4, %xmm4
	vblendps	$2, %xmm4, %xmm1, %xmm6         ## xmm6 = xmm1[0],xmm4[1],xmm1[2,3]
	movq	192(%rdi), %rax
	movslq	204(%rdi), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%rdi)
	shlq	$7, %rcx
	vmovlps	%xmm1, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm6, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm4, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm13, 36(%rax,%rcx)
	vmovlps	%xmm14, 52(%rax,%rcx)
	vmovups	%ymm9, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovups	%xmm5, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
LBB33_10:                               ##   in Loop: Header=BB33_2 Depth=1
	movq	$2, 120(%rax,%rcx)
	jmp	LBB33_11
LBB33_12:
	popq	%rbp
	vzeroupper
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z12push_2d_textP14Render_Context2v2PKcz
LCPI34_0:
	.long	0x3f800000                      ## float 1
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z12push_2d_textP14Render_Context2v2PKcz
	.p2align	4, 0x90
__Z12push_2d_textP14Render_Context2v2PKcz: ## @_Z12push_2d_textP14Render_Context2v2PKcz
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	pushq	%rax
	movl	$8424, %eax                     ## imm = 0x20E8
	callq	____chkstk_darwin
	subq	%rax, %rsp
	popq	%rax
	movq	8424(%rsp), %rax
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r10
	vmovaps	%xmm0, -8272(%rbp)              ## 16-byte Spill
	movq	%rdi, %r14
	movq	%rdx, -8432(%rbp)
	movq	%rcx, -8424(%rbp)
	movq	%r8, -8416(%rbp)
	movq	%r9, -8408(%rbp)
	testb	%al, %al
	je	LBB34_6
## %bb.5:
	vmovaps	%xmm1, -8384(%rbp)
	vmovaps	%xmm2, -8368(%rbp)
	vmovaps	%xmm3, -8352(%rbp)
	vmovaps	%xmm4, -8336(%rbp)
	vmovaps	%xmm5, -8320(%rbp)
	vmovaps	%xmm6, -8304(%rbp)
	vmovaps	%xmm7, -8288(%rbp)
LBB34_6:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	leaq	-8448(%rbp), %rax
	movq	%rax, -8240(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -8248(%rbp)
	movabsq	$274877906960, %rax             ## imm = 0x4000000010
	movq	%rax, -8256(%rbp)
	leaq	-8224(%rbp), %rbx
	leaq	-8256(%rbp), %rcx
	movl	$8192, %esi                     ## imm = 0x2000
	movq	%rbx, %rdi
	movq	%r10, %rdx
	callq	_vsnprintf
	movl	$-1, %edx
	.p2align	4, 0x90
LBB34_1:                                ## =>This Inner Loop Header: Depth=1
	incl	%edx
	cmpb	$0, (%rbx)
	leaq	1(%rbx), %rbx
	jne	LBB34_1
## %bb.2:
	vbroadcastss	LCPI34_0(%rip), %xmm1   ## xmm1 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	leaq	-8224(%rbp), %rsi
	vmovss	LCPI34_0(%rip), %xmm3           ## xmm3 = mem[0],zero,zero,zero
	movq	%r14, %rdi
	vmovaps	-8272(%rbp), %xmm0              ## 16-byte Reload
	vmovaps	%xmm1, %xmm2
	callq	__Z12push_2d_textP14Render_Context6String2v22v4f
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-24(%rbp), %rax
	jne	LBB34_4
## %bb.3:
	addq	$8432, %rsp                     ## imm = 0x20F0
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
LBB34_4:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_FindGlyphIndex           ## -- Begin function stbtt_FindGlyphIndex
	.p2align	4, 0x90
_stbtt_FindGlyphIndex:                  ## @stbtt_FindGlyphIndex
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
                                        ## kill: def $esi killed $esi def $rsi
	movq	8(%rdi), %r13
	movl	56(%rdi), %r11d
	leaq	(%r11,%r13), %r12
	movzwl	(%r13,%r11), %r8d
	rolw	$8, %r8w
	cmpw	$6, %r8w
	ja	LBB35_4
## %bb.1:
	movzwl	%r8w, %eax
	leaq	LJTI35_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
LBB35_2:
	movzwl	2(%r12), %eax
	rolw	$8, %ax
	movzwl	%ax, %ecx
	addl	$-6, %ecx
	xorl	%eax, %eax
	cmpl	%esi, %ecx
	jle	LBB35_29
## %bb.3:
	movslq	%esi, %rax
	movzbl	6(%r12,%rax), %eax
	jmp	LBB35_29
LBB35_4:
	movl	%r8d, %eax
	andl	$65534, %eax                    ## imm = 0xFFFE
	cmpw	$12, %ax
	jne	LBB35_38
## %bb.5:
	movl	12(%r12), %eax
	bswapl	%eax
	testl	%eax, %eax
	jle	LBB35_19
## %bb.6:
	xorl	%ecx, %ecx
	jmp	LBB35_8
	.p2align	4, 0x90
LBB35_7:                                ##   in Loop: Header=BB35_8 Depth=1
	movl	%edx, %eax
	cmpl	%ecx, %eax
	jle	LBB35_19
LBB35_8:                                ## =>This Inner Loop Header: Depth=1
	movl	%eax, %edx
	subl	%ecx, %edx
	sarl	%edx
	addl	%ecx, %edx
	movslq	%edx, %rdi
	shlq	$2, %rdi
	leaq	(%rdi,%rdi,2), %rbx
	movl	16(%r12,%rbx), %edi
	bswapl	%edi
	cmpl	%esi, %edi
	ja	LBB35_7
## %bb.9:                               ##   in Loop: Header=BB35_8 Depth=1
	movl	20(%r12,%rbx), %ecx
	bswapl	%ecx
	cmpl	%esi, %ecx
	jae	LBB35_20
## %bb.10:                              ##   in Loop: Header=BB35_8 Depth=1
	incl	%edx
	movl	%edx, %ecx
	cmpl	%ecx, %eax
	jg	LBB35_8
LBB35_19:
	xorl	%eax, %eax
	jmp	LBB35_29
LBB35_12:
	xorl	%eax, %eax
	cmpl	$65535, %esi                    ## imm = 0xFFFF
	jg	LBB35_29
## %bb.13:
	movzwl	6(%r12), %eax
	rolw	$8, %ax
	movzwl	%ax, %r8d
	leal	14(%r11), %r10d
	movzbl	12(%r13,%r11), %eax
	shlq	$8, %rax
	movzbl	10(%r13,%r11), %r14d
	shll	$8, %r14d
	movzbl	13(%r13,%r11), %ecx
	andl	$-2, %ecx
	orq	%rax, %rcx
	addq	%r13, %r10
	movzwl	(%r10,%rcx), %edi
	rolw	$8, %di
	movzbl	11(%r13,%r11), %eax
	movzwl	%di, %edi
	xorl	%r9d, %r9d
	cmpl	%esi, %edi
	cmovgl	%r9d, %ecx
	orw	%ax, %r14w
	leal	12(%r11,%rcx), %r15d
	je	LBB35_21
## %bb.14:
	movzwl	8(%r12), %ecx
	rolw	$8, %cx
	movzwl	%ax, %eax
	testb	$1, %al
	jne	LBB35_22
## %bb.15:
                                        ## implicit-def: $eax
	movl	%r14d, %ebx
	jmp	LBB35_23
LBB35_16:
	movzwl	6(%r12), %eax
	rolw	$8, %ax
	movzwl	%ax, %ecx
	xorl	%eax, %eax
	cmpl	%esi, %ecx
	ja	LBB35_29
## %bb.17:
	movzwl	8(%r12), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	addl	%ecx, %edx
	cmpl	%esi, %edx
	jbe	LBB35_29
## %bb.18:
	subl	%ecx, %esi
	addl	%esi, %esi
	movzwl	10(%r12,%rsi), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	jmp	LBB35_29
LBB35_20:
	subl	%edi, %esi
	xorl	%eax, %eax
	cmpw	$12, %r8w
	movl	24(%r12,%rbx), %ecx
	bswapl	%ecx
	cmovel	%esi, %eax
	addl	%ecx, %eax
	jmp	LBB35_29
LBB35_21:
	movl	%r15d, %eax
	jmp	LBB35_24
LBB35_22:
	movzwl	%cx, %ecx
	shrq	%rcx
	movl	%r15d, %edi
	addq	%r13, %rdi
	movl	%ecx, %eax
	andl	$-2, %eax
	movzwl	(%rax,%rdi), %edi
	rolw	$8, %di
	movzwl	%di, %edi
	xorl	%ebx, %ebx
	cmpl	%esi, %edi
	cmovgel	%ebx, %eax
	addl	%r15d, %eax
	leal	-1(%r14), %ebx
	movl	%eax, %r15d
LBB35_23:
	cmpw	$1, %r14w
	jne	LBB35_30
LBB35_24:
	subl	%r11d, %eax
	addl	$131060, %eax                   ## imm = 0x1FFF4
	movl	%r8d, %ecx
	andl	$-2, %ecx
	addq	%r12, %rcx
	addq	$14, %rcx
	andl	$131070, %eax                   ## imm = 0x1FFFE
	movzwl	2(%rax,%rcx), %ecx
	rolw	$8, %cx
	movzwl	%cx, %ecx
	cmpl	%esi, %ecx
	jg	LBB35_28
## %bb.25:
	movzwl	(%r10,%rax), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%esi, %edx
	jl	LBB35_28
## %bb.26:
	shrl	%r8d
	addq	$14, %r12
	movl	%r8d, %ebx
	leaq	(%rbx,%rbx), %rdx
	leaq	(%rdx,%rdx,2), %r8
	leaq	(%r12,%r8), %rdx
	movzwl	2(%rax,%rdx), %edi
	rolw	$8, %di
	testw	%di, %di
	je	LBB35_36
## %bb.27:
	movzwl	%di, %edx
	addq	%rdx, %r13
	subl	%ecx, %esi
	addl	%esi, %esi
	movslq	%esi, %rcx
	addq	%r13, %rcx
	addq	%r11, %rcx
	addq	%r8, %rcx
	movzwl	16(%rax,%rcx), %eax
	rolw	$8, %ax
	movzwl	%ax, %r9d
	jmp	LBB35_28
LBB35_30:
	movl	%r15d, %eax
	jmp	LBB35_32
	.p2align	4, 0x90
LBB35_31:                               ##   in Loop: Header=BB35_32 Depth=1
	addl	%edi, %eax
	addw	$-2, %bx
	je	LBB35_24
LBB35_32:                               ## =>This Inner Loop Header: Depth=1
	movzwl	%cx, %ecx
	movl	%ecx, %edi
	shrl	%edi
	movl	%eax, %edx
	addq	%r13, %rdx
	andl	$-2, %edi
	movzwl	(%rdi,%rdx), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%esi, %edx
	jl	LBB35_34
## %bb.33:                              ##   in Loop: Header=BB35_32 Depth=1
	xorl	%edi, %edi
LBB35_34:                               ##   in Loop: Header=BB35_32 Depth=1
	addl	%eax, %edi
	shrl	$2, %ecx
	leaq	(%rdi,%r13), %rdx
	movl	%ecx, %eax
	andl	$-2, %eax
	movzwl	(%rax,%rdx), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%esi, %edx
	jl	LBB35_31
## %bb.35:                              ##   in Loop: Header=BB35_32 Depth=1
	xorl	%eax, %eax
	jmp	LBB35_31
LBB35_36:
	leaq	(%r12,%rbx,4), %rcx
	movzwl	2(%rax,%rcx), %eax
	rolw	$8, %ax
	movzwl	%ax, %r9d
	addl	%esi, %r9d
LBB35_28:
	movzwl	%r9w, %eax
LBB35_29:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB35_37:
	callq	_stbtt_FindGlyphIndex.cold.2
	xorl	%eax, %eax
	jmp	LBB35_29
LBB35_38:
	callq	_stbtt_FindGlyphIndex.cold.1
	xorl	%eax, %eax
	jmp	LBB35_29
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L35_0_set_2, LBB35_2-LJTI35_0
.set L35_0_set_4, LBB35_4-LJTI35_0
.set L35_0_set_37, LBB35_37-LJTI35_0
.set L35_0_set_12, LBB35_12-LJTI35_0
.set L35_0_set_16, LBB35_16-LJTI35_0
LJTI35_0:
	.long	L35_0_set_2
	.long	L35_0_set_4
	.long	L35_0_set_37
	.long	L35_0_set_4
	.long	L35_0_set_12
	.long	L35_0_set_4
	.long	L35_0_set_16
	.end_data_region
                                        ## -- End function
	.globl	_stbtt_GetCodepointShape        ## -- Begin function stbtt_GetCodepointShape
	.p2align	4, 0x90
_stbtt_GetCodepointShape:               ## @stbtt_GetCodepointShape
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rdx, %r14
	movq	%rdi, %rbx
	callq	_stbtt_FindGlyphIndex
	movq	%rbx, %rdi
	movl	%eax, %esi
	movq	%r14, %rdx
	popq	%rbx
	popq	%r14
	popq	%rbp
	jmp	_stbtt_GetGlyphShape            ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function stbtt_GetGlyphShape
LCPI37_0:
	.long	0x38800000                      ## float 6.10351563E-5
LCPI37_1:
	.long	0x3f800000                      ## float 1
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_stbtt_GetGlyphShape
	.p2align	4, 0x90
_stbtt_GetGlyphShape:                   ## @stbtt_GetGlyphShape
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$320, %rsp                      ## imm = 0x140
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r12
	movl	%esi, %r15d
	movq	%rdi, %rbx
	cmpl	$0, 76(%rdi)
	je	LBB37_7
## %bb.1:
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%ymm0, 160(%rsp)
	vmovups	%ymm0, 184(%rsp)
	movl	$1, 160(%rsp)
	vmovups	%ymm0, 248(%rsp)
	vmovaps	%ymm0, 224(%rsp)
	leaq	160(%rsp), %rdx
	movq	%rbx, %rdi
	movl	%r15d, %esi
	vzeroupper
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx
	testl	%eax, %eax
	je	LBB37_5
## %bb.2:
	movslq	208(%rsp), %rax
	movq	%rax, %rdi
	shlq	$4, %rdi
	subq	%rax, %rdi
	subq	%rax, %rdi
	callq	_malloc
	movq	%rax, (%r12)
	movq	%rax, 264(%rsp)
	leaq	224(%rsp), %rdx
	movq	%rbx, %rdi
	movl	%r15d, %esi
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx
	testl	%eax, %eax
	je	LBB37_5
## %bb.3:
	movl	272(%rsp), %r15d
	cmpl	208(%rsp), %r15d
	je	LBB37_17
## %bb.4:
	callq	_stbtt_GetGlyphShape.cold.2
	jmp	LBB37_104
LBB37_5:
	movq	$0, (%r12)
LBB37_6:
	xorl	%r15d, %r15d
	jmp	LBB37_17
LBB37_7:
	movq	8(%rbx), %r14
	movq	%rbx, %rdi
	movl	%r15d, %esi
	callq	__ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi
	movq	$0, (%r12)
	xorl	%r15d, %r15d
	testl	%eax, %eax
	js	LBB37_17
## %bb.8:
	movl	%eax, %eax
	leaq	(%r14,%rax), %rcx
	movzwl	(%r14,%rax), %eax
	rolw	$8, %ax
	testw	%ax, %ax
	movq	%r12, 144(%rsp)                 ## 8-byte Spill
	jle	LBB37_63
## %bb.9:
	movzwl	%ax, %r14d
	movq	%rcx, %rbx
	movzbl	10(%rcx,%r14,2), %r12d
	movzbl	11(%rcx,%r14,2), %eax
	movq	%rax, 16(%rsp)                  ## 8-byte Spill
	movzwl	8(%rcx,%r14,2), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	movq	%rax, 96(%rsp)                  ## 8-byte Spill
	leaq	(%rax,%r14,2), %rax
	movq	%rax, %rdi
	shlq	$4, %rdi
	subq	%rax, %rdi
	subq	%rax, %rdi
	addq	$14, %rdi
	callq	_malloc
	testq	%rax, %rax
	je	LBB37_17
## %bb.10:
	movq	%rax, %r13
	leaq	(%rbx,%r14,2), %rax
	addq	$10, %rax
	leaq	(%r14,%r14), %rcx
	movq	%rcx, 112(%rsp)                 ## 8-byte Spill
	addq	$10, %rbx
	movq	%rbx, 40(%rsp)                  ## 8-byte Spill
	shlq	$8, %r12
	addq	16(%rsp), %r12                  ## 8-byte Folded Reload
	addq	%r12, %rax
	addq	$2, %rax
	leaq	(%r14,%r14,8), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	addq	%r14, %rcx
	leaq	(%rcx,%r13), %rdx
	addq	$12, %rdx
	movq	96(%rsp), %r11                  ## 8-byte Reload
	movl	%r11d, %r8d
	movq	%r8, %rsi
	shlq	$4, %rsi
	subq	%r8, %rsi
	subq	%r8, %rsi
	addq	$14, %rsi
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	xorl	%ebx, %ebx
	jmp	LBB37_13
	.p2align	4, 0x90
LBB37_11:                               ##   in Loop: Header=BB37_13 Depth=1
	decb	%bl
LBB37_12:                               ##   in Loop: Header=BB37_13 Depth=1
	movb	%dil, (%rdx,%rcx)
	addq	$14, %rcx
	cmpq	%rcx, %rsi
	je	LBB37_19
LBB37_13:                               ## =>This Inner Loop Header: Depth=1
	testb	%bl, %bl
	jne	LBB37_11
## %bb.14:                              ##   in Loop: Header=BB37_13 Depth=1
	movzbl	(%rax), %edi
	testb	$8, %dil
	jne	LBB37_16
## %bb.15:                              ##   in Loop: Header=BB37_13 Depth=1
	incq	%rax
	xorl	%ebx, %ebx
	jmp	LBB37_12
LBB37_16:                               ##   in Loop: Header=BB37_13 Depth=1
	movzbl	1(%rax), %ebx
	addq	$2, %rax
	jmp	LBB37_12
LBB37_19:
	leaq	(%r14,%r14,8), %rcx
	leaq	(%rcx,%rcx,2), %r10
	addq	%r14, %r10
	addq	%r13, %r10
	movq	%r8, %r9
	shlq	$4, %r9
	subq	%r8, %r9
	subq	%r8, %r9
	addq	$14, %r9
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	jmp	LBB37_22
	.p2align	4, 0x90
LBB37_20:                               ##   in Loop: Header=BB37_22 Depth=1
	movzbl	(%rax), %edx
	incq	%rax
	movl	%edx, %esi
	negl	%esi
	testb	$16, %bl
	cmovnel	%edx, %esi
	addl	%esi, %ecx
LBB37_21:                               ##   in Loop: Header=BB37_22 Depth=1
	movw	%cx, (%r10,%rdi)
	addq	$14, %rdi
	cmpq	%rdi, %r9
	je	LBB37_25
LBB37_22:                               ## =>This Inner Loop Header: Depth=1
	movzbl	12(%r10,%rdi), %ebx
	testb	$2, %bl
	jne	LBB37_20
## %bb.23:                              ##   in Loop: Header=BB37_22 Depth=1
	testb	$16, %bl
	jne	LBB37_21
## %bb.24:                              ##   in Loop: Header=BB37_22 Depth=1
	movzwl	(%rax), %edx
	rolw	$8, %dx
	addl	%edx, %ecx
	addq	$2, %rax
	jmp	LBB37_21
LBB37_25:
	leaq	(%r14,%r14,8), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	addq	%r14, %rcx
	leaq	(%rcx,%r13), %r10
	addq	$12, %r10
	movq	%r8, %r9
	shlq	$4, %r9
	subq	%r8, %r9
	subq	%r8, %r9
	addq	$14, %r9
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	jmp	LBB37_28
	.p2align	4, 0x90
LBB37_26:                               ##   in Loop: Header=BB37_28 Depth=1
	movzbl	(%rax), %edx
	incq	%rax
	movl	%edx, %esi
	negl	%esi
	testb	$32, %bl
	cmovnel	%edx, %esi
	addl	%esi, %edi
LBB37_27:                               ##   in Loop: Header=BB37_28 Depth=1
	movw	%di, -10(%r10,%rcx)
	addq	$14, %rcx
	cmpq	%rcx, %r9
	je	LBB37_31
LBB37_28:                               ## =>This Inner Loop Header: Depth=1
	movzbl	(%r10,%rcx), %ebx
	testb	$4, %bl
	jne	LBB37_26
## %bb.29:                              ##   in Loop: Header=BB37_28 Depth=1
	testb	$32, %bl
	jne	LBB37_27
## %bb.30:                              ##   in Loop: Header=BB37_28 Depth=1
	movzwl	(%rax), %edx
	rolw	$8, %dx
	addl	%edx, %edi
	addq	$2, %rax
	jmp	LBB37_27
LBB37_31:
	xorl	%r15d, %r15d
	xorl	%eax, %eax
	xorl	%r9d, %r9d
	xorl	%r14d, %r14d
	xorl	%ecx, %ecx
	movq	%rcx, 16(%rsp)                  ## 8-byte Spill
	xorl	%ecx, %ecx
	movq	%rcx, 64(%rsp)                  ## 8-byte Spill
	movl	$0, 80(%rsp)                    ## 4-byte Folded Spill
	movl	$0, 48(%rsp)                    ## 4-byte Folded Spill
	xorl	%ecx, %ecx
	movq	%rcx, 8(%rsp)                   ## 8-byte Spill
	xorl	%ecx, %ecx
	movq	%rcx, (%rsp)                    ## 8-byte Spill
	xorl	%edx, %edx
	xorl	%edi, %edi
	jmp	LBB37_36
LBB37_47:                               ##   in Loop: Header=BB37_36 Depth=1
	movq	40(%rsp), %rdx                  ## 8-byte Reload
	andl	$1, %r8d
	je	LBB37_57
LBB37_32:                               ##   in Loop: Header=BB37_36 Depth=1
	movl	%r12d, %edi
	movl	%r11d, %ebx
	movq	64(%rsp), %r12                  ## 8-byte Reload
                                        ## kill: def $r12d killed $r12d killed $r12 def $r12
	movq	16(%rsp), %r11                  ## 8-byte Reload
                                        ## kill: def $r11d killed $r11d killed $r11 def $r11
LBB37_33:                               ##   in Loop: Header=BB37_36 Depth=1
	xorl	$1, %r8d
	movslq	%r15d, %rcx
	incl	%r15d
	movq	%rcx, %rsi
	shlq	$4, %rsi
	subq	%rcx, %rsi
	subq	%rcx, %rsi
	movb	$1, 12(%r13,%rsi)
	movl	%edi, 48(%rsp)                  ## 4-byte Spill
	movw	%di, (%r13,%rsi)
	movl	%ebx, 80(%rsp)                  ## 4-byte Spill
	movw	%bx, 2(%r13,%rsi)
	movl	$0, 4(%r13,%rsi)
	movslq	%r9d, %r9
	movzwl	(%rdx,%r9,2), %ecx
	rolw	$8, %cx
	movzwl	%cx, %r14d
	incl	%r14d
	incl	%r9d
	xorl	%ebx, %ebx
	movb	$1, %sil
	movl	%r8d, %edx
                                        ## kill: def $r12d killed $r12d killed $r12 def $r12
	movq	%r12, 64(%rsp)                  ## 8-byte Spill
                                        ## kill: def $r11d killed $r11d killed $r11 def $r11
	movq	%r11, 16(%rsp)                  ## 8-byte Spill
LBB37_34:                               ##   in Loop: Header=BB37_36 Depth=1
	movq	96(%rsp), %r11                  ## 8-byte Reload
LBB37_35:                               ##   in Loop: Header=BB37_36 Depth=1
	leal	1(%rax), %ecx
	movl	%ebx, %edi
	cmpl	%r11d, %eax
	movl	%ecx, %eax
	jge	LBB37_60
LBB37_36:                               ## =>This Inner Loop Header: Depth=1
	movq	112(%rsp), %rcx                 ## 8-byte Reload
	addl	%eax, %ecx
	movslq	%ecx, %r10
	movq	%r10, %rcx
	shlq	$4, %rcx
	subq	%r10, %rcx
	subq	%r10, %rcx
	movzbl	12(%r13,%rcx), %r8d
	movzwl	(%r13,%rcx), %esi
	movzwl	2(%r13,%rcx), %ebx
	movswl	%si, %r12d
	movswl	%bx, %r11d
	cmpl	%eax, %r14d
	jne	LBB37_41
## %bb.37:                              ##   in Loop: Header=BB37_36 Depth=1
	testl	%eax, %eax
	je	LBB37_47
## %bb.38:                              ##   in Loop: Header=BB37_36 Depth=1
	testl	%edx, %edx
	je	LBB37_48
## %bb.39:                              ##   in Loop: Header=BB37_36 Depth=1
	movq	%r9, 136(%rsp)                  ## 8-byte Spill
	testl	%edi, %edi
	je	LBB37_52
## %bb.40:                              ##   in Loop: Header=BB37_36 Depth=1
	movslq	%r15d, %rcx
	incl	%r15d
	movq	%r15, 152(%rsp)                 ## 8-byte Spill
	movq	(%rsp), %r14                    ## 8-byte Reload
	movq	64(%rsp), %r15                  ## 8-byte Reload
	leal	(%r14,%r15), %edi
	shrl	%edi
	movq	8(%rsp), %rdx                   ## 8-byte Reload
	movq	16(%rsp), %r9                   ## 8-byte Reload
	leal	(%rdx,%r9), %ebx
	shrl	%ebx
	movq	%rcx, %rsi
	shlq	$4, %rsi
	subq	%rcx, %rsi
	subq	%rcx, %rsi
	movb	$3, 12(%r13,%rsi)
	movw	%di, (%r13,%rsi)
	movw	%bx, 2(%r13,%rsi)
	movq	%r15, %rbx
	movq	152(%rsp), %r15                 ## 8-byte Reload
	movw	%r14w, 4(%r13,%rsi)
	movw	%dx, 6(%r13,%rsi)
	movq	40(%rsp), %rdx                  ## 8-byte Reload
	jmp	LBB37_53
	.p2align	4, 0x90
LBB37_41:                               ##   in Loop: Header=BB37_36 Depth=1
	testb	$1, %r8b
	jne	LBB37_45
## %bb.42:                              ##   in Loop: Header=BB37_36 Depth=1
	movl	$1, %ebx
	testl	%edi, %edi
	je	LBB37_44
## %bb.43:                              ##   in Loop: Header=BB37_36 Depth=1
	movl	%edx, 136(%rsp)                 ## 4-byte Spill
	movslq	%r15d, %rdx
	incl	%r15d
	movq	(%rsp), %r10                    ## 8-byte Reload
	leal	(%r10,%r12), %esi
	shrl	%esi
	movq	8(%rsp), %r8                    ## 8-byte Reload
	leal	(%r8,%r11), %edi
	shrl	%edi
	movq	%rdx, %rcx
	shlq	$4, %rcx
	subq	%rdx, %rcx
	subq	%rdx, %rcx
	movl	136(%rsp), %edx                 ## 4-byte Reload
	movb	$3, 12(%r13,%rcx)
	movw	%si, (%r13,%rcx)
	movw	%di, 2(%r13,%rcx)
	movw	%r10w, 4(%r13,%rcx)
	movw	%r8w, 6(%r13,%rcx)
LBB37_44:                               ##   in Loop: Header=BB37_36 Depth=1
	xorl	%esi, %esi
                                        ## kill: def $r12d killed $r12d killed $r12 def $r12
	movq	%r12, (%rsp)                    ## 8-byte Spill
                                        ## kill: def $r11d killed $r11d killed $r11 def $r11
	movq	%r11, 8(%rsp)                   ## 8-byte Spill
	jmp	LBB37_34
	.p2align	4, 0x90
LBB37_45:                               ##   in Loop: Header=BB37_36 Depth=1
	movl	%edx, %r8d
	movslq	%r15d, %rdx
	movq	%rdx, %rcx
	shlq	$4, %rcx
	subq	%rdx, %rcx
	subq	%rdx, %rcx
	leaq	(%rcx,%r13), %rdx
	addq	$12, %rdx
	testl	%edi, %edi
	je	LBB37_50
## %bb.46:                              ##   in Loop: Header=BB37_36 Depth=1
	movb	$3, (%rdx)
	movq	(%rsp), %rdx                    ## 8-byte Reload
                                        ## kill: def $dx killed $dx killed $rdx def $edx
	movq	8(%rsp), %rdi                   ## 8-byte Reload
                                        ## kill: def $di killed $di killed $rdi def $edi
	jmp	LBB37_51
LBB37_48:                               ##   in Loop: Header=BB37_36 Depth=1
	movslq	%r15d, %rsi
	movq	%rsi, %rbx
	shlq	$4, %rbx
	subq	%rsi, %rbx
	subq	%rsi, %rbx
	leaq	(%rbx,%r13), %r14
	addq	$12, %r14
	testl	%edi, %edi
	je	LBB37_54
## %bb.49:                              ##   in Loop: Header=BB37_36 Depth=1
	movb	$3, (%r14)
	movl	48(%rsp), %ecx                  ## 4-byte Reload
	movw	%cx, (%r13,%rbx)
	movl	80(%rsp), %ecx                  ## 4-byte Reload
	movw	%cx, 2(%r13,%rbx)
	movq	(%rsp), %rcx                    ## 8-byte Reload
	movw	%cx, 4(%r13,%rbx)
	movq	8(%rsp), %rcx                   ## 8-byte Reload
	movl	%ecx, %edi
	jmp	LBB37_55
LBB37_50:                               ##   in Loop: Header=BB37_36 Depth=1
	movb	$2, (%rdx)
	xorl	%edx, %edx
	xorl	%edi, %edi
LBB37_51:                               ##   in Loop: Header=BB37_36 Depth=1
	movq	96(%rsp), %r11                  ## 8-byte Reload
	movw	%si, (%r13,%rcx)
	movw	%bx, 2(%r13,%rcx)
	movw	%dx, 4(%r13,%rcx)
	movw	%di, 6(%r13,%rcx)
	incl	%r15d
	xorl	%ebx, %ebx
	movb	$1, %sil
	movl	%r8d, %edx
	jmp	LBB37_35
LBB37_52:                               ##   in Loop: Header=BB37_36 Depth=1
	movq	40(%rsp), %rdx                  ## 8-byte Reload
	movq	16(%rsp), %r9                   ## 8-byte Reload
	movq	64(%rsp), %rbx                  ## 8-byte Reload
LBB37_53:                               ##   in Loop: Header=BB37_36 Depth=1
	movslq	%r15d, %rsi
	movq	%rsi, %rcx
	shlq	$4, %rcx
	subq	%rsi, %rcx
	subq	%rsi, %rcx
	movb	$3, 12(%r13,%rcx)
	movl	48(%rsp), %edi                  ## 4-byte Reload
	movw	%di, (%r13,%rcx)
	movl	80(%rsp), %edi                  ## 4-byte Reload
	movw	%di, 2(%r13,%rcx)
	movw	%bx, 4(%r13,%rcx)
	movl	%r9d, %edi
	movq	136(%rsp), %r9                  ## 8-byte Reload
	jmp	LBB37_56
LBB37_54:                               ##   in Loop: Header=BB37_36 Depth=1
	movb	$2, (%r14)
	movl	48(%rsp), %ecx                  ## 4-byte Reload
	movw	%cx, (%r13,%rbx)
	movl	80(%rsp), %ecx                  ## 4-byte Reload
	movw	%cx, 2(%r13,%rbx)
	movw	$0, 4(%r13,%rbx)
	xorl	%edi, %edi
LBB37_55:                               ##   in Loop: Header=BB37_36 Depth=1
	movq	40(%rsp), %rdx                  ## 8-byte Reload
LBB37_56:                               ##   in Loop: Header=BB37_36 Depth=1
	movq	%rsi, %rcx
	shlq	$4, %rcx
	subq	%rsi, %rcx
	subq	%rsi, %rcx
	movw	%di, 6(%r13,%rcx)
	incl	%r15d
	andl	$1, %r8d
	jne	LBB37_32
LBB37_57:                               ##   in Loop: Header=BB37_36 Depth=1
	incq	%r10
	movq	%r10, %rsi
	shlq	$4, %rsi
	subq	%r10, %rsi
	subq	%r10, %rsi
	movswl	(%r13,%rsi), %edi
	testb	$1, 12(%r13,%rsi)
	jne	LBB37_59
## %bb.58:                              ##   in Loop: Header=BB37_36 Depth=1
	addl	%r12d, %edi
	sarl	%edi
	movswl	2(%r13,%rsi), %ebx
	addl	%r11d, %ebx
	sarl	%ebx
	jmp	LBB37_33
LBB37_59:                               ##   in Loop: Header=BB37_36 Depth=1
	movzwl	%di, %edi
	movzwl	2(%r13,%rsi), %ebx
	incl	%eax
	jmp	LBB37_33
LBB37_60:
	testl	%edx, %edx
	je	LBB37_65
## %bb.61:
	testb	%sil, %sil
	je	LBB37_95
## %bb.62:
	movl	48(%rsp), %edx                  ## 4-byte Reload
	movl	80(%rsp), %esi                  ## 4-byte Reload
	movq	16(%rsp), %rbx                  ## 8-byte Reload
	movq	64(%rsp), %rdi                  ## 8-byte Reload
	jmp	LBB37_96
LBB37_63:
	js	LBB37_67
## %bb.64:
	xorl	%r15d, %r15d
	xorl	%r13d, %r13d
	jmp	LBB37_99
LBB37_65:
	movslq	%r15d, %rax
	movq	%rax, %rcx
	shlq	$4, %rcx
	subq	%rax, %rcx
	subq	%rax, %rcx
	leaq	(%rcx,%r13), %rdx
	addq	$12, %rdx
	testb	%sil, %sil
	je	LBB37_97
## %bb.66:
	movb	$2, (%rdx)
	movl	48(%rsp), %edx                  ## 4-byte Reload
	movw	%dx, (%r13,%rcx)
	movl	80(%rsp), %edx                  ## 4-byte Reload
	movw	%dx, 2(%r13,%rcx)
	movw	$0, 4(%r13,%rcx)
	xorl	%ebx, %ebx
	jmp	LBB37_98
LBB37_67:
	movq	%rbx, (%rsp)                    ## 8-byte Spill
	movq	%rcx, %r14
	addq	$10, %r14
	xorl	%r13d, %r13d
	xorl	%r12d, %r12d
	jmp	LBB37_69
	.p2align	4, 0x90
LBB37_68:                               ##   in Loop: Header=BB37_69 Depth=1
	movl	%r12d, %r15d
	testb	$32, %bl
	je	LBB37_99
LBB37_69:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB37_84 Depth 2
                                        ##     Child Loop BB37_87 Depth 2
	movq	$0, 160(%rsp)
	movzbl	1(%r14), %ebx
	testb	$2, %bl
	je	LBB37_103
## %bb.70:                              ##   in Loop: Header=BB37_69 Depth=1
	movzbl	4(%r14), %eax
	testb	$1, %bl
	jne	LBB37_72
## %bb.71:                              ##   in Loop: Header=BB37_69 Depth=1
	movsbl	%al, %eax
	vcvtsi2ss	%eax, %xmm12, %xmm0
	movsbl	5(%r14), %eax
	vcvtsi2ss	%eax, %xmm12, %xmm1
	movl	$6, %ecx
	jmp	LBB37_73
	.p2align	4, 0x90
LBB37_72:                               ##   in Loop: Header=BB37_69 Depth=1
	movzbl	5(%r14), %ecx
	movzwl	%ax, %eax
	shll	$8, %eax
	orl	%ecx, %eax
	cwtl
	vcvtsi2ss	%eax, %xmm12, %xmm0
	movzwl	6(%r14), %eax
	rolw	$8, %ax
	cwtl
	vcvtsi2ss	%eax, %xmm12, %xmm1
	movl	$8, %ecx
LBB37_73:                               ##   in Loop: Header=BB37_69 Depth=1
	movzwl	2(%r14), %eax
	rolw	$8, %ax
	addq	%rcx, %r14
	testb	$8, %bl
	vmovaps	%xmm0, 80(%rsp)                 ## 16-byte Spill
	vmovaps	%xmm1, 96(%rsp)                 ## 16-byte Spill
	jne	LBB37_77
## %bb.74:                              ##   in Loop: Header=BB37_69 Depth=1
	testb	$64, %bl
	jne	LBB37_78
## %bb.75:                              ##   in Loop: Header=BB37_69 Depth=1
	testb	$-128, %bl
	jne	LBB37_79
## %bb.76:                              ##   in Loop: Header=BB37_69 Depth=1
	vxorps	%xmm2, %xmm2, %xmm2
	vmovaps	%xmm2, 112(%rsp)                ## 16-byte Spill
	vmovss	LCPI37_1(%rip), %xmm0           ## xmm0 = mem[0],zero,zero,zero
	vmovaps	%xmm0, %xmm1
	vmovaps	%xmm0, 64(%rsp)                 ## 16-byte Spill
	vxorps	%xmm1, %xmm1, %xmm1
	vmovaps	%xmm1, 48(%rsp)                 ## 16-byte Spill
	vmovaps	%xmm0, 16(%rsp)                 ## 16-byte Spill
	jmp	LBB37_80
	.p2align	4, 0x90
LBB37_77:                               ##   in Loop: Header=BB37_69 Depth=1
	movzwl	(%r14), %ecx
	rolw	$8, %cx
	movswl	%cx, %ecx
	vcvtsi2ss	%ecx, %xmm12, %xmm0
	vmulss	LCPI37_0(%rip), %xmm0, %xmm0
	addq	$2, %r14
	vxorps	%xmm1, %xmm1, %xmm1
	vmovaps	%xmm1, 112(%rsp)                ## 16-byte Spill
	vxorps	%xmm1, %xmm1, %xmm1
	vmovaps	%xmm1, 48(%rsp)                 ## 16-byte Spill
	vmovaps	%xmm0, 64(%rsp)                 ## 16-byte Spill
	vmovaps	%xmm0, 16(%rsp)                 ## 16-byte Spill
	jmp	LBB37_80
LBB37_78:                               ##   in Loop: Header=BB37_69 Depth=1
	movzwl	(%r14), %ecx
	rolw	$8, %cx
	movswl	%cx, %ecx
	vcvtsi2ss	%ecx, %xmm11, %xmm0
	movzwl	2(%r14), %ecx
	vmovss	LCPI37_0(%rip), %xmm1           ## xmm1 = mem[0],zero,zero,zero
	vmulss	%xmm1, %xmm0, %xmm0
	vmovaps	%xmm0, 16(%rsp)                 ## 16-byte Spill
	rolw	$8, %cx
	movswl	%cx, %ecx
	vcvtsi2ss	%ecx, %xmm11, %xmm0
	vmulss	%xmm1, %xmm0, %xmm0
	vmovaps	%xmm0, 64(%rsp)                 ## 16-byte Spill
	addq	$4, %r14
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%xmm0, 112(%rsp)                ## 16-byte Spill
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%xmm0, 48(%rsp)                 ## 16-byte Spill
	jmp	LBB37_80
LBB37_79:                               ##   in Loop: Header=BB37_69 Depth=1
	movzwl	(%r14), %ecx
	rolw	$8, %cx
	movswl	%cx, %ecx
	vcvtsi2ss	%ecx, %xmm11, %xmm0
	movzwl	2(%r14), %ecx
	rolw	$8, %cx
	movswl	%cx, %ecx
	vcvtsi2ss	%ecx, %xmm11, %xmm1
	movzwl	4(%r14), %ecx
	rolw	$8, %cx
	movswl	%cx, %ecx
	vcvtsi2ss	%ecx, %xmm11, %xmm2
	vmovss	LCPI37_0(%rip), %xmm3           ## xmm3 = mem[0],zero,zero,zero
	vmulss	%xmm3, %xmm0, %xmm0
	vmovaps	%xmm0, 16(%rsp)                 ## 16-byte Spill
	movzwl	6(%r14), %ecx
	rolw	$8, %cx
	movswl	%cx, %ecx
	vcvtsi2ss	%ecx, %xmm6, %xmm0
	vmulss	%xmm3, %xmm1, %xmm1
	vmovaps	%xmm1, 48(%rsp)                 ## 16-byte Spill
	vmulss	%xmm3, %xmm2, %xmm1
	vmovaps	%xmm1, 112(%rsp)                ## 16-byte Spill
	vmulss	%xmm3, %xmm0, %xmm0
	vmovaps	%xmm0, 64(%rsp)                 ## 16-byte Spill
	addq	$8, %r14
	.p2align	4, 0x90
LBB37_80:                               ##   in Loop: Header=BB37_69 Depth=1
	movzwl	%ax, %esi
	movq	(%rsp), %rdi                    ## 8-byte Reload
	leaq	160(%rsp), %rdx
	callq	_stbtt_GetGlyphShape
                                        ## kill: def $eax killed $eax def $rax
	testl	%eax, %eax
	jle	LBB37_68
## %bb.81:                              ##   in Loop: Header=BB37_69 Depth=1
	movl	%ebx, 8(%rsp)                   ## 4-byte Spill
	vmovaps	48(%rsp), %xmm9                 ## 16-byte Reload
	vmulss	%xmm9, %xmm9, %xmm0
	vmovaps	16(%rsp), %xmm8                 ## 16-byte Reload
	vmulss	%xmm8, %xmm8, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vsqrtss	%xmm0, %xmm0, %xmm11
	vmovaps	64(%rsp), %xmm0                 ## 16-byte Reload
	vmulss	%xmm0, %xmm0, %xmm1
	vmovaps	112(%rsp), %xmm6                ## 16-byte Reload
	vmulss	%xmm6, %xmm6, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vsqrtss	%xmm1, %xmm1, %xmm1
	movq	160(%rsp), %r8
	movl	%eax, %ebx
	cmpl	$9, %eax
	jae	LBB37_83
## %bb.82:                              ##   in Loop: Header=BB37_69 Depth=1
	xorl	%ecx, %ecx
	vmovaps	80(%rsp), %xmm10                ## 16-byte Reload
	vmovaps	96(%rsp), %xmm7                 ## 16-byte Reload
	jmp	LBB37_86
LBB37_83:                               ##   in Loop: Header=BB37_69 Depth=1
	movl	%ebx, %edx
	andl	$7, %edx
	testq	%rdx, %rdx
	movl	$8, %ecx
	cmoveq	%rcx, %rdx
	movq	%rbx, %rcx
	subq	%rdx, %rcx
	vbroadcastss	%xmm6, %ymm2
	vbroadcastss	%xmm8, %ymm6
	vmovaps	80(%rsp), %xmm10                ## 16-byte Reload
	vbroadcastss	%xmm10, %ymm14
	vbroadcastss	%xmm11, %ymm5
	vbroadcastss	%xmm0, %ymm15
	vmovaps	%ymm2, %ymm0
	vbroadcastss	%xmm9, %ymm7
	vbroadcastss	96(%rsp), %ymm8         ## 16-byte Folded Reload
	vbroadcastss	%xmm1, %ymm9
	leaq	104(%r8), %rdx
	movq	%rcx, %rsi
	.p2align	4, 0x90
LBB37_84:                               ##   Parent Loop BB37_69 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	-104(%rdx), %edi
	vmovd	%edi, %xmm2
	vpinsrw	$1, -90(%rdx), %xmm2, %xmm2
	vpinsrw	$2, -76(%rdx), %xmm2, %xmm2
	vpinsrw	$3, -62(%rdx), %xmm2, %xmm2
	vpinsrw	$4, -48(%rdx), %xmm2, %xmm2
	vpinsrw	$5, -34(%rdx), %xmm2, %xmm2
	vpinsrw	$6, -20(%rdx), %xmm2, %xmm2
	vpinsrw	$7, -6(%rdx), %xmm2, %xmm2
	movzwl	-102(%rdx), %edi
	vmovd	%edi, %xmm3
	vpinsrw	$1, -88(%rdx), %xmm3, %xmm3
	vpinsrw	$2, -74(%rdx), %xmm3, %xmm3
	vpinsrw	$3, -60(%rdx), %xmm3, %xmm3
	vpinsrw	$4, -46(%rdx), %xmm3, %xmm3
	vpinsrw	$5, -32(%rdx), %xmm3, %xmm3
	vpinsrw	$6, -18(%rdx), %xmm3, %xmm3
	vpinsrw	$7, -4(%rdx), %xmm3, %xmm3
	vpmovsxwd	%xmm2, %ymm2
	vcvtdq2ps	%ymm2, %ymm2
	vpmovsxwd	%xmm3, %ymm3
	vcvtdq2ps	%ymm3, %ymm3
	vmulps	%ymm3, %ymm0, %ymm12
	vmulps	%ymm2, %ymm6, %ymm13
	vaddps	%ymm12, %ymm13, %ymm12
	vaddps	%ymm12, %ymm14, %ymm12
	vmulps	%ymm5, %ymm12, %ymm12
	vcvttps2dq	%ymm12, %ymm12
	vpextrw	$0, %xmm12, -104(%rdx)
	vpextrw	$2, %xmm12, -90(%rdx)
	vpextrw	$4, %xmm12, -76(%rdx)
	vpextrw	$6, %xmm12, -62(%rdx)
	vextracti128	$1, %ymm12, %xmm4
	vpextrw	$0, %xmm4, -48(%rdx)
	vpextrw	$2, %xmm4, -34(%rdx)
	vpextrw	$4, %xmm4, -20(%rdx)
	vpextrw	$6, %xmm4, -6(%rdx)
	vmulps	%ymm3, %ymm15, %ymm3
	vmulps	%ymm2, %ymm7, %ymm2
	vaddps	%ymm3, %ymm2, %ymm2
	vaddps	%ymm2, %ymm8, %ymm2
	vmulps	%ymm2, %ymm9, %ymm2
	vcvttps2dq	%ymm2, %ymm2
	vpextrw	$0, %xmm2, -102(%rdx)
	vpextrw	$2, %xmm2, -88(%rdx)
	vpextrw	$4, %xmm2, -74(%rdx)
	vpextrw	$6, %xmm2, -60(%rdx)
	vextracti128	$1, %ymm2, %xmm2
	vpextrw	$0, %xmm2, -46(%rdx)
	vpextrw	$2, %xmm2, -32(%rdx)
	vpextrw	$4, %xmm2, -18(%rdx)
	vpextrw	$6, %xmm2, -4(%rdx)
	movzwl	-100(%rdx), %edi
	vmovd	%edi, %xmm2
	vpinsrw	$1, -86(%rdx), %xmm2, %xmm2
	vpinsrw	$2, -72(%rdx), %xmm2, %xmm2
	vpinsrw	$3, -58(%rdx), %xmm2, %xmm2
	vpinsrw	$4, -44(%rdx), %xmm2, %xmm2
	vpinsrw	$5, -30(%rdx), %xmm2, %xmm2
	vpinsrw	$6, -16(%rdx), %xmm2, %xmm2
	vpinsrw	$7, -2(%rdx), %xmm2, %xmm2
	movzwl	-98(%rdx), %edi
	vmovd	%edi, %xmm3
	vpinsrw	$1, -84(%rdx), %xmm3, %xmm3
	vpinsrw	$2, -70(%rdx), %xmm3, %xmm3
	vpinsrw	$3, -56(%rdx), %xmm3, %xmm3
	vpinsrw	$4, -42(%rdx), %xmm3, %xmm3
	vpinsrw	$5, -28(%rdx), %xmm3, %xmm3
	vpinsrw	$6, -14(%rdx), %xmm3, %xmm3
	vpinsrw	$7, (%rdx), %xmm3, %xmm3
	vpmovsxwd	%xmm2, %ymm2
	vcvtdq2ps	%ymm2, %ymm2
	vpmovsxwd	%xmm3, %ymm3
	vcvtdq2ps	%ymm3, %ymm3
	vmulps	%ymm3, %ymm0, %ymm4
	vmulps	%ymm2, %ymm6, %ymm12
	vaddps	%ymm4, %ymm12, %ymm4
	vaddps	%ymm4, %ymm14, %ymm4
	vmulps	%ymm4, %ymm5, %ymm4
	vcvttps2dq	%ymm4, %ymm4
	vpextrw	$0, %xmm4, -100(%rdx)
	vpextrw	$2, %xmm4, -86(%rdx)
	vpextrw	$4, %xmm4, -72(%rdx)
	vpextrw	$6, %xmm4, -58(%rdx)
	vextracti128	$1, %ymm4, %xmm4
	vpextrw	$0, %xmm4, -44(%rdx)
	vpextrw	$2, %xmm4, -30(%rdx)
	vpextrw	$4, %xmm4, -16(%rdx)
	vpextrw	$6, %xmm4, -2(%rdx)
	vmulps	%ymm3, %ymm15, %ymm3
	vmulps	%ymm2, %ymm7, %ymm2
	vaddps	%ymm3, %ymm2, %ymm2
	vaddps	%ymm2, %ymm8, %ymm2
	vmulps	%ymm2, %ymm9, %ymm2
	vcvttps2dq	%ymm2, %ymm2
	vpextrw	$0, %xmm2, -98(%rdx)
	vpextrw	$2, %xmm2, -84(%rdx)
	vpextrw	$4, %xmm2, -70(%rdx)
	vpextrw	$6, %xmm2, -56(%rdx)
	vextracti128	$1, %ymm2, %xmm2
	vpextrw	$0, %xmm2, -42(%rdx)
	vpextrw	$2, %xmm2, -28(%rdx)
	vpextrw	$4, %xmm2, -14(%rdx)
	vpextrw	$6, %xmm2, (%rdx)
	addq	$112, %rdx
	addq	$-8, %rsi
	jne	LBB37_84
## %bb.85:                              ##   in Loop: Header=BB37_69 Depth=1
	vmovaps	96(%rsp), %xmm7                 ## 16-byte Reload
	vmovaps	16(%rsp), %xmm8                 ## 16-byte Reload
	vmovaps	64(%rsp), %xmm0                 ## 16-byte Reload
	vmovaps	112(%rsp), %xmm6                ## 16-byte Reload
	vmovaps	48(%rsp), %xmm9                 ## 16-byte Reload
LBB37_86:                               ##   in Loop: Header=BB37_69 Depth=1
	movq	%r12, %rdi
	movq	%r14, 40(%rsp)                  ## 8-byte Spill
	movq	%rcx, %rdx
	shlq	$4, %rdx
	subq	%rcx, %rdx
	subq	%rcx, %rdx
	movq	%r8, 16(%rsp)                   ## 8-byte Spill
	addq	%r8, %rdx
	addq	$6, %rdx
	subq	%rcx, %rbx
	.p2align	4, 0x90
LBB37_87:                               ##   Parent Loop BB37_69 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movswl	-6(%rdx), %ecx
	vcvtsi2ss	%ecx, %xmm14, %xmm2
	movswl	-4(%rdx), %ecx
	vcvtsi2ss	%ecx, %xmm14, %xmm3
	vmulss	%xmm3, %xmm6, %xmm4
	vmulss	%xmm2, %xmm8, %xmm5
	vaddss	%xmm4, %xmm5, %xmm4
	vaddss	%xmm4, %xmm10, %xmm4
	vmulss	%xmm4, %xmm11, %xmm4
	vcvttss2si	%xmm4, %ecx
	movw	%cx, -6(%rdx)
	vmulss	%xmm3, %xmm0, %xmm3
	vmulss	%xmm2, %xmm9, %xmm2
	vaddss	%xmm3, %xmm2, %xmm2
	vaddss	%xmm2, %xmm7, %xmm2
	vmulss	%xmm2, %xmm1, %xmm2
	vcvttss2si	%xmm2, %ecx
	movw	%cx, -4(%rdx)
	movswl	-2(%rdx), %ecx
	vcvtsi2ss	%ecx, %xmm14, %xmm2
	movswl	(%rdx), %ecx
	vcvtsi2ss	%ecx, %xmm14, %xmm3
	vmulss	%xmm3, %xmm6, %xmm4
	vmulss	%xmm2, %xmm8, %xmm5
	vaddss	%xmm4, %xmm5, %xmm4
	vaddss	%xmm4, %xmm10, %xmm4
	vmulss	%xmm4, %xmm11, %xmm4
	vcvttss2si	%xmm4, %ecx
	vmulss	%xmm3, %xmm0, %xmm3
	vmulss	%xmm2, %xmm9, %xmm2
	vaddss	%xmm3, %xmm2, %xmm2
	vaddss	%xmm2, %xmm7, %xmm2
	vmulss	%xmm2, %xmm1, %xmm2
	vcvttss2si	%xmm2, %esi
	movw	%cx, -2(%rdx)
	movw	%si, (%rdx)
	addq	$14, %rdx
	decq	%rbx
	jne	LBB37_87
## %bb.88:                              ##   in Loop: Header=BB37_69 Depth=1
	movq	%rax, %r12
	movq	%rdi, %rbx
	leal	(%rax,%rdi), %r15d
	movslq	%r15d, %rax
	movq	%rax, %rdi
	shlq	$4, %rdi
	subq	%rax, %rdi
	subq	%rax, %rdi
	vzeroupper
	callq	_malloc
	testq	%rax, %rax
	je	LBB37_100
## %bb.89:                              ##   in Loop: Header=BB37_69 Depth=1
	movq	%rbx, %rcx
	movq	%rax, %rbx
	movq	%rcx, %r14
	testl	%ecx, %ecx
	jle	LBB37_92
## %bb.90:                              ##   in Loop: Header=BB37_69 Depth=1
	testq	%r13, %r13
	je	LBB37_92
## %bb.91:                              ##   in Loop: Header=BB37_69 Depth=1
	movl	%r14d, %eax
	movq	%rax, %rdx
	shlq	$4, %rdx
	subq	%rax, %rdx
	subq	%rax, %rdx
	movq	%rbx, %rdi
	movq	%r13, %rsi
	callq	_memcpy
LBB37_92:                               ##   in Loop: Header=BB37_69 Depth=1
	movslq	%r14d, %rax
	movq	%rax, %rcx
	shlq	$4, %rcx
	subq	%rax, %rcx
	subq	%rax, %rcx
	movq	%rbx, %rdi
	addq	%rcx, %rdi
	movslq	%r12d, %rax
	movq	%rax, %rdx
	shlq	$4, %rdx
	subq	%rax, %rdx
	subq	%rax, %rdx
	movq	16(%rsp), %rsi                  ## 8-byte Reload
	callq	_memcpy
	testq	%r13, %r13
	je	LBB37_94
## %bb.93:                              ##   in Loop: Header=BB37_69 Depth=1
	movq	%r13, %rdi
	callq	_free
LBB37_94:                               ##   in Loop: Header=BB37_69 Depth=1
	movq	16(%rsp), %rdi                  ## 8-byte Reload
	callq	_free
	movq	%rbx, %r13
	movl	%r15d, %r12d
	movq	40(%rsp), %r14                  ## 8-byte Reload
	movl	8(%rsp), %ebx                   ## 4-byte Reload
	testb	$32, %bl
	jne	LBB37_69
	jmp	LBB37_99
LBB37_95:
	movslq	%r15d, %rax
	incl	%r15d
	movq	(%rsp), %r8                     ## 8-byte Reload
	movq	64(%rsp), %rdi                  ## 8-byte Reload
	leal	(%rdi,%r8), %ecx
	shrl	%ecx
	movq	8(%rsp), %r9                    ## 8-byte Reload
	movq	16(%rsp), %rbx                  ## 8-byte Reload
	leal	(%rbx,%r9), %edx
	shrl	%edx
	movq	%rax, %rsi
	shlq	$4, %rsi
	subq	%rax, %rsi
	subq	%rax, %rsi
	movb	$3, 12(%r13,%rsi)
	movw	%cx, (%r13,%rsi)
	movw	%dx, 2(%r13,%rsi)
	movw	%r8w, 4(%r13,%rsi)
	movw	%r9w, 6(%r13,%rsi)
	movl	48(%rsp), %edx                  ## 4-byte Reload
	movl	80(%rsp), %esi                  ## 4-byte Reload
LBB37_96:
	movslq	%r15d, %rax
	movq	%rax, %rcx
	shlq	$4, %rcx
	subq	%rax, %rcx
	subq	%rax, %rcx
	movb	$3, 12(%r13,%rcx)
	movw	%dx, (%r13,%rcx)
	movw	%si, 2(%r13,%rcx)
	movw	%di, 4(%r13,%rcx)
	jmp	LBB37_98
LBB37_97:
	movb	$3, (%rdx)
	movl	48(%rsp), %edx                  ## 4-byte Reload
	movw	%dx, (%r13,%rcx)
	movl	80(%rsp), %edx                  ## 4-byte Reload
	movw	%dx, 2(%r13,%rcx)
	movq	(%rsp), %rdx                    ## 8-byte Reload
	movw	%dx, 4(%r13,%rcx)
	movq	8(%rsp), %rcx                   ## 8-byte Reload
	movl	%ecx, %ebx
LBB37_98:
	movq	%rax, %rcx
	shlq	$4, %rcx
	subq	%rax, %rcx
	subq	%rax, %rcx
	movw	%bx, 6(%r13,%rcx)
	incl	%r15d
LBB37_99:
	movq	144(%rsp), %rax                 ## 8-byte Reload
	movq	%r13, (%rax)
LBB37_17:
	movl	%r15d, %eax
LBB37_18:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB37_100:
	testq	%r13, %r13
	je	LBB37_102
## %bb.101:
	movq	%r13, %rdi
	callq	_free
LBB37_102:
	movq	16(%rsp), %rdi                  ## 8-byte Reload
	callq	_free
	jmp	LBB37_6
LBB37_103:
	callq	_stbtt_GetGlyphShape.cold.1
LBB37_104:
	xorl	%eax, %eax
	jmp	LBB37_18
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetGlyphBox              ## -- Begin function stbtt_GetGlyphBox
	.p2align	4, 0x90
_stbtt_GetGlyphBox:                     ## @stbtt_GetGlyphBox
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$96, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, %r14
	movq	%r8, %r15
	movq	%rcx, %r12
	movq	%rdx, %r13
	movq	%rdi, %rbx
	cmpl	$0, 76(%rdi)
	je	LBB38_18
## %bb.1:
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%ymm0, (%rsp)
	vmovups	%ymm0, 24(%rsp)
	movl	$1, (%rsp)
	movq	%rsp, %rdx
	movq	%rbx, %rdi
	vzeroupper
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx
	testq	%r13, %r13
	je	LBB38_5
## %bb.2:
	movl	%eax, %ecx
	testl	%eax, %eax
	je	LBB38_4
## %bb.3:
	movl	24(%rsp), %ecx
LBB38_4:
	movl	%ecx, (%r13)
LBB38_5:
	testq	%r12, %r12
	je	LBB38_9
## %bb.6:
	movl	%eax, %ecx
	testl	%eax, %eax
	je	LBB38_8
## %bb.7:
	movl	32(%rsp), %ecx
LBB38_8:
	movl	%ecx, (%r12)
LBB38_9:
	testq	%r15, %r15
	je	LBB38_13
## %bb.10:
	movl	%eax, %ecx
	testl	%eax, %eax
	je	LBB38_12
## %bb.11:
	movl	28(%rsp), %ecx
LBB38_12:
	movl	%ecx, (%r15)
LBB38_13:
	testq	%r14, %r14
	je	LBB38_17
## %bb.14:
	testl	%eax, %eax
	je	LBB38_16
## %bb.15:
	movl	36(%rsp), %eax
LBB38_16:
	movl	%eax, (%r14)
LBB38_17:
	movl	$1, %eax
LBB38_28:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB38_18:
	movq	%rbx, %rdi
	callq	__ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi
	testl	%eax, %eax
	js	LBB38_19
## %bb.20:
	movl	%eax, %ecx
	testq	%r13, %r13
	je	LBB38_22
## %bb.21:
	movq	8(%rbx), %rax
	movzbl	3(%rax,%rcx), %edx
	movzbl	2(%rax,%rcx), %eax
	shll	$8, %eax
	cwtl
	orl	%edx, %eax
	movl	%eax, (%r13)
LBB38_22:
	testq	%r12, %r12
	je	LBB38_24
## %bb.23:
	movq	8(%rbx), %rax
	movzbl	5(%rax,%rcx), %edx
	movzbl	4(%rax,%rcx), %eax
	shll	$8, %eax
	cwtl
	orl	%edx, %eax
	movl	%eax, (%r12)
LBB38_24:
	testq	%r15, %r15
	je	LBB38_26
## %bb.25:
	movq	8(%rbx), %rax
	movzbl	7(%rax,%rcx), %edx
	movzbl	6(%rax,%rcx), %eax
	shll	$8, %eax
	cwtl
	orl	%edx, %eax
	movl	%eax, (%r15)
LBB38_26:
	movl	$1, %eax
	testq	%r14, %r14
	je	LBB38_28
## %bb.27:
	movq	8(%rbx), %rdx
	movzbl	9(%rdx,%rcx), %esi
	movzbl	8(%rdx,%rcx), %ecx
	shll	$8, %ecx
	movswl	%cx, %ecx
	orl	%esi, %ecx
	movl	%ecx, (%r14)
	jmp	LBB38_28
LBB38_19:
	xorl	%eax, %eax
	jmp	LBB38_28
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi
__ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi: ## @_ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	cmpl	$0, 76(%rdi)
	jne	LBB39_8
## %bb.1:
	movl	$-1, %eax
	cmpl	%esi, 20(%rdi)
	jle	LBB39_7
## %bb.2:
	movl	60(%rdi), %ecx
	cmpl	$1, %ecx
	jg	LBB39_7
## %bb.3:
	movslq	24(%rdi), %rdx
	addq	8(%rdi), %rdx
	movl	32(%rdi), %edi
	testl	%ecx, %ecx
	je	LBB39_4
## %bb.5:
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %eax
	movl	4(%rdx,%rcx,4), %edx
	bswapl	%eax
	bswapl	%edx
	jmp	LBB39_6
LBB39_4:
	movslq	%esi, %rcx
	movzbl	(%rdx,%rcx,2), %eax
	movzbl	1(%rdx,%rcx,2), %esi
	shll	$9, %eax
	leal	(%rax,%rsi,2), %eax
	movzbl	2(%rdx,%rcx,2), %esi
	movzbl	3(%rdx,%rcx,2), %ecx
	shll	$9, %esi
	leal	(%rsi,%rcx,2), %edx
LBB39_6:
	addl	%eax, %edi
	cmpl	%edx, %eax
	movl	$-1, %eax
	cmovnel	%edi, %eax
LBB39_7:
	popq	%rbp
	retq
LBB39_8:
	callq	__ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi.cold.1
	xorl	%eax, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetCodepointBox          ## -- Begin function stbtt_GetCodepointBox
	.p2align	4, 0x90
_stbtt_GetCodepointBox:                 ## @stbtt_GetCodepointBox
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, %r14
	movq	%r8, %r15
	movq	%rcx, %r12
	movq	%rdx, %r13
	movq	%rdi, %rbx
	callq	_stbtt_FindGlyphIndex
	movq	%rbx, %rdi
	movl	%eax, %esi
	movq	%r13, %rdx
	movq	%r12, %rcx
	movq	%r15, %r8
	movq	%r14, %r9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_stbtt_GetGlyphBox              ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_IsGlyphEmpty             ## -- Begin function stbtt_IsGlyphEmpty
	.p2align	4, 0x90
_stbtt_IsGlyphEmpty:                    ## @stbtt_IsGlyphEmpty
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	andq	$-32, %rsp
	subq	$96, %rsp
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	cmpl	$0, 76(%rdi)
	je	LBB41_2
## %bb.1:
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%ymm0, (%rsp)
	vmovups	%ymm0, 24(%rsp)
	movl	$1, (%rsp)
	movq	%rsp, %rdx
	movq	%rbx, %rdi
	vzeroupper
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx
	testl	%eax, %eax
	sete	%cl
	cmpl	$0, 48(%rsp)
	sete	%al
	orb	%cl, %al
	jmp	LBB41_5
LBB41_2:
	movq	%rbx, %rdi
	callq	__ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi
	testl	%eax, %eax
	js	LBB41_3
## %bb.4:
	movq	8(%rbx), %rcx
	movl	%eax, %eax
	movb	1(%rcx,%rax), %dl
	orb	(%rcx,%rax), %dl
	sete	%al
	jmp	LBB41_5
LBB41_3:
	movb	$1, %al
LBB41_5:
	movzbl	%al, %eax
	leaq	-8(%rbp), %rsp
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetGlyphHMetrics         ## -- Begin function stbtt_GetGlyphHMetrics
	.p2align	4, 0x90
_stbtt_GetGlyphHMetrics:                ## @stbtt_GetGlyphHMetrics
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	8(%rdi), %r8
	movslq	36(%rdi), %rax
	movzwl	34(%r8,%rax), %eax
	rolw	$8, %ax
	movzwl	%ax, %r11d
	cmpl	%esi, %r11d
	jle	LBB42_5
## %bb.1:
	testq	%rdx, %rdx
	je	LBB42_3
## %bb.2:
	movslq	40(%rdi), %rax
	addq	%r8, %rax
	movslq	%esi, %r9
	movzbl	1(%rax,%r9,4), %r10d
	movzbl	(%rax,%r9,4), %eax
	shll	$8, %eax
	cwtl
	orl	%r10d, %eax
	movl	%eax, (%rdx)
LBB42_3:
	testq	%rcx, %rcx
	je	LBB42_10
## %bb.4:
	movslq	40(%rdi), %rax
	addq	%rax, %r8
	shll	$2, %esi
	movslq	%esi, %rax
	addq	%r8, %rax
	addq	$2, %rax
	jmp	LBB42_9
LBB42_5:
	testq	%rdx, %rdx
	je	LBB42_7
## %bb.6:
	movslq	40(%rdi), %r9
	addq	%r8, %r9
	movzbl	-3(%r9,%r11,4), %r10d
	movzbl	-4(%r9,%r11,4), %eax
	shll	$8, %eax
	cwtl
	orl	%r10d, %eax
	movl	%eax, (%rdx)
LBB42_7:
	testq	%rcx, %rcx
	je	LBB42_10
## %bb.8:
	movslq	40(%rdi), %rax
	addq	%rax, %r8
	movl	%r11d, %eax
	leaq	(%r8,%rax,4), %rdx
	subl	%r11d, %esi
	addl	%esi, %esi
	movslq	%esi, %rax
	addq	%rdx, %rax
LBB42_9:
	movzbl	1(%rax), %edx
	movzbl	(%rax), %eax
	shll	$8, %eax
	cwtl
	orl	%edx, %eax
	movl	%eax, (%rcx)
LBB42_10:
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetKerningTableLength    ## -- Begin function stbtt_GetKerningTableLength
	.p2align	4, 0x90
_stbtt_GetKerningTableLength:           ## @stbtt_GetKerningTableLength
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movslq	44(%rdi), %rcx
	xorl	%eax, %eax
	testq	%rcx, %rcx
	je	LBB43_4
## %bb.1:
	movq	8(%rdi), %rsi
	movb	3(%rsi,%rcx), %dl
	orb	2(%rsi,%rcx), %dl
	je	LBB43_4
## %bb.2:
	movzwl	8(%rsi,%rcx), %edx
	rolw	$8, %dx
	cmpw	$1, %dx
	jne	LBB43_4
## %bb.3:
	movzwl	10(%rsi,%rcx), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
LBB43_4:
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ## -- Begin function stbtt_GetKerningTable
LCPI44_0:
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	2                               ## 0x2
	.byte	8                               ## 0x8
	.byte	14                              ## 0xe
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI44_1:
	.byte	0                               ## 0x0
	.byte	6                               ## 0x6
	.byte	12                              ## 0xc
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	4                               ## 0x4
	.byte	10                              ## 0xa
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI44_2:
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	3                               ## 0x3
	.byte	9                               ## 0x9
	.byte	15                              ## 0xf
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI44_3:
	.byte	1                               ## 0x1
	.byte	7                               ## 0x7
	.byte	13                              ## 0xd
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	5                               ## 0x5
	.byte	11                              ## 0xb
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI44_4:
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	4                               ## 0x4
	.byte	10                              ## 0xa
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI44_5:
	.byte	2                               ## 0x2
	.byte	8                               ## 0x8
	.byte	14                              ## 0xe
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	0                               ## 0x0
	.byte	6                               ## 0x6
	.byte	12                              ## 0xc
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI44_6:
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	5                               ## 0x5
	.byte	11                              ## 0xb
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI44_7:
	.byte	3                               ## 0x3
	.byte	9                               ## 0x9
	.byte	15                              ## 0xf
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	1                               ## 0x1
	.byte	7                               ## 0x7
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI44_8:
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	1                               ## 0x1
	.byte	0                               ## 0x0
	.byte	7                               ## 0x7
	.byte	6                               ## 0x6
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
LCPI44_9:
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	11                              ## 0xb
	.byte	10                              ## 0xa
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	3                               ## 0x3
	.byte	2                               ## 0x2
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	15                              ## 0xf
	.byte	14                              ## 0xe
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_stbtt_GetKerningTable
	.p2align	4, 0x90
_stbtt_GetKerningTable:                 ## @stbtt_GetKerningTable
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movslq	44(%rdi), %r10
	xorl	%eax, %eax
	testq	%r10, %r10
	je	LBB44_15
## %bb.1:
	movq	8(%rdi), %r8
	leaq	(%r8,%r10), %r11
	movb	3(%r11), %cl
	orb	2(%r11), %cl
	je	LBB44_15
## %bb.2:
	movzwl	8(%r11), %ecx
	rolw	$8, %cx
	cmpw	$1, %cx
	jne	LBB44_15
## %bb.3:
	movzwl	10(%r11), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	cmpl	%edx, %eax
	cmovll	%eax, %edx
	testl	%edx, %edx
	jle	LBB44_14
## %bb.4:
	movl	%edx, %r14d
	cmpl	$8, %edx
	jb	LBB44_5
## %bb.6:
	addq	$18, %r11
	leaq	(%r14,%r14,2), %rcx
	leaq	(%r10,%rcx,2), %rdi
	addq	%r8, %rdi
	addq	$18, %rdi
	cmpq	%rsi, %rdi
	jbe	LBB44_9
## %bb.7:
	leaq	(%rsi,%rcx,4), %rcx
	cmpq	%rcx, %r11
	jae	LBB44_9
LBB44_5:
	xorl	%r9d, %r9d
LBB44_12:
	leaq	(%r10,%r8), %rcx
	addq	$23, %rcx
	leaq	(%r9,%r9), %rdi
	leaq	(%rdi,%rdi,2), %rdi
	subq	%r9, %r14
	.p2align	4, 0x90
LBB44_13:                               ## =>This Inner Loop Header: Depth=1
	movzwl	-5(%rcx,%rdi), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	movl	%eax, (%rsi,%rdi,2)
	movzwl	-3(%rcx,%rdi), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	movl	%eax, 4(%rsi,%rdi,2)
	movzbl	(%rcx,%rdi), %eax
	movzbl	-1(%rcx,%rdi), %ebx
	shll	$8, %ebx
	movswl	%bx, %ebx
	orl	%eax, %ebx
	movl	%ebx, 8(%rsi,%rdi,2)
	addq	$6, %rdi
	decq	%r14
	jne	LBB44_13
LBB44_14:
	movl	%edx, %eax
LBB44_15:
	popq	%rbx
	popq	%r14
	popq	%rbp
	vzeroupper
	retq
LBB44_9:
	movl	%r14d, %r9d
	andl	$-8, %r9d
	xorl	%ecx, %ecx
	vmovdqa	LCPI44_3(%rip), %xmm14          ## xmm14 = <1,7,13,128,128,128,5,11,u,u,u,u,u,u,u,u>
	vmovdqa	LCPI44_4(%rip), %xmm15          ## xmm15 = <128,128,128,4,10,128,128,128,u,u,u,u,u,u,u,u>
	vmovdqa	LCPI44_5(%rip), %xmm8           ## xmm8 = <2,8,14,128,128,0,6,12,u,u,u,u,u,u,u,u>
	vmovdqa	LCPI44_6(%rip), %xmm9           ## xmm9 = <128,128,128,5,11,128,128,128,u,u,u,u,u,u,u,u>
	vmovdqa	LCPI44_7(%rip), %xmm13          ## xmm13 = <3,9,15,128,128,1,7,13,u,u,u,u,u,u,u,u>
	vmovdqa	LCPI44_8(%rip), %xmm0           ## xmm0 = [128,128,128,128,1,0,7,6,13,12,128,128,128,128,128,128]
	vmovdqa	LCPI44_9(%rip), %xmm1           ## xmm1 = [5,4,11,10,128,128,128,128,128,128,3,2,9,8,15,14]
	movq	%r9, %rdi
	.p2align	4, 0x90
LBB44_10:                               ## =>This Inner Loop Header: Depth=1
	vmovdqu	(%r11,%rcx), %ymm10
	vmovdqu	32(%r11,%rcx), %xmm11
	vpblendw	$36, %ymm11, %ymm10, %ymm12     ## ymm12 = ymm10[0,1],ymm11[2],ymm10[3,4],ymm11[5],ymm10[6,7,8,9],ymm11[10],ymm10[11,12],ymm11[13],ymm10[14,15]
	vextracti128	$1, %ymm12, %xmm2
	vpshufb	LCPI44_0(%rip), %xmm2, %xmm3    ## xmm3 = zero,zero,zero,xmm2[2,8,14],zero,zero,xmm2[u,u,u,u,u,u,u,u]
	vpshufb	LCPI44_1(%rip), %xmm12, %xmm4   ## xmm4 = xmm12[0,6,12],zero,zero,zero,xmm12[4,10,u,u,u,u,u,u,u,u]
	vpor	%xmm3, %xmm4, %xmm3
	vpshufb	LCPI44_2(%rip), %xmm2, %xmm2    ## xmm2 = zero,zero,zero,xmm2[3,9,15],zero,zero,xmm2[u,u,u,u,u,u,u,u]
	vpshufb	%xmm14, %xmm12, %xmm4
	vpor	%xmm2, %xmm4, %xmm2
	vpblendw	$73, %ymm11, %ymm10, %ymm4      ## ymm4 = ymm11[0],ymm10[1,2],ymm11[3],ymm10[4,5],ymm11[6],ymm10[7],ymm11[8],ymm10[9,10],ymm11[11],ymm10[12,13],ymm11[14],ymm10[15]
	vextracti128	$1, %ymm4, %xmm5
	vpshufb	%xmm15, %xmm5, %xmm6
	vpshufb	%xmm8, %xmm4, %xmm7
	vpor	%xmm6, %xmm7, %xmm6
	vpshufb	%xmm9, %xmm5, %xmm5
	vpshufb	%xmm13, %xmm4, %xmm4
	vpblendw	$109, (%r11,%rcx), %xmm11, %xmm7 ## xmm7 = mem[0],xmm11[1],mem[2,3],xmm11[4],mem[5,6],xmm11[7]
	vpor	%xmm5, %xmm4, %xmm4
	vpshufb	%xmm1, %xmm7, %xmm5
	vmovdqu	16(%r11,%rcx), %xmm7
	vpshufb	%xmm0, %xmm7, %xmm7
	vpor	%xmm7, %xmm5, %xmm5
	vpmovzxbd	%xmm3, %ymm3            ## ymm3 = xmm3[0],zero,zero,zero,xmm3[1],zero,zero,zero,xmm3[2],zero,zero,zero,xmm3[3],zero,zero,zero,xmm3[4],zero,zero,zero,xmm3[5],zero,zero,zero,xmm3[6],zero,zero,zero,xmm3[7],zero,zero,zero
	vpslld	$8, %ymm3, %ymm3
	vpmovzxbd	%xmm2, %ymm2            ## ymm2 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpor	%ymm2, %ymm3, %ymm2
	vpmovzxbd	%xmm6, %ymm3            ## ymm3 = xmm6[0],zero,zero,zero,xmm6[1],zero,zero,zero,xmm6[2],zero,zero,zero,xmm6[3],zero,zero,zero,xmm6[4],zero,zero,zero,xmm6[5],zero,zero,zero,xmm6[6],zero,zero,zero,xmm6[7],zero,zero,zero
	vpslld	$8, %ymm3, %ymm3
	vpmovzxbd	%xmm4, %ymm4            ## ymm4 = xmm4[0],zero,zero,zero,xmm4[1],zero,zero,zero,xmm4[2],zero,zero,zero,xmm4[3],zero,zero,zero,xmm4[4],zero,zero,zero,xmm4[5],zero,zero,zero,xmm4[6],zero,zero,zero,xmm4[7],zero,zero,zero
	vpor	%ymm4, %ymm3, %ymm3
	vpmovsxwd	%xmm5, %ymm4
	vpermq	$96, %ymm2, %ymm5               ## ymm5 = ymm2[0,0,2,1]
	vpshufd	$161, %xmm3, %xmm6              ## xmm6 = xmm3[1,0,2,2]
	vpermq	$68, %ymm6, %ymm6               ## ymm6 = ymm6[0,1,0,1]
	vpblendd	$146, %ymm6, %ymm5, %ymm5       ## ymm5 = ymm5[0],ymm6[1],ymm5[2,3],ymm6[4],ymm5[5,6],ymm6[7]
	vpbroadcastq	%xmm4, %ymm6
	vpblendd	$36, %ymm6, %ymm5, %ymm5        ## ymm5 = ymm5[0,1],ymm6[2],ymm5[3,4],ymm6[5],ymm5[6,7]
	vpermq	$255, %ymm2, %ymm6              ## ymm6 = ymm2[3,3,3,3]
	vpshufd	$249, %ymm3, %ymm7              ## ymm7 = ymm3[1,2,3,3,5,6,7,7]
	vpermq	$234, %ymm7, %ymm7              ## ymm7 = ymm7[2,2,2,3]
	vpblendd	$36, %ymm6, %ymm7, %ymm6        ## ymm6 = ymm7[0,1],ymm6[2],ymm7[3,4],ymm6[5],ymm7[6,7]
	vpermq	$246, %ymm4, %ymm7              ## ymm7 = ymm4[2,1,3,3]
	vpblendd	$146, %ymm7, %ymm6, %ymm6       ## ymm6 = ymm6[0],ymm7[1],ymm6[2,3],ymm7[4],ymm6[5,6],ymm7[7]
	vpshufd	$240, %ymm3, %ymm3              ## ymm3 = ymm3[0,0,3,3,4,4,7,7]
	vpermq	$165, %ymm2, %ymm2              ## ymm2 = ymm2[1,1,2,2]
	vpblendd	$36, %ymm3, %ymm2, %ymm2        ## ymm2 = ymm2[0,1],ymm3[2],ymm2[3,4],ymm3[5],ymm2[6,7]
	vpermq	$165, %ymm4, %ymm3              ## ymm3 = ymm4[1,1,2,2]
	vpblendd	$73, %ymm3, %ymm2, %ymm2        ## ymm2 = ymm3[0],ymm2[1,2],ymm3[3],ymm2[4,5],ymm3[6],ymm2[7]
	vmovdqu	%ymm2, 32(%rsi,%rcx,2)
	vmovdqu	%ymm6, 64(%rsi,%rcx,2)
	vmovdqu	%ymm5, (%rsi,%rcx,2)
	addq	$48, %rcx
	addq	$-8, %rdi
	jne	LBB44_10
## %bb.11:
	cmpq	%r14, %r9
	je	LBB44_14
	jmp	LBB44_12
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetGlyphKernAdvance      ## -- Begin function stbtt_GetGlyphKernAdvance
	.p2align	4, 0x90
_stbtt_GetGlyphKernAdvance:             ## @stbtt_GetGlyphKernAdvance
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, -44(%rbp)                 ## 4-byte Spill
	movslq	48(%rdi), %rcx
	testq	%rcx, %rcx
	je	LBB45_5
## %bb.1:
	movq	8(%rdi), %r10
	movzwl	(%r10,%rcx), %edx
	rolw	$8, %dx
	xorl	%eax, %eax
	cmpw	$1, %dx
	jne	LBB45_48
## %bb.2:
	addq	%rcx, %r10
	movb	3(%r10), %cl
	orb	2(%r10), %cl
	jne	LBB45_48
## %bb.3:
	movzwl	8(%r10), %ecx
	rolw	$8, %cx
	movzwl	%cx, %ecx
	movzwl	(%r10,%rcx), %edx
	rolw	$8, %dx
	testw	%dx, %dx
	je	LBB45_48
## %bb.4:
	addq	%rcx, %r10
	movzwl	%dx, %eax
	movq	%rax, -64(%rbp)                 ## 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, -56(%rbp)                 ## 8-byte Spill
	jmp	LBB45_15
LBB45_5:
	movslq	44(%rdi), %rdx
	xorl	%eax, %eax
	testq	%rdx, %rdx
	je	LBB45_48
## %bb.6:
	movq	8(%rdi), %r8
	movb	3(%r8,%rdx), %bl
	orb	2(%r8,%rdx), %bl
	je	LBB45_48
## %bb.7:
	addq	%rdx, %r8
	movzwl	8(%r8), %edx
	rolw	$8, %dx
	cmpw	$1, %dx
	jne	LBB45_48
## %bb.8:
	movzwl	10(%r8), %edx
	rolw	$8, %dx
	testw	%dx, %dx
	je	LBB45_48
## %bb.9:
	movzwl	%dx, %edi
	shll	$16, %esi
	orl	-44(%rbp), %esi                 ## 4-byte Folded Reload
	decl	%edi
	xorl	%edx, %edx
	jmp	LBB45_11
	.p2align	4, 0x90
LBB45_10:                               ##   in Loop: Header=BB45_11 Depth=1
	decl	%eax
	movl	%eax, %edi
	xorl	%eax, %eax
	cmpl	%edi, %edx
	jg	LBB45_48
LBB45_11:                               ## =>This Inner Loop Header: Depth=1
	leal	(%rdx,%rdi), %eax
	sarl	%eax
	movslq	%eax, %rbx
	addq	%rbx, %rbx
	leaq	(%rbx,%rbx,2), %rbx
	movl	18(%r8,%rbx), %ecx
	bswapl	%ecx
	cmpl	%ecx, %esi
	jb	LBB45_10
## %bb.12:                              ##   in Loop: Header=BB45_11 Depth=1
	jbe	LBB45_46
## %bb.13:                              ##   in Loop: Header=BB45_11 Depth=1
	incl	%eax
	movl	%eax, %edx
	xorl	%eax, %eax
	cmpl	%edi, %edx
	jle	LBB45_11
	jmp	LBB45_48
	.p2align	4, 0x90
LBB45_14:                               ##   in Loop: Header=BB45_15 Depth=1
	movq	-56(%rbp), %rdx                 ## 8-byte Reload
	incq	%rdx
	xorl	%eax, %eax
	movq	%rdx, %rcx
	movq	%rdx, -56(%rbp)                 ## 8-byte Spill
	cmpq	-64(%rbp), %rdx                 ## 8-byte Folded Reload
	je	LBB45_48
LBB45_15:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB45_19 Depth 2
                                        ##       Child Loop BB45_24 Depth 3
                                        ##       Child Loop BB45_30 Depth 3
                                        ##       Child Loop BB45_42 Depth 3
	movq	-56(%rbp), %rax                 ## 8-byte Reload
	movzwl	2(%r10,%rax,2), %eax
	rolw	$8, %ax
	movzwl	%ax, %r12d
	movzwl	(%r10,%r12), %eax
	rolw	$8, %ax
	cmpw	$2, %ax
	jne	LBB45_14
## %bb.16:                              ##   in Loop: Header=BB45_15 Depth=1
	movzwl	4(%r10,%r12), %eax
	rolw	$8, %ax
	movzwl	%ax, %r11d
	testl	%r11d, %r11d
	je	LBB45_14
## %bb.17:                              ##   in Loop: Header=BB45_15 Depth=1
	addq	%r10, %r12
	xorl	%r13d, %r13d
	jmp	LBB45_19
	.p2align	4, 0x90
LBB45_18:                               ##   in Loop: Header=BB45_19 Depth=2
	incq	%r13
	cmpq	%r11, %r13
	je	LBB45_14
LBB45_19:                               ##   Parent Loop BB45_15 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB45_24 Depth 3
                                        ##       Child Loop BB45_30 Depth 3
                                        ##       Child Loop BB45_42 Depth 3
	movzwl	6(%r12,%r13,2), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	leaq	(%r12,%rax), %r14
	movzwl	(%r12,%rax), %r15d
	movzwl	2(%r12,%rax), %eax
	rolw	$8, %ax
	movzwl	%ax, %ecx
	leaq	(%r14,%rcx), %rax
	movzwl	(%rcx,%r14), %ecx
	rolw	$8, %cx
	cmpw	$2, %cx
	je	LBB45_27
## %bb.20:                              ##   in Loop: Header=BB45_19 Depth=2
	cmpw	$1, %cx
	jne	LBB45_18
## %bb.21:                              ##   in Loop: Header=BB45_19 Depth=2
	movzwl	2(%rax), %ecx
	rolw	$8, %cx
	testw	%cx, %cx
	je	LBB45_18
## %bb.22:                              ##   in Loop: Header=BB45_19 Depth=2
	movzwl	%cx, %edi
	decl	%edi
	xorl	%ebx, %ebx
	jmp	LBB45_24
	.p2align	4, 0x90
LBB45_23:                               ##   in Loop: Header=BB45_24 Depth=3
	decl	%ecx
	movl	%ecx, %edi
	cmpl	%edi, %ebx
	jg	LBB45_18
LBB45_24:                               ##   Parent Loop BB45_15 Depth=1
                                        ##     Parent Loop BB45_19 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	leal	(%rdi,%rbx), %ecx
	movslq	%ecx, %rdx
	sarl	%ecx
	andq	$-2, %rdx
	movzwl	4(%rax,%rdx), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%esi, %edx
	jg	LBB45_23
## %bb.25:                              ##   in Loop: Header=BB45_24 Depth=3
	jge	LBB45_34
## %bb.26:                              ##   in Loop: Header=BB45_24 Depth=3
	incl	%ecx
	movl	%ecx, %ebx
	cmpl	%edi, %ebx
	jle	LBB45_24
	jmp	LBB45_18
	.p2align	4, 0x90
LBB45_27:                               ##   in Loop: Header=BB45_19 Depth=2
	movzwl	2(%rax), %ecx
	rolw	$8, %cx
	testw	%cx, %cx
	je	LBB45_18
## %bb.28:                              ##   in Loop: Header=BB45_19 Depth=2
	movzwl	%cx, %ecx
	decl	%ecx
	xorl	%edi, %edi
	jmp	LBB45_30
	.p2align	4, 0x90
LBB45_29:                               ##   in Loop: Header=BB45_30 Depth=3
	decl	%ebx
	movl	%ebx, %ecx
	cmpl	%ecx, %edi
	jg	LBB45_18
LBB45_30:                               ##   Parent Loop BB45_15 Depth=1
                                        ##     Parent Loop BB45_19 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	leal	(%rcx,%rdi), %ebx
	sarl	%ebx
	movslq	%ebx, %rdx
	addq	%rdx, %rdx
	leaq	(%rdx,%rdx,2), %r9
	movzwl	4(%rax,%r9), %edx
	rolw	$8, %dx
	movzwl	%dx, %r8d
	cmpl	%esi, %r8d
	jg	LBB45_29
## %bb.31:                              ##   in Loop: Header=BB45_30 Depth=3
	movzwl	6(%rax,%r9), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%esi, %edx
	jge	LBB45_33
## %bb.32:                              ##   in Loop: Header=BB45_30 Depth=3
	incl	%ebx
	movl	%ebx, %edi
	cmpl	%ecx, %edi
	jle	LBB45_30
	jmp	LBB45_18
LBB45_33:                               ##   in Loop: Header=BB45_19 Depth=2
	movzwl	8(%rax,%r9), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	movl	%esi, %ecx
	subl	%r8d, %ecx
	addl	%eax, %ecx
LBB45_34:                               ##   in Loop: Header=BB45_19 Depth=2
	cmpl	$-1, %ecx
	je	LBB45_18
## %bb.35:                              ##   in Loop: Header=BB45_19 Depth=2
	rolw	$8, %r15w
	xorl	%eax, %eax
	cmpw	$1, %r15w
	jne	LBB45_49
## %bb.36:                              ##   in Loop: Header=BB45_19 Depth=2
	movzwl	4(%r14), %edx
	rolw	$8, %dx
	cmpw	$4, %dx
	jne	LBB45_48
## %bb.37:                              ##   in Loop: Header=BB45_19 Depth=2
	movzwl	6(%r14), %edx
	rolw	$8, %dx
	testw	%dx, %dx
	jne	LBB45_48
## %bb.38:                              ##   in Loop: Header=BB45_19 Depth=2
	movzwl	8(%r14), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%edx, %ecx
	jge	LBB45_48
## %bb.39:                              ##   in Loop: Header=BB45_19 Depth=2
	movslq	%ecx, %rax
	movzwl	10(%r14,%rax,2), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	leaq	(%r14,%rax), %rcx
	movzwl	(%rcx), %ecx
	rolw	$8, %cx
	testw	%cx, %cx
	je	LBB45_18
## %bb.40:                              ##   in Loop: Header=BB45_19 Depth=2
	addq	%r14, %rax
	addq	$2, %rax
	movzwl	%cx, %ebx
	decl	%ebx
	xorl	%edi, %edi
	jmp	LBB45_42
	.p2align	4, 0x90
LBB45_41:                               ##   in Loop: Header=BB45_42 Depth=3
	decl	%ecx
	movl	%ecx, %ebx
	cmpl	%ebx, %edi
	jg	LBB45_18
LBB45_42:                               ##   Parent Loop BB45_15 Depth=1
                                        ##     Parent Loop BB45_19 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	leal	(%rbx,%rdi), %ecx
	sarl	%ecx
	leal	(,%rcx,4), %edx
	movslq	%edx, %rdx
	leaq	(%rax,%rdx), %r14
	movzwl	(%rax,%rdx), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	-44(%rbp), %edx                 ## 4-byte Folded Reload
	jg	LBB45_41
## %bb.43:                              ##   in Loop: Header=BB45_42 Depth=3
	jge	LBB45_45
## %bb.44:                              ##   in Loop: Header=BB45_42 Depth=3
	incl	%ecx
	movl	%ecx, %edi
	cmpl	%ebx, %edi
	jle	LBB45_42
	jmp	LBB45_18
LBB45_45:
	addq	$2, %r14
	jmp	LBB45_47
LBB45_46:
	leaq	(%r8,%rbx), %r14
	addq	$22, %r14
LBB45_47:
	movzbl	1(%r14), %ecx
	movzbl	(%r14), %eax
	shll	$8, %eax
	cwtl
	orl	%ecx, %eax
LBB45_48:
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB45_49:
	cmpw	$2, %r15w
	jne	LBB45_48
## %bb.50:
	movzwl	4(%r14), %ecx
	rolw	$8, %cx
	cmpw	$4, %cx
	jne	LBB45_48
## %bb.51:
	movzwl	6(%r14), %ecx
	rolw	$8, %cx
	testw	%cx, %cx
	jne	LBB45_48
## %bb.52:
	movzwl	8(%r14), %ecx
	movzwl	10(%r14), %edx
	rolw	$8, %cx
	movzwl	%cx, %ecx
	rolw	$8, %dx
	movzwl	%dx, %r8d
	leaq	(%r14,%rcx), %r9
	movzwl	(%r14,%rcx), %ecx
	rolw	$8, %cx
	cmpw	$2, %cx
	je	LBB45_57
## %bb.53:
	movl	$-1, %r10d
	cmpw	$1, %cx
	movl	-44(%rbp), %r11d                ## 4-byte Reload
	jne	LBB45_67
## %bb.54:
	movzwl	2(%r9), %ecx
	rolw	$8, %cx
	movzwl	%cx, %ecx
	xorl	%r10d, %r10d
	cmpl	%esi, %ecx
	jg	LBB45_67
## %bb.55:
	movzwl	4(%r9), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	addl	%ecx, %edx
	cmpl	%esi, %edx
	jle	LBB45_67
## %bb.56:
	addq	$6, %r9
	subl	%ecx, %esi
	addl	%esi, %esi
	movslq	%esi, %rdi
	addq	%r9, %rdi
	jmp	LBB45_66
LBB45_57:
	movzwl	2(%r9), %ecx
	rolw	$8, %cx
	testw	%cx, %cx
	movl	-44(%rbp), %r11d                ## 4-byte Reload
	je	LBB45_64
## %bb.58:
	movzwl	%cx, %r10d
	addq	$4, %r9
	decl	%r10d
	xorl	%ecx, %ecx
	jmp	LBB45_60
LBB45_59:                               ##   in Loop: Header=BB45_60 Depth=1
	decl	%ebx
	movl	%ebx, %r10d
	cmpl	%r10d, %ecx
	jg	LBB45_64
LBB45_60:                               ## =>This Inner Loop Header: Depth=1
	leal	(%r10,%rcx), %edx
	movl	%edx, %ebx
	sarl	%ebx
	andl	$-2, %edx
	leal	(%rdx,%rdx,2), %edx
	movslq	%edx, %rdi
	movzwl	(%r9,%rdi), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%esi, %edx
	jg	LBB45_59
## %bb.61:                              ##   in Loop: Header=BB45_60 Depth=1
	addq	%r9, %rdi
	movzwl	2(%rdi), %ecx
	rolw	$8, %cx
	movzwl	%cx, %ecx
	cmpl	%esi, %ecx
	jge	LBB45_65
## %bb.62:                              ##   in Loop: Header=BB45_60 Depth=1
	incl	%ebx
	movl	%ebx, %ecx
	cmpl	%r10d, %ecx
	jle	LBB45_60
LBB45_64:
	xorl	%r10d, %r10d
	jmp	LBB45_67
LBB45_65:
	addq	$4, %rdi
LBB45_66:
	movzwl	(%rdi), %ecx
	rolw	$8, %cx
	movzwl	%cx, %r10d
LBB45_67:
	leaq	(%r14,%r8), %r9
	movzwl	(%r14,%r8), %edx
	rolw	$8, %dx
	cmpw	$2, %dx
	je	LBB45_72
## %bb.68:
	movl	$-1, %ecx
	cmpw	$1, %dx
	jne	LBB45_82
## %bb.69:
	movzwl	2(%r9), %ecx
	rolw	$8, %cx
	movzwl	%cx, %esi
	xorl	%ecx, %ecx
	cmpl	%r11d, %esi
	jg	LBB45_82
## %bb.70:
	movzwl	4(%r9), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	addl	%esi, %edx
	cmpl	%r11d, %edx
	jle	LBB45_82
## %bb.71:
	addq	$6, %r9
	subl	%esi, %r11d
	addl	%r11d, %r11d
	movslq	%r11d, %rsi
	addq	%r9, %rsi
	jmp	LBB45_81
LBB45_72:
	movzwl	2(%r9), %ecx
	rolw	$8, %cx
	testw	%cx, %cx
	je	LBB45_79
## %bb.73:
	movzwl	%cx, %ecx
	addq	$4, %r9
	decl	%ecx
	xorl	%ebx, %ebx
	jmp	LBB45_75
LBB45_74:                               ##   in Loop: Header=BB45_75 Depth=1
	decl	%edi
	movl	%edi, %ecx
	cmpl	%ecx, %ebx
	jg	LBB45_79
LBB45_75:                               ## =>This Inner Loop Header: Depth=1
	leal	(%rcx,%rbx), %edx
	movl	%edx, %edi
	sarl	%edi
	andl	$-2, %edx
	leal	(%rdx,%rdx,2), %edx
	movslq	%edx, %rsi
	movzwl	(%r9,%rsi), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%r11d, %edx
	jg	LBB45_74
## %bb.76:                              ##   in Loop: Header=BB45_75 Depth=1
	addq	%r9, %rsi
	movzwl	2(%rsi), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%r11d, %edx
	jge	LBB45_80
## %bb.77:                              ##   in Loop: Header=BB45_75 Depth=1
	incl	%edi
	movl	%edi, %ebx
	cmpl	%ecx, %ebx
	jle	LBB45_75
LBB45_79:
	xorl	%ecx, %ecx
	jmp	LBB45_82
LBB45_80:
	addq	$4, %rsi
LBB45_81:
	movzwl	(%rsi), %ecx
	rolw	$8, %cx
	movzwl	%cx, %ecx
LBB45_82:
	testl	%r10d, %r10d
	js	LBB45_48
## %bb.83:
	movzwl	12(%r14), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%edx, %r10d
	jge	LBB45_48
## %bb.84:
	testl	%ecx, %ecx
	js	LBB45_48
## %bb.85:
	movzwl	14(%r14), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%edx, %ecx
	jae	LBB45_48
## %bb.86:
	imull	%edx, %r10d
	addl	%r10d, %r10d
	movslq	%r10d, %rax
	addq	%rax, %r14
	addl	%ecx, %ecx
	addq	%rcx, %r14
	addq	$16, %r14
	jmp	LBB45_47
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetCodepointKernAdvance  ## -- Begin function stbtt_GetCodepointKernAdvance
	.p2align	4, 0x90
_stbtt_GetCodepointKernAdvance:         ## @stbtt_GetCodepointKernAdvance
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movq	%rdi, %rbx
	cmpl	$0, 44(%rdi)
	jne	LBB46_3
## %bb.1:
	cmpl	$0, 48(%rbx)
	je	LBB46_2
LBB46_3:
	movq	%rbx, %rdi
	callq	_stbtt_FindGlyphIndex
	movl	%eax, %r15d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	_stbtt_FindGlyphIndex
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%eax, %edx
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_stbtt_GetGlyphKernAdvance      ## TAILCALL
LBB46_2:
	xorl	%eax, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetCodepointHMetrics     ## -- Begin function stbtt_GetCodepointHMetrics
	.p2align	4, 0x90
_stbtt_GetCodepointHMetrics:            ## @stbtt_GetCodepointHMetrics
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r14
	movq	%rdx, %r15
	movq	%rdi, %rbx
	callq	_stbtt_FindGlyphIndex
	movq	8(%rbx), %rcx
	movslq	36(%rbx), %rdx
	movzwl	34(%rcx,%rdx), %edx
	rolw	$8, %dx
	movzwl	%dx, %esi
	movl	%eax, %edx
	subl	%esi, %edx
	jge	LBB47_5
## %bb.1:
	testq	%r15, %r15
	je	LBB47_3
## %bb.2:
	movslq	40(%rbx), %rdx
	addq	%rcx, %rdx
	movslq	%eax, %rsi
	movzbl	1(%rdx,%rsi,4), %edi
	movzbl	(%rdx,%rsi,4), %edx
	shll	$8, %edx
	movswl	%dx, %edx
	orl	%edi, %edx
	movl	%edx, (%r15)
LBB47_3:
	testq	%r14, %r14
	je	LBB47_10
## %bb.4:
	movslq	40(%rbx), %rdx
	addq	%rdx, %rcx
	shll	$2, %eax
	cltq
	addq	%rcx, %rax
	addq	$2, %rax
	jmp	LBB47_9
LBB47_5:
	testq	%r15, %r15
	je	LBB47_7
## %bb.6:
	movslq	40(%rbx), %rax
	addq	%rcx, %rax
	movzbl	-3(%rax,%rsi,4), %edi
	movzbl	-4(%rax,%rsi,4), %eax
	shll	$8, %eax
	cwtl
	orl	%edi, %eax
	movl	%eax, (%r15)
LBB47_7:
	testq	%r14, %r14
	je	LBB47_10
## %bb.8:
	movslq	40(%rbx), %rax
	addq	%rax, %rcx
	movl	%esi, %eax
	leaq	(%rcx,%rax,4), %rcx
	addl	%edx, %edx
	movslq	%edx, %rax
	addq	%rcx, %rax
LBB47_9:
	movzbl	1(%rax), %ecx
	movzbl	(%rax), %eax
	shll	$8, %eax
	cwtl
	orl	%ecx, %eax
	movl	%eax, (%r14)
LBB47_10:
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetFontVMetrics          ## -- Begin function stbtt_GetFontVMetrics
	.p2align	4, 0x90
_stbtt_GetFontVMetrics:                 ## @stbtt_GetFontVMetrics
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	testq	%rsi, %rsi
	je	LBB48_2
## %bb.1:
	movq	8(%rdi), %r8
	movslq	36(%rdi), %rax
	movzbl	5(%r8,%rax), %r9d
	movzbl	4(%r8,%rax), %eax
	shll	$8, %eax
	cwtl
	orl	%r9d, %eax
	movl	%eax, (%rsi)
LBB48_2:
	testq	%rdx, %rdx
	je	LBB48_4
## %bb.3:
	movq	8(%rdi), %rax
	movslq	36(%rdi), %rsi
	movzbl	7(%rax,%rsi), %r8d
	movzbl	6(%rax,%rsi), %eax
	shll	$8, %eax
	cwtl
	orl	%r8d, %eax
	movl	%eax, (%rdx)
LBB48_4:
	testq	%rcx, %rcx
	je	LBB48_6
## %bb.5:
	movq	8(%rdi), %rax
	movslq	36(%rdi), %rdx
	movzbl	9(%rax,%rdx), %esi
	movzbl	8(%rax,%rdx), %eax
	shll	$8, %eax
	cwtl
	orl	%esi, %eax
	movl	%eax, (%rcx)
LBB48_6:
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetFontVMetricsOS2       ## -- Begin function stbtt_GetFontVMetricsOS2
	.p2align	4, 0x90
_stbtt_GetFontVMetricsOS2:              ## @stbtt_GetFontVMetricsOS2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	8(%rdi), %r8
	movl	16(%rdi), %edi
	movzwl	4(%r8,%rdi), %r9d
	rolw	$8, %r9w
	xorl	%eax, %eax
	testw	%r9w, %r9w
	je	LBB49_14
## %bb.1:
	movzwl	%r9w, %r9d
	addl	$12, %edi
	jmp	LBB49_2
	.p2align	4, 0x90
LBB49_6:                                ##   in Loop: Header=BB49_2 Depth=1
	addl	$16, %edi
	decq	%r9
	je	LBB49_14
LBB49_2:                                ## =>This Inner Loop Header: Depth=1
	movl	%edi, %edi
	cmpb	$79, (%r8,%rdi)
	jne	LBB49_6
## %bb.3:                               ##   in Loop: Header=BB49_2 Depth=1
	cmpb	$83, 1(%r8,%rdi)
	jne	LBB49_6
## %bb.4:                               ##   in Loop: Header=BB49_2 Depth=1
	cmpb	$47, 2(%r8,%rdi)
	jne	LBB49_6
## %bb.5:                               ##   in Loop: Header=BB49_2 Depth=1
	cmpb	$50, 3(%r8,%rdi)
	jne	LBB49_6
## %bb.7:
	movzbl	8(%r8,%rdi), %r9d
	shll	$24, %r9d
	movzbl	9(%r8,%rdi), %r10d
	shlq	$16, %r10
	movslq	%r9d, %r9
	orq	%r10, %r9
	movzbl	10(%r8,%rdi), %r10d
	shlq	$8, %r10
	orq	%r9, %r10
	movzbl	11(%r8,%rdi), %edi
	orq	%r10, %rdi
	testl	%edi, %edi
	je	LBB49_14
## %bb.8:
	testq	%rsi, %rsi
	je	LBB49_10
## %bb.9:
	movzbl	69(%r8,%rdi), %r9d
	movzbl	68(%r8,%rdi), %eax
	shll	$8, %eax
	cwtl
	orl	%r9d, %eax
	movl	%eax, (%rsi)
LBB49_10:
	testq	%rdx, %rdx
	je	LBB49_12
## %bb.11:
	movzbl	71(%r8,%rdi), %eax
	movzbl	70(%r8,%rdi), %esi
	shll	$8, %esi
	movswl	%si, %esi
	orl	%eax, %esi
	movl	%esi, (%rdx)
LBB49_12:
	movl	$1, %eax
	testq	%rcx, %rcx
	je	LBB49_14
## %bb.13:
	movzbl	73(%r8,%rdi), %edx
	movzbl	72(%r8,%rdi), %esi
	shll	$8, %esi
	movswl	%si, %esi
	orl	%edx, %esi
	movl	%esi, (%rcx)
LBB49_14:
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetFontBoundingBox       ## -- Begin function stbtt_GetFontBoundingBox
	.p2align	4, 0x90
_stbtt_GetFontBoundingBox:              ## @stbtt_GetFontBoundingBox
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	8(%rdi), %r11
	movslq	28(%rdi), %r9
	movzbl	37(%r11,%r9), %r10d
	movzbl	36(%r11,%r9), %eax
	shll	$8, %eax
	cwtl
	orl	%r10d, %eax
	movl	%eax, (%rsi)
	movslq	28(%rdi), %rax
	movzbl	39(%r11,%rax), %esi
	movzbl	38(%r11,%rax), %eax
	shll	$8, %eax
	cwtl
	orl	%esi, %eax
	movl	%eax, (%rdx)
	movslq	28(%rdi), %rax
	movzbl	41(%r11,%rax), %edx
	movzbl	40(%r11,%rax), %eax
	shll	$8, %eax
	cwtl
	orl	%edx, %eax
	movl	%eax, (%rcx)
	movslq	28(%rdi), %rax
	movzbl	43(%r11,%rax), %ecx
	movzbl	42(%r11,%rax), %eax
	shll	$8, %eax
	cwtl
	orl	%ecx, %eax
	movl	%eax, (%r8)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_ScaleForPixelHeight      ## -- Begin function stbtt_ScaleForPixelHeight
	.p2align	4, 0x90
_stbtt_ScaleForPixelHeight:             ## @stbtt_ScaleForPixelHeight
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	8(%rdi), %rax
	movslq	36(%rdi), %rcx
	movzbl	5(%rax,%rcx), %edx
	movzbl	4(%rax,%rcx), %esi
	shll	$8, %esi
	movswl	%si, %esi
	orl	%edx, %esi
	movzbl	7(%rax,%rcx), %edx
	movzbl	6(%rax,%rcx), %eax
	shll	$8, %eax
	cwtl
	orl	%edx, %eax
	subl	%eax, %esi
	vcvtsi2ss	%esi, %xmm1, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_ScaleForMappingEmToPixels ## -- Begin function stbtt_ScaleForMappingEmToPixels
	.p2align	4, 0x90
_stbtt_ScaleForMappingEmToPixels:       ## @stbtt_ScaleForMappingEmToPixels
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	8(%rdi), %rax
	movslq	28(%rdi), %rcx
	movzwl	18(%rax,%rcx), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	vcvtsi2ss	%eax, %xmm1, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_FreeShape                ## -- Begin function stbtt_FreeShape
	.p2align	4, 0x90
_stbtt_FreeShape:                       ## @stbtt_FreeShape
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rsi, %rdi
	popq	%rbp
	jmp	_free                           ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_FindSVGDoc               ## -- Begin function stbtt_FindSVGDoc
	.p2align	4, 0x90
_stbtt_FindSVGDoc:                      ## @stbtt_FindSVGDoc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	8(%rdi), %rax
	movl	52(%rdi), %r8d
	testl	%r8d, %r8d
	jns	LBB54_11
## %bb.1:
	movl	16(%rdi), %edx
	movzwl	4(%rax,%rdx), %ecx
	rolw	$8, %cx
	xorl	%r8d, %r8d
	testw	%cx, %cx
	je	LBB54_10
## %bb.2:
	movzwl	%cx, %ecx
	addl	$12, %edx
	jmp	LBB54_3
	.p2align	4, 0x90
LBB54_7:                                ##   in Loop: Header=BB54_3 Depth=1
	addl	$16, %edx
	decq	%rcx
	je	LBB54_10
LBB54_3:                                ## =>This Inner Loop Header: Depth=1
	movl	%edx, %edx
	cmpb	$83, (%rax,%rdx)
	jne	LBB54_7
## %bb.4:                               ##   in Loop: Header=BB54_3 Depth=1
	cmpb	$86, 1(%rax,%rdx)
	jne	LBB54_7
## %bb.5:                               ##   in Loop: Header=BB54_3 Depth=1
	cmpb	$71, 2(%rax,%rdx)
	jne	LBB54_7
## %bb.6:                               ##   in Loop: Header=BB54_3 Depth=1
	cmpb	$32, 3(%rax,%rdx)
	jne	LBB54_7
## %bb.8:
	movl	8(%rax,%rdx), %ecx
	bswapl	%ecx
	testl	%ecx, %ecx
	je	LBB54_10
## %bb.9:
	movl	2(%rax,%rcx), %r8d
	bswapl	%r8d
	addl	%ecx, %r8d
LBB54_10:
	movl	%r8d, 52(%rdi)
LBB54_11:
	movslq	%r8d, %rdx
	movzwl	(%rax,%rdx), %ecx
	rolw	$8, %cx
	testw	%cx, %cx
	je	LBB54_16
## %bb.12:
	movzwl	%cx, %ecx
	addq	%rdx, %rax
	addq	$2, %rax
	jmp	LBB54_13
	.p2align	4, 0x90
LBB54_15:                               ##   in Loop: Header=BB54_13 Depth=1
	addq	$12, %rax
	decq	%rcx
	je	LBB54_16
LBB54_13:                               ## =>This Inner Loop Header: Depth=1
	movzwl	(%rax), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%esi, %edx
	jg	LBB54_15
## %bb.14:                              ##   in Loop: Header=BB54_13 Depth=1
	movzwl	2(%rax), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	cmpl	%esi, %edx
	jl	LBB54_15
## %bb.17:
	popq	%rbp
	retq
LBB54_16:
	xorl	%eax, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetGlyphSVG              ## -- Begin function stbtt_GetGlyphSVG
	.p2align	4, 0x90
_stbtt_GetGlyphSVG:                     ## @stbtt_GetGlyphSVG
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	xorl	%r15d, %r15d
	cmpl	$0, 52(%rdi)
	je	LBB55_3
## %bb.1:
	movq	%rdx, %r14
	movq	%rdi, %rbx
	movq	8(%rdi), %r12
	callq	_stbtt_FindSVGDoc
	testq	%rax, %rax
	je	LBB55_3
## %bb.2:
	movslq	52(%rbx), %rcx
	addq	%rcx, %r12
	movl	4(%rax), %ecx
	bswapl	%ecx
	addq	%r12, %rcx
	movq	%rcx, (%r14)
	movl	8(%rax), %r15d
	bswapl	%r15d
LBB55_3:
	movl	%r15d, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetCodepointSVG          ## -- Begin function stbtt_GetCodepointSVG
	.p2align	4, 0x90
_stbtt_GetCodepointSVG:                 ## @stbtt_GetCodepointSVG
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rdi, %rbx
	callq	_stbtt_FindGlyphIndex
	xorl	%r15d, %r15d
	cmpl	$0, 52(%rbx)
	je	LBB56_3
## %bb.1:
	movq	8(%rbx), %r12
	movq	%rbx, %rdi
	movl	%eax, %esi
	callq	_stbtt_FindSVGDoc
	testq	%rax, %rax
	je	LBB56_3
## %bb.2:
	movslq	52(%rbx), %rcx
	addq	%rcx, %r12
	movl	4(%rax), %ecx
	bswapl	%ecx
	addq	%r12, %rcx
	movq	%rcx, (%r14)
	movl	8(%rax), %r15d
	bswapl	%r15d
LBB56_3:
	movl	%r15d, %eax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetGlyphBitmapBoxSubpixel ## -- Begin function stbtt_GetGlyphBitmapBoxSubpixel
	.p2align	4, 0x90
_stbtt_GetGlyphBitmapBoxSubpixel:       ## @stbtt_GetGlyphBitmapBoxSubpixel
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$128, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, %r14
	movq	%r8, %r15
	movq	%rcx, %r12
	movq	%rdx, %r13
	movq	%rdi, %rbx
	cmpl	$0, 76(%rdi)
	vmovss	%xmm3, 28(%rsp)                 ## 4-byte Spill
	vmovss	%xmm1, 24(%rsp)                 ## 4-byte Spill
	vmovss	%xmm2, 20(%rsp)                 ## 4-byte Spill
	vmovss	%xmm0, 16(%rsp)                 ## 4-byte Spill
	je	LBB57_11
## %bb.1:
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%ymm0, 32(%rsp)
	vmovups	%ymm0, 56(%rsp)
	movl	$1, 32(%rsp)
	leaq	32(%rsp), %rdx
	movq	%rbx, %rdi
	vzeroupper
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx
	movl	%eax, %ecx
	movl	%eax, %edx
	movl	%eax, %esi
	testl	%eax, %eax
	je	LBB57_3
## %bb.2:
	movl	56(%rsp), %eax
	movl	64(%rsp), %ecx
	movl	60(%rsp), %edx
	movl	68(%rsp), %esi
	jmp	LBB57_3
LBB57_11:
	movq	%rbx, %rdi
	callq	__ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi
	testl	%eax, %eax
	js	LBB57_13
## %bb.12:
	movq	8(%rbx), %rsi
	movl	%eax, %edi
	movzbl	3(%rsi,%rdi), %ecx
	movzbl	2(%rsi,%rdi), %eax
	shll	$8, %eax
	cwtl
	orl	%ecx, %eax
	movzbl	5(%rsi,%rdi), %edx
	movzbl	4(%rsi,%rdi), %ecx
	shll	$8, %ecx
	movswl	%cx, %ecx
	orl	%edx, %ecx
	movzbl	7(%rsi,%rdi), %ebx
	movzbl	6(%rsi,%rdi), %edx
	shll	$8, %edx
	movswl	%dx, %edx
	orl	%ebx, %edx
	movzbl	9(%rsi,%rdi), %ebx
	movzbl	8(%rsi,%rdi), %esi
	shll	$8, %esi
	movswl	%si, %esi
	orl	%ebx, %esi
LBB57_3:
	vmovss	28(%rsp), %xmm1                 ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovss	24(%rsp), %xmm2                 ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	20(%rsp), %xmm3                 ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovss	16(%rsp), %xmm4                 ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	testq	%r13, %r13
	je	LBB57_5
## %bb.4:
	vcvtsi2ss	%eax, %xmm5, %xmm0
	vmulss	%xmm4, %xmm0, %xmm0
	vaddss	%xmm3, %xmm0, %xmm0
	vroundss	$9, %xmm0, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, (%r13)
LBB57_5:
	testq	%r12, %r12
	je	LBB57_7
## %bb.6:
	negl	%esi
	vcvtsi2ss	%esi, %xmm5, %xmm0
	vmulss	%xmm2, %xmm0, %xmm0
	vaddss	%xmm1, %xmm0, %xmm0
	vroundss	$9, %xmm0, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, (%r12)
LBB57_7:
	testq	%r15, %r15
	je	LBB57_9
## %bb.8:
	vcvtsi2ss	%edx, %xmm5, %xmm0
	vmulss	%xmm4, %xmm0, %xmm0
	vaddss	%xmm3, %xmm0, %xmm0
	vroundss	$10, %xmm0, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, (%r15)
LBB57_9:
	testq	%r14, %r14
	je	LBB57_21
## %bb.10:
	negl	%ecx
	vcvtsi2ss	%ecx, %xmm5, %xmm0
	vmulss	%xmm2, %xmm0, %xmm0
	vaddss	%xmm1, %xmm0, %xmm0
	vroundss	$10, %xmm0, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
LBB57_20:
	movl	%eax, (%r14)
LBB57_21:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB57_13:
	testq	%r13, %r13
	je	LBB57_15
## %bb.14:
	movl	$0, (%r13)
LBB57_15:
	testq	%r12, %r12
	je	LBB57_17
## %bb.16:
	movl	$0, (%r12)
LBB57_17:
	testq	%r15, %r15
	je	LBB57_19
## %bb.18:
	movl	$0, (%r15)
LBB57_19:
	xorl	%eax, %eax
	testq	%r14, %r14
	jne	LBB57_20
	jmp	LBB57_21
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetGlyphBitmapBox        ## -- Begin function stbtt_GetGlyphBitmapBox
	.p2align	4, 0x90
_stbtt_GetGlyphBitmapBox:               ## @stbtt_GetGlyphBitmapBox
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vxorps	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	popq	%rbp
	jmp	_stbtt_GetGlyphBitmapBoxSubpixel ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetCodepointBitmapBoxSubpixel ## -- Begin function stbtt_GetCodepointBitmapBoxSubpixel
	.p2align	4, 0x90
_stbtt_GetCodepointBitmapBoxSubpixel:   ## @stbtt_GetCodepointBitmapBoxSubpixel
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, %r14
	movq	%r8, %r15
	movq	%rcx, %r12
	movq	%rdx, %r13
	vmovss	%xmm3, -56(%rbp)                ## 4-byte Spill
	vmovss	%xmm2, -52(%rbp)                ## 4-byte Spill
	vmovss	%xmm1, -48(%rbp)                ## 4-byte Spill
	vmovss	%xmm0, -44(%rbp)                ## 4-byte Spill
	movq	%rdi, %rbx
	callq	_stbtt_FindGlyphIndex
	movq	%rbx, %rdi
	movl	%eax, %esi
	vmovss	-44(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovss	-52(%rbp), %xmm2                ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-56(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	movq	%r13, %rdx
	movq	%r12, %rcx
	movq	%r15, %r8
	movq	%r14, %r9
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_stbtt_GetGlyphBitmapBoxSubpixel ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetCodepointBitmapBox    ## -- Begin function stbtt_GetCodepointBitmapBox
	.p2align	4, 0x90
_stbtt_GetCodepointBitmapBox:           ## @stbtt_GetCodepointBitmapBox
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, %r14
	movq	%r8, %r15
	movq	%rcx, %r12
	movq	%rdx, %r13
	vmovss	%xmm1, -48(%rbp)                ## 4-byte Spill
	vmovss	%xmm0, -44(%rbp)                ## 4-byte Spill
	movq	%rdi, %rbx
	callq	_stbtt_FindGlyphIndex
	vxorps	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	movq	%rbx, %rdi
	movl	%eax, %esi
	vmovss	-44(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	movq	%r13, %rdx
	movq	%r12, %rcx
	movq	%r15, %r8
	movq	%r14, %r9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_stbtt_GetGlyphBitmapBoxSubpixel ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ## -- Begin function stbtt_Rasterize
LCPI61_0:
	.byte	1                               ## 0x1
	.byte	1                               ## 0x1
	.byte	1                               ## 0x1
	.byte	1                               ## 0x1
	.byte	1                               ## 0x1
	.byte	1                               ## 0x1
	.byte	1                               ## 0x1
	.byte	1                               ## 0x1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2
LCPI61_1:
	.long	1                               ## 0x1
LCPI61_2:
	.long	0x80000000                      ## float -0
LCPI61_3:
	.long	0x3f800000                      ## float 1
LCPI61_5:
	.long	0x3f000000                      ## float 0.5
LCPI61_6:
	.long	0x7fffffff                      ## float NaN
LCPI61_7:
	.long	0x3f8147ae                      ## float 1.00999999
LCPI61_8:
	.long	0xbc23d70a                      ## float -0.00999999977
LCPI61_9:
	.long	0x437f0000                      ## float 255
	.section	__TEXT,__literal8,8byte_literals
	.p2align	2
LCPI61_4:
	.long	0x3f800000                      ## float 1
	.long	0xbf800000                      ## float -1
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_stbtt_Rasterize
	.p2align	4, 0x90
_stbtt_Rasterize:                       ## @stbtt_Rasterize
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$824, %rsp                      ## imm = 0x338
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -580(%rbp)                ## 4-byte Spill
	vmovdqa	%xmm4, -752(%rbp)               ## 16-byte Spill
	vmovdqa	%xmm3, -816(%rbp)               ## 16-byte Spill
	vmovdqa	%xmm2, -688(%rbp)               ## 16-byte Spill
	vmovdqa	%xmm1, -624(%rbp)               ## 16-byte Spill
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	testl	%edx, %edx
	jle	LBB61_183
## %bb.1:
	movl	%r8d, %r14d
	movl	%ecx, %r12d
	movq	%rsi, %r13
	movq	%rdi, %r15
	movl	%edx, %r8d
	cmpl	$32, %edx
	jae	LBB61_3
## %bb.2:
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	jmp	LBB61_6
LBB61_3:
	movl	%r8d, %eax
	andl	$-32, %eax
	leaq	446(%r13), %rcx
	movq	%r8, %rdx
	shrq	$5, %rdx
	imulq	$448, %rdx, %rdx                ## imm = 0x1C0
	vpxor	%xmm11, %xmm11, %xmm11
	xorl	%esi, %esi
	vpbroadcastd	LCPI61_1(%rip), %ymm10  ## ymm10 = [1,1,1,1,1,1,1,1]
	vmovdqa	LCPI61_0(%rip), %xmm8           ## xmm8 = <1,1,1,1,1,1,1,1,u,u,u,u,u,u,u,u>
	vpxor	%xmm3, %xmm3, %xmm3
	vpxor	%xmm4, %xmm4, %xmm4
	vpxor	%xmm5, %xmm5, %xmm5
	.p2align	4, 0x90
LBB61_4:                                ## =>This Inner Loop Header: Depth=1
	movzbl	-434(%rcx,%rsi), %edi
	vmovd	%edi, %xmm6
	vpinsrb	$1, -420(%rcx,%rsi), %xmm6, %xmm6
	vpinsrb	$2, -406(%rcx,%rsi), %xmm6, %xmm6
	vpinsrb	$3, -392(%rcx,%rsi), %xmm6, %xmm6
	vpinsrb	$4, -378(%rcx,%rsi), %xmm6, %xmm6
	vpinsrb	$5, -364(%rcx,%rsi), %xmm6, %xmm6
	vpinsrb	$6, -350(%rcx,%rsi), %xmm6, %xmm6
	vpinsrb	$7, -336(%rcx,%rsi), %xmm6, %xmm9
	movzbl	-322(%rcx,%rsi), %edi
	vmovd	%edi, %xmm7
	vpinsrb	$1, -308(%rcx,%rsi), %xmm7, %xmm7
	vpinsrb	$2, -294(%rcx,%rsi), %xmm7, %xmm7
	vpinsrb	$3, -280(%rcx,%rsi), %xmm7, %xmm7
	vpinsrb	$4, -266(%rcx,%rsi), %xmm7, %xmm7
	vpinsrb	$5, -252(%rcx,%rsi), %xmm7, %xmm7
	vpinsrb	$6, -238(%rcx,%rsi), %xmm7, %xmm7
	vpinsrb	$7, -224(%rcx,%rsi), %xmm7, %xmm7
	movzbl	-210(%rcx,%rsi), %edi
	vmovd	%edi, %xmm2
	vpinsrb	$1, -196(%rcx,%rsi), %xmm2, %xmm2
	vpinsrb	$2, -182(%rcx,%rsi), %xmm2, %xmm2
	vpinsrb	$3, -168(%rcx,%rsi), %xmm2, %xmm2
	vpinsrb	$4, -154(%rcx,%rsi), %xmm2, %xmm2
	vpinsrb	$5, -140(%rcx,%rsi), %xmm2, %xmm2
	vpinsrb	$6, -126(%rcx,%rsi), %xmm2, %xmm2
	vpinsrb	$7, -112(%rcx,%rsi), %xmm2, %xmm2
	movzbl	-98(%rcx,%rsi), %edi
	vmovd	%edi, %xmm6
	vpinsrb	$1, -84(%rcx,%rsi), %xmm6, %xmm6
	vpinsrb	$2, -70(%rcx,%rsi), %xmm6, %xmm6
	vpinsrb	$3, -56(%rcx,%rsi), %xmm6, %xmm6
	vpinsrb	$4, -42(%rcx,%rsi), %xmm6, %xmm6
	vpinsrb	$5, -28(%rcx,%rsi), %xmm6, %xmm6
	vpinsrb	$6, -14(%rcx,%rsi), %xmm6, %xmm6
	vpinsrb	$7, (%rcx,%rsi), %xmm6, %xmm6
	vpcmpeqb	%xmm8, %xmm9, %xmm1
	vpmovzxbd	%xmm1, %ymm1            ## ymm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpand	%ymm1, %ymm10, %ymm1
	vpaddd	%ymm1, %ymm11, %ymm11
	vpcmpeqb	%xmm7, %xmm8, %xmm1
	vpmovzxbd	%xmm1, %ymm1            ## ymm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpand	%ymm1, %ymm10, %ymm1
	vpaddd	%ymm1, %ymm3, %ymm3
	vpcmpeqb	%xmm2, %xmm8, %xmm1
	vpmovzxbd	%xmm1, %ymm1            ## ymm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpand	%ymm1, %ymm10, %ymm1
	vpaddd	%ymm1, %ymm4, %ymm4
	vpcmpeqb	%xmm6, %xmm8, %xmm1
	vpmovzxbd	%xmm1, %ymm1            ## ymm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpand	%ymm1, %ymm10, %ymm1
	vpaddd	%ymm1, %ymm5, %ymm5
	addq	$448, %rsi                      ## imm = 0x1C0
	cmpq	%rsi, %rdx
	jne	LBB61_4
## %bb.5:
	vpaddd	%ymm3, %ymm11, %ymm1
	vpaddd	%ymm1, %ymm4, %ymm1
	vpaddd	%ymm1, %ymm5, %ymm2
	vextracti128	$1, %ymm2, %xmm1
	vpaddd	%xmm1, %xmm2, %xmm2
	vpshufd	$238, %xmm2, %xmm1              ## xmm1 = xmm2[2,3,2,3]
	vpaddd	%xmm1, %xmm2, %xmm2
	vpshufd	$85, %xmm2, %xmm1               ## xmm1 = xmm2[1,1,1,1]
	vpaddd	%xmm1, %xmm2, %xmm1
	vmovd	%xmm1, %ebx
	cmpq	%r8, %rax
	je	LBB61_8
LBB61_6:
	movq	%r8, %rcx
	subq	%rax, %rcx
	movq	%rax, %rdx
	shlq	$4, %rdx
	subq	%rax, %rdx
	subq	%rax, %rdx
	leaq	(%rdx,%r13), %rax
	addq	$12, %rax
	.p2align	4, 0x90
LBB61_7:                                ## =>This Inner Loop Header: Depth=1
	xorl	%edx, %edx
	cmpb	$1, (%rax)
	sete	%dl
	addl	%edx, %ebx
	addq	$14, %rax
	decq	%rcx
	jne	LBB61_7
LBB61_8:
	testl	%ebx, %ebx
	je	LBB61_183
## %bb.9:
	movl	%ebx, %eax
	movq	%rax, -608(%rbp)                ## 8-byte Spill
	leaq	(,%rax,4), %rdi
	movq	%r8, -736(%rbp)                 ## 8-byte Spill
	vmovss	%xmm0, -592(%rbp)               ## 4-byte Spill
	vzeroupper
	callq	_malloc
	vmovss	-592(%rbp), %xmm1               ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	movq	-736(%rbp), %rcx                ## 8-byte Reload
	movq	%rax, -640(%rbp)                ## 8-byte Spill
	testq	%rax, %rax
	je	LBB61_183
## %bb.10:
	movl	%r12d, -848(%rbp)               ## 4-byte Spill
	movq	%r15, -768(%rbp)                ## 8-byte Spill
	movq	%r14, -824(%rbp)                ## 8-byte Spill
	vmovaps	-688(%rbp), %xmm0               ## 16-byte Reload
	vminss	-624(%rbp), %xmm0, %xmm0        ## 16-byte Folded Reload
	vdivss	%xmm0, %xmm1, %xmm0
	vmulss	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -592(%rbp)               ## 4-byte Spill
	movl	$0, -576(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	movl	$-1, %r12d
	xorl	%eax, %eax
	movq	%rax, -600(%rbp)                ## 8-byte Spill
	leaq	LJTI61_0(%rip), %rdi
	movq	%rcx, %r15
	movq	%r13, %r14
	jmp	LBB61_13
	.p2align	4, 0x90
LBB61_11:                               ##   in Loop: Header=BB61_13 Depth=1
	vmovd	(%r14), %xmm0                   ## xmm0 = mem[0],zero,zero,zero
	vpmovsxwd	%xmm0, %xmm0
	vcvtdq2ps	%xmm0, %xmm0
	incl	-576(%rbp)
	.p2align	4, 0x90
LBB61_12:                               ##   in Loop: Header=BB61_13 Depth=1
	addq	$14, %r14
	decq	%r15
	je	LBB61_21
LBB61_13:                               ## =>This Inner Loop Header: Depth=1
	movzbl	12(%r14), %eax
	decb	%al
	cmpb	$3, %al
	ja	LBB61_12
## %bb.14:                              ##   in Loop: Header=BB61_13 Depth=1
	movzbl	%al, %eax
	movslq	(%rdi,%rax,4), %rax
	addq	%rdi, %rax
	jmpq	*%rax
LBB61_15:                               ##   in Loop: Header=BB61_13 Depth=1
	movl	-576(%rbp), %eax
	testl	%r12d, %r12d
	js	LBB61_17
## %bb.16:                              ##   in Loop: Header=BB61_13 Depth=1
	movl	%eax, %ecx
	subl	-600(%rbp), %ecx                ## 4-byte Folded Reload
	movl	%r12d, %edx
	movq	-640(%rbp), %rsi                ## 8-byte Reload
	movl	%ecx, (%rsi,%rdx,4)
LBB61_17:                               ##   in Loop: Header=BB61_13 Depth=1
	incl	%r12d
	vmovd	(%r14), %xmm0                   ## xmm0 = mem[0],zero,zero,zero
	vpmovsxwd	%xmm0, %xmm0
	vcvtdq2ps	%xmm0, %xmm0
	leal	1(%rax), %ecx
	movl	%ecx, -576(%rbp)
                                        ## kill: def $eax killed $eax killed $rax def $rax
	movq	%rax, -600(%rbp)                ## 8-byte Spill
	jmp	LBB61_12
	.p2align	4, 0x90
LBB61_18:                               ##   in Loop: Header=BB61_13 Depth=1
	movswl	4(%r14), %eax
	vcvtsi2ss	%eax, %xmm12, %xmm2
	movswl	6(%r14), %eax
	vcvtsi2ss	%eax, %xmm12, %xmm3
	vmovd	(%r14), %xmm1                   ## xmm1 = mem[0],zero,zero,zero
	vpmovsxwd	%xmm1, %xmm1
	vcvtdq2ps	%xmm1, %xmm1
	vmovshdup	%xmm1, %xmm5            ## xmm5 = xmm1[1,1,3,3]
	vmovaps	%xmm1, %xmm4
	vmovaps	%xmm1, -656(%rbp)               ## 16-byte Spill
	vmovshdup	%xmm0, %xmm1            ## xmm1 = xmm0[1,1,3,3]
	xorl	%edi, %edi
	leaq	-576(%rbp), %rsi
	vmovss	-592(%rbp), %xmm6               ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	xorl	%edx, %edx
	callq	__ZL22stbtt__tesselate_curveP12stbtt__pointPifffffffi
	jmp	LBB61_20
	.p2align	4, 0x90
LBB61_19:                               ##   in Loop: Header=BB61_13 Depth=1
	movswl	4(%r14), %eax
	vcvtsi2ss	%eax, %xmm12, %xmm2
	movswl	6(%r14), %eax
	vcvtsi2ss	%eax, %xmm12, %xmm3
	movswl	8(%r14), %eax
	vcvtsi2ss	%eax, %xmm12, %xmm4
	movswl	10(%r14), %eax
	vcvtsi2ss	%eax, %xmm12, %xmm5
	vmovd	(%r14), %xmm1                   ## xmm1 = mem[0],zero,zero,zero
	vpmovsxwd	%xmm1, %xmm1
	vcvtdq2ps	%xmm1, %xmm8
	vmovshdup	%xmm8, %xmm7            ## xmm7 = xmm8[1,1,3,3]
	vmovaps	%xmm8, -656(%rbp)               ## 16-byte Spill
	vmovshdup	%xmm0, %xmm1            ## xmm1 = xmm0[1,1,3,3]
	vmovss	-592(%rbp), %xmm6               ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	vmovss	%xmm6, (%rsp)
	xorl	%edi, %edi
	leaq	-576(%rbp), %rsi
	vmovaps	%xmm8, %xmm6
	xorl	%edx, %edx
	callq	__ZL22stbtt__tesselate_cubicP12stbtt__pointPifffffffffi
LBB61_20:                               ##   in Loop: Header=BB61_13 Depth=1
	leaq	LJTI61_0(%rip), %rdi
	vmovaps	-656(%rbp), %xmm0               ## 16-byte Reload
	jmp	LBB61_12
LBB61_21:
	movslq	-576(%rbp), %rdi
	movl	%edi, %eax
	subl	-600(%rbp), %eax                ## 4-byte Folded Reload
	movslq	%r12d, %rcx
	movq	-640(%rbp), %r14                ## 8-byte Reload
	movl	%eax, (%r14,%rcx,4)
	shlq	$3, %rdi
	callq	_malloc
	movq	%rax, -632(%rbp)                ## 8-byte Spill
	testq	%rax, %rax
	je	LBB61_35
## %bb.22:
	movl	$0, -576(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	movl	$-1, %r14d
	leaq	LJTI61_1(%rip), %rdi
	leaq	-576(%rbp), %r12
	movq	-632(%rbp), %r9                 ## 8-byte Reload
	movq	-736(%rbp), %r15                ## 8-byte Reload
	jmp	LBB61_26
	.p2align	4, 0x90
LBB61_23:                               ##   in Loop: Header=BB61_26 Depth=1
	movswl	4(%r13), %eax
	vcvtsi2ss	%eax, %xmm10, %xmm2
	movswl	6(%r13), %eax
	vcvtsi2ss	%eax, %xmm10, %xmm3
	vmovd	(%r13), %xmm1                   ## xmm1 = mem[0],zero,zero,zero
	vpmovsxwd	%xmm1, %xmm1
	vcvtdq2ps	%xmm1, %xmm1
	vmovshdup	%xmm1, %xmm5            ## xmm5 = xmm1[1,1,3,3]
	vmovaps	%xmm1, %xmm4
	vmovaps	%xmm1, -656(%rbp)               ## 16-byte Spill
	vmovshdup	%xmm0, %xmm1            ## xmm1 = xmm0[1,1,3,3]
	movq	%r9, %rdi
	movq	%r12, %rsi
	vmovss	-592(%rbp), %xmm6               ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	xorl	%edx, %edx
	callq	__ZL22stbtt__tesselate_curveP12stbtt__pointPifffffffi
LBB61_24:                               ##   in Loop: Header=BB61_26 Depth=1
	movq	-632(%rbp), %r9                 ## 8-byte Reload
	leaq	LJTI61_1(%rip), %rdi
	vmovaps	-656(%rbp), %xmm0               ## 16-byte Reload
LBB61_25:                               ##   in Loop: Header=BB61_26 Depth=1
	addq	$14, %r13
	decq	%r15
	je	LBB61_33
LBB61_26:                               ## =>This Inner Loop Header: Depth=1
	movzbl	12(%r13), %eax
	decb	%al
	cmpb	$3, %al
	ja	LBB61_25
## %bb.27:                              ##   in Loop: Header=BB61_26 Depth=1
	movzbl	%al, %eax
	movslq	(%rdi,%rax,4), %rax
	addq	%rdi, %rax
	jmpq	*%rax
LBB61_28:                               ##   in Loop: Header=BB61_26 Depth=1
	movl	-576(%rbp), %eax
	testl	%r14d, %r14d
	js	LBB61_30
## %bb.29:                              ##   in Loop: Header=BB61_26 Depth=1
	movl	%eax, %ecx
	subl	-600(%rbp), %ecx                ## 4-byte Folded Reload
	movl	%r14d, %edx
	movq	-640(%rbp), %rsi                ## 8-byte Reload
	movl	%ecx, (%rsi,%rdx,4)
LBB61_30:                               ##   in Loop: Header=BB61_26 Depth=1
	movslq	%eax, %rcx
	incl	%r14d
	vmovd	(%r13), %xmm0                   ## xmm0 = mem[0],zero,zero,zero
	vpmovsxwd	%xmm0, %xmm0
	vcvtdq2ps	%xmm0, %xmm0
	leal	1(%rax), %edx
	movl	%edx, -576(%rbp)
	vmovss	%xmm0, (%r9,%rcx,8)
	vextractps	$1, %xmm0, 4(%r9,%rcx,8)
                                        ## kill: def $eax killed $eax killed $rax def $rax
	movq	%rax, -600(%rbp)                ## 8-byte Spill
	jmp	LBB61_25
	.p2align	4, 0x90
LBB61_31:                               ##   in Loop: Header=BB61_26 Depth=1
	vmovd	(%r13), %xmm0                   ## xmm0 = mem[0],zero,zero,zero
	vpmovsxwd	%xmm0, %xmm0
	vcvtdq2ps	%xmm0, %xmm0
	movslq	-576(%rbp), %rax
	leal	1(%rax), %ecx
	movl	%ecx, -576(%rbp)
	vmovss	%xmm0, (%r9,%rax,8)
	vextractps	$1, %xmm0, 4(%r9,%rax,8)
	jmp	LBB61_25
	.p2align	4, 0x90
LBB61_32:                               ##   in Loop: Header=BB61_26 Depth=1
	movswl	4(%r13), %eax
	vcvtsi2ss	%eax, %xmm10, %xmm2
	movswl	6(%r13), %eax
	vcvtsi2ss	%eax, %xmm10, %xmm3
	movswl	8(%r13), %eax
	vcvtsi2ss	%eax, %xmm10, %xmm4
	movswl	10(%r13), %eax
	vcvtsi2ss	%eax, %xmm9, %xmm5
	vmovd	(%r13), %xmm1                   ## xmm1 = mem[0],zero,zero,zero
	vpmovsxwd	%xmm1, %xmm1
	vcvtdq2ps	%xmm1, %xmm8
	vmovshdup	%xmm8, %xmm7            ## xmm7 = xmm8[1,1,3,3]
	vmovaps	%xmm8, -656(%rbp)               ## 16-byte Spill
	vmovshdup	%xmm0, %xmm1            ## xmm1 = xmm0[1,1,3,3]
	vmovss	-592(%rbp), %xmm6               ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	vmovss	%xmm6, (%rsp)
	movq	%r9, %rdi
	movq	%r12, %rsi
	vmovaps	%xmm8, %xmm6
	xorl	%edx, %edx
	callq	__ZL22stbtt__tesselate_cubicP12stbtt__pointPifffffffffi
	jmp	LBB61_24
LBB61_33:
	movl	-576(%rbp), %eax
	subl	-600(%rbp), %eax                ## 4-byte Folded Reload
	movslq	%r14d, %rcx
	movq	-640(%rbp), %r14                ## 8-byte Reload
	movl	%eax, (%r14,%rcx,4)
	cmpl	$32, %ebx
	jae	LBB61_36
## %bb.34:
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movq	-608(%rbp), %rdi                ## 8-byte Reload
	movl	-580(%rbp), %ebx                ## 4-byte Reload
	jmp	LBB61_42
LBB61_35:
	movq	%r14, %rdi
	jmp	LBB61_182
LBB61_36:
	movq	-608(%rbp), %rdi                ## 8-byte Reload
	movl	%edi, %eax
	andl	$-32, %eax
	leaq	-32(%rax), %rdx
	movq	%rdx, %rcx
	shrq	$5, %rcx
	incq	%rcx
	testq	%rdx, %rdx
	movl	-580(%rbp), %ebx                ## 4-byte Reload
	je	LBB61_185
## %bb.37:
	movq	%rcx, %rsi
	andq	$-2, %rsi
	vxorps	%xmm0, %xmm0, %xmm0
	xorl	%edx, %edx
	vxorps	%xmm1, %xmm1, %xmm1
	vpxor	%xmm2, %xmm2, %xmm2
	vpxor	%xmm3, %xmm3, %xmm3
	.p2align	4, 0x90
LBB61_38:                               ## =>This Inner Loop Header: Depth=1
	vpaddd	(%r14,%rdx,4), %ymm0, %ymm0
	vpaddd	32(%r14,%rdx,4), %ymm1, %ymm1
	vpaddd	64(%r14,%rdx,4), %ymm2, %ymm2
	vpaddd	96(%r14,%rdx,4), %ymm3, %ymm3
	vpaddd	128(%r14,%rdx,4), %ymm0, %ymm0
	vpaddd	160(%r14,%rdx,4), %ymm1, %ymm1
	vpaddd	192(%r14,%rdx,4), %ymm2, %ymm2
	vpaddd	224(%r14,%rdx,4), %ymm3, %ymm3
	addq	$64, %rdx
	addq	$-2, %rsi
	jne	LBB61_38
## %bb.39:
	testb	$1, %cl
	je	LBB61_41
LBB61_40:
	vpaddd	(%r14,%rdx,4), %ymm0, %ymm0
	vpaddd	32(%r14,%rdx,4), %ymm1, %ymm1
	vpaddd	64(%r14,%rdx,4), %ymm2, %ymm2
	vpaddd	96(%r14,%rdx,4), %ymm3, %ymm3
LBB61_41:
	vpaddd	%ymm3, %ymm1, %ymm1
	vpaddd	%ymm2, %ymm0, %ymm0
	vpaddd	%ymm1, %ymm0, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpaddd	%xmm1, %xmm0, %xmm0
	vpshufd	$238, %xmm0, %xmm1              ## xmm1 = xmm0[2,3,2,3]
	vpaddd	%xmm1, %xmm0, %xmm0
	vpshufd	$85, %xmm0, %xmm1               ## xmm1 = xmm0[1,1,1,1]
	vpaddd	%xmm1, %xmm0, %xmm0
	vmovd	%xmm0, %ecx
	cmpq	%rdi, %rax
	je	LBB61_43
	.p2align	4, 0x90
LBB61_42:                               ## =>This Inner Loop Header: Depth=1
	addl	(%r14,%rax,4), %ecx
	incq	%rax
	cmpq	%rax, %rdi
	jne	LBB61_42
LBB61_43:
	testl	%ebx, %ebx
	je	LBB61_45
## %bb.44:
	vpbroadcastd	LCPI61_2(%rip), %xmm0   ## xmm0 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovdqa	-688(%rbp), %xmm1               ## 16-byte Reload
	vpxor	%xmm0, %xmm1, %xmm1
	vmovdqa	%xmm1, -688(%rbp)               ## 16-byte Spill
LBB61_45:
	movslq	%ecx, %rax
	shlq	$2, %rax
	leaq	(%rax,%rax,4), %rdi
	addq	$20, %rdi
	vzeroupper
	callq	_malloc
	testq	%rax, %rax
	je	LBB61_181
## %bb.46:
	movq	%rax, -696(%rbp)                ## 8-byte Spill
	testl	%ebx, %ebx
	je	LBB61_57
## %bb.47:
	vmovaps	-624(%rbp), %xmm0               ## 16-byte Reload
	vinsertps	$16, -688(%rbp), %xmm0, %xmm0 ## 16-byte Folded Reload
                                        ## xmm0 = xmm0[0],mem[0],xmm0[2,3]
	vmovddup	%xmm0, %xmm0                    ## xmm0 = xmm0[0,0]
	vmovaps	-816(%rbp), %xmm1               ## 16-byte Reload
	vinsertps	$16, -752(%rbp), %xmm1, %xmm1 ## 16-byte Folded Reload
                                        ## xmm1 = xmm1[0],mem[0],xmm1[2,3]
	vmovddup	%xmm1, %xmm1                    ## xmm1 = xmm1[0,0]
	movq	-632(%rbp), %rax                ## 8-byte Reload
	addq	$4, %rax
	movq	%rax, -592(%rbp)                ## 8-byte Spill
	xorl	%r10d, %r10d
	xorl	%r14d, %r14d
	xorl	%r9d, %r9d
	movq	-696(%rbp), %r8                 ## 8-byte Reload
	jmp	LBB61_49
	.p2align	4, 0x90
LBB61_48:                               ##   in Loop: Header=BB61_49 Depth=1
	addl	%r11d, %r9d
	incq	%r10
	cmpq	-608(%rbp), %r10                ## 8-byte Folded Reload
	je	LBB61_67
LBB61_49:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB61_54 Depth 2
	movq	-640(%rbp), %rax                ## 8-byte Reload
	movl	(%rax,%r10,4), %r11d
	testl	%r11d, %r11d
	jle	LBB61_48
## %bb.50:                              ##   in Loop: Header=BB61_49 Depth=1
	movslq	%r9d, %rax
	movq	-632(%rbp), %rcx                ## 8-byte Reload
	leaq	(%rcx,%rax,8), %rdi
	leal	-1(%r11), %ecx
	movq	-592(%rbp), %rdx                ## 8-byte Reload
	leaq	(%rdx,%rax,8), %r15
	xorl	%edx, %edx
	jmp	LBB61_54
LBB61_51:                               ##   in Loop: Header=BB61_54 Depth=2
	vmovss	(%r15,%rdx,8), %xmm2            ## xmm2 = mem[0],zero,zero,zero
	movl	$1, %ebx
	movq	%rcx, %r13
	movq	%rdx, %rcx
LBB61_52:                               ##   in Loop: Header=BB61_54 Depth=2
	movslq	%r14d, %r14
	leaq	(%r14,%r14,4), %rax
	leaq	(%r8,%rax,4), %rsi
	addq	$16, %rsi
	movl	%ebx, (%rsi)
	vmovsd	(%rdi,%r13,8), %xmm3            ## xmm3 = mem[0],zero
	vinsertps	$32, (%rdi,%rcx,8), %xmm3, %xmm3 ## xmm3 = xmm3[0,1],mem[0],xmm3[3]
	vinsertps	$48, %xmm2, %xmm3, %xmm2 ## xmm2 = xmm3[0,1,2],xmm2[0]
	vmulps	%xmm0, %xmm2, %xmm2
	vaddps	%xmm1, %xmm2, %xmm2
	vmovups	%xmm2, (%r8,%rax,4)
	incl	%r14d
LBB61_53:                               ##   in Loop: Header=BB61_54 Depth=2
	movl	%edx, %ecx
	leaq	1(%rdx), %rax
	movq	%rax, %rdx
	cmpq	%rax, %r11
	je	LBB61_48
LBB61_54:                               ##   Parent Loop BB61_49 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movslq	%ecx, %rcx
	vmovss	4(%rdi,%rcx,8), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vmovss	(%r15,%rdx,8), %xmm3            ## xmm3 = mem[0],zero,zero,zero
	vucomiss	%xmm3, %xmm2
	jne	LBB61_55
	jnp	LBB61_53
LBB61_55:                               ##   in Loop: Header=BB61_54 Depth=2
	xorl	%ebx, %ebx
	vucomiss	%xmm3, %xmm2
	ja	LBB61_51
## %bb.56:                              ##   in Loop: Header=BB61_54 Depth=2
	movq	%rdx, %r13
	jmp	LBB61_52
LBB61_57:
	vmovaps	-624(%rbp), %xmm0               ## 16-byte Reload
	vinsertps	$16, -688(%rbp), %xmm0, %xmm0 ## 16-byte Folded Reload
                                        ## xmm0 = xmm0[0],mem[0],xmm0[2,3]
	vmovddup	%xmm0, %xmm0                    ## xmm0 = xmm0[0,0]
	vmovaps	-816(%rbp), %xmm1               ## 16-byte Reload
	vinsertps	$16, -752(%rbp), %xmm1, %xmm1 ## 16-byte Folded Reload
                                        ## xmm1 = xmm1[0],mem[0],xmm1[2,3]
	vmovddup	%xmm1, %xmm1                    ## xmm1 = xmm1[0,0]
	movq	-632(%rbp), %rax                ## 8-byte Reload
	addq	$4, %rax
	movq	%rax, -592(%rbp)                ## 8-byte Spill
	xorl	%r10d, %r10d
	xorl	%r14d, %r14d
	xorl	%r9d, %r9d
	movq	-696(%rbp), %r8                 ## 8-byte Reload
	jmp	LBB61_59
	.p2align	4, 0x90
LBB61_58:                               ##   in Loop: Header=BB61_59 Depth=1
	addl	%r11d, %r9d
	incq	%r10
	cmpq	-608(%rbp), %r10                ## 8-byte Folded Reload
	je	LBB61_67
LBB61_59:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB61_64 Depth 2
	movq	-640(%rbp), %rax                ## 8-byte Reload
	movl	(%rax,%r10,4), %r11d
	testl	%r11d, %r11d
	jle	LBB61_58
## %bb.60:                              ##   in Loop: Header=BB61_59 Depth=1
	movslq	%r9d, %rax
	movq	-632(%rbp), %rcx                ## 8-byte Reload
	leaq	(%rcx,%rax,8), %rdi
	leal	-1(%r11), %ecx
	movq	-592(%rbp), %rdx                ## 8-byte Reload
	leaq	(%rdx,%rax,8), %r15
	xorl	%edx, %edx
	jmp	LBB61_64
LBB61_61:                               ##   in Loop: Header=BB61_64 Depth=2
	vmovss	(%r15,%rdx,8), %xmm2            ## xmm2 = mem[0],zero,zero,zero
	movl	$1, %esi
	movq	%rcx, %r13
	movq	%rdx, %rcx
LBB61_62:                               ##   in Loop: Header=BB61_64 Depth=2
	movslq	%r14d, %r14
	leaq	(%r14,%r14,4), %rax
	leaq	(%r8,%rax,4), %rbx
	addq	$16, %rbx
	movl	%esi, (%rbx)
	vmovsd	(%rdi,%r13,8), %xmm3            ## xmm3 = mem[0],zero
	vinsertps	$32, (%rdi,%rcx,8), %xmm3, %xmm3 ## xmm3 = xmm3[0,1],mem[0],xmm3[3]
	vinsertps	$48, %xmm2, %xmm3, %xmm2 ## xmm2 = xmm3[0,1,2],xmm2[0]
	vmulps	%xmm0, %xmm2, %xmm2
	vaddps	%xmm1, %xmm2, %xmm2
	vmovups	%xmm2, (%r8,%rax,4)
	incl	%r14d
LBB61_63:                               ##   in Loop: Header=BB61_64 Depth=2
	movl	%edx, %ecx
	leaq	1(%rdx), %rax
	movq	%rax, %rdx
	cmpq	%rax, %r11
	je	LBB61_58
LBB61_64:                               ##   Parent Loop BB61_59 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movslq	%ecx, %rcx
	vmovss	4(%rdi,%rcx,8), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vmovss	(%r15,%rdx,8), %xmm3            ## xmm3 = mem[0],zero,zero,zero
	vucomiss	%xmm3, %xmm2
	jne	LBB61_65
	jnp	LBB61_63
LBB61_65:                               ##   in Loop: Header=BB61_64 Depth=2
	xorl	%esi, %esi
	vucomiss	%xmm2, %xmm3
	ja	LBB61_61
## %bb.66:                              ##   in Loop: Header=BB61_64 Depth=2
	movq	%rdx, %r13
	jmp	LBB61_62
LBB61_67:
	movq	-696(%rbp), %rbx                ## 8-byte Reload
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	__ZL27stbtt__sort_edges_quicksortP11stbtt__edgei
	movq	%rbx, %rsi
	cmpl	$2, %r14d
	movq	-768(%rbp), %r15                ## 8-byte Reload
	jl	LBB61_76
## %bb.68:
	movl	%r14d, %r8d
	movq	%rsi, %r9
	addq	$20, %r9
	movl	$1, %edx
	movl	$2, %r10d
	jmp	LBB61_70
	.p2align	4, 0x90
LBB61_75:                               ##   in Loop: Header=BB61_70 Depth=1
	movslq	%edi, %rax
	leaq	(%rax,%rax,4), %rax
	vmovss	%xmm0, (%rsi,%rax,4)
	vmovss	%xmm1, 4(%rsi,%rax,4)
	movq	-576(%rbp), %rcx
	movq	%rcx, 8(%rsi,%rax,4)
	movl	-568(%rbp), %ecx
	movl	%ecx, 16(%rsi,%rax,4)
LBB61_69:                               ##   in Loop: Header=BB61_70 Depth=1
	incq	%rdx
	incq	%r10
	addq	$20, %r9
	cmpq	%r8, %rdx
	je	LBB61_76
LBB61_70:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB61_71 Depth 2
	leaq	(%rdx,%rdx,4), %rcx
	vmovss	(%rsi,%rcx,4), %xmm0            ## xmm0 = mem[0],zero,zero,zero
	vmovss	4(%rsi,%rcx,4), %xmm1           ## xmm1 = mem[0],zero,zero,zero
	movl	16(%rsi,%rcx,4), %edi
	movl	%edi, -568(%rbp)
	movq	8(%rsi,%rcx,4), %rcx
	movq	%rcx, -576(%rbp)
	movq	%r9, %rcx
	movq	%r10, %rdi
	.p2align	4, 0x90
LBB61_71:                               ##   Parent Loop BB61_70 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	leal	-2(%rdi), %ebx
	leaq	(%rbx,%rbx,4), %rbx
	vmovss	4(%rsi,%rbx,4), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vucomiss	%xmm1, %xmm2
	jbe	LBB61_74
## %bb.72:                              ##   in Loop: Header=BB61_71 Depth=2
	movl	16(%rsi,%rbx,4), %eax
	movl	%eax, 16(%rcx)
	vmovups	(%rsi,%rbx,4), %xmm2
	vmovups	%xmm2, (%rcx)
	decq	%rdi
	addq	$-20, %rcx
	cmpq	$1, %rdi
	jg	LBB61_71
## %bb.73:                              ##   in Loop: Header=BB61_70 Depth=1
	xorl	%edi, %edi
	movl	%edi, %eax
	cmpq	%rax, %rdx
	je	LBB61_69
	jmp	LBB61_75
	.p2align	4, 0x90
LBB61_74:                               ##   in Loop: Header=BB61_70 Depth=1
	decl	%edi
	movl	%edi, %eax
	cmpq	%rax, %rdx
	je	LBB61_69
	jmp	LBB61_75
LBB61_76:
	movq	$0, -704(%rbp)
	movslq	(%r15), %r13
	cmpq	$65, %r13
	jl	LBB61_78
## %bb.77:
	leaq	4(,%r13,8), %rdi
	callq	_malloc
	movq	-696(%rbp), %rsi                ## 8-byte Reload
	movq	%rax, %r12
LBB61_78:
	movl	4(%r15), %eax
	movq	-824(%rbp), %rdx                ## 8-byte Reload
	leal	(%rax,%rdx), %ecx
	vcvtsi2ss	%ecx, %xmm9, %xmm0
	vaddss	LCPI61_3(%rip), %xmm0, %xmm0
	movslq	%r14d, %rcx
	leaq	(%rcx,%rcx,4), %rcx
	vmovss	%xmm0, 4(%rsi,%rcx,4)
	testl	%eax, %eax
	movq	-640(%rbp), %r14                ## 8-byte Reload
	jle	LBB61_178
## %bb.79:
	leaq	(%r12,%r13,4), %r15
	vcvtsi2ssl	-848(%rbp), %xmm9, %xmm0 ## 4-byte Folded Reload
	vmovss	%xmm0, -792(%rbp)               ## 4-byte Spill
	leaq	4(%r15), %rax
	movq	%rax, -832(%rbp)                ## 8-byte Spill
	xorl	%ebx, %ebx
	vbroadcastss	LCPI61_6(%rip), %xmm15  ## xmm15 = [NaN,NaN,NaN,NaN]
	movq	-696(%rbp), %rax                ## 8-byte Reload
	movq	%rax, -776(%rbp)                ## 8-byte Spill
	movl	%edx, %ecx
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movq	%rax, -760(%rbp)                ## 8-byte Spill
	movl	%edx, %eax
	movl	$0, -708(%rbp)                  ## 4-byte Folded Spill
	xorl	%ecx, %ecx
	movq	%rcx, -664(%rbp)                ## 8-byte Spill
	movq	%r15, -784(%rbp)                ## 8-byte Spill
	vmovaps	%xmm15, -736(%rbp)              ## 16-byte Spill
	jmp	LBB61_81
	.p2align	4, 0x90
LBB61_80:                               ##   in Loop: Header=BB61_81 Depth=1
	movl	-788(%rbp), %eax                ## 4-byte Reload
	incl	%eax
	incl	%r8d
	cmpl	4(%rdi), %r8d
	jge	LBB61_176
LBB61_81:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB61_84 Depth 2
                                        ##     Child Loop BB61_157 Depth 2
                                        ##     Child Loop BB61_94 Depth 2
                                        ##       Child Loop BB61_116 Depth 3
                                        ##       Child Loop BB61_145 Depth 3
                                        ##     Child Loop BB61_173 Depth 2
                                        ##     Child Loop BB61_175 Depth 2
	movl	%r8d, -752(%rbp)                ## 4-byte Spill
	movl	%eax, -788(%rbp)                ## 4-byte Spill
	vxorps	%xmm10, %xmm10, %xmm10
	vcvtsi2ss	%eax, %xmm10, %xmm0
	vmovss	%xmm0, -580(%rbp)               ## 4-byte Spill
	vaddss	LCPI61_3(%rip), %xmm0, %xmm0
	vmovss	%xmm0, -624(%rbp)               ## 4-byte Spill
	movslq	%r13d, %r14
	leaq	(,%r14,4), %rsi
	movq	%r12, %rdi
	callq	___bzero
	leaq	4(,%r14,4), %rsi
	movq	%r15, %rdi
	callq	___bzero
	testq	%rbx, %rbx
	je	LBB61_88
## %bb.82:                              ##   in Loop: Header=BB61_81 Depth=1
	leaq	-704(%rbp), %rax
	vmovaps	-736(%rbp), %xmm15              ## 16-byte Reload
	vmovss	LCPI61_9(%rip), %xmm6           ## xmm6 = mem[0],zero,zero,zero
	vxorps	%xmm0, %xmm0, %xmm0
	movq	-776(%rbp), %r14                ## 8-byte Reload
	movl	-752(%rbp), %r8d                ## 4-byte Reload
	vmovss	-580(%rbp), %xmm9               ## 4-byte Reload
                                        ## xmm9 = mem[0],zero,zero,zero
	jmp	LBB61_84
	.p2align	4, 0x90
LBB61_83:                               ##   in Loop: Header=BB61_84 Depth=2
	movq	%rbx, %rax
	movq	(%rax), %rbx
	testq	%rbx, %rbx
	je	LBB61_87
LBB61_84:                               ##   Parent Loop BB61_81 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vucomiss	28(%rbx), %xmm9
	jb	LBB61_83
## %bb.85:                              ##   in Loop: Header=BB61_84 Depth=2
	movq	(%rbx), %rcx
	movq	%rcx, (%rax)
	vxorps	%xmm1, %xmm1, %xmm1
	vmovss	20(%rbx), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vucomiss	%xmm1, %xmm0
	vxorps	%xmm0, %xmm0, %xmm0
	jne	LBB61_86
	jnp	LBB61_187
LBB61_86:                               ##   in Loop: Header=BB61_84 Depth=2
	movl	$0, 20(%rbx)
	movq	-664(%rbp), %rcx                ## 8-byte Reload
	movq	%rcx, (%rbx)
	movq	%rbx, -664(%rbp)                ## 8-byte Spill
	movq	(%rax), %rbx
	testq	%rbx, %rbx
	jne	LBB61_84
LBB61_87:                               ##   in Loop: Header=BB61_81 Depth=1
	vmovss	4(%r14), %xmm3                  ## xmm3 = mem[0],zero,zero,zero
	vmovss	-624(%rbp), %xmm1               ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vucomiss	%xmm3, %xmm1
	jb	LBB61_89
	jmp	LBB61_154
	.p2align	4, 0x90
LBB61_88:                               ##   in Loop: Header=BB61_81 Depth=1
	vmovaps	-736(%rbp), %xmm15              ## 16-byte Reload
	vmovss	LCPI61_9(%rip), %xmm6           ## xmm6 = mem[0],zero,zero,zero
	vxorps	%xmm0, %xmm0, %xmm0
	movq	-776(%rbp), %r14                ## 8-byte Reload
	movl	-752(%rbp), %r8d                ## 4-byte Reload
	vmovss	-580(%rbp), %xmm9               ## 4-byte Reload
                                        ## xmm9 = mem[0],zero,zero,zero
	vmovss	4(%r14), %xmm3                  ## xmm3 = mem[0],zero,zero,zero
	vmovss	-624(%rbp), %xmm1               ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vucomiss	%xmm3, %xmm1
	jae	LBB61_154
	.p2align	4, 0x90
LBB61_89:                               ##   in Loop: Header=BB61_81 Depth=1
	movq	%r14, -776(%rbp)                ## 8-byte Spill
	movq	-704(%rbp), %r15
	testq	%r15, %r15
	je	LBB61_171
## %bb.90:                              ##   in Loop: Header=BB61_81 Depth=1
	vxorps	%xmm10, %xmm10, %xmm10
	vcvtsi2ss	%r13d, %xmm10, %xmm1
	vmovss	%xmm1, -668(%rbp)               ## 4-byte Spill
	jmp	LBB61_94
LBB61_91:                               ##   in Loop: Header=BB61_94 Depth=2
	movq	-784(%rbp), %rdi                ## 8-byte Reload
	xorl	%esi, %esi
	movq	%r15, %rdx
	vmovaps	%xmm5, %xmm0
	vmovaps	%xmm9, %xmm1
	vmovaps	%xmm5, %xmm2
LBB61_92:                               ##   in Loop: Header=BB61_94 Depth=2
	vmovss	-624(%rbp), %xmm3               ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff
	vmovss	-580(%rbp), %xmm9               ## 4-byte Reload
                                        ## xmm9 = mem[0],zero,zero,zero
	vmovaps	-736(%rbp), %xmm15              ## 16-byte Reload
	vmovss	LCPI61_9(%rip), %xmm6           ## xmm6 = mem[0],zero,zero,zero
	movl	-752(%rbp), %r8d                ## 4-byte Reload
LBB61_93:                               ##   in Loop: Header=BB61_94 Depth=2
	movq	(%r15), %r15
	testq	%r15, %r15
	movl	$255, %ebx
	vxorps	%xmm0, %xmm0, %xmm0
	je	LBB61_153
LBB61_94:                               ##   Parent Loop BB61_81 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB61_116 Depth 3
                                        ##       Child Loop BB61_145 Depth 3
	vmovss	28(%r15), %xmm1                 ## xmm1 = mem[0],zero,zero,zero
	vucomiss	%xmm9, %xmm1
	jb	LBB61_186
## %bb.95:                              ##   in Loop: Header=BB61_94 Depth=2
	vmovss	8(%r15), %xmm5                  ## xmm5 = mem[0],zero,zero,zero
	vmovss	12(%r15), %xmm7                 ## xmm7 = mem[0],zero,zero,zero
	vpxor	%xmm8, %xmm8, %xmm8
	vucomiss	%xmm0, %xmm7
	jne	LBB61_99
	jp	LBB61_99
## %bb.96:                              ##   in Loop: Header=BB61_94 Depth=2
	vmovss	-668(%rbp), %xmm0               ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vucomiss	%xmm5, %xmm0
	jbe	LBB61_93
## %bb.97:                              ##   in Loop: Header=BB61_94 Depth=2
	vucomiss	%xmm8, %xmm5
	jb	LBB61_91
## %bb.98:                              ##   in Loop: Header=BB61_94 Depth=2
	vcvttss2si	%xmm5, %ebx
	movq	%r12, %rdi
	movl	%ebx, %esi
	movq	%r15, %rdx
	vmovaps	%xmm5, %xmm0
	vmovaps	%xmm9, %xmm1
	vmovaps	%xmm5, %xmm2
	vmovss	-624(%rbp), %xmm3               ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovaps	%xmm5, -816(%rbp)               ## 16-byte Spill
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff
	incl	%ebx
	movq	-784(%rbp), %rdi                ## 8-byte Reload
	movl	%ebx, %esi
	movq	%r15, %rdx
	vmovaps	-816(%rbp), %xmm0               ## 16-byte Reload
	vmovss	-580(%rbp), %xmm1               ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovaps	%xmm0, %xmm2
	jmp	LBB61_92
	.p2align	4, 0x90
LBB61_99:                               ##   in Loop: Header=BB61_94 Depth=2
	vmovss	24(%r15), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vmovss	-624(%rbp), %xmm2               ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vucomiss	%xmm0, %xmm2
	jb	LBB61_189
## %bb.100:                             ##   in Loop: Header=BB61_94 Depth=2
	vaddss	%xmm5, %xmm7, %xmm11
	vsubss	%xmm9, %xmm0, %xmm2
	vmulss	%xmm2, %xmm7, %xmm2
	vaddss	%xmm5, %xmm2, %xmm2
	vcmpltss	%xmm0, %xmm9, %xmm3
	vblendvps	%xmm3, %xmm2, %xmm5, %xmm3
	vucomiss	%xmm8, %xmm3
	jb	LBB61_110
## %bb.101:                             ##   in Loop: Header=BB61_94 Depth=2
	vsubss	%xmm9, %xmm1, %xmm2
	vmulss	%xmm2, %xmm7, %xmm2
	vaddss	%xmm5, %xmm2, %xmm2
	vcmpltss	-624(%rbp), %xmm1, %xmm4        ## 4-byte Folded Reload
	vblendvps	%xmm4, %xmm2, %xmm11, %xmm13
	vucomiss	%xmm8, %xmm13
	jb	LBB61_110
## %bb.102:                             ##   in Loop: Header=BB61_94 Depth=2
	vmovss	-668(%rbp), %xmm2               ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vucomiss	%xmm3, %xmm2
	jbe	LBB61_110
## %bb.103:                             ##   in Loop: Header=BB61_94 Depth=2
	vmovss	-668(%rbp), %xmm2               ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vucomiss	%xmm13, %xmm2
	jbe	LBB61_110
## %bb.104:                             ##   in Loop: Header=BB61_94 Depth=2
	vmaxss	%xmm9, %xmm0, %xmm8
	vcvttss2si	%xmm3, %eax
	vminss	-624(%rbp), %xmm1, %xmm12       ## 4-byte Folded Reload
	vcvttss2si	%xmm13, %ecx
	cmpl	%ecx, %eax
	jne	LBB61_133
## %bb.105:                             ##   in Loop: Header=BB61_94 Depth=2
	testl	%eax, %eax
	vxorps	%xmm0, %xmm0, %xmm0
	js	LBB61_191
## %bb.106:                             ##   in Loop: Header=BB61_94 Depth=2
	cmpl	%eax, %r13d
	jle	LBB61_191
## %bb.107:                             ##   in Loop: Header=BB61_94 Depth=2
	vxorps	%xmm10, %xmm10, %xmm10
	vcvtsi2ss	%eax, %xmm10, %xmm2
	vaddss	LCPI61_3(%rip), %xmm2, %xmm4
	vsubss	%xmm3, %xmm4, %xmm2
	vucomiss	%xmm0, %xmm2
	jb	LBB61_193
## %bb.108:                             ##   in Loop: Header=BB61_94 Depth=2
	vsubss	%xmm13, %xmm4, %xmm3
	vucomiss	%xmm0, %xmm3
	jb	LBB61_195
## %bb.109:                             ##   in Loop: Header=BB61_94 Depth=2
	vsubss	%xmm8, %xmm12, %xmm0
	vmulss	20(%r15), %xmm0, %xmm0
	vaddss	%xmm3, %xmm2, %xmm1
	vmulss	LCPI61_5(%rip), %xmm1, %xmm1
	vmulss	%xmm0, %xmm1, %xmm1
	movl	%eax, %eax
	vaddss	(%r12,%rax,4), %xmm1, %xmm1
	vmovss	%xmm1, (%r12,%rax,4)
	jmp	LBB61_152
	.p2align	4, 0x90
LBB61_110:                              ##   in Loop: Header=BB61_94 Depth=2
	testl	%r13d, %r13d
	jle	LBB61_93
## %bb.111:                             ##   in Loop: Header=BB61_94 Depth=2
	xorl	%r14d, %r14d
	vmovaps	%xmm5, -816(%rbp)               ## 16-byte Spill
	vmovaps	%xmm7, -848(%rbp)               ## 16-byte Spill
	vmovaps	%xmm11, -688(%rbp)              ## 16-byte Spill
	.p2align	4, 0x90
LBB61_116:                              ##   Parent Loop BB61_81 Depth=1
                                        ##     Parent Loop BB61_94 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movl	%r14d, %ebx
	vxorps	%xmm10, %xmm10, %xmm10
	vcvtsi2ss	%r14d, %xmm10, %xmm4
	leal	1(%rbx), %r14d
	vxorps	%xmm10, %xmm10, %xmm10
	vcvtsi2ss	%r14d, %xmm10, %xmm2
	vsubss	%xmm5, %xmm4, %xmm0
	vdivss	%xmm7, %xmm0, %xmm0
	vaddss	%xmm0, %xmm9, %xmm6
	vsubss	%xmm5, %xmm2, %xmm0
	vdivss	%xmm7, %xmm0, %xmm0
	vaddss	%xmm0, %xmm9, %xmm3
	vucomiss	%xmm5, %xmm4
	vmovss	%xmm6, -592(%rbp)               ## 4-byte Spill
	vmovss	%xmm4, -600(%rbp)               ## 4-byte Spill
	jbe	LBB61_120
## %bb.117:                             ##   in Loop: Header=BB61_116 Depth=3
	vucomiss	%xmm2, %xmm11
	jbe	LBB61_120
## %bb.118:                             ##   in Loop: Header=BB61_116 Depth=3
	movq	%r12, %rdi
	movl	%ebx, %esi
	movq	%r15, %rdx
	vmovaps	%xmm5, %xmm0
	vmovaps	%xmm9, %xmm1
	vmovss	%xmm2, -608(%rbp)               ## 4-byte Spill
	vmovaps	%xmm4, %xmm2
	vmovss	%xmm3, -656(%rbp)               ## 4-byte Spill
	vmovaps	%xmm6, %xmm3
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff
	movq	%r12, %rdi
	movl	%ebx, %esi
	movq	%r15, %rdx
	vmovss	-600(%rbp), %xmm0               ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-592(%rbp), %xmm1               ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovss	-608(%rbp), %xmm2               ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-656(%rbp), %xmm3               ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
LBB61_119:                              ##   in Loop: Header=BB61_116 Depth=3
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff
	movq	%r12, %rdi
	movl	%ebx, %esi
	movq	%r15, %rdx
	vmovss	-608(%rbp), %xmm0               ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-656(%rbp), %xmm1               ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	jmp	LBB61_114
	.p2align	4, 0x90
LBB61_120:                              ##   in Loop: Header=BB61_116 Depth=3
	vucomiss	%xmm11, %xmm4
	jbe	LBB61_123
## %bb.121:                             ##   in Loop: Header=BB61_116 Depth=3
	vucomiss	%xmm2, %xmm5
	jbe	LBB61_123
## %bb.122:                             ##   in Loop: Header=BB61_116 Depth=3
	movq	%r12, %rdi
	movl	%ebx, %esi
	movq	%r15, %rdx
	vmovaps	%xmm5, %xmm0
	vmovaps	%xmm9, %xmm1
	vmovss	%xmm2, -608(%rbp)               ## 4-byte Spill
	vmovss	%xmm3, -656(%rbp)               ## 4-byte Spill
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff
	movq	%r12, %rdi
	movl	%ebx, %esi
	movq	%r15, %rdx
	vmovss	-608(%rbp), %xmm0               ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-656(%rbp), %xmm1               ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovss	-600(%rbp), %xmm2               ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-592(%rbp), %xmm3               ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	jmp	LBB61_113
	.p2align	4, 0x90
LBB61_123:                              ##   in Loop: Header=BB61_116 Depth=3
	vucomiss	%xmm5, %xmm4
	jbe	LBB61_125
## %bb.124:                             ##   in Loop: Header=BB61_116 Depth=3
	vucomiss	%xmm4, %xmm11
	ja	LBB61_112
LBB61_125:                              ##   in Loop: Header=BB61_116 Depth=3
	vucomiss	%xmm11, %xmm4
	jbe	LBB61_127
## %bb.126:                             ##   in Loop: Header=BB61_116 Depth=3
	vucomiss	%xmm4, %xmm5
	jbe	LBB61_127
LBB61_112:                              ##   in Loop: Header=BB61_116 Depth=3
	movq	%r12, %rdi
	movl	%ebx, %esi
	movq	%r15, %rdx
	vmovaps	%xmm5, %xmm0
	vmovaps	%xmm9, %xmm1
	vmovaps	%xmm4, %xmm2
	vmovaps	%xmm6, %xmm3
LBB61_113:                              ##   in Loop: Header=BB61_116 Depth=3
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff
	movq	%r12, %rdi
	movl	%ebx, %esi
	movq	%r15, %rdx
	vmovss	-600(%rbp), %xmm0               ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-592(%rbp), %xmm1               ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
LBB61_114:                              ##   in Loop: Header=BB61_116 Depth=3
	vmovaps	-688(%rbp), %xmm2               ## 16-byte Reload
LBB61_115:                              ##   in Loop: Header=BB61_116 Depth=3
	vmovss	-624(%rbp), %xmm3               ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff
	cmpl	%r14d, %r13d
	vmovaps	-736(%rbp), %xmm15              ## 16-byte Reload
	vmovss	LCPI61_9(%rip), %xmm6           ## xmm6 = mem[0],zero,zero,zero
	movl	-752(%rbp), %r8d                ## 4-byte Reload
	vmovss	-580(%rbp), %xmm9               ## 4-byte Reload
                                        ## xmm9 = mem[0],zero,zero,zero
	vmovaps	-816(%rbp), %xmm5               ## 16-byte Reload
	vmovaps	-848(%rbp), %xmm7               ## 16-byte Reload
	vmovaps	-688(%rbp), %xmm11              ## 16-byte Reload
	jne	LBB61_116
	jmp	LBB61_93
LBB61_127:                              ##   in Loop: Header=BB61_116 Depth=3
	vucomiss	%xmm5, %xmm2
	jbe	LBB61_129
## %bb.128:                             ##   in Loop: Header=BB61_116 Depth=3
	vucomiss	%xmm2, %xmm11
	ja	LBB61_131
LBB61_129:                              ##   in Loop: Header=BB61_116 Depth=3
	vucomiss	%xmm11, %xmm2
	jbe	LBB61_132
## %bb.130:                             ##   in Loop: Header=BB61_116 Depth=3
	vucomiss	%xmm2, %xmm5
	jbe	LBB61_132
LBB61_131:                              ##   in Loop: Header=BB61_116 Depth=3
	movq	%r12, %rdi
	movl	%ebx, %esi
	movq	%r15, %rdx
	vmovaps	%xmm5, %xmm0
	vmovaps	%xmm9, %xmm1
	vmovss	%xmm2, -608(%rbp)               ## 4-byte Spill
	vmovss	%xmm3, -656(%rbp)               ## 4-byte Spill
	jmp	LBB61_119
LBB61_132:                              ##   in Loop: Header=BB61_116 Depth=3
	movq	%r12, %rdi
	movl	%ebx, %esi
	movq	%r15, %rdx
	vmovaps	%xmm5, %xmm0
	vmovaps	%xmm9, %xmm1
	vmovaps	%xmm11, %xmm2
	jmp	LBB61_115
LBB61_133:                              ##   in Loop: Header=BB61_94 Depth=2
	vmovss	16(%r15), %xmm14                ## xmm14 = mem[0],zero,zero,zero
	vucomiss	%xmm13, %xmm3
	jbe	LBB61_135
## %bb.134:                             ##   in Loop: Header=BB61_94 Depth=2
	vsubss	%xmm9, %xmm8, %xmm0
	vsubss	%xmm9, %xmm12, %xmm4
	vmovss	-624(%rbp), %xmm2               ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vsubss	%xmm0, %xmm2, %xmm12
	vsubss	%xmm4, %xmm2, %xmm8
	vbroadcastss	LCPI61_2(%rip), %xmm0   ## xmm0 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vxorps	%xmm0, %xmm7, %xmm7
	vxorps	%xmm0, %xmm14, %xmm14
	vmovaps	%xmm3, %xmm5
	jmp	LBB61_136
LBB61_135:                              ##   in Loop: Header=BB61_94 Depth=2
	vmovaps	%xmm13, %xmm0
	vmovaps	%xmm3, %xmm13
	vmovaps	%xmm5, %xmm11
	vmovaps	%xmm0, %xmm5
LBB61_136:                              ##   in Loop: Header=BB61_94 Depth=2
	vxorps	%xmm0, %xmm0, %xmm0
	vucomiss	%xmm0, %xmm14
	jb	LBB61_192
## %bb.137:                             ##   in Loop: Header=BB61_94 Depth=2
	vucomiss	%xmm0, %xmm7
	jb	LBB61_194
## %bb.138:                             ##   in Loop: Header=BB61_94 Depth=2
	vcvttss2si	%xmm13, %ecx
	vcvttss2si	%xmm5, %eax
	leal	1(%rcx), %edx
	vxorps	%xmm10, %xmm10, %xmm10
	vcvtsi2ss	%edx, %xmm10, %xmm0
	vsubss	%xmm11, %xmm0, %xmm2
	vmulss	%xmm2, %xmm14, %xmm2
	vaddss	%xmm2, %xmm9, %xmm2
	vcvttps2dq	%xmm5, %xmm3
	vcvtdq2ps	%xmm3, %xmm10
	vsubss	%xmm11, %xmm10, %xmm3
	vmulss	%xmm3, %xmm14, %xmm3
	vmovss	-624(%rbp), %xmm1               ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vminss	%xmm2, %xmm1, %xmm2
	vmovss	20(%r15), %xmm11                ## xmm11 = mem[0],zero,zero,zero
	vsubss	%xmm8, %xmm2, %xmm4
	vmulss	%xmm4, %xmm11, %xmm4
	vsubss	%xmm13, %xmm0, %xmm0
	vmulss	%xmm4, %xmm0, %xmm0
	vmulss	LCPI61_5(%rip), %xmm0, %xmm0
	movslq	%ecx, %rsi
	vaddss	(%r12,%rsi,4), %xmm0, %xmm0
	vaddss	%xmm3, %xmm9, %xmm13
	vmovss	%xmm0, (%r12,%rsi,4)
	vucomiss	%xmm1, %xmm13
	jbe	LBB61_140
## %bb.139:                             ##   in Loop: Header=BB61_94 Depth=2
	vmovss	-624(%rbp), %xmm13              ## 4-byte Reload
                                        ## xmm13 = mem[0],zero,zero,zero
	vsubss	%xmm2, %xmm13, %xmm0
	movl	%eax, %esi
	subl	%edx, %esi
	vcvtsi2ss	%esi, %xmm9, %xmm2
	vdivss	%xmm2, %xmm0, %xmm14
LBB61_140:                              ##   in Loop: Header=BB61_94 Depth=2
	cmpl	%eax, %edx
	jge	LBB61_146
## %bb.141:                             ##   in Loop: Header=BB61_94 Depth=2
	vmulss	%xmm14, %xmm11, %xmm3
	vmovss	LCPI61_5(%rip), %xmm1           ## xmm1 = mem[0],zero,zero,zero
	vmulss	%xmm1, %xmm3, %xmm2
	movslq	%edx, %rdx
	movl	%ecx, %edi
	notl	%edi
	addl	%eax, %edi
	leal	-2(%rax), %esi
	testb	$1, %dil
	je	LBB61_143
## %bb.142:                             ##   in Loop: Header=BB61_94 Depth=2
	vaddss	%xmm4, %xmm2, %xmm0
	vaddss	(%r12,%rdx,4), %xmm0, %xmm0
	vmovss	%xmm0, (%r12,%rdx,4)
	vaddss	%xmm4, %xmm3, %xmm4
	incq	%rdx
LBB61_143:                              ##   in Loop: Header=BB61_94 Depth=2
	cmpl	%ecx, %esi
	je	LBB61_147
## %bb.144:                             ##   in Loop: Header=BB61_94 Depth=2
	movl	%eax, %ecx
	.p2align	4, 0x90
LBB61_145:                              ##   Parent Loop BB61_81 Depth=1
                                        ##     Parent Loop BB61_94 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vaddss	%xmm4, %xmm2, %xmm0
	vaddss	(%r12,%rdx,4), %xmm0, %xmm0
	vmovss	%xmm0, (%r12,%rdx,4)
	vaddss	%xmm4, %xmm3, %xmm0
	vaddss	%xmm0, %xmm2, %xmm4
	vaddss	4(%r12,%rdx,4), %xmm4, %xmm4
	vmovss	%xmm4, 4(%r12,%rdx,4)
	vaddss	%xmm0, %xmm3, %xmm4
	addq	$2, %rdx
	cmpl	%edx, %ecx
	jne	LBB61_145
	jmp	LBB61_147
LBB61_146:                              ##   in Loop: Header=BB61_94 Depth=2
	vmovss	LCPI61_5(%rip), %xmm1           ## xmm1 = mem[0],zero,zero,zero
LBB61_147:                              ##   in Loop: Header=BB61_94 Depth=2
	vandps	%xmm4, %xmm15, %xmm0
	vmovss	LCPI61_7(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vucomiss	%xmm0, %xmm2
	jb	LBB61_196
## %bb.148:                             ##   in Loop: Header=BB61_94 Depth=2
	vaddss	LCPI61_8(%rip), %xmm13, %xmm0
	vucomiss	%xmm0, %xmm12
	jbe	LBB61_197
## %bb.149:                             ##   in Loop: Header=BB61_94 Depth=2
	vaddss	LCPI61_3(%rip), %xmm10, %xmm3
	vsubss	%xmm10, %xmm3, %xmm2
	vxorps	%xmm0, %xmm0, %xmm0
	vucomiss	%xmm0, %xmm2
	jb	LBB61_198
## %bb.150:                             ##   in Loop: Header=BB61_94 Depth=2
	vsubss	%xmm5, %xmm3, %xmm3
	vucomiss	%xmm0, %xmm3
	jb	LBB61_199
## %bb.151:                             ##   in Loop: Header=BB61_94 Depth=2
	vsubss	%xmm13, %xmm12, %xmm0
	vaddss	%xmm3, %xmm2, %xmm2
	vmulss	%xmm1, %xmm2, %xmm2
	vmulss	%xmm0, %xmm2, %xmm0
	vmulss	%xmm0, %xmm11, %xmm0
	vaddss	%xmm4, %xmm0, %xmm0
	cltq
	vaddss	(%r12,%rax,4), %xmm0, %xmm0
	vmovss	%xmm0, (%r12,%rax,4)
	vsubss	%xmm8, %xmm12, %xmm0
	vmulss	%xmm0, %xmm11, %xmm0
LBB61_152:                              ##   in Loop: Header=BB61_94 Depth=2
	movq	-832(%rbp), %rcx                ## 8-byte Reload
	vaddss	(%rcx,%rax,4), %xmm0, %xmm0
	vmovss	%xmm0, (%rcx,%rax,4)
	jmp	LBB61_93
	.p2align	4, 0x90
LBB61_153:                              ##   in Loop: Header=BB61_81 Depth=1
	movq	-768(%rbp), %rdi                ## 8-byte Reload
	movl	(%rdi), %r13d
	testl	%r13d, %r13d
	movq	-640(%rbp), %r14                ## 8-byte Reload
	movq	-784(%rbp), %r15                ## 8-byte Reload
	jg	LBB61_172
	jmp	LBB61_174
	.p2align	4, 0x90
LBB61_154:                              ##   in Loop: Header=BB61_81 Depth=1
	cmpl	$0, -824(%rbp)                  ## 4-byte Folded Reload
	setne	%al
	testl	%r8d, %r8d
	sete	%bl
	andb	%al, %bl
	movq	-664(%rbp), %rax                ## 8-byte Reload
	jmp	LBB61_157
	.p2align	4, 0x90
LBB61_155:                              ##   in Loop: Header=BB61_157 Depth=2
	movq	%rax, %rcx
	movq	%rax, -664(%rbp)                ## 8-byte Spill
LBB61_156:                              ##   in Loop: Header=BB61_157 Depth=2
	vmovss	24(%r14), %xmm3                 ## xmm3 = mem[0],zero,zero,zero
	addq	$20, %r14
	vmovss	-624(%rbp), %xmm1               ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vucomiss	%xmm3, %xmm1
	jb	LBB61_89
LBB61_157:                              ##   Parent Loop BB61_81 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovss	12(%r14), %xmm4                 ## xmm4 = mem[0],zero,zero,zero
	vucomiss	%xmm4, %xmm3
	jne	LBB61_158
	jnp	LBB61_155
LBB61_158:                              ##   in Loop: Header=BB61_157 Depth=2
	testq	%rax, %rax
	je	LBB61_160
## %bb.159:                             ##   in Loop: Header=BB61_157 Depth=2
	movq	(%rax), %rcx
	jmp	LBB61_165
	.p2align	4, 0x90
LBB61_160:                              ##   in Loop: Header=BB61_157 Depth=2
	movl	-708(%rbp), %eax                ## 4-byte Reload
	testl	%eax, %eax
	je	LBB61_162
## %bb.161:                             ##   in Loop: Header=BB61_157 Depth=2
	decl	%eax
	movq	-760(%rbp), %rcx                ## 8-byte Reload
	jmp	LBB61_164
LBB61_162:                              ##   in Loop: Header=BB61_157 Depth=2
	vmovss	%xmm4, -600(%rbp)               ## 4-byte Spill
	vmovss	%xmm3, -592(%rbp)               ## 4-byte Spill
	movl	$25608, %edi                    ## imm = 0x6408
	callq	_malloc
	testq	%rax, %rax
	je	LBB61_190
## %bb.163:                             ##   in Loop: Header=BB61_157 Depth=2
	movq	-760(%rbp), %rcx                ## 8-byte Reload
	movq	%rcx, (%rax)
	movq	%rax, %rcx
	movl	$799, %eax                      ## imm = 0x31F
	vmovaps	-736(%rbp), %xmm15              ## 16-byte Reload
	vmovss	LCPI61_9(%rip), %xmm6           ## xmm6 = mem[0],zero,zero,zero
	movl	-752(%rbp), %r8d                ## 4-byte Reload
	vmovss	-580(%rbp), %xmm9               ## 4-byte Reload
                                        ## xmm9 = mem[0],zero,zero,zero
	vmovss	-592(%rbp), %xmm3               ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovss	-600(%rbp), %xmm4               ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
LBB61_164:                              ##   in Loop: Header=BB61_157 Depth=2
	movl	%eax, -708(%rbp)                ## 4-byte Spill
	cltq
	shlq	$5, %rax
	movq	%rcx, %rdx
	movq	%rcx, -760(%rbp)                ## 8-byte Spill
	addq	%rcx, %rax
	addq	$8, %rax
	xorl	%ecx, %ecx
LBB61_165:                              ##   in Loop: Header=BB61_157 Depth=2
	movq	%rcx, -664(%rbp)                ## 8-byte Spill
	vmovss	(%r14), %xmm0                   ## xmm0 = mem[0],zero,zero,zero
	vmovss	8(%r14), %xmm1                  ## xmm1 = mem[0],zero,zero,zero
	vsubss	%xmm0, %xmm1, %xmm1
	vsubss	%xmm3, %xmm4, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vmovss	%xmm1, 12(%rax)
	vxorps	%xmm2, %xmm2, %xmm2
	vucomiss	%xmm2, %xmm1
	jne	LBB61_166
	jnp	LBB61_167
LBB61_166:                              ##   in Loop: Header=BB61_157 Depth=2
	vmovss	LCPI61_3(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vdivss	%xmm1, %xmm2, %xmm2
LBB61_167:                              ##   in Loop: Header=BB61_157 Depth=2
	vmovss	%xmm2, 16(%rax)
	vsubss	%xmm3, %xmm9, %xmm2
	vmulss	%xmm2, %xmm1, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vsubss	-792(%rbp), %xmm0, %xmm0        ## 4-byte Folded Reload
	vmovss	%xmm0, 8(%rax)
	xorl	%ecx, %ecx
	cmpl	$0, 16(%r14)
	sete	%cl
	leaq	LCPI61_4(%rip), %rdx
	vmovss	(%rdx,%rcx,4), %xmm0            ## xmm0 = mem[0],zero,zero,zero
	vmovss	%xmm0, 20(%rax)
	vmovss	%xmm3, 24(%rax)
	vmovss	%xmm4, 28(%rax)
	movq	$0, (%rax)
	vucomiss	%xmm4, %xmm9
	seta	%cl
	andb	%bl, %cl
	cmpb	$1, %cl
	jne	LBB61_169
## %bb.168:                             ##   in Loop: Header=BB61_157 Depth=2
	vmovss	%xmm9, 28(%rax)
	vmovaps	%xmm9, %xmm4
LBB61_169:                              ##   in Loop: Header=BB61_157 Depth=2
	vucomiss	%xmm9, %xmm4
	vxorps	%xmm0, %xmm0, %xmm0
	jb	LBB61_188
## %bb.170:                             ##   in Loop: Header=BB61_157 Depth=2
	movq	-704(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	%rax, -704(%rbp)
	movq	-664(%rbp), %rax                ## 8-byte Reload
	jmp	LBB61_156
	.p2align	4, 0x90
LBB61_171:                              ##   in Loop: Header=BB61_81 Depth=1
	movq	-768(%rbp), %rdi                ## 8-byte Reload
	movl	$255, %ebx
	testl	%r13d, %r13d
	movq	-640(%rbp), %r14                ## 8-byte Reload
	movq	-784(%rbp), %r15                ## 8-byte Reload
	jle	LBB61_174
LBB61_172:                              ##   in Loop: Header=BB61_81 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	xorl	%eax, %eax
	vmovss	LCPI61_5(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	.p2align	4, 0x90
LBB61_173:                              ##   Parent Loop BB61_81 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vaddss	(%r15,%rax,4), %xmm0, %xmm0
	vaddss	(%r12,%rax,4), %xmm0, %xmm1
	vandps	%xmm1, %xmm15, %xmm1
	vmulss	%xmm6, %xmm1, %xmm1
	vaddss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	cmpl	$255, %ecx
	cmovgel	%ebx, %ecx
	movslq	8(%rdi), %rdx
	movslq	%r8d, %rsi
	imulq	%rdx, %rsi
	addq	16(%rdi), %rsi
	movb	%cl, (%rax,%rsi)
	incq	%rax
	movslq	(%rdi), %r13
	cmpq	%r13, %rax
	jl	LBB61_173
LBB61_174:                              ##   in Loop: Header=BB61_81 Depth=1
	movq	-704(%rbp), %rbx
	movq	%rbx, %rax
	testq	%rbx, %rbx
	je	LBB61_80
	.p2align	4, 0x90
LBB61_175:                              ##   Parent Loop BB61_81 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovss	12(%rax), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vaddss	8(%rax), %xmm0, %xmm0
	vmovss	%xmm0, 8(%rax)
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	LBB61_175
	jmp	LBB61_80
LBB61_176:
	movq	-760(%rbp), %rdi                ## 8-byte Reload
	testq	%rdi, %rdi
	je	LBB61_178
	.p2align	4, 0x90
LBB61_177:                              ## =>This Inner Loop Header: Depth=1
	movq	(%rdi), %rbx
	callq	_free
	movq	%rbx, %rdi
	testq	%rbx, %rbx
	jne	LBB61_177
LBB61_178:
	leaq	-576(%rbp), %rax
	cmpq	%rax, %r12
	je	LBB61_180
## %bb.179:
	movq	%r12, %rdi
	callq	_free
LBB61_180:
	movq	-696(%rbp), %rdi                ## 8-byte Reload
	callq	_free
LBB61_181:
	movq	%r14, %rdi
	callq	_free
	movq	-632(%rbp), %rdi                ## 8-byte Reload
LBB61_182:
	callq	_free
LBB61_183:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB61_200
## %bb.184:
	addq	$824, %rsp                      ## imm = 0x338
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
LBB61_185:
	vxorps	%xmm0, %xmm0, %xmm0
	xorl	%edx, %edx
	vxorps	%xmm1, %xmm1, %xmm1
	vpxor	%xmm2, %xmm2, %xmm2
	vpxor	%xmm3, %xmm3, %xmm3
	testb	$1, %cl
	jne	LBB61_40
	jmp	LBB61_41
LBB61_186:
	callq	_stbtt_Rasterize.cold.1
	jmp	LBB61_183
LBB61_187:
	callq	_stbtt_Rasterize.cold.14
	jmp	LBB61_183
LBB61_188:
	callq	_stbtt_Rasterize.cold.13
	jmp	LBB61_183
LBB61_189:
	callq	_stbtt_Rasterize.cold.2
	jmp	LBB61_183
LBB61_190:
	callq	_stbtt_Rasterize.cold.12
	jmp	LBB61_183
LBB61_191:
	callq	_stbtt_Rasterize.cold.3
	jmp	LBB61_183
LBB61_192:
	callq	_stbtt_Rasterize.cold.6
	jmp	LBB61_183
LBB61_193:
	callq	_stbtt_Rasterize.cold.4
	jmp	LBB61_183
LBB61_194:
	callq	_stbtt_Rasterize.cold.7
	jmp	LBB61_183
LBB61_195:
	callq	_stbtt_Rasterize.cold.5
	jmp	LBB61_183
LBB61_196:
	callq	_stbtt_Rasterize.cold.8
	jmp	LBB61_183
LBB61_197:
	callq	_stbtt_Rasterize.cold.9
	jmp	LBB61_183
LBB61_198:
	callq	_stbtt_Rasterize.cold.10
	jmp	LBB61_183
LBB61_199:
	callq	_stbtt_Rasterize.cold.11
	jmp	LBB61_183
LBB61_200:
	vzeroupper
	callq	___stack_chk_fail
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L61_0_set_15, LBB61_15-LJTI61_0
.set L61_0_set_11, LBB61_11-LJTI61_0
.set L61_0_set_18, LBB61_18-LJTI61_0
.set L61_0_set_19, LBB61_19-LJTI61_0
LJTI61_0:
	.long	L61_0_set_15
	.long	L61_0_set_11
	.long	L61_0_set_18
	.long	L61_0_set_19
.set L61_1_set_28, LBB61_28-LJTI61_1
.set L61_1_set_31, LBB61_31-LJTI61_1
.set L61_1_set_23, LBB61_23-LJTI61_1
.set L61_1_set_32, LBB61_32-LJTI61_1
LJTI61_1:
	.long	L61_1_set_28
	.long	L61_1_set_31
	.long	L61_1_set_23
	.long	L61_1_set_32
	.end_data_region
                                        ## -- End function
	.globl	_stbtt_FreeBitmap               ## -- Begin function stbtt_FreeBitmap
	.p2align	4, 0x90
_stbtt_FreeBitmap:                      ## @stbtt_FreeBitmap
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_free                           ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function stbtt_GetGlyphBitmapSubpixel
LCPI63_0:
	.long	0x3eb33333                      ## float 0.349999994
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_stbtt_GetGlyphBitmapSubpixel
	.p2align	4, 0x90
_stbtt_GetGlyphBitmapSubpixel:          ## @stbtt_GetGlyphBitmapSubpixel
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -136(%rbp)                 ## 8-byte Spill
	movq	%r8, -128(%rbp)                 ## 8-byte Spill
	movq	%rcx, -120(%rbp)                ## 8-byte Spill
	movq	%rdx, %r15
	movl	%esi, %r14d
	vmovss	%xmm3, -48(%rbp)                ## 4-byte Spill
	vmovss	%xmm2, -44(%rbp)                ## 4-byte Spill
	vmovaps	%xmm1, -112(%rbp)               ## 16-byte Spill
	vmovaps	%xmm0, -96(%rbp)                ## 16-byte Spill
	movq	%rdi, %rbx
	leaq	-56(%rbp), %rdx
	callq	_stbtt_GetGlyphShape
	vxorps	%xmm2, %xmm2, %xmm2
	vmovaps	-96(%rbp), %xmm0                ## 16-byte Reload
	vcmpeqss	%xmm2, %xmm0, %xmm1
	vmovaps	-112(%rbp), %xmm3               ## 16-byte Reload
	vblendvps	%xmm1, %xmm3, %xmm0, %xmm0
	vmovaps	%xmm3, %xmm1
	vucomiss	%xmm2, %xmm3
	jne	LBB63_3
	jp	LBB63_3
## %bb.1:
	vucomiss	%xmm2, %xmm0
	vmovaps	%xmm0, %xmm1
	jne	LBB63_3
	jp	LBB63_3
## %bb.2:
	movq	-56(%rbp), %rdi
	callq	_free
	xorl	%ebx, %ebx
	jmp	LBB63_17
LBB63_3:
	movl	%eax, -96(%rbp)                 ## 4-byte Spill
	leaq	-72(%rbp), %rdx
	leaq	-68(%rbp), %rcx
	leaq	-64(%rbp), %r8
	leaq	-60(%rbp), %r9
	movq	%rbx, %rdi
	movl	%r14d, %esi
	vmovaps	%xmm0, -176(%rbp)               ## 16-byte Spill
	vmovaps	%xmm1, -112(%rbp)               ## 16-byte Spill
	vmovss	-44(%rbp), %xmm2                ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	callq	_stbtt_GetGlyphBitmapBoxSubpixel
	movl	-64(%rbp), %ecx
	movl	-72(%rbp), %r12d
	movl	%ecx, %r13d
	subl	%r12d, %r13d
	movl	%r13d, -160(%rbp)
	movl	-60(%rbp), %edx
	movl	-68(%rbp), %r14d
	movl	%edx, %eax
	subl	%r14d, %eax
	movl	%eax, -156(%rbp)
	testq	%r15, %r15
	je	LBB63_5
## %bb.4:
	movl	%r13d, (%r15)
LBB63_5:
	movq	-120(%rbp), %rbx                ## 8-byte Reload
	testq	%rbx, %rbx
	movq	-136(%rbp), %rsi                ## 8-byte Reload
	movq	-128(%rbp), %rdi                ## 8-byte Reload
	je	LBB63_7
## %bb.6:
	movl	%eax, (%rbx)
LBB63_7:
	testq	%rdi, %rdi
	je	LBB63_9
## %bb.8:
	movl	%r12d, (%rdi)
LBB63_9:
	testq	%rsi, %rsi
	je	LBB63_11
## %bb.10:
	movl	%r14d, (%rsi)
LBB63_11:
	xorl	%ebx, %ebx
	cmpl	%r12d, %ecx
	je	LBB63_16
## %bb.12:
	cmpl	%r14d, %edx
	je	LBB63_16
## %bb.13:
	imull	%r13d, %eax
	movslq	%eax, %rdi
	callq	_malloc
	movq	%rax, -144(%rbp)
	testq	%rax, %rax
	je	LBB63_14
## %bb.15:
	movq	%rax, %rbx
	movl	%r13d, -152(%rbp)
	movq	-56(%rbp), %rsi
	leaq	-160(%rbp), %rdi
	vmovss	LCPI63_0(%rip), %xmm0           ## xmm0 = mem[0],zero,zero,zero
	movl	-96(%rbp), %edx                 ## 4-byte Reload
	vmovaps	-176(%rbp), %xmm1               ## 16-byte Reload
	vmovaps	-112(%rbp), %xmm2               ## 16-byte Reload
	vmovss	-44(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm4                ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	movl	%r12d, %ecx
	movl	%r14d, %r8d
	movl	$1, %r9d
	callq	_stbtt_Rasterize
	jmp	LBB63_16
LBB63_14:
	xorl	%ebx, %ebx
LBB63_16:
	movq	-56(%rbp), %rdi
	callq	_free
LBB63_17:
	movq	%rbx, %rax
	addq	$152, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetGlyphBitmap           ## -- Begin function stbtt_GetGlyphBitmap
	.p2align	4, 0x90
_stbtt_GetGlyphBitmap:                  ## @stbtt_GetGlyphBitmap
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vxorps	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	popq	%rbp
	jmp	_stbtt_GetGlyphBitmapSubpixel   ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function stbtt_MakeGlyphBitmapSubpixel
LCPI65_0:
	.long	0x3eb33333                      ## float 0.349999994
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_stbtt_MakeGlyphBitmapSubpixel
	.p2align	4, 0x90
_stbtt_MakeGlyphBitmapSubpixel:         ## @stbtt_MakeGlyphBitmapSubpixel
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$160, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, %r14d
	vmovss	%xmm3, 44(%rsp)                 ## 4-byte Spill
	vmovss	%xmm2, 40(%rsp)                 ## 4-byte Spill
	vmovss	%xmm1, 36(%rsp)                 ## 4-byte Spill
	vmovss	%xmm0, 32(%rsp)                 ## 4-byte Spill
	movl	%r8d, 52(%rsp)                  ## 4-byte Spill
	movl	%ecx, %r12d
	movl	%edx, %ebx
	movq	%rsi, %r13
	movq	%rdi, %r15
	leaq	56(%rsp), %rdx
	movl	%r9d, %esi
	callq	_stbtt_GetGlyphShape
	movl	%eax, 48(%rsp)                  ## 4-byte Spill
	cmpl	$0, 76(%r15)
	je	LBB65_3
## %bb.1:
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%ymm0, 64(%rsp)
	vmovups	%ymm0, 88(%rsp)
	movl	$1, 64(%rsp)
	leaq	64(%rsp), %rdx
	movq	%r15, %rdi
	movl	%r14d, %esi
	vzeroupper
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx
	movl	%eax, %edx
	testl	%eax, %eax
	je	LBB65_6
## %bb.2:
	movl	88(%rsp), %eax
	movl	100(%rsp), %edx
	jmp	LBB65_6
LBB65_3:
	movq	%r15, %rdi
	movl	%r14d, %esi
	callq	__ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi
	testl	%eax, %eax
	js	LBB65_4
## %bb.5:
	movq	8(%r15), %rcx
	movl	%eax, %edx
	movzbl	3(%rcx,%rdx), %esi
	movzbl	2(%rcx,%rdx), %eax
	shll	$8, %eax
	cwtl
	orl	%esi, %eax
	movzbl	9(%rcx,%rdx), %esi
	movzbl	8(%rcx,%rdx), %ecx
	shll	$8, %ecx
	movswl	%cx, %edx
	orl	%esi, %edx
LBB65_6:
	vmovss	44(%rsp), %xmm4                 ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vmovss	40(%rsp), %xmm3                 ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovss	36(%rsp), %xmm2                 ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	32(%rsp), %xmm1                 ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vcvtsi2ss	%eax, %xmm5, %xmm0
	vmulss	%xmm1, %xmm0, %xmm0
	vaddss	%xmm3, %xmm0, %xmm0
	vroundss	$9, %xmm0, %xmm0, %xmm0
	vcvttss2si	%xmm0, %ecx
	negl	%edx
	vcvtsi2ss	%edx, %xmm5, %xmm0
	vmulss	%xmm2, %xmm0, %xmm0
	vaddss	%xmm4, %xmm0, %xmm0
	vroundss	$9, %xmm0, %xmm0, %xmm0
	vcvttss2si	%xmm0, %r8d
LBB65_7:
	movq	%r13, 80(%rsp)
	movl	%ebx, 64(%rsp)
	movl	%r12d, 68(%rsp)
	movl	52(%rsp), %eax                  ## 4-byte Reload
	movl	%eax, 72(%rsp)
	testl	%ebx, %ebx
	je	LBB65_9
## %bb.8:
	testl	%r12d, %r12d
	je	LBB65_9
## %bb.10:
	movq	56(%rsp), %rbx
	leaq	64(%rsp), %rdi
	vmovss	LCPI65_0(%rip), %xmm0           ## xmm0 = mem[0],zero,zero,zero
	movq	%rbx, %rsi
	movl	48(%rsp), %edx                  ## 4-byte Reload
	movl	$1, %r9d
	callq	_stbtt_Rasterize
	jmp	LBB65_11
LBB65_9:
	movq	56(%rsp), %rbx
LBB65_11:
	movq	%rbx, %rdi
	callq	_free
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB65_4:
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	vmovss	44(%rsp), %xmm4                 ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vmovss	40(%rsp), %xmm3                 ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovss	36(%rsp), %xmm2                 ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	32(%rsp), %xmm1                 ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	jmp	LBB65_7
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_MakeGlyphBitmap          ## -- Begin function stbtt_MakeGlyphBitmap
	.p2align	4, 0x90
_stbtt_MakeGlyphBitmap:                 ## @stbtt_MakeGlyphBitmap
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vxorps	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	popq	%rbp
	jmp	_stbtt_MakeGlyphBitmapSubpixel  ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetCodepointBitmapSubpixel ## -- Begin function stbtt_GetCodepointBitmapSubpixel
	.p2align	4, 0x90
_stbtt_GetCodepointBitmapSubpixel:      ## @stbtt_GetCodepointBitmapSubpixel
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, %r14
	movq	%r8, %r15
	movq	%rcx, %r12
	movq	%rdx, %r13
	vmovss	%xmm3, -56(%rbp)                ## 4-byte Spill
	vmovss	%xmm2, -52(%rbp)                ## 4-byte Spill
	vmovss	%xmm1, -48(%rbp)                ## 4-byte Spill
	vmovss	%xmm0, -44(%rbp)                ## 4-byte Spill
	movq	%rdi, %rbx
	callq	_stbtt_FindGlyphIndex
	movq	%rbx, %rdi
	vmovss	-44(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovss	-52(%rbp), %xmm2                ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-56(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	movl	%eax, %esi
	movq	%r13, %rdx
	movq	%r12, %rcx
	movq	%r15, %r8
	movq	%r14, %r9
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_stbtt_GetGlyphBitmapSubpixel   ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_MakeCodepointBitmapSubpixelPrefilter ## -- Begin function stbtt_MakeCodepointBitmapSubpixelPrefilter
	.p2align	4, 0x90
_stbtt_MakeCodepointBitmapSubpixelPrefilter: ## @stbtt_MakeCodepointBitmapSubpixelPrefilter
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, %ebx
	vmovss	%xmm3, -68(%rbp)                ## 4-byte Spill
	vmovss	%xmm2, -64(%rbp)                ## 4-byte Spill
	vmovss	%xmm1, -60(%rbp)                ## 4-byte Spill
	vmovss	%xmm0, -56(%rbp)                ## 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %r14d
	movq	%rsi, -80(%rbp)                 ## 8-byte Spill
	movq	%rdi, %r15
	movl	40(%rbp), %esi
	callq	_stbtt_FindGlyphIndex
	movl	%r14d, -44(%rbp)                ## 4-byte Spill
	movl	%r14d, %edx
	movq	-80(%rbp), %r14                 ## 8-byte Reload
	subl	%ebx, %edx
	incl	%edx
	movl	%r13d, -48(%rbp)                ## 4-byte Spill
	subl	16(%rbp), %r13d
	incl	%r13d
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%r13d, %ecx
	movl	%r12d, -52(%rbp)                ## 4-byte Spill
	movl	%r12d, %r8d
	vmovss	-56(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-60(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovss	-64(%rbp), %xmm2                ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-68(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	movl	%eax, %r9d
	callq	_stbtt_MakeGlyphBitmapSubpixel
	cmpl	$2, %ebx
	jl	LBB68_2
## %bb.1:
	movq	%r14, %rdi
	movl	-44(%rbp), %esi                 ## 4-byte Reload
	movl	-48(%rbp), %edx                 ## 4-byte Reload
	movl	-52(%rbp), %ecx                 ## 4-byte Reload
	movl	%ebx, %r8d
	callq	__ZL18stbtt__h_prefilterPhiiij
LBB68_2:
	movl	16(%rbp), %r15d
	cmpl	$2, %r15d
	jl	LBB68_4
## %bb.3:
	movq	%r14, %rdi
	movl	-44(%rbp), %esi                 ## 4-byte Reload
	movl	-48(%rbp), %edx                 ## 4-byte Reload
	movl	-52(%rbp), %ecx                 ## 4-byte Reload
	movl	%r15d, %r8d
	callq	__ZL18stbtt__v_prefilterPhiiij
LBB68_4:
	movq	24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	testl	%ebx, %ebx
	je	LBB68_6
## %bb.5:
	movl	$1, %ecx
	subl	%ebx, %ecx
	vcvtsi2ss	%ecx, %xmm4, %xmm1
	vcvtsi2ss	%ebx, %xmm4, %xmm2
	vaddss	%xmm2, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
LBB68_6:
	movq	32(%rbp), %rcx
	vmovss	%xmm1, (%rax)
	testl	%r15d, %r15d
	je	LBB68_8
## %bb.7:
	movl	$1, %eax
	subl	%r15d, %eax
	vcvtsi2ss	%eax, %xmm4, %xmm0
	vcvtsi2ss	%r15d, %xmm4, %xmm1
	vaddss	%xmm1, %xmm1, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
LBB68_8:
	vmovss	%xmm0, (%rcx)
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_MakeGlyphBitmapSubpixelPrefilter ## -- Begin function stbtt_MakeGlyphBitmapSubpixelPrefilter
	.p2align	4, 0x90
_stbtt_MakeGlyphBitmapSubpixelPrefilter: ## @stbtt_MakeGlyphBitmapSubpixelPrefilter
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, %ebx
	movl	%r8d, %r15d
	movl	%ecx, %r12d
	movl	%edx, %r13d
	movq	%rsi, %r14
	movl	40(%rbp), %r9d
	subl	%ebx, %edx
	incl	%edx
	subl	16(%rbp), %ecx
	incl	%ecx
	callq	_stbtt_MakeGlyphBitmapSubpixel
	cmpl	$2, %ebx
	jl	LBB69_2
## %bb.1:
	movq	%r14, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%ebx, %r8d
	callq	__ZL18stbtt__h_prefilterPhiiij
LBB69_2:
	movl	16(%rbp), %edx
	cmpl	$2, %edx
	jl	LBB69_4
## %bb.3:
	movq	%r14, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	16(%rbp), %r8d
	callq	__ZL18stbtt__v_prefilterPhiiij
	movl	16(%rbp), %edx
LBB69_4:
	movq	24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	testl	%ebx, %ebx
	je	LBB69_6
## %bb.5:
	movl	$1, %ecx
	subl	%ebx, %ecx
	vcvtsi2ss	%ecx, %xmm4, %xmm1
	vcvtsi2ss	%ebx, %xmm4, %xmm2
	vaddss	%xmm2, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
LBB69_6:
	movq	32(%rbp), %rcx
	vmovss	%xmm1, (%rax)
	testl	%edx, %edx
	je	LBB69_8
## %bb.7:
	movl	$1, %eax
	subl	%edx, %eax
	vcvtsi2ss	%eax, %xmm4, %xmm0
	vcvtsi2ss	%edx, %xmm4, %xmm1
	vaddss	%xmm1, %xmm1, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
LBB69_8:
	vmovss	%xmm0, (%rcx)
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_MakeCodepointBitmapSubpixel ## -- Begin function stbtt_MakeCodepointBitmapSubpixel
	.p2align	4, 0x90
_stbtt_MakeCodepointBitmapSubpixel:     ## @stbtt_MakeCodepointBitmapSubpixel
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovss	%xmm3, -56(%rbp)                ## 4-byte Spill
	vmovss	%xmm2, -52(%rbp)                ## 4-byte Spill
	vmovss	%xmm1, -48(%rbp)                ## 4-byte Spill
	vmovss	%xmm0, -44(%rbp)                ## 4-byte Spill
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movq	%rsi, %r13
	movq	%rdi, %rbx
	movl	%r9d, %esi
	callq	_stbtt_FindGlyphIndex
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	vmovss	-44(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovss	-52(%rbp), %xmm2                ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-56(%rbp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	movl	%eax, %r9d
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_stbtt_MakeGlyphBitmapSubpixel  ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetCodepointBitmap       ## -- Begin function stbtt_GetCodepointBitmap
	.p2align	4, 0x90
_stbtt_GetCodepointBitmap:              ## @stbtt_GetCodepointBitmap
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, %r14
	movq	%r8, %r15
	movq	%rcx, %r12
	movq	%rdx, %r13
	vmovss	%xmm1, -48(%rbp)                ## 4-byte Spill
	vmovss	%xmm0, -44(%rbp)                ## 4-byte Spill
	movq	%rdi, %rbx
	callq	_stbtt_FindGlyphIndex
	vxorps	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	movq	%rbx, %rdi
	vmovss	-44(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	movl	%eax, %esi
	movq	%r13, %rdx
	movq	%r12, %rcx
	movq	%r15, %r8
	movq	%r14, %r9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_stbtt_GetGlyphBitmapSubpixel   ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_MakeCodepointBitmap      ## -- Begin function stbtt_MakeCodepointBitmap
	.p2align	4, 0x90
_stbtt_MakeCodepointBitmap:             ## @stbtt_MakeCodepointBitmap
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovss	%xmm1, -48(%rbp)                ## 4-byte Spill
	vmovss	%xmm0, -44(%rbp)                ## 4-byte Spill
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movq	%rsi, %r13
	movq	%rdi, %rbx
	movl	%r9d, %esi
	callq	_stbtt_FindGlyphIndex
	vxorps	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	vmovss	-44(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	movl	%eax, %r9d
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_stbtt_MakeGlyphBitmapSubpixel  ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function stbtt_GetBakedQuad
LCPI73_0:
	.long	0xbf000000                      ## float -0.5
LCPI73_1:
	.long	0x3f800000                      ## float 1
LCPI73_2:
	.long	0x3f000000                      ## float 0.5
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_stbtt_GetBakedQuad
	.p2align	4, 0x90
_stbtt_GetBakedQuad:                    ## @stbtt_GetBakedQuad
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	16(%rbp), %r10
	cmpl	$0, 24(%rbp)
	je	LBB73_1
## %bb.2:
	vxorps	%xmm0, %xmm0, %xmm0
	jmp	LBB73_3
LBB73_1:
	vmovss	LCPI73_0(%rip), %xmm0           ## xmm0 = mem[0],zero,zero,zero
LBB73_3:
	vcvtsi2ss	%esi, %xmm1, %xmm1
	vcvtsi2ss	%edx, %xmm2, %xmm2
	movslq	%ecx, %rcx
	vmovss	(%r8), %xmm3                    ## xmm3 = mem[0],zero,zero,zero
	leaq	(%rcx,%rcx,4), %rcx
	vaddss	8(%rdi,%rcx,4), %xmm3, %xmm3
	vmovss	LCPI73_2(%rip), %xmm4           ## xmm4 = mem[0],zero,zero,zero
	vaddss	%xmm4, %xmm3, %xmm3
	vroundss	$9, %xmm3, %xmm3, %xmm3
	vcvttss2si	%xmm3, %edx
	vmovss	(%r9), %xmm5                    ## xmm5 = mem[0],zero,zero,zero
	vaddss	12(%rdi,%rcx,4), %xmm5, %xmm5
	vaddss	%xmm4, %xmm5, %xmm4
	vmovss	LCPI73_1(%rip), %xmm5           ## xmm5 = mem[0],zero,zero,zero
	vroundss	$9, %xmm4, %xmm4, %xmm4
	vcvttss2si	%xmm4, %esi
	vcvttps2dq	%xmm3, %xmm3
	vcvtdq2ps	%xmm3, %xmm3
	vaddss	%xmm3, %xmm0, %xmm3
	vmovss	%xmm3, (%r10)
	vcvttps2dq	%xmm4, %xmm3
	vcvtdq2ps	%xmm3, %xmm3
	vaddss	%xmm3, %xmm0, %xmm3
	vmovss	%xmm3, 4(%r10)
	movzwl	4(%rdi,%rcx,4), %r9d
	addl	%r9d, %edx
	movzwl	(%rdi,%rcx,4), %eax
	subl	%eax, %edx
	vcvtsi2ss	%edx, %xmm6, %xmm3
	vaddss	%xmm3, %xmm0, %xmm3
	vmovss	%xmm3, 16(%r10)
	movzwl	6(%rdi,%rcx,4), %r11d
	addl	%r11d, %esi
	movzwl	2(%rdi,%rcx,4), %edx
	subl	%edx, %esi
	vcvtsi2ss	%esi, %xmm6, %xmm3
	vdivss	%xmm1, %xmm5, %xmm1
	vdivss	%xmm2, %xmm5, %xmm2
	vaddss	%xmm3, %xmm0, %xmm0
	vmovss	%xmm0, 20(%r10)
	vcvtsi2ss	%eax, %xmm6, %xmm0
	vmulss	%xmm0, %xmm1, %xmm0
	vmovss	%xmm0, 8(%r10)
	vcvtsi2ss	%edx, %xmm6, %xmm0
	vmulss	%xmm0, %xmm2, %xmm0
	vcvtsi2ss	%r9d, %xmm6, %xmm3
	vmovss	%xmm0, 12(%r10)
	vcvtsi2ss	%r11d, %xmm6, %xmm0
	vmulss	%xmm3, %xmm1, %xmm1
	vmovss	%xmm1, 24(%r10)
	vmulss	%xmm0, %xmm2, %xmm0
	vmovss	%xmm0, 28(%r10)
	vmovss	16(%rdi,%rcx,4), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	vaddss	(%r8), %xmm0, %xmm0
	vmovss	%xmm0, (%r8)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_PackBegin                ## -- Begin function stbtt_PackBegin
	.p2align	4, 0x90
_stbtt_PackBegin:                       ## @stbtt_PackBegin
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, %ebx
	movl	%r8d, -44(%rbp)                 ## 4-byte Spill
	movl	%ecx, -56(%rbp)                 ## 4-byte Spill
	movl	%edx, %r13d
	movq	%rsi, -64(%rbp)                 ## 8-byte Spill
	movq	%rdi, %r15
	movl	$20, %edi
	callq	_malloc
	movq	%rax, %r14
	movl	%r13d, -52(%rbp)                ## 4-byte Spill
	movl	%ebx, -48(%rbp)                 ## 4-byte Spill
	subl	%ebx, %r13d
	movslq	%r13d, %rdi
	callq	_malloc
	movq	%rax, %r12
	testq	%r14, %r14
	je	LBB74_2
## %bb.1:
	testq	%r12, %r12
	je	LBB74_2
## %bb.6:
	movq	16(%rbp), %rax
	movq	%rax, (%r15)
	movl	-52(%rbp), %edx                 ## 4-byte Reload
	movl	%edx, 16(%r15)
	movl	-56(%rbp), %ecx                 ## 4-byte Reload
	movl	%ecx, 20(%r15)
	movq	-64(%rbp), %rdi                 ## 8-byte Reload
	movq	%rdi, 48(%r15)
	movq	%r14, 8(%r15)
	movq	%r12, 56(%r15)
	movl	-44(%rbp), %eax                 ## 4-byte Reload
	testl	%eax, %eax
	cmovel	%edx, %eax
	movl	-48(%rbp), %esi                 ## 4-byte Reload
	movl	%esi, 28(%r15)
	movl	%eax, 24(%r15)
	movl	$1, 40(%r15)
	movabsq	$4294967296, %rax               ## imm = 0x100000000
	movq	%rax, 32(%r15)
	movl	%ecx, %eax
	subl	%esi, %eax
	movl	%r13d, (%r14)
	movl	%eax, 4(%r14)
	movq	$0, 8(%r14)
	movl	$0, 16(%r14)
	movl	$1, %ebx
	testq	%rdi, %rdi
	je	LBB74_8
## %bb.7:
	imull	%edx, %ecx
	movslq	%ecx, %rsi
	callq	___bzero
	jmp	LBB74_8
LBB74_2:
	testq	%r14, %r14
	je	LBB74_4
## %bb.3:
	movq	%r14, %rdi
	callq	_free
LBB74_4:
	xorl	%ebx, %ebx
	testq	%r12, %r12
	je	LBB74_8
## %bb.5:
	movq	%r12, %rdi
	callq	_free
LBB74_8:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_PackEnd                  ## -- Begin function stbtt_PackEnd
	.p2align	4, 0x90
_stbtt_PackEnd:                         ## @stbtt_PackEnd
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	movq	56(%rdi), %rdi
	callq	_free
	movq	8(%rbx), %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	jmp	_free                           ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_PackSetOversampling      ## -- Begin function stbtt_PackSetOversampling
	.p2align	4, 0x90
_stbtt_PackSetOversampling:             ## @stbtt_PackSetOversampling
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	cmpl	$9, %esi
	jae	LBB76_3
## %bb.1:
	cmpl	$9, %edx
	jae	LBB76_4
## %bb.2:
	movl	%esi, 36(%rdi)
	movl	%edx, 40(%rdi)
	popq	%rbp
	retq
LBB76_3:
	callq	_stbtt_PackSetOversampling.cold.2
	popq	%rbp
	retq
LBB76_4:
	callq	_stbtt_PackSetOversampling.cold.1
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_PackSetSkipMissingCodepoints ## -- Begin function stbtt_PackSetSkipMissingCodepoints
	.p2align	4, 0x90
_stbtt_PackSetSkipMissingCodepoints:    ## @stbtt_PackSetSkipMissingCodepoints
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%esi, 32(%rdi)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function stbtt_PackFontRangesGatherRects
LCPI78_0:
	.long	0x80000000                      ## float -0
LCPI78_1:
	.long	0x00000000                      ## float 0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_stbtt_PackFontRangesGatherRects
	.p2align	4, 0x90
_stbtt_PackFontRangesGatherRects:       ## @stbtt_PackFontRangesGatherRects
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$224, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdi, 32(%rsp)                  ## 8-byte Spill
	testl	%ecx, %ecx
	jle	LBB78_1
## %bb.2:
	movq	%rsi, %r12
	movl	%ecx, %eax
	movq	%rax, 80(%rsp)                  ## 8-byte Spill
	addq	$16, %r8
	xorl	%r10d, %r10d
	vbroadcastss	LCPI78_0(%rip), %xmm0   ## xmm0 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	%xmm0, 176(%rsp)                ## 16-byte Spill
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	movq	%rsi, 48(%rsp)                  ## 8-byte Spill
	movq	%r8, 72(%rsp)                   ## 8-byte Spill
	movq	%rdx, 64(%rsp)                  ## 8-byte Spill
	jmp	LBB78_3
	.p2align	4, 0x90
LBB78_31:                               ##   in Loop: Header=BB78_3 Depth=1
	movl	56(%rsp), %eax                  ## 4-byte Reload
	addl	%r15d, %eax
	movq	72(%rsp), %r8                   ## 8-byte Reload
	movq	64(%rsp), %rdx                  ## 8-byte Reload
	movq	88(%rsp), %r10                  ## 8-byte Reload
LBB78_32:                               ##   in Loop: Header=BB78_3 Depth=1
	incq	%r10
	cmpq	80(%rsp), %r10                  ## 8-byte Folded Reload
	je	LBB78_33
LBB78_3:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB78_8 Depth 2
	leaq	(%r10,%r10,4), %r9
	vmovss	(%rdx,%r9,8), %xmm0             ## xmm0 = mem[0],zero,zero,zero
	vucomiss	LCPI78_1(%rip), %xmm0
	jbe	LBB78_5
## %bb.4:                               ##   in Loop: Header=BB78_3 Depth=1
	movq	8(%r12), %rcx
	movq	48(%rsp), %rsi                  ## 8-byte Reload
	movslq	36(%rsi), %rsi
	movzbl	5(%rcx,%rsi), %r11d
	movzbl	4(%rcx,%rsi), %edi
	shll	$8, %edi
	movswl	%di, %edi
	orl	%r11d, %edi
	movzbl	7(%rcx,%rsi), %r11d
	movzbl	6(%rcx,%rsi), %ecx
	movq	48(%rsp), %r12                  ## 8-byte Reload
	shll	$8, %ecx
	movswl	%cx, %ecx
	orl	%r11d, %ecx
	subl	%ecx, %edi
	vcvtsi2ss	%edi, %xmm5, %xmm1
	jmp	LBB78_6
	.p2align	4, 0x90
LBB78_5:                                ##   in Loop: Header=BB78_3 Depth=1
	vxorps	176(%rsp), %xmm0, %xmm0         ## 16-byte Folded Reload
	movq	8(%r12), %rcx
	movslq	28(%r12), %rsi
	movzwl	18(%rcx,%rsi), %ecx
	rolw	$8, %cx
	movzwl	%cx, %ecx
	vcvtsi2ss	%ecx, %xmm5, %xmm1
LBB78_6:                                ##   in Loop: Header=BB78_3 Depth=1
	vdivss	%xmm1, %xmm0, %xmm0
	vmovss	%xmm0, 44(%rsp)                 ## 4-byte Spill
	movq	32(%rsp), %rsi                  ## 8-byte Reload
	movb	36(%rsi), %cl
	movb	%cl, 32(%rdx,%r9,8)
	movb	40(%rsi), %cl
	movb	%cl, 33(%rdx,%r9,8)
	cmpl	$0, 16(%rdx,%r9,8)
	jle	LBB78_32
## %bb.7:                               ##   in Loop: Header=BB78_3 Depth=1
	movq	%r10, 88(%rsp)                  ## 8-byte Spill
	leaq	(%rdx,%r9,8), %r9
	addq	$16, %r9
	movl	%eax, 56(%rsp)                  ## 4-byte Spill
	cltq
	leaq	(%rax,%rax,2), %rax
	leaq	(%r8,%rax,8), %r14
	xorl	%r15d, %r15d
	movq	%r9, 24(%rsp)                   ## 8-byte Spill
	jmp	LBB78_8
	.p2align	4, 0x90
LBB78_19:                               ##   in Loop: Header=BB78_8 Depth=2
	xorl	%edx, %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	movq	24(%rsp), %r9                   ## 8-byte Reload
LBB78_29:                               ##   in Loop: Header=BB78_8 Depth=2
	movq	32(%rsp), %rsi                  ## 8-byte Reload
	movl	28(%rsi), %esi
	addl	%esi, %edx
	subl	%edi, %edx
	notl	%eax
	addl	%esi, %eax
	addl	%ecx, %eax
	addl	%r11d, %eax
	testl	%r13d, %r13d
	leal	-1(%rdx,%rbx), %ecx
	movl	%ecx, -4(%r14)
	movl	%eax, (%r14)
	movl	$1, %eax
	movl	60(%rsp), %ebx                  ## 4-byte Reload
	cmovel	%eax, %ebx
LBB78_30:                               ##   in Loop: Header=BB78_8 Depth=2
	incq	%r15
	movslq	(%r9), %rax
	addq	$24, %r14
	cmpq	%rax, %r15
	jge	LBB78_31
LBB78_8:                                ##   Parent Loop BB78_3 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	-8(%r9), %rax
	testq	%rax, %rax
	je	LBB78_9
## %bb.10:                              ##   in Loop: Header=BB78_8 Depth=2
	movl	(%rax,%r15,4), %esi
	jmp	LBB78_11
	.p2align	4, 0x90
LBB78_9:                                ##   in Loop: Header=BB78_8 Depth=2
	movl	-12(%r9), %esi
	addl	%r15d, %esi
LBB78_11:                               ##   in Loop: Header=BB78_8 Depth=2
	movq	%r12, %rdi
	callq	_stbtt_FindGlyphIndex
	movl	%eax, %r13d
	testl	%eax, %eax
	jne	LBB78_14
## %bb.12:                              ##   in Loop: Header=BB78_8 Depth=2
	movq	32(%rsp), %rax                  ## 8-byte Reload
	movl	32(%rax), %eax
	orl	%ebx, %eax
	je	LBB78_14
## %bb.13:                              ##   in Loop: Header=BB78_8 Depth=2
	movq	$0, -4(%r14)
	movq	24(%rsp), %r9                   ## 8-byte Reload
	jmp	LBB78_30
	.p2align	4, 0x90
LBB78_14:                               ##   in Loop: Header=BB78_8 Depth=2
	movl	%ebx, 60(%rsp)                  ## 4-byte Spill
	movq	32(%rsp), %rax                  ## 8-byte Reload
	movl	36(%rax), %ebx
	movl	40(%rax), %r11d
	cmpl	$0, 76(%r12)
	je	LBB78_18
## %bb.15:                              ##   in Loop: Header=BB78_8 Depth=2
	movq	%r12, %rdi
	movq	%r11, %r12
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%ymm0, 96(%rsp)
	vmovups	%ymm0, 120(%rsp)
	movl	$1, 96(%rsp)
	movl	%r13d, %esi
	leaq	96(%rsp), %rdx
	vzeroupper
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx
	movl	%eax, %ecx
	movl	%eax, %esi
	movl	%eax, %edx
	testl	%eax, %eax
	je	LBB78_17
## %bb.16:                              ##   in Loop: Header=BB78_8 Depth=2
	movl	120(%rsp), %eax
	movl	128(%rsp), %ecx
	movl	124(%rsp), %esi
	movl	132(%rsp), %edx
LBB78_17:                               ##   in Loop: Header=BB78_8 Depth=2
	movq	32(%rsp), %rdi                  ## 8-byte Reload
	movl	36(%rdi), %r8d
	movl	40(%rdi), %r10d
	movq	24(%rsp), %r9                   ## 8-byte Reload
	movq	%r12, %r11
LBB78_28:                               ##   in Loop: Header=BB78_8 Depth=2
	vcvtsi2ss	%rbx, %xmm5, %xmm0
	vcvtsi2ss	%r11, %xmm5, %xmm1
	vmovss	44(%rsp), %xmm3                 ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmulss	%xmm0, %xmm3, %xmm0
	vcvtsi2ss	%eax, %xmm5, %xmm2
	vmulss	%xmm1, %xmm3, %xmm1
	vmulss	%xmm0, %xmm2, %xmm2
	vxorps	%xmm4, %xmm4, %xmm4
	vaddss	%xmm4, %xmm2, %xmm2
	vroundss	$9, %xmm2, %xmm2, %xmm2
	negl	%edx
	vcvtsi2ss	%edx, %xmm5, %xmm3
	vcvttss2si	%xmm2, %edi
	vmulss	%xmm1, %xmm3, %xmm2
	vaddss	%xmm4, %xmm2, %xmm2
	vroundss	$9, %xmm2, %xmm2, %xmm2
	vcvtsi2ss	%esi, %xmm5, %xmm3
	vcvttss2si	%xmm2, %eax
	vmulss	%xmm0, %xmm3, %xmm0
	vaddss	%xmm4, %xmm0, %xmm0
	vroundss	$10, %xmm0, %xmm0, %xmm0
	vcvttss2si	%xmm0, %edx
	negl	%ecx
	vcvtsi2ss	%ecx, %xmm5, %xmm0
	vmulss	%xmm1, %xmm0, %xmm0
	vaddss	%xmm4, %xmm0, %xmm0
	vroundss	$10, %xmm0, %xmm0, %xmm0
	vcvttss2si	%xmm0, %ecx
	movl	%r10d, %r11d
	movl	%r8d, %ebx
	movq	48(%rsp), %r12                  ## 8-byte Reload
	jmp	LBB78_29
	.p2align	4, 0x90
LBB78_18:                               ##   in Loop: Header=BB78_8 Depth=2
	xorl	%eax, %eax
	cmpl	%r13d, 20(%r12)
	jle	LBB78_19
## %bb.20:                              ##   in Loop: Header=BB78_8 Depth=2
	movl	60(%r12), %ecx
	cmpl	$1, %ecx
	jg	LBB78_19
## %bb.21:                              ##   in Loop: Header=BB78_8 Depth=2
	movq	8(%r12), %rdx
	movslq	24(%r12), %rsi
	addq	%rdx, %rsi
	movslq	%r13d, %rdi
	testl	%ecx, %ecx
	je	LBB78_22
## %bb.23:                              ##   in Loop: Header=BB78_8 Depth=2
	movl	(%rsi,%rdi,4), %ecx
	movl	4(%rsi,%rdi,4), %esi
	bswapl	%ecx
	bswapl	%esi
	movq	24(%rsp), %r9                   ## 8-byte Reload
	cmpl	%esi, %ecx
	jne	LBB78_26
	jmp	LBB78_25
LBB78_22:                               ##   in Loop: Header=BB78_8 Depth=2
	movzbl	(%rsi,%rdi,2), %ecx
	movzbl	1(%rsi,%rdi,2), %r8d
	shll	$9, %ecx
	leal	(%rcx,%r8,2), %ecx
	movzbl	2(%rsi,%rdi,2), %r8d
	movzbl	3(%rsi,%rdi,2), %esi
	shll	$9, %r8d
	leal	(%r8,%rsi,2), %esi
	movq	48(%rsp), %r12                  ## 8-byte Reload
	movq	24(%rsp), %r9                   ## 8-byte Reload
	cmpl	%esi, %ecx
	je	LBB78_25
LBB78_26:                               ##   in Loop: Header=BB78_8 Depth=2
	addl	32(%r12), %ecx
	js	LBB78_25
## %bb.27:                              ##   in Loop: Header=BB78_8 Depth=2
	movl	%ecx, %edi
	movzbl	3(%rdx,%rdi), %ecx
	movzbl	2(%rdx,%rdi), %eax
	shll	$8, %eax
	cwtl
	orl	%ecx, %eax
	movzbl	5(%rdx,%rdi), %esi
	movzbl	4(%rdx,%rdi), %ecx
	shll	$8, %ecx
	movswl	%cx, %ecx
	orl	%esi, %ecx
	movzbl	7(%rdx,%rdi), %r8d
	movzbl	6(%rdx,%rdi), %esi
	shll	$8, %esi
	movswl	%si, %esi
	orl	%r8d, %esi
	movzbl	9(%rdx,%rdi), %r8d
	movzbl	8(%rdx,%rdi), %edx
	shll	$8, %edx
	movswl	%dx, %edx
	orl	%r8d, %edx
	movl	%r11d, %r10d
	movl	%ebx, %r8d
	jmp	LBB78_28
LBB78_25:                               ##   in Loop: Header=BB78_8 Depth=2
	xorl	%edx, %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	jmp	LBB78_29
LBB78_1:
	xorl	%eax, %eax
LBB78_33:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL18stbtt__h_prefilterPhiiij
__ZL18stbtt__h_prefilterPhiiij:         ## @_ZL18stbtt__h_prefilterPhiiij
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	$0, -48(%rbp)
	movl	%edx, -68(%rbp)                 ## 4-byte Spill
	testl	%edx, %edx
	jle	LBB79_36
## %bb.1:
	movl	%r8d, %r12d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	movl	%esi, %eax
	subl	%r8d, %eax
	movl	%r8d, %r9d
	movslq	%ecx, %rcx
	movq	%rcx, -88(%rbp)                 ## 8-byte Spill
	movq	%rax, -64(%rbp)                 ## 8-byte Spill
	leal	1(%rax), %r11d
	leaq	-1(%r11), %rax
	movq	%rax, -80(%rbp)                 ## 8-byte Spill
	movl	%r11d, %r14d
	andl	$-2, %r14d
	xorl	%eax, %eax
	leal	-2(%r12), %ecx
	movq	%rcx, -96(%rbp)                 ## 8-byte Spill
	movq	%r11, -56(%rbp)                 ## 8-byte Spill
	jmp	LBB79_2
	.p2align	4, 0x90
LBB79_35:                               ##   in Loop: Header=BB79_2 Depth=1
	addq	-88(%rbp), %rbx                 ## 8-byte Folded Reload
	movl	-72(%rbp), %eax                 ## 4-byte Reload
	incl	%eax
	cmpl	-68(%rbp), %eax                 ## 4-byte Folded Reload
	je	LBB79_36
LBB79_2:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB79_26 Depth 2
                                        ##     Child Loop BB79_22 Depth 2
                                        ##     Child Loop BB79_11 Depth 2
                                        ##     Child Loop BB79_18 Depth 2
                                        ##     Child Loop BB79_28 Depth 2
                                        ##     Child Loop BB79_32 Depth 2
	movl	%eax, -72(%rbp)                 ## 4-byte Spill
	leaq	-48(%rbp), %rdi
	movq	%r9, %r13
	movq	%r9, %rsi
	callq	___bzero
	movq	-96(%rbp), %rax                 ## 8-byte Reload
	cmpl	$3, %eax
	ja	LBB79_15
## %bb.3:                               ##   in Loop: Header=BB79_2 Depth=1
	leaq	LJTI79_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
LBB79_12:                               ##   in Loop: Header=BB79_2 Depth=1
	cmpl	$0, -64(%rbp)                   ## 4-byte Folded Reload
	movq	%r13, %r9
	movq	-56(%rbp), %r11                 ## 8-byte Reload
	js	LBB79_5
## %bb.13:                              ##   in Loop: Header=BB79_2 Depth=1
	cmpq	$0, -80(%rbp)                   ## 8-byte Folded Reload
	je	LBB79_14
## %bb.17:                              ##   in Loop: Header=BB79_2 Depth=1
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB79_18:                               ##   Parent Loop BB79_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rbx,%rdx), %esi
	movl	%edx, %eax
	andl	$6, %eax
	movzbl	-48(%rbp,%rax), %r8d
	leaq	2(%rdx), %rdi
	movl	%edi, %eax
	andl	$6, %eax
	movb	%sil, -48(%rbp,%rax)
	subl	%r8d, %esi
	addl	%ecx, %esi
	movl	%esi, %eax
	shrl	%eax
	movb	%al, (%rbx,%rdx)
	leal	1(%rdx), %eax
	movzbl	1(%rbx,%rdx), %ecx
	andl	$7, %eax
	movzbl	-48(%rbp,%rax), %r8d
	leal	3(%rdx), %eax
	andl	$7, %eax
	movb	%cl, -48(%rbp,%rax)
                                        ## kill: def $ecx killed $ecx def $rcx
	subl	%r8d, %ecx
	addl	%esi, %ecx
	movl	%ecx, %eax
	shrl	%eax
	movb	%al, 1(%rbx,%rdx)
	movq	%rdi, %rdx
	cmpq	%rdi, %r14
	jne	LBB79_18
## %bb.19:                              ##   in Loop: Header=BB79_2 Depth=1
	movl	%r11d, %edx
	testb	$1, %r11b
	jne	LBB79_20
	jmp	LBB79_30
	.p2align	4, 0x90
LBB79_15:                               ##   in Loop: Header=BB79_2 Depth=1
	cmpl	$0, -64(%rbp)                   ## 4-byte Folded Reload
	js	LBB79_16
## %bb.27:                              ##   in Loop: Header=BB79_2 Depth=1
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	movq	%r13, %r9
	movq	-56(%rbp), %r11                 ## 8-byte Reload
	.p2align	4, 0x90
LBB79_28:                               ##   Parent Loop BB79_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rbx,%rsi), %eax
	movl	%esi, %edx
	andl	$7, %edx
	movzbl	-48(%rbp,%rdx), %edx
	leal	(%r9,%rsi), %edi
	andl	$7, %edi
	movb	%al, -48(%rbp,%rdi)
	subl	%edx, %eax
	addl	%eax, %ecx
	movl	%ecx, %eax
	xorl	%edx, %edx
	divl	%r12d
	movb	%al, (%rbx,%rsi)
	incq	%rsi
	cmpq	%rsi, %r11
	jne	LBB79_28
	jmp	LBB79_29
	.p2align	4, 0x90
LBB79_9:                                ##   in Loop: Header=BB79_2 Depth=1
	cmpl	$0, -64(%rbp)                   ## 4-byte Folded Reload
	movq	%r13, %r9
	movq	-56(%rbp), %r11                 ## 8-byte Reload
	js	LBB79_5
## %bb.10:                              ##   in Loop: Header=BB79_2 Depth=1
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movl	$2863311531, %r8d               ## imm = 0xAAAAAAAB
	.p2align	4, 0x90
LBB79_11:                               ##   Parent Loop BB79_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rbx,%rax), %edx
	movl	%eax, %esi
	andl	$7, %esi
	movzbl	-48(%rbp,%rsi), %esi
	leal	3(%rax), %edi
	andl	$7, %edi
	movb	%dl, -48(%rbp,%rdi)
	subl	%esi, %edx
	addl	%edx, %ecx
	movq	%rcx, %rdx
	imulq	%r8, %rdx
	shrq	$33, %rdx
	movb	%dl, (%rbx,%rax)
	incq	%rax
	cmpq	%rax, %r11
	jne	LBB79_11
	jmp	LBB79_29
	.p2align	4, 0x90
LBB79_6:                                ##   in Loop: Header=BB79_2 Depth=1
	cmpl	$0, -64(%rbp)                   ## 4-byte Folded Reload
	movq	%r13, %r9
	movq	-56(%rbp), %r11                 ## 8-byte Reload
	js	LBB79_5
## %bb.7:                               ##   in Loop: Header=BB79_2 Depth=1
	cmpq	$0, -80(%rbp)                   ## 8-byte Folded Reload
	je	LBB79_8
## %bb.21:                              ##   in Loop: Header=BB79_2 Depth=1
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB79_22:                               ##   Parent Loop BB79_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rbx,%rax), %edx
	movl	%eax, %esi
	andl	$6, %esi
	movzbl	-48(%rbp,%rsi), %esi
	leal	4(%rax), %edi
	andl	$6, %edi
	movb	%dl, -48(%rbp,%rdi)
	subl	%esi, %edx
	addl	%ecx, %edx
	movl	%edx, %ecx
	shrl	$2, %ecx
	movb	%cl, (%rbx,%rax)
	leal	1(%rax), %ecx
	movzbl	1(%rbx,%rax), %esi
	andl	$7, %ecx
	movzbl	-48(%rbp,%rcx), %edi
	leal	5(%rax), %ecx
	andl	$7, %ecx
	movb	%sil, -48(%rbp,%rcx)
	movl	%esi, %ecx
	subl	%edi, %ecx
	addl	%edx, %ecx
	movl	%ecx, %edx
	shrl	$2, %edx
	movb	%dl, 1(%rbx,%rax)
	addq	$2, %rax
	cmpq	%rax, %r14
	jne	LBB79_22
## %bb.23:                              ##   in Loop: Header=BB79_2 Depth=1
	movl	%r11d, %edx
	testb	$1, %r11b
	jne	LBB79_24
	jmp	LBB79_30
	.p2align	4, 0x90
LBB79_4:                                ##   in Loop: Header=BB79_2 Depth=1
	cmpl	$0, -64(%rbp)                   ## 4-byte Folded Reload
	movq	%r13, %r9
	movq	-56(%rbp), %r11                 ## 8-byte Reload
	js	LBB79_5
## %bb.25:                              ##   in Loop: Header=BB79_2 Depth=1
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movl	$3435973837, %r8d               ## imm = 0xCCCCCCCD
	.p2align	4, 0x90
LBB79_26:                               ##   Parent Loop BB79_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rbx,%rax), %edx
	movl	%eax, %esi
	andl	$7, %esi
	movzbl	-48(%rbp,%rsi), %esi
	leal	5(%rax), %edi
	andl	$7, %edi
	movb	%dl, -48(%rbp,%rdi)
	subl	%esi, %edx
	addl	%edx, %ecx
	movq	%rcx, %rdx
	imulq	%r8, %rdx
	shrq	$34, %rdx
	movb	%dl, (%rbx,%rax)
	incq	%rax
	cmpq	%rax, %r11
	jne	LBB79_26
	jmp	LBB79_29
	.p2align	4, 0x90
LBB79_5:                                ##   in Loop: Header=BB79_2 Depth=1
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	jmp	LBB79_30
LBB79_16:                               ##   in Loop: Header=BB79_2 Depth=1
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	%r13, %r9
	jmp	LBB79_30
LBB79_14:                               ##   in Loop: Header=BB79_2 Depth=1
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	movl	%r11d, %edx
	testb	$1, %r11b
	je	LBB79_30
LBB79_20:                               ##   in Loop: Header=BB79_2 Depth=1
	movzbl	(%rbx,%rdi), %eax
	movl	%edi, %edx
	andl	$7, %edx
	movzbl	-48(%rbp,%rdx), %edx
	leal	2(%rdi), %esi
	andl	$7, %esi
	movb	%al, -48(%rbp,%rsi)
	subl	%edx, %eax
	addl	%ecx, %eax
	movl	%eax, %ecx
	shrl	%eax
	movb	%al, (%rbx,%rdi)
	jmp	LBB79_29
LBB79_8:                                ##   in Loop: Header=BB79_2 Depth=1
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movl	%r11d, %edx
	testb	$1, %r11b
	je	LBB79_30
LBB79_24:                               ##   in Loop: Header=BB79_2 Depth=1
	movzbl	(%rbx,%rax), %edx
	movl	%eax, %esi
	andl	$7, %esi
	movzbl	-48(%rbp,%rsi), %esi
	leal	4(%rax), %edi
	andl	$7, %edi
	movb	%dl, -48(%rbp,%rdi)
	subl	%esi, %edx
	addl	%ecx, %edx
	movl	%edx, %ecx
	shrl	$2, %edx
	movb	%dl, (%rbx,%rax)
	.p2align	4, 0x90
LBB79_29:                               ##   in Loop: Header=BB79_2 Depth=1
	movl	%r11d, %edx
LBB79_30:                               ##   in Loop: Header=BB79_2 Depth=1
	cmpl	%r15d, %edx
	jge	LBB79_35
## %bb.31:                              ##   in Loop: Header=BB79_2 Depth=1
	movl	%edx, %esi
	.p2align	4, 0x90
LBB79_32:                               ##   Parent Loop BB79_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpb	$0, (%rbx,%rsi)
	jne	LBB79_33
## %bb.34:                              ##   in Loop: Header=BB79_32 Depth=2
	movl	%esi, %eax
	andl	$7, %eax
	movzbl	-48(%rbp,%rax), %eax
	subl	%eax, %ecx
	movl	%ecx, %eax
	xorl	%edx, %edx
	divl	%r12d
	movb	%al, (%rbx,%rsi)
	incq	%rsi
	cmpl	%r15d, %esi
	jl	LBB79_32
	jmp	LBB79_35
LBB79_33:
	callq	__ZL18stbtt__h_prefilterPhiiij.cold.1
LBB79_36:
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L79_0_set_12, LBB79_12-LJTI79_0
.set L79_0_set_9, LBB79_9-LJTI79_0
.set L79_0_set_6, LBB79_6-LJTI79_0
.set L79_0_set_4, LBB79_4-LJTI79_0
LJTI79_0:
	.long	L79_0_set_12
	.long	L79_0_set_9
	.long	L79_0_set_6
	.long	L79_0_set_4
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL18stbtt__v_prefilterPhiiij
__ZL18stbtt__v_prefilterPhiiij:         ## @_ZL18stbtt__v_prefilterPhiiij
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, -52(%rbp)                 ## 4-byte Spill
	movq	$0, -48(%rbp)
	movl	%esi, -76(%rbp)                 ## 4-byte Spill
	testl	%esi, %esi
	jle	LBB80_28
## %bb.1:
	movl	%r8d, %r12d
	movq	%rdi, %r8
	movl	-52(%rbp), %eax                 ## 4-byte Reload
                                        ## kill: def $eax killed $eax def $rax
	subl	%r12d, %eax
	movl	%r12d, %r9d
	movslq	%ecx, %r15
	movq	%rax, -72(%rbp)                 ## 8-byte Spill
	leal	1(%rax), %r14d
	xorl	%eax, %eax
	leal	-2(%r12), %r13d
	movq	%r9, -64(%rbp)                  ## 8-byte Spill
	jmp	LBB80_2
	.p2align	4, 0x90
LBB80_27:                               ##   in Loop: Header=BB80_2 Depth=1
	incq	%r8
	movl	-80(%rbp), %eax                 ## 4-byte Reload
	incl	%eax
	cmpl	-76(%rbp), %eax                 ## 4-byte Folded Reload
	je	LBB80_28
LBB80_2:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB80_18 Depth 2
                                        ##     Child Loop BB80_8 Depth 2
                                        ##     Child Loop BB80_11 Depth 2
                                        ##     Child Loop BB80_14 Depth 2
                                        ##     Child Loop BB80_20 Depth 2
                                        ##     Child Loop BB80_24 Depth 2
	movl	%eax, -80(%rbp)                 ## 4-byte Spill
	movq	%r8, %rbx
	leaq	-48(%rbp), %rdi
	movq	%r9, %rsi
	callq	___bzero
	cmpl	$3, %r13d
	ja	LBB80_15
## %bb.3:                               ##   in Loop: Header=BB80_2 Depth=1
	leaq	LJTI80_0(%rip), %rcx
	movslq	(%rcx,%r13,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
LBB80_12:                               ##   in Loop: Header=BB80_2 Depth=1
	cmpl	$0, -72(%rbp)                   ## 4-byte Folded Reload
	movq	%rbx, %r8
	movq	-64(%rbp), %r9                  ## 8-byte Reload
	js	LBB80_5
## %bb.13:                              ##   in Loop: Header=BB80_2 Depth=1
	xorl	%eax, %eax
	movq	%r8, %rdx
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB80_14:                               ##   Parent Loop BB80_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rdx), %esi
	movl	%eax, %edi
	andl	$7, %edi
	movzbl	-48(%rbp,%rdi), %edi
	leal	2(%rax), %ebx
	andl	$7, %ebx
	movb	%sil, -48(%rbp,%rbx)
	subl	%edi, %esi
	addl	%esi, %ecx
	movl	%ecx, %esi
	shrl	%esi
	movb	%sil, (%rdx)
	incq	%rax
	addq	%r15, %rdx
	cmpq	%rax, %r14
	jne	LBB80_14
	jmp	LBB80_21
	.p2align	4, 0x90
LBB80_15:                               ##   in Loop: Header=BB80_2 Depth=1
	cmpl	$0, -72(%rbp)                   ## 4-byte Folded Reload
	js	LBB80_16
## %bb.19:                              ##   in Loop: Header=BB80_2 Depth=1
	xorl	%esi, %esi
	movq	%rbx, %r8
	movq	%rbx, %rdi
	xorl	%ecx, %ecx
	movq	-64(%rbp), %r9                  ## 8-byte Reload
	.p2align	4, 0x90
LBB80_20:                               ##   Parent Loop BB80_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rdi), %eax
	movl	%esi, %edx
	andl	$7, %edx
	movzbl	-48(%rbp,%rdx), %edx
	leal	(%r9,%rsi), %ebx
	andl	$7, %ebx
	movb	%al, -48(%rbp,%rbx)
	subl	%edx, %eax
	addl	%eax, %ecx
	movl	%ecx, %eax
	xorl	%edx, %edx
	divl	%r12d
	movb	%al, (%rdi)
	incq	%rsi
	addq	%r15, %rdi
	cmpq	%rsi, %r14
	jne	LBB80_20
	jmp	LBB80_21
	.p2align	4, 0x90
LBB80_9:                                ##   in Loop: Header=BB80_2 Depth=1
	cmpl	$0, -72(%rbp)                   ## 4-byte Folded Reload
	movq	%rbx, %r8
	movq	-64(%rbp), %r9                  ## 8-byte Reload
	movl	$2863311531, %r11d              ## imm = 0xAAAAAAAB
	js	LBB80_5
## %bb.10:                              ##   in Loop: Header=BB80_2 Depth=1
	xorl	%eax, %eax
	movq	%r8, %rdx
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB80_11:                               ##   Parent Loop BB80_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rdx), %esi
	movl	%eax, %edi
	andl	$7, %edi
	movzbl	-48(%rbp,%rdi), %edi
	leal	3(%rax), %ebx
	andl	$7, %ebx
	movb	%sil, -48(%rbp,%rbx)
	subl	%edi, %esi
	addl	%esi, %ecx
	movq	%rcx, %rsi
	imulq	%r11, %rsi
	shrq	$33, %rsi
	movb	%sil, (%rdx)
	incq	%rax
	addq	%r15, %rdx
	cmpq	%rax, %r14
	jne	LBB80_11
	jmp	LBB80_21
	.p2align	4, 0x90
LBB80_6:                                ##   in Loop: Header=BB80_2 Depth=1
	cmpl	$0, -72(%rbp)                   ## 4-byte Folded Reload
	movq	%rbx, %r8
	movq	-64(%rbp), %r9                  ## 8-byte Reload
	js	LBB80_5
## %bb.7:                               ##   in Loop: Header=BB80_2 Depth=1
	xorl	%eax, %eax
	movq	%r8, %rdx
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB80_8:                                ##   Parent Loop BB80_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rdx), %esi
	movl	%eax, %edi
	andl	$7, %edi
	movzbl	-48(%rbp,%rdi), %edi
	leal	4(%rax), %ebx
	andl	$7, %ebx
	movb	%sil, -48(%rbp,%rbx)
	subl	%edi, %esi
	addl	%esi, %ecx
	movl	%ecx, %esi
	shrl	$2, %esi
	movb	%sil, (%rdx)
	incq	%rax
	addq	%r15, %rdx
	cmpq	%rax, %r14
	jne	LBB80_8
	jmp	LBB80_21
	.p2align	4, 0x90
LBB80_4:                                ##   in Loop: Header=BB80_2 Depth=1
	cmpl	$0, -72(%rbp)                   ## 4-byte Folded Reload
	movq	%rbx, %r8
	movq	-64(%rbp), %r9                  ## 8-byte Reload
	js	LBB80_5
## %bb.17:                              ##   in Loop: Header=BB80_2 Depth=1
	xorl	%eax, %eax
	movq	%r8, %rdx
	xorl	%ecx, %ecx
	movl	$3435973837, %r11d              ## imm = 0xCCCCCCCD
	.p2align	4, 0x90
LBB80_18:                               ##   Parent Loop BB80_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rdx), %esi
	movl	%eax, %edi
	andl	$7, %edi
	movzbl	-48(%rbp,%rdi), %edi
	leal	5(%rax), %ebx
	andl	$7, %ebx
	movb	%sil, -48(%rbp,%rbx)
	subl	%edi, %esi
	addl	%esi, %ecx
	movq	%rcx, %rsi
	imulq	%r11, %rsi
	shrq	$34, %rsi
	movb	%sil, (%rdx)
	incq	%rax
	addq	%r15, %rdx
	cmpq	%rax, %r14
	jne	LBB80_18
	.p2align	4, 0x90
LBB80_21:                               ##   in Loop: Header=BB80_2 Depth=1
	movl	%r14d, %eax
	cmpl	-52(%rbp), %eax                 ## 4-byte Folded Reload
	jge	LBB80_27
	jmp	LBB80_23
	.p2align	4, 0x90
LBB80_5:                                ##   in Loop: Header=BB80_2 Depth=1
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	cmpl	-52(%rbp), %eax                 ## 4-byte Folded Reload
	jge	LBB80_27
	jmp	LBB80_23
LBB80_16:                               ##   in Loop: Header=BB80_2 Depth=1
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movq	%rbx, %r8
	movq	-64(%rbp), %r9                  ## 8-byte Reload
	cmpl	-52(%rbp), %eax                 ## 4-byte Folded Reload
	jge	LBB80_27
	.p2align	4, 0x90
LBB80_23:                               ##   in Loop: Header=BB80_2 Depth=1
	movslq	%eax, %rsi
	movq	%r15, %rdi
	imulq	%rsi, %rdi
	addq	%r8, %rdi
	movl	-52(%rbp), %ebx                 ## 4-byte Reload
	subl	%eax, %ebx
	.p2align	4, 0x90
LBB80_24:                               ##   Parent Loop BB80_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpb	$0, (%rdi)
	jne	LBB80_25
## %bb.26:                              ##   in Loop: Header=BB80_24 Depth=2
	movl	%esi, %eax
	andl	$7, %eax
	movzbl	-48(%rbp,%rax), %eax
	subl	%eax, %ecx
	movl	%ecx, %eax
	xorl	%edx, %edx
	divl	%r12d
	movb	%al, (%rdi)
	incq	%rsi
	addq	%r15, %rdi
	decl	%ebx
	jne	LBB80_24
	jmp	LBB80_27
LBB80_25:
	callq	__ZL18stbtt__v_prefilterPhiiij.cold.1
LBB80_28:
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L80_0_set_12, LBB80_12-LJTI80_0
.set L80_0_set_9, LBB80_9-LJTI80_0
.set L80_0_set_6, LBB80_6-LJTI80_0
.set L80_0_set_4, LBB80_4-LJTI80_0
LJTI80_0:
	.long	L80_0_set_12
	.long	L80_0_set_9
	.long	L80_0_set_6
	.long	L80_0_set_4
	.end_data_region
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function stbtt_PackFontRangesRenderIntoRects
LCPI81_0:
	.long	0x80000000                      ## float -0
LCPI81_1:
	.long	0x3f800000                      ## float 1
LCPI81_2:
	.long	0x3eb33333                      ## float 0.349999994
LCPI81_3:
	.long	0x00000000                      ## float 0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_stbtt_PackFontRangesRenderIntoRects
	.p2align	4, 0x90
_stbtt_PackFontRangesRenderIntoRects:   ## @stbtt_PackFontRangesRenderIntoRects
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$288, %rsp                      ## imm = 0x120
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdi, %r13
	movl	36(%rdi), %eax
	movl	%eax, 196(%rsp)                 ## 4-byte Spill
	movl	40(%rdi), %eax
	movl	%eax, 192(%rsp)                 ## 4-byte Spill
	testl	%ecx, %ecx
	jle	LBB81_104
## %bb.1:
	movq	%r8, %r14
	movl	%ecx, %eax
	movq	%rax, 224(%rsp)                 ## 8-byte Spill
	movl	$1, %r8d
	movl	$-1, %r10d
	xorl	%ecx, %ecx
	xorl	%r12d, %r12d
	movq	%r14, 240(%rsp)                 ## 8-byte Spill
	movq	%rdx, 232(%rsp)                 ## 8-byte Spill
	movq	%rsi, 176(%rsp)                 ## 8-byte Spill
	movq	%r13, 184(%rsp)                 ## 8-byte Spill
	jmp	LBB81_4
	.p2align	4, 0x90
LBB81_2:                                ##   in Loop: Header=BB81_4 Depth=1
	movq	160(%rsp), %rcx                 ## 8-byte Reload
LBB81_3:                                ##   in Loop: Header=BB81_4 Depth=1
	incq	%rcx
	cmpq	224(%rsp), %rcx                 ## 8-byte Folded Reload
	je	LBB81_105
LBB81_4:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB81_15 Depth 2
                                        ##       Child Loop BB81_49 Depth 3
                                        ##         Child Loop BB81_69 Depth 4
                                        ##         Child Loop BB81_65 Depth 4
                                        ##         Child Loop BB81_61 Depth 4
                                        ##         Child Loop BB81_54 Depth 4
                                        ##         Child Loop BB81_58 Depth 4
                                        ##         Child Loop BB81_78 Depth 4
	movq	%rcx, 160(%rsp)                 ## 8-byte Spill
	leaq	(%rcx,%rcx,4), %rax
	vmovss	(%rdx,%rax,8), %xmm0            ## xmm0 = mem[0],zero,zero,zero
	vucomiss	LCPI81_3(%rip), %xmm0
	jbe	LBB81_6
## %bb.5:                               ##   in Loop: Header=BB81_4 Depth=1
	movl	%r10d, %r9d
	movq	8(%rsi), %rcx
	movslq	36(%rsi), %rbx
	movzbl	5(%rcx,%rbx), %r10d
	movzbl	4(%rcx,%rbx), %edi
	shll	$8, %edi
	movswl	%di, %edi
	orl	%r10d, %edi
	movzbl	7(%rcx,%rbx), %r10d
	movzbl	6(%rcx,%rbx), %ecx
	shll	$8, %ecx
	movswl	%cx, %ecx
	orl	%r10d, %ecx
	subl	%ecx, %edi
	vcvtsi2ss	%edi, %xmm6, %xmm1
	jmp	LBB81_7
	.p2align	4, 0x90
LBB81_6:                                ##   in Loop: Header=BB81_4 Depth=1
	movl	%r10d, %r9d
	vbroadcastss	LCPI81_0(%rip), %xmm1   ## xmm1 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vxorps	%xmm1, %xmm0, %xmm0
	movq	8(%rsi), %rcx
	movslq	28(%rsi), %rdi
	movzwl	18(%rcx,%rdi), %ecx
	rolw	$8, %cx
	movzwl	%cx, %ecx
	vcvtsi2ss	%ecx, %xmm6, %xmm1
LBB81_7:                                ##   in Loop: Header=BB81_4 Depth=1
	vdivss	%xmm1, %xmm0, %xmm0
	vmovss	%xmm0, 44(%rsp)                 ## 4-byte Spill
	movzbl	32(%rdx,%rax,8), %edi
	movl	%edi, 36(%r13)
	movzbl	33(%rdx,%rax,8), %ecx
	vcvtsi2ss	%edi, %xmm6, %xmm0
	movl	%ecx, 40(%r13)
	vxorps	%xmm1, %xmm1, %xmm1
	vmovss	%xmm1, 88(%rsp)                 ## 4-byte Spill
	vxorps	%xmm1, %xmm1, %xmm1
	vmovss	%xmm1, 84(%rsp)                 ## 4-byte Spill
	testl	%edi, %edi
	je	LBB81_9
## %bb.8:                               ##   in Loop: Header=BB81_4 Depth=1
	movl	$1, %ebx
	subl	%edi, %ebx
	vcvtsi2ss	%ebx, %xmm6, %xmm1
	vaddss	%xmm0, %xmm0, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vmovss	%xmm1, 84(%rsp)                 ## 4-byte Spill
LBB81_9:                                ##   in Loop: Header=BB81_4 Depth=1
	vcvtsi2ss	%ecx, %xmm6, %xmm1
	testl	%ecx, %ecx
	je	LBB81_11
## %bb.10:                              ##   in Loop: Header=BB81_4 Depth=1
	movl	$1, %edi
	subl	%ecx, %edi
	vcvtsi2ss	%edi, %xmm6, %xmm2
	vaddss	%xmm1, %xmm1, %xmm3
	vdivss	%xmm3, %xmm2, %xmm2
	vmovss	%xmm2, 88(%rsp)                 ## 4-byte Spill
LBB81_11:                               ##   in Loop: Header=BB81_4 Depth=1
	cmpl	$0, 16(%rdx,%rax,8)
	movl	%r9d, %r10d
	jle	LBB81_2
## %bb.12:                              ##   in Loop: Header=BB81_4 Depth=1
	vmovss	LCPI81_1(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vdivss	%xmm0, %xmm2, %xmm0
	vmovss	%xmm0, 204(%rsp)                ## 4-byte Spill
	vdivss	%xmm1, %xmm2, %xmm0
	vmovss	%xmm0, 200(%rsp)                ## 4-byte Spill
	leaq	(%rdx,%rax,8), %r9
	addq	$16, %r9
	movslq	%r12d, %r12
	xorl	%eax, %eax
	movq	%rax, 72(%rsp)                  ## 8-byte Spill
	movq	160(%rsp), %rcx                 ## 8-byte Reload
	movq	%r9, 248(%rsp)                  ## 8-byte Spill
	jmp	LBB81_15
	.p2align	4, 0x90
LBB81_20:                               ##   in Loop: Header=BB81_15 Depth=2
	cmpl	$0, 32(%r13)
	je	LBB81_84
LBB81_13:                               ##   in Loop: Header=BB81_15 Depth=2
	xorl	%r8d, %r8d
LBB81_14:                               ##   in Loop: Header=BB81_15 Depth=2
	incq	%r12
	movq	72(%rsp), %rdi                  ## 8-byte Reload
	incq	%rdi
	movslq	(%r9), %rax
	movq	%rdi, %rbx
	movq	%rdi, 72(%rsp)                  ## 8-byte Spill
	cmpq	%rax, %rdi
	jge	LBB81_3
LBB81_15:                               ##   Parent Loop BB81_4 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB81_49 Depth 3
                                        ##         Child Loop BB81_69 Depth 4
                                        ##         Child Loop BB81_65 Depth 4
                                        ##         Child Loop BB81_61 Depth 4
                                        ##         Child Loop BB81_54 Depth 4
                                        ##         Child Loop BB81_58 Depth 4
                                        ##         Child Loop BB81_78 Depth 4
	leaq	(%r12,%r12,2), %rbx
	cmpl	$0, 20(%r14,%rbx,8)
	je	LBB81_13
## %bb.16:                              ##   in Loop: Header=BB81_15 Depth=2
	cmpl	$0, 12(%r14,%rbx,8)
	je	LBB81_20
## %bb.17:                              ##   in Loop: Header=BB81_15 Depth=2
	cmpl	$0, 16(%r14,%rbx,8)
	je	LBB81_13
## %bb.18:                              ##   in Loop: Header=BB81_15 Depth=2
	movq	-8(%r9), %rax
	testq	%rax, %rax
	movl	%r8d, 212(%rsp)                 ## 4-byte Spill
	movl	%r10d, 208(%rsp)                ## 4-byte Spill
	movq	%rsi, %r13
	je	LBB81_23
## %bb.19:                              ##   in Loop: Header=BB81_15 Depth=2
	movq	%r9, %rcx
	movq	72(%rsp), %rdx                  ## 8-byte Reload
	movl	(%rax,%rdx,4), %esi
	jmp	LBB81_24
LBB81_23:                               ##   in Loop: Header=BB81_15 Depth=2
	movq	%r9, %rcx
	movl	-12(%r9), %esi
	addl	72(%rsp), %esi                  ## 4-byte Folded Reload
LBB81_24:                               ##   in Loop: Header=BB81_15 Depth=2
	leaq	(%r14,%rbx,8), %r15
	addq	$12, %r15
	movq	8(%rcx), %rax
	movq	%rax, 256(%rsp)                 ## 8-byte Spill
	movq	%r13, %rdi
	callq	_stbtt_FindGlyphIndex
	movq	184(%rsp), %rdx                 ## 8-byte Reload
	movl	28(%rdx), %esi
	movl	(%r14,%rbx,8), %r9d
	addl	%esi, %r9d
	movl	%r9d, (%r14,%rbx,8)
	movl	4(%r14,%rbx,8), %r10d
	addl	%esi, %r10d
	movl	%r10d, 4(%r14,%rbx,8)
	movl	(%r15), %r14d
	subl	%esi, %r14d
	movl	%r14d, (%r15)
	movl	4(%r15), %ecx
	subl	%esi, %ecx
	movq	%r15, 168(%rsp)                 ## 8-byte Spill
	movl	%ecx, 4(%r15)
	movq	%r13, %rdi
	movq	%rdx, %r13
	movq	8(%rdi), %r15
	movslq	36(%rdi), %rdx
	movzwl	34(%r15,%rdx), %edx
	rolw	$8, %dx
	movzwl	%dx, %edx
	movslq	40(%rdi), %rbx
	addq	%r15, %rbx
	movslq	%eax, %r8
	leaq	(,%r8,4), %rsi
	cmpl	%r8d, %edx
	leal	-4(,%rdx,4), %edx
	movq	%rsi, 48(%rsp)                  ## 8-byte Spill
	cmovgl	%esi, %edx
	movslq	%edx, %rdx
	movzwl	(%rdx,%rbx), %edx
	movl	36(%r13), %esi
	vcvtsi2ss	%rsi, %xmm6, %xmm0
	movl	40(%r13), %r11d
	vcvtsi2ss	%r11, %xmm6, %xmm1
	vmovss	44(%rsp), %xmm2                 ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmulss	%xmm0, %xmm2, %xmm3
	vmulss	%xmm1, %xmm2, %xmm4
	cmpl	$0, 76(%rdi)
	movl	%eax, 92(%rsp)                  ## 4-byte Spill
	movq	%r12, 64(%rsp)                  ## 8-byte Spill
	movw	%dx, 62(%rsp)                   ## 2-byte Spill
	vmovss	%xmm4, 32(%rsp)                 ## 4-byte Spill
	vmovss	%xmm3, 12(%rsp)                 ## 4-byte Spill
	movq	%r8, 152(%rsp)                  ## 8-byte Spill
	je	LBB81_29
## %bb.25:                              ##   in Loop: Header=BB81_15 Depth=2
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%ymm0, 96(%rsp)
	vmovups	%ymm0, 120(%rsp)
	movl	$1, 96(%rsp)
	movl	%eax, %esi
	leaq	96(%rsp), %rdx
	vzeroupper
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx
	movl	%eax, %esi
	testl	%eax, %eax
	je	LBB81_27
## %bb.26:                              ##   in Loop: Header=BB81_15 Depth=2
	movl	120(%rsp), %eax
	movl	132(%rsp), %esi
LBB81_27:                               ##   in Loop: Header=BB81_15 Depth=2
	movq	168(%rsp), %rdi                 ## 8-byte Reload
	movl	-12(%rdi), %r9d
	movl	-8(%rdi), %r10d
	movl	(%rdi), %r14d
	movl	36(%r13), %ecx
	movl	40(%r13), %r11d
	movl	4(%rdi), %ebx
	movq	%rcx, %rdi
	vcvtsi2ss	%rcx, %xmm6, %xmm0
	vmovss	44(%rsp), %xmm2                 ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmulss	%xmm0, %xmm2, %xmm0
	vcvtsi2ss	%r11, %xmm6, %xmm1
	vmulss	%xmm1, %xmm2, %xmm1
	vmovss	32(%rsp), %xmm4                 ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vmovss	12(%rsp), %xmm3                 ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
LBB81_28:                               ##   in Loop: Header=BB81_15 Depth=2
	vcvtsi2ss	%eax, %xmm6, %xmm2
	vmulss	%xmm3, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	vaddss	%xmm3, %xmm2, %xmm2
	vroundss	$9, %xmm2, %xmm2, %xmm2
	vcvttss2si	%xmm2, %eax
	movl	%eax, 28(%rsp)                  ## 4-byte Spill
	negl	%esi
	vcvtsi2ss	%esi, %xmm5, %xmm2
	vmulss	%xmm4, %xmm2, %xmm2
	vaddss	%xmm3, %xmm2, %xmm2
	vroundss	$9, %xmm2, %xmm2, %xmm2
	vcvttss2si	%xmm2, %eax
	movl	%eax, 24(%rsp)                  ## 4-byte Spill
	vmovss	%xmm1, 32(%rsp)                 ## 4-byte Spill
	vmovss	%xmm0, 12(%rsp)                 ## 4-byte Spill
	movq	%rdi, %rsi
	jmp	LBB81_33
LBB81_29:                               ##   in Loop: Header=BB81_15 Depth=2
	movl	%ecx, %ebx
	cmpl	%eax, 20(%rdi)
	jle	LBB81_31
## %bb.30:                              ##   in Loop: Header=BB81_15 Depth=2
	movl	60(%rdi), %eax
	cmpl	$1, %eax
	jle	LBB81_87
LBB81_31:                               ##   in Loop: Header=BB81_15 Depth=2
	movl	$0, 28(%rsp)                    ## 4-byte Folded Spill
LBB81_32:                               ##   in Loop: Header=BB81_15 Depth=2
	movl	$0, 24(%rsp)                    ## 4-byte Folded Spill
LBB81_33:                               ##   in Loop: Header=BB81_15 Depth=2
	subl	%r11d, %ebx
	subl	%esi, %r14d
	movslq	%r9d, %rax
	addq	48(%r13), %rax
	movl	24(%r13), %r15d
	imull	%r15d, %r10d
	movslq	%r10d, %rcx
	addq	%rax, %rcx
	movq	%rcx, 16(%rsp)                  ## 8-byte Spill
	incl	%r14d
	incl	%ebx
	movq	176(%rsp), %r12                 ## 8-byte Reload
	movq	%r12, %rdi
	movl	92(%rsp), %r13d                 ## 4-byte Reload
	movl	%r13d, %esi
	leaq	216(%rsp), %rdx
	callq	_stbtt_GetGlyphShape
	movl	%eax, %r9d
	cmpl	$0, 76(%r12)
	je	LBB81_38
## %bb.34:                              ##   in Loop: Header=BB81_15 Depth=2
	movl	%r15d, 48(%rsp)                 ## 4-byte Spill
	movl	%r9d, %r15d
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%ymm0, 96(%rsp)
	vmovups	%ymm0, 120(%rsp)
	movl	$1, 96(%rsp)
	movq	%r12, %rdi
	movl	%r13d, %esi
	leaq	96(%rsp), %rdx
	vzeroupper
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx
	movl	%eax, %edx
	testl	%eax, %eax
	je	LBB81_36
## %bb.35:                              ##   in Loop: Header=BB81_15 Depth=2
	movl	120(%rsp), %eax
	movl	132(%rsp), %edx
LBB81_36:                               ##   in Loop: Header=BB81_15 Depth=2
	movq	64(%rsp), %r12                  ## 8-byte Reload
	vmovss	32(%rsp), %xmm2                 ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	12(%rsp), %xmm1                 ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	movl	%r15d, %r9d
	movl	48(%rsp), %r15d                 ## 4-byte Reload
	movq	16(%rsp), %rdi                  ## 8-byte Reload
LBB81_37:                               ##   in Loop: Header=BB81_15 Depth=2
	vcvtsi2ss	%eax, %xmm5, %xmm0
	vmulss	%xmm1, %xmm0, %xmm0
	vxorps	%xmm3, %xmm3, %xmm3
	vaddss	%xmm3, %xmm0, %xmm0
	vroundss	$9, %xmm0, %xmm0, %xmm0
	vcvttss2si	%xmm0, %ecx
	negl	%edx
	vcvtsi2ss	%edx, %xmm5, %xmm0
	vmulss	%xmm2, %xmm0, %xmm0
	vaddss	%xmm3, %xmm0, %xmm0
	vroundss	$9, %xmm0, %xmm0, %xmm0
	vcvttss2si	%xmm0, %r8d
	jmp	LBB81_41
LBB81_38:                               ##   in Loop: Header=BB81_15 Depth=2
	xorl	%ecx, %ecx
	cmpl	%r13d, 20(%r12)
	jle	LBB81_40
## %bb.39:                              ##   in Loop: Header=BB81_15 Depth=2
	movl	60(%r12), %eax
	cmpl	$1, %eax
	jle	LBB81_91
LBB81_40:                               ##   in Loop: Header=BB81_15 Depth=2
	xorl	%r8d, %r8d
	movq	64(%rsp), %r12                  ## 8-byte Reload
	vmovss	32(%rsp), %xmm2                 ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	12(%rsp), %xmm1                 ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	movq	16(%rsp), %rdi                  ## 8-byte Reload
LBB81_41:                               ##   in Loop: Header=BB81_15 Depth=2
	movq	%rdi, 112(%rsp)
	movl	%r14d, 96(%rsp)
	movl	%ebx, 100(%rsp)
	movl	%r15d, 104(%rsp)
	testl	%r14d, %r14d
	je	LBB81_44
## %bb.42:                              ##   in Loop: Header=BB81_15 Depth=2
	testl	%ebx, %ebx
	je	LBB81_44
## %bb.43:                              ##   in Loop: Header=BB81_15 Depth=2
	movq	216(%rsp), %r13
	vxorps	%xmm3, %xmm3, %xmm3
	vxorps	%xmm4, %xmm4, %xmm4
	leaq	96(%rsp), %rdi
	vmovss	LCPI81_2(%rip), %xmm0           ## xmm0 = mem[0],zero,zero,zero
	movq	%r13, %rsi
	movl	%r9d, %edx
	movl	$1, %r9d
	callq	_stbtt_Rasterize
	jmp	LBB81_45
LBB81_44:                               ##   in Loop: Header=BB81_15 Depth=2
	movq	216(%rsp), %r13
LBB81_45:                               ##   in Loop: Header=BB81_15 Depth=2
	movq	%r13, %rdi
	callq	_free
	movq	184(%rsp), %r13                 ## 8-byte Reload
	movl	36(%r13), %r15d
	cmpq	$2, %r15
	jb	LBB81_81
## %bb.46:                              ##   in Loop: Header=BB81_15 Depth=2
	movq	48(%r13), %rax
	movq	168(%rsp), %rdx                 ## 8-byte Reload
	movslq	-12(%rdx), %rcx
	movslq	-8(%rdx), %rbx
	movslq	24(%r13), %rsi
	movq	%rsi, 32(%rsp)                  ## 8-byte Spill
	movl	(%rdx), %r13d
	movl	4(%rdx), %edx
	movq	$0, 96(%rsp)
	movl	%edx, 12(%rsp)                  ## 4-byte Spill
	testl	%edx, %edx
	jle	LBB81_80
## %bb.47:                              ##   in Loop: Header=BB81_15 Depth=2
	addq	%rcx, %rax
	imulq	32(%rsp), %rbx                  ## 8-byte Folded Reload
	addq	%rax, %rbx
	movl	%r13d, %eax
	subl	%r15d, %eax
	movq	%rax, 16(%rsp)                  ## 8-byte Spill
	leal	1(%rax), %r14d
	leaq	-1(%r14), %rax
	movq	%rax, 48(%rsp)                  ## 8-byte Spill
	movl	%r14d, %r9d
	andl	$-2, %r9d
	xorl	%r12d, %r12d
	movq	%r9, 152(%rsp)                  ## 8-byte Spill
	jmp	LBB81_49
	.p2align	4, 0x90
LBB81_48:                               ##   in Loop: Header=BB81_49 Depth=3
	addq	32(%rsp), %rbx                  ## 8-byte Folded Reload
	incl	%r12d
	cmpl	12(%rsp), %r12d                 ## 4-byte Folded Reload
	je	LBB81_80
LBB81_49:                               ##   Parent Loop BB81_4 Depth=1
                                        ##     Parent Loop BB81_15 Depth=2
                                        ## =>    This Loop Header: Depth=3
                                        ##         Child Loop BB81_69 Depth 4
                                        ##         Child Loop BB81_65 Depth 4
                                        ##         Child Loop BB81_61 Depth 4
                                        ##         Child Loop BB81_54 Depth 4
                                        ##         Child Loop BB81_58 Depth 4
                                        ##         Child Loop BB81_78 Depth 4
	leaq	96(%rsp), %rdi
	movq	%r15, %rsi
	callq	___bzero
	leal	-2(%r15), %eax
	cmpl	$3, %eax
	ja	LBB81_56
## %bb.50:                              ##   in Loop: Header=BB81_49 Depth=3
	leaq	LJTI81_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
LBB81_51:                               ##   in Loop: Header=BB81_49 Depth=3
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB81_70
## %bb.52:                              ##   in Loop: Header=BB81_49 Depth=3
	cmpq	$0, 48(%rsp)                    ## 8-byte Folded Reload
	je	LBB81_71
## %bb.53:                              ##   in Loop: Header=BB81_49 Depth=3
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movq	152(%rsp), %r9                  ## 8-byte Reload
	.p2align	4, 0x90
LBB81_54:                               ##   Parent Loop BB81_4 Depth=1
                                        ##     Parent Loop BB81_15 Depth=2
                                        ##       Parent Loop BB81_49 Depth=3
                                        ## =>      This Inner Loop Header: Depth=4
	movzbl	(%rbx,%rdx), %esi
	movl	%edx, %eax
	andl	$6, %eax
	movzbl	96(%rsp,%rax), %r8d
	leaq	2(%rdx), %rdi
	movl	%edi, %eax
	andl	$6, %eax
	movb	%sil, 96(%rsp,%rax)
	subl	%r8d, %esi
	addl	%ecx, %esi
	movl	%esi, %eax
	shrl	%eax
	movb	%al, (%rbx,%rdx)
	leal	1(%rdx), %eax
	movzbl	1(%rbx,%rdx), %ecx
	andl	$7, %eax
	movzbl	96(%rsp,%rax), %r8d
	leal	3(%rdx), %eax
	andl	$7, %eax
	movb	%cl, 96(%rsp,%rax)
                                        ## kill: def $ecx killed $ecx def $rcx
	subl	%r8d, %ecx
	addl	%esi, %ecx
	movl	%ecx, %eax
	shrl	%eax
	movb	%al, 1(%rbx,%rdx)
	movq	%rdi, %rdx
	cmpq	%rdi, %r9
	jne	LBB81_54
## %bb.55:                              ##   in Loop: Header=BB81_49 Depth=3
	movl	%r14d, %edx
	testb	$1, %r14b
	jne	LBB81_72
	jmp	LBB81_76
	.p2align	4, 0x90
LBB81_56:                               ##   in Loop: Header=BB81_49 Depth=3
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB81_70
## %bb.57:                              ##   in Loop: Header=BB81_49 Depth=3
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB81_58:                               ##   Parent Loop BB81_4 Depth=1
                                        ##     Parent Loop BB81_15 Depth=2
                                        ##       Parent Loop BB81_49 Depth=3
                                        ## =>      This Inner Loop Header: Depth=4
	movzbl	(%rbx,%rsi), %eax
	movl	%esi, %edx
	andl	$7, %edx
	movzbl	96(%rsp,%rdx), %edx
	leal	(%r15,%rsi), %edi
	andl	$7, %edi
	movb	%al, 96(%rsp,%rdi)
	subl	%edx, %eax
	addl	%eax, %ecx
	movl	%ecx, %eax
	xorl	%edx, %edx
	divl	%r15d
	movb	%al, (%rbx,%rsi)
	incq	%rsi
	cmpq	%rsi, %r14
	jne	LBB81_58
	jmp	LBB81_75
	.p2align	4, 0x90
LBB81_59:                               ##   in Loop: Header=BB81_49 Depth=3
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB81_70
## %bb.60:                              ##   in Loop: Header=BB81_49 Depth=3
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movl	$2863311531, %r8d               ## imm = 0xAAAAAAAB
	.p2align	4, 0x90
LBB81_61:                               ##   Parent Loop BB81_4 Depth=1
                                        ##     Parent Loop BB81_15 Depth=2
                                        ##       Parent Loop BB81_49 Depth=3
                                        ## =>      This Inner Loop Header: Depth=4
	movzbl	(%rbx,%rax), %edx
	movl	%eax, %esi
	andl	$7, %esi
	movzbl	96(%rsp,%rsi), %esi
	leal	3(%rax), %edi
	andl	$7, %edi
	movb	%dl, 96(%rsp,%rdi)
	subl	%esi, %edx
	addl	%edx, %ecx
	movq	%rcx, %rdx
	imulq	%r8, %rdx
	shrq	$33, %rdx
	movb	%dl, (%rbx,%rax)
	incq	%rax
	cmpq	%rax, %r14
	jne	LBB81_61
	jmp	LBB81_75
	.p2align	4, 0x90
LBB81_62:                               ##   in Loop: Header=BB81_49 Depth=3
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB81_70
## %bb.63:                              ##   in Loop: Header=BB81_49 Depth=3
	cmpq	$0, 48(%rsp)                    ## 8-byte Folded Reload
	je	LBB81_73
## %bb.64:                              ##   in Loop: Header=BB81_49 Depth=3
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movq	152(%rsp), %r9                  ## 8-byte Reload
	.p2align	4, 0x90
LBB81_65:                               ##   Parent Loop BB81_4 Depth=1
                                        ##     Parent Loop BB81_15 Depth=2
                                        ##       Parent Loop BB81_49 Depth=3
                                        ## =>      This Inner Loop Header: Depth=4
	movzbl	(%rbx,%rax), %edx
	movl	%eax, %esi
	andl	$6, %esi
	movzbl	96(%rsp,%rsi), %esi
	leal	4(%rax), %edi
	andl	$6, %edi
	movb	%dl, 96(%rsp,%rdi)
	subl	%esi, %edx
	addl	%ecx, %edx
	movl	%edx, %ecx
	shrl	$2, %ecx
	movb	%cl, (%rbx,%rax)
	leal	1(%rax), %ecx
	movzbl	1(%rbx,%rax), %esi
	andl	$7, %ecx
	movzbl	96(%rsp,%rcx), %edi
	leal	5(%rax), %ecx
	andl	$7, %ecx
	movb	%sil, 96(%rsp,%rcx)
	movl	%esi, %ecx
	subl	%edi, %ecx
	addl	%edx, %ecx
	movl	%ecx, %edx
	shrl	$2, %edx
	movb	%dl, 1(%rbx,%rax)
	addq	$2, %rax
	cmpq	%rax, %r9
	jne	LBB81_65
## %bb.66:                              ##   in Loop: Header=BB81_49 Depth=3
	movl	%r14d, %edx
	testb	$1, %r14b
	jne	LBB81_74
	jmp	LBB81_76
	.p2align	4, 0x90
LBB81_67:                               ##   in Loop: Header=BB81_49 Depth=3
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB81_70
## %bb.68:                              ##   in Loop: Header=BB81_49 Depth=3
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movl	$3435973837, %r8d               ## imm = 0xCCCCCCCD
	.p2align	4, 0x90
LBB81_69:                               ##   Parent Loop BB81_4 Depth=1
                                        ##     Parent Loop BB81_15 Depth=2
                                        ##       Parent Loop BB81_49 Depth=3
                                        ## =>      This Inner Loop Header: Depth=4
	movzbl	(%rbx,%rax), %edx
	movl	%eax, %esi
	andl	$7, %esi
	movzbl	96(%rsp,%rsi), %esi
	leal	5(%rax), %edi
	andl	$7, %edi
	movb	%dl, 96(%rsp,%rdi)
	subl	%esi, %edx
	addl	%edx, %ecx
	movq	%rcx, %rdx
	imulq	%r8, %rdx
	shrq	$34, %rdx
	movb	%dl, (%rbx,%rax)
	incq	%rax
	cmpq	%rax, %r14
	jne	LBB81_69
	jmp	LBB81_75
	.p2align	4, 0x90
LBB81_70:                               ##   in Loop: Header=BB81_49 Depth=3
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	jmp	LBB81_76
LBB81_71:                               ##   in Loop: Header=BB81_49 Depth=3
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	testb	$1, %r14b
	je	LBB81_76
LBB81_72:                               ##   in Loop: Header=BB81_49 Depth=3
	movzbl	(%rbx,%rdi), %eax
	movl	%edi, %edx
	andl	$7, %edx
	movzbl	96(%rsp,%rdx), %edx
	leal	2(%rdi), %esi
	andl	$7, %esi
	movb	%al, 96(%rsp,%rsi)
	subl	%edx, %eax
	addl	%ecx, %eax
	movl	%eax, %ecx
	shrl	%eax
	movb	%al, (%rbx,%rdi)
	jmp	LBB81_75
LBB81_73:                               ##   in Loop: Header=BB81_49 Depth=3
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	testb	$1, %r14b
	je	LBB81_76
LBB81_74:                               ##   in Loop: Header=BB81_49 Depth=3
	movzbl	(%rbx,%rax), %edx
	movl	%eax, %esi
	andl	$7, %esi
	movzbl	96(%rsp,%rsi), %esi
	leal	4(%rax), %edi
	andl	$7, %edi
	movb	%dl, 96(%rsp,%rdi)
	subl	%esi, %edx
	addl	%ecx, %edx
	movl	%edx, %ecx
	shrl	$2, %edx
	movb	%dl, (%rbx,%rax)
	.p2align	4, 0x90
LBB81_75:                               ##   in Loop: Header=BB81_49 Depth=3
	movl	%r14d, %edx
LBB81_76:                               ##   in Loop: Header=BB81_49 Depth=3
	cmpl	%r13d, %edx
	jge	LBB81_48
## %bb.77:                              ##   in Loop: Header=BB81_49 Depth=3
	movl	%edx, %esi
	.p2align	4, 0x90
LBB81_78:                               ##   Parent Loop BB81_4 Depth=1
                                        ##     Parent Loop BB81_15 Depth=2
                                        ##       Parent Loop BB81_49 Depth=3
                                        ## =>      This Inner Loop Header: Depth=4
	cmpb	$0, (%rbx,%rsi)
	jne	LBB81_103
## %bb.79:                              ##   in Loop: Header=BB81_78 Depth=4
	movl	%esi, %eax
	andl	$7, %eax
	movzbl	96(%rsp,%rax), %eax
	subl	%eax, %ecx
	movl	%ecx, %eax
	xorl	%edx, %edx
	divl	%r15d
	movb	%al, (%rbx,%rsi)
	incq	%rsi
	cmpl	%esi, %r13d
	jg	LBB81_78
	jmp	LBB81_48
LBB81_80:                               ##   in Loop: Header=BB81_15 Depth=2
	movq	184(%rsp), %r13                 ## 8-byte Reload
	movq	64(%rsp), %r12                  ## 8-byte Reload
LBB81_81:                               ##   in Loop: Header=BB81_15 Depth=2
	movzwl	62(%rsp), %r14d                 ## 2-byte Folded Reload
	rolw	$8, %r14w
	movl	40(%r13), %r8d
	cmpl	$2, %r8d
	jb	LBB81_83
## %bb.82:                              ##   in Loop: Header=BB81_15 Depth=2
	movq	168(%rsp), %rdx                 ## 8-byte Reload
	movslq	-12(%rdx), %rax
	addq	48(%r13), %rax
	movslq	-8(%rdx), %rdi
	movslq	24(%r13), %rcx
	imulq	%rcx, %rdi
	addq	%rax, %rdi
	movl	(%rdx), %esi
	movl	4(%rdx), %edx
                                        ## kill: def $ecx killed $ecx killed $rcx
	callq	__ZL18stbtt__v_prefilterPhiiij
LBB81_83:                               ##   in Loop: Header=BB81_15 Depth=2
	movq	168(%rsp), %rdi                 ## 8-byte Reload
	movl	-12(%rdi), %ecx
	movq	72(%rsp), %r8                   ## 8-byte Reload
	leaq	(%r8,%r8,8), %rax
	leaq	(%rax,%rax,2), %rax
	addq	%r8, %rax
	movq	256(%rsp), %rbx                 ## 8-byte Reload
	movw	%cx, (%rbx,%rax)
	movl	-8(%rdi), %edx
	movw	%dx, 2(%rbx,%rax)
	movl	(%rdi), %esi
	addl	%esi, %ecx
	movw	%cx, 4(%rbx,%rax)
	movl	4(%rdi), %ecx
	addl	%ecx, %edx
	movswl	%r14w, %edi
	vcvtsi2ss	%edi, %xmm5, %xmm0
	movw	%dx, 6(%rbx,%rax)
	movl	28(%rsp), %edx                  ## 4-byte Reload
	vcvtsi2ss	%edx, %xmm5, %xmm1
	vmulss	44(%rsp), %xmm0, %xmm0          ## 4-byte Folded Reload
	vmovss	%xmm0, 16(%rbx,%rax)
	vmovss	204(%rsp), %xmm4                ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vmulss	%xmm4, %xmm1, %xmm0
	vmovss	84(%rsp), %xmm3                 ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vaddss	%xmm3, %xmm0, %xmm0
	vmovss	%xmm0, 8(%rbx,%rax)
	movl	24(%rsp), %edi                  ## 4-byte Reload
	vcvtsi2ss	%edi, %xmm5, %xmm0
	vmovss	200(%rsp), %xmm5                ## 4-byte Reload
                                        ## xmm5 = mem[0],zero,zero,zero
	vmulss	%xmm5, %xmm0, %xmm0
	vmovss	88(%rsp), %xmm2                 ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vaddss	%xmm2, %xmm0, %xmm0
	vmovss	%xmm0, 12(%rbx,%rax)
	addl	%edx, %esi
	vcvtsi2ss	%esi, %xmm6, %xmm0
	vmulss	%xmm4, %xmm0, %xmm0
	addl	%edi, %ecx
	vcvtsi2ss	%ecx, %xmm6, %xmm1
	vaddss	%xmm3, %xmm0, %xmm0
	vmovss	%xmm0, 20(%rbx,%rax)
	vmulss	%xmm5, %xmm1, %xmm0
	vaddss	%xmm2, %xmm0, %xmm0
	vmovss	%xmm0, 24(%rbx,%rax)
	cmpl	$0, 92(%rsp)                    ## 4-byte Folded Reload
	movl	208(%rsp), %r10d                ## 4-byte Reload
	cmovel	%r8d, %r10d
	movq	240(%rsp), %r14                 ## 8-byte Reload
	movq	232(%rsp), %rdx                 ## 8-byte Reload
	movq	176(%rsp), %rsi                 ## 8-byte Reload
	movl	212(%rsp), %r8d                 ## 4-byte Reload
	movq	160(%rsp), %rcx                 ## 8-byte Reload
	movq	248(%rsp), %r9                  ## 8-byte Reload
	jmp	LBB81_14
LBB81_84:                               ##   in Loop: Header=BB81_15 Depth=2
	cmpl	$0, 16(%r14,%rbx,8)
	jne	LBB81_13
## %bb.85:                              ##   in Loop: Header=BB81_15 Depth=2
	testl	%r10d, %r10d
	js	LBB81_13
## %bb.86:                              ##   in Loop: Header=BB81_15 Depth=2
	movq	8(%r9), %rax
	movl	%r10d, %ecx
	leaq	(%rcx,%rcx,8), %rdi
	leaq	(%rdi,%rdi,2), %rdi
	addq	%rcx, %rdi
	movq	72(%rsp), %rbx                  ## 8-byte Reload
	leaq	(%rbx,%rbx,8), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	addq	%rbx, %rcx
	vmovups	(%rax,%rdi), %xmm0
	vmovups	12(%rax,%rdi), %xmm1
	vmovups	%xmm1, 12(%rax,%rcx)
	vmovups	%xmm0, (%rax,%rcx)
	movq	160(%rsp), %rcx                 ## 8-byte Reload
	jmp	LBB81_14
LBB81_87:                               ##   in Loop: Header=BB81_15 Depth=2
	movslq	24(%rdi), %rcx
	addq	%r15, %rcx
	testl	%eax, %eax
	je	LBB81_95
## %bb.88:                              ##   in Loop: Header=BB81_15 Depth=2
	movl	$0, 28(%rsp)                    ## 4-byte Folded Spill
	movq	48(%rsp), %rax                  ## 8-byte Reload
	movl	(%rcx,%rax), %edx
	movl	4(%rcx,%rax), %eax
	bswapl	%edx
	bswapl	%eax
	cmpl	%eax, %edx
	jne	LBB81_89
	jmp	LBB81_32
LBB81_91:                               ##   in Loop: Header=BB81_15 Depth=2
	movq	8(%r12), %rdx
	movslq	24(%r12), %rsi
	addq	%rdx, %rsi
	testl	%eax, %eax
	je	LBB81_97
## %bb.92:                              ##   in Loop: Header=BB81_15 Depth=2
	movq	48(%rsp), %rdi                  ## 8-byte Reload
	movl	(%rsi,%rdi), %eax
	movl	4(%rsi,%rdi), %esi
	bswapl	%eax
	bswapl	%esi
	jmp	LBB81_98
LBB81_95:                               ##   in Loop: Header=BB81_15 Depth=2
	movl	$0, 28(%rsp)                    ## 4-byte Folded Spill
	movzbl	(%rcx,%r8,2), %eax
	movzbl	1(%rcx,%r8,2), %edx
	shll	$9, %eax
	leal	(%rax,%rdx,2), %edx
	movzbl	2(%rcx,%r8,2), %eax
	movzbl	3(%rcx,%r8,2), %ecx
	shll	$9, %eax
	leal	(%rax,%rcx,2), %eax
	cmpl	%eax, %edx
	je	LBB81_32
LBB81_89:                               ##   in Loop: Header=BB81_15 Depth=2
	addl	32(%rdi), %edx
	js	LBB81_32
## %bb.90:                              ##   in Loop: Header=BB81_15 Depth=2
	movq	%rsi, %rdi
	movl	%edx, %edx
	movzbl	3(%r15,%rdx), %ecx
	movzbl	2(%r15,%rdx), %eax
	shll	$8, %eax
	cwtl
	orl	%ecx, %eax
	movzbl	9(%r15,%rdx), %ecx
	movzbl	8(%r15,%rdx), %esi
	shll	$8, %esi
	movswl	%si, %esi
	orl	%ecx, %esi
	vmovaps	%xmm4, %xmm1
	vmovaps	%xmm3, %xmm0
	jmp	LBB81_28
LBB81_97:                               ##   in Loop: Header=BB81_15 Depth=2
	movq	152(%rsp), %rdi                 ## 8-byte Reload
	movzbl	(%rsi,%rdi,2), %eax
	movzbl	1(%rsi,%rdi,2), %r8d
	shll	$9, %eax
	leal	(%rax,%r8,2), %eax
	movzbl	2(%rsi,%rdi,2), %r8d
	movzbl	3(%rsi,%rdi,2), %esi
	shll	$9, %r8d
	leal	(%r8,%rsi,2), %esi
LBB81_98:                               ##   in Loop: Header=BB81_15 Depth=2
	movq	64(%rsp), %r12                  ## 8-byte Reload
	vmovss	32(%rsp), %xmm2                 ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	12(%rsp), %xmm1                 ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	movq	16(%rsp), %rdi                  ## 8-byte Reload
	cmpl	%esi, %eax
	je	LBB81_102
## %bb.99:                              ##   in Loop: Header=BB81_15 Depth=2
	movq	176(%rsp), %rsi                 ## 8-byte Reload
	addl	32(%rsi), %eax
	movl	$0, %r8d
	js	LBB81_41
## %bb.100:                             ##   in Loop: Header=BB81_15 Depth=2
	movl	%eax, %ecx
	movzbl	3(%rdx,%rcx), %esi
	movzbl	2(%rdx,%rcx), %eax
	shll	$8, %eax
	cwtl
	orl	%esi, %eax
	movzbl	9(%rdx,%rcx), %esi
	movzbl	8(%rdx,%rcx), %ecx
	shll	$8, %ecx
	movswl	%cx, %edx
	orl	%esi, %edx
	jmp	LBB81_37
LBB81_102:                              ##   in Loop: Header=BB81_15 Depth=2
	xorl	%r8d, %r8d
	jmp	LBB81_41
LBB81_103:
	callq	_stbtt_PackFontRangesRenderIntoRects.cold.1
	xorl	%eax, %eax
	jmp	LBB81_106
LBB81_104:
	movl	$1, %r8d
LBB81_105:
	movl	196(%rsp), %eax                 ## 4-byte Reload
	movl	%eax, 36(%r13)
	movl	192(%rsp), %eax                 ## 4-byte Reload
	movl	%eax, 40(%r13)
	movl	%r8d, %eax
LBB81_106:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L81_0_set_51, LBB81_51-LJTI81_0
.set L81_0_set_59, LBB81_59-LJTI81_0
.set L81_0_set_62, LBB81_62-LJTI81_0
.set L81_0_set_67, LBB81_67-LJTI81_0
LJTI81_0:
	.long	L81_0_set_51
	.long	L81_0_set_59
	.long	L81_0_set_62
	.long	L81_0_set_67
	.end_data_region
                                        ## -- End function
	.globl	_stbtt_PackFontRangesPackRects  ## -- Begin function stbtt_PackFontRangesPackRects
	.p2align	4, 0x90
_stbtt_PackFontRangesPackRects:         ## @stbtt_PackFontRangesPackRects
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
                                        ## kill: def $edx killed $edx def $rdx
	testl	%edx, %edx
	jle	LBB82_1
## %bb.10:
	movq	8(%rdi), %r14
	movl	(%r14), %r8d
	movl	4(%r14), %r9d
	movl	8(%r14), %ecx
	movl	12(%r14), %r11d
	movl	%edx, %r10d
	leaq	20(%rsi), %rdi
	xorl	%r15d, %r15d
	jmp	LBB82_11
	.p2align	4, 0x90
LBB82_16:                               ##   in Loop: Header=BB82_11 Depth=1
	incq	%r15
	addq	$24, %rdi
	cmpq	%r15, %r10
	je	LBB82_17
LBB82_11:                               ## =>This Inner Loop Header: Depth=1
	movl	%ecx, %ebx
	movl	-8(%rdi), %ecx
	leal	(%rcx,%rbx), %eax
	cmpl	%r8d, %eax
	jle	LBB82_13
## %bb.12:                              ##   in Loop: Header=BB82_11 Depth=1
	movl	$0, 8(%r14)
	movl	16(%r14), %r11d
	movl	%r11d, 12(%r14)
	xorl	%ebx, %ebx
LBB82_13:                               ##   in Loop: Header=BB82_11 Depth=1
	movl	-4(%rdi), %eax
	addl	%r11d, %eax
	cmpl	%r9d, %eax
	jg	LBB82_2
## %bb.14:                              ##   in Loop: Header=BB82_11 Depth=1
	movl	%ebx, -20(%rdi)
	movl	%r11d, -16(%rdi)
	movl	$1, (%rdi)
	addl	%ebx, %ecx
	movl	%ecx, 8(%r14)
	cmpl	16(%r14), %eax
	jle	LBB82_16
## %bb.15:                              ##   in Loop: Header=BB82_11 Depth=1
	movl	%eax, 16(%r14)
	jmp	LBB82_16
LBB82_1:
	xorl	%r15d, %r15d
LBB82_2:
	cmpl	%edx, %r15d
	jge	LBB82_17
## %bb.3:
	movl	%r15d, %r8d
	movl	%edx, %ecx
	subl	%r15d, %edx
	movq	%r8, %rax
	notq	%rax
	addq	%rcx, %rax
	andq	$3, %rdx
	je	LBB82_7
## %bb.4:
	leaq	(%r8,%r8,2), %rdi
	leaq	(%rsi,%rdi,8), %rbx
	addq	$20, %rbx
	negq	%rdx
	xorl	%edi, %edi
	.p2align	4, 0x90
LBB82_5:                                ## =>This Inner Loop Header: Depth=1
	movl	$0, (%rbx)
	decq	%rdi
	addq	$24, %rbx
	cmpq	%rdi, %rdx
	jne	LBB82_5
## %bb.6:
	subq	%rdi, %r8
LBB82_7:
	cmpq	$3, %rax
	jb	LBB82_17
## %bb.8:
	subq	%r8, %rcx
	leaq	(%r8,%r8,2), %rax
	leaq	(%rsi,%rax,8), %rax
	addq	$92, %rax
	.p2align	4, 0x90
LBB82_9:                                ## =>This Inner Loop Header: Depth=1
	movl	$0, -72(%rax)
	movl	$0, -48(%rax)
	movl	$0, -24(%rax)
	movl	$0, (%rax)
	addq	$96, %rax
	addq	$-4, %rcx
	jne	LBB82_9
LBB82_17:
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_PackFontRanges           ## -- Begin function stbtt_PackFontRanges
	.p2align	4, 0x90
_stbtt_PackFontRanges:                  ## @stbtt_PackFontRanges
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r12
	movq	%rdi, %rbx
	xorl	%r13d, %r13d
	testl	%r8d, %r8d
	movl	%r8d, -48(%rbp)                 ## 4-byte Spill
	movl	%edx, -44(%rbp)                 ## 4-byte Spill
	jle	LBB83_1
## %bb.2:
	movq	%rbx, %r9
	movl	%r8d, %r11d
	xorl	%r14d, %r14d
	jmp	LBB83_3
	.p2align	4, 0x90
LBB83_30:                               ##   in Loop: Header=BB83_3 Depth=1
	incq	%r14
	cmpq	%r11, %r14
	je	LBB83_6
LBB83_3:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB83_26 Depth 2
                                        ##     Child Loop BB83_29 Depth 2
	leaq	(%r14,%r14,4), %rax
	movl	16(%r12,%rax,8), %edi
	testl	%edi, %edi
	jle	LBB83_30
## %bb.4:                               ##   in Loop: Header=BB83_3 Depth=1
	movq	24(%r12,%rax,8), %rcx
	leaq	-1(%rdi), %rax
	movl	%edi, %r10d
	andl	$7, %r10d
	cmpq	$7, %rax
	jae	LBB83_25
## %bb.5:                               ##   in Loop: Header=BB83_3 Depth=1
	xorl	%ebx, %ebx
	jmp	LBB83_27
	.p2align	4, 0x90
LBB83_25:                               ##   in Loop: Header=BB83_3 Depth=1
	andl	$-8, %edi
	movq	%rcx, %rax
	xorl	%ebx, %ebx
	.p2align	4, 0x90
LBB83_26:                               ##   Parent Loop BB83_3 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	$0, (%rax)
	movq	$0, 28(%rax)
	movq	$0, 56(%rax)
	movq	$0, 84(%rax)
	movq	$0, 112(%rax)
	movq	$0, 140(%rax)
	movq	$0, 168(%rax)
	addq	$8, %rbx
	movq	$0, 196(%rax)
	addq	$224, %rax
	cmpq	%rbx, %rdi
	jne	LBB83_26
LBB83_27:                               ##   in Loop: Header=BB83_3 Depth=1
	testq	%r10, %r10
	je	LBB83_30
## %bb.28:                              ##   in Loop: Header=BB83_3 Depth=1
	leaq	(%rbx,%rbx,8), %rax
	leaq	(%rax,%rax,2), %rax
	addq	%rbx, %rax
	addq	%rax, %rcx
	leaq	(%r10,%r10,8), %rax
	leaq	(%rax,%rax,2), %rax
	addq	%r10, %rax
	xorl	%edi, %edi
	.p2align	4, 0x90
LBB83_29:                               ##   Parent Loop BB83_3 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	$0, (%rcx,%rdi)
	addq	$28, %rdi
	cmpq	%rdi, %rax
	jne	LBB83_29
	jmp	LBB83_30
LBB83_6:
	movq	%rsi, %r14
	cmpl	$32, %r8d
	jae	LBB83_8
## %bb.7:
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movq	%r9, %rbx
	jmp	LBB83_11
LBB83_1:
	movq	%rsi, %r14
	xorl	%edi, %edi
	callq	_malloc
	testq	%rax, %rax
	jne	LBB83_15
	jmp	LBB83_39
LBB83_8:
	movl	%r11d, %ecx
	andl	$-32, %ecx
	leaq	1256(%r12), %rdx
	leaq	(,%r11,8), %rax
	andq	$-256, %rax
	leaq	(%rax,%rax,4), %rsi
	vpxor	%xmm0, %xmm0, %xmm0
	xorl	%edi, %edi
	vpxor	%xmm1, %xmm1, %xmm1
	vpxor	%xmm2, %xmm2, %xmm2
	vpxor	%xmm3, %xmm3, %xmm3
	.p2align	4, 0x90
LBB83_9:                                ## =>This Inner Loop Header: Depth=1
	vmovd	-1080(%rdx,%rdi), %xmm4         ## xmm4 = mem[0],zero,zero,zero
	vpinsrd	$1, -1040(%rdx,%rdi), %xmm4, %xmm4
	vpinsrd	$2, -1000(%rdx,%rdi), %xmm4, %xmm4
	vpinsrd	$3, -960(%rdx,%rdi), %xmm4, %xmm4
	vmovd	-1240(%rdx,%rdi), %xmm5         ## xmm5 = mem[0],zero,zero,zero
	vpinsrd	$1, -1200(%rdx,%rdi), %xmm5, %xmm5
	vpinsrd	$2, -1160(%rdx,%rdi), %xmm5, %xmm5
	vpinsrd	$3, -1120(%rdx,%rdi), %xmm5, %xmm5
	vinserti128	$1, %xmm4, %ymm5, %ymm4
	vmovd	-760(%rdx,%rdi), %xmm5          ## xmm5 = mem[0],zero,zero,zero
	vpinsrd	$1, -720(%rdx,%rdi), %xmm5, %xmm5
	vpinsrd	$2, -680(%rdx,%rdi), %xmm5, %xmm5
	vpinsrd	$3, -640(%rdx,%rdi), %xmm5, %xmm5
	vpaddd	%ymm0, %ymm4, %ymm0
	vmovd	-920(%rdx,%rdi), %xmm4          ## xmm4 = mem[0],zero,zero,zero
	vpinsrd	$1, -880(%rdx,%rdi), %xmm4, %xmm4
	vpinsrd	$2, -840(%rdx,%rdi), %xmm4, %xmm4
	vpinsrd	$3, -800(%rdx,%rdi), %xmm4, %xmm4
	vinserti128	$1, %xmm5, %ymm4, %ymm4
	vmovd	-440(%rdx,%rdi), %xmm5          ## xmm5 = mem[0],zero,zero,zero
	vpinsrd	$1, -400(%rdx,%rdi), %xmm5, %xmm5
	vpinsrd	$2, -360(%rdx,%rdi), %xmm5, %xmm5
	vpinsrd	$3, -320(%rdx,%rdi), %xmm5, %xmm5
	vpaddd	%ymm1, %ymm4, %ymm1
	vmovd	-600(%rdx,%rdi), %xmm4          ## xmm4 = mem[0],zero,zero,zero
	vpinsrd	$1, -560(%rdx,%rdi), %xmm4, %xmm4
	vpinsrd	$2, -520(%rdx,%rdi), %xmm4, %xmm4
	vpinsrd	$3, -480(%rdx,%rdi), %xmm4, %xmm4
	vinserti128	$1, %xmm5, %ymm4, %ymm4
	vmovd	-120(%rdx,%rdi), %xmm5          ## xmm5 = mem[0],zero,zero,zero
	vpinsrd	$1, -80(%rdx,%rdi), %xmm5, %xmm5
	vpinsrd	$2, -40(%rdx,%rdi), %xmm5, %xmm5
	vpinsrd	$3, (%rdx,%rdi), %xmm5, %xmm5
	vpaddd	%ymm2, %ymm4, %ymm2
	vmovd	-280(%rdx,%rdi), %xmm4          ## xmm4 = mem[0],zero,zero,zero
	vpinsrd	$1, -240(%rdx,%rdi), %xmm4, %xmm4
	vpinsrd	$2, -200(%rdx,%rdi), %xmm4, %xmm4
	vpinsrd	$3, -160(%rdx,%rdi), %xmm4, %xmm4
	vinserti128	$1, %xmm5, %ymm4, %ymm4
	vpaddd	%ymm3, %ymm4, %ymm3
	addq	$1280, %rdi                     ## imm = 0x500
	cmpq	%rdi, %rsi
	jne	LBB83_9
## %bb.10:
	vpaddd	%ymm0, %ymm1, %ymm0
	vpaddd	%ymm0, %ymm2, %ymm0
	vpaddd	%ymm0, %ymm3, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpaddd	%xmm1, %xmm0, %xmm0
	vpshufd	$238, %xmm0, %xmm1              ## xmm1 = xmm0[2,3,2,3]
	vpaddd	%xmm1, %xmm0, %xmm0
	vpshufd	$85, %xmm0, %xmm1               ## xmm1 = xmm0[1,1,1,1]
	vpaddd	%xmm1, %xmm0, %xmm0
	vmovd	%xmm0, %edx
	cmpq	%r11, %rcx
	movq	%r9, %rbx
	je	LBB83_13
LBB83_11:
	leaq	(%rcx,%rcx,4), %rax
	leaq	(%r12,%rax,8), %rax
	addq	$16, %rax
	subq	%rcx, %r11
	.p2align	4, 0x90
LBB83_12:                               ## =>This Inner Loop Header: Depth=1
	addl	(%rax), %edx
	addq	$40, %rax
	decq	%r11
	jne	LBB83_12
LBB83_13:
	movslq	%edx, %rax
	shlq	$3, %rax
	leaq	(%rax,%rax,2), %rdi
	vzeroupper
	callq	_malloc
	testq	%rax, %rax
	je	LBB83_39
LBB83_15:
	movq	%rax, %r15
	movq	(%rbx), %rax
	movq	%rax, -216(%rbp)
	movq	%r14, %rdi
	movl	-44(%rbp), %esi                 ## 4-byte Reload
	callq	_stbtt_GetFontOffsetForIndex
	leaq	-216(%rbp), %r13
	movq	%r13, %rdi
	movq	%r14, %rsi
	movl	%eax, %edx
	callq	_stbtt_InitFont
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movl	-48(%rbp), %r14d                ## 4-byte Reload
	movl	%r14d, %ecx
	movq	%r15, %r8
	callq	_stbtt_PackFontRangesGatherRects
                                        ## kill: def $eax killed $eax def $rax
	testl	%eax, %eax
	movq	%rbx, -56(%rbp)                 ## 8-byte Spill
	jle	LBB83_16
## %bb.31:
	movq	8(%rbx), %r13
	movl	(%r13), %r8d
	movl	4(%r13), %r9d
	movl	8(%r13), %edi
	movl	12(%r13), %r11d
	movl	%eax, %r10d
	leaq	20(%r15), %rsi
	xorl	%ecx, %ecx
	jmp	LBB83_32
	.p2align	4, 0x90
LBB83_37:                               ##   in Loop: Header=BB83_32 Depth=1
	incq	%rcx
	addq	$24, %rsi
	cmpq	%rcx, %r10
	je	LBB83_38
LBB83_32:                               ## =>This Inner Loop Header: Depth=1
	movl	%edi, %ebx
	movl	-8(%rsi), %edi
	leal	(%rdi,%rbx), %edx
	cmpl	%r8d, %edx
	jle	LBB83_34
## %bb.33:                              ##   in Loop: Header=BB83_32 Depth=1
	movl	$0, 8(%r13)
	movl	16(%r13), %r11d
	movl	%r11d, 12(%r13)
	xorl	%ebx, %ebx
LBB83_34:                               ##   in Loop: Header=BB83_32 Depth=1
	movl	-4(%rsi), %edx
	addl	%r11d, %edx
	cmpl	%r9d, %edx
	jg	LBB83_17
## %bb.35:                              ##   in Loop: Header=BB83_32 Depth=1
	movl	%ebx, -20(%rsi)
	movl	%r11d, -16(%rsi)
	movl	$1, (%rsi)
	addl	%ebx, %edi
	movl	%edi, 8(%r13)
	cmpl	16(%r13), %edx
	jle	LBB83_37
## %bb.36:                              ##   in Loop: Header=BB83_32 Depth=1
	movl	%edx, 16(%r13)
	jmp	LBB83_37
LBB83_16:
	xorl	%ecx, %ecx
LBB83_17:
	cmpl	%eax, %ecx
	jge	LBB83_38
## %bb.18:
	movl	%ecx, %esi
	movl	%eax, %edx
	subl	%ecx, %eax
	movq	%rsi, %rcx
	notq	%rcx
	addq	%rdx, %rcx
	andq	$3, %rax
	je	LBB83_22
## %bb.19:
	leaq	(%rsi,%rsi,2), %rdi
	leaq	(%r15,%rdi,8), %rdi
	addq	$20, %rdi
	negq	%rax
	xorl	%ebx, %ebx
	.p2align	4, 0x90
LBB83_20:                               ## =>This Inner Loop Header: Depth=1
	movl	$0, (%rdi)
	decq	%rbx
	addq	$24, %rdi
	cmpq	%rbx, %rax
	jne	LBB83_20
## %bb.21:
	subq	%rbx, %rsi
LBB83_22:
	cmpq	$3, %rcx
	jb	LBB83_38
## %bb.23:
	subq	%rsi, %rdx
	leaq	(%rsi,%rsi,2), %rax
	leaq	(%r15,%rax,8), %rax
	addq	$92, %rax
	.p2align	4, 0x90
LBB83_24:                               ## =>This Inner Loop Header: Depth=1
	movl	$0, -72(%rax)
	movl	$0, -48(%rax)
	movl	$0, -24(%rax)
	movl	$0, (%rax)
	addq	$96, %rax
	addq	$-4, %rdx
	jne	LBB83_24
LBB83_38:
	leaq	-216(%rbp), %rsi
	movq	-56(%rbp), %rdi                 ## 8-byte Reload
	movq	%r12, %rdx
	movl	%r14d, %ecx
	movq	%r15, %r8
	callq	_stbtt_PackFontRangesRenderIntoRects
	movl	%eax, %r13d
	movq	%r15, %rdi
	callq	_free
LBB83_39:
	movl	%r13d, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_InitFont                 ## -- Begin function stbtt_InitFont
	.p2align	4, 0x90
_stbtt_InitFont:                        ## @stbtt_InitFont
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r15d
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	%rsi, 8(%rdi)
	movl	%edx, 16(%rdi)
	movl	%edx, %r12d
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, 64(%rdi)
	movzwl	4(%rsi,%r12), %eax
	rolw	$8, %ax
	addl	$12, %r15d
	xorl	%r8d, %r8d
	movl	$0, %r13d
	movl	$0, %r9d
	testw	%ax, %ax
	je	LBB84_17
## %bb.1:
	movzwl	%ax, %eax
	movl	%r15d, %ecx
	movq	%rax, %rdx
	jmp	LBB84_3
	.p2align	4, 0x90
LBB84_2:                                ##   in Loop: Header=BB84_3 Depth=1
	addl	$16, %ecx
	decq	%rdx
	je	LBB84_8
LBB84_3:                                ## =>This Inner Loop Header: Depth=1
	movl	%ecx, %ecx
	cmpb	$99, (%rbx,%rcx)
	jne	LBB84_2
## %bb.4:                               ##   in Loop: Header=BB84_3 Depth=1
	cmpb	$109, 1(%rbx,%rcx)
	jne	LBB84_2
## %bb.5:                               ##   in Loop: Header=BB84_3 Depth=1
	cmpb	$97, 2(%rbx,%rcx)
	jne	LBB84_2
## %bb.6:                               ##   in Loop: Header=BB84_3 Depth=1
	cmpb	$112, 3(%rbx,%rcx)
	jne	LBB84_2
## %bb.7:
	movl	8(%rbx,%rcx), %r13d
	bswapl	%r13d
	jmp	LBB84_9
LBB84_8:
	xorl	%r13d, %r13d
LBB84_9:
	movl	%r15d, %ecx
	jmp	LBB84_11
	.p2align	4, 0x90
LBB84_10:                               ##   in Loop: Header=BB84_11 Depth=1
	addl	$16, %ecx
	decq	%rax
	je	LBB84_16
LBB84_11:                               ## =>This Inner Loop Header: Depth=1
	movl	%ecx, %ecx
	cmpb	$108, (%rbx,%rcx)
	jne	LBB84_10
## %bb.12:                              ##   in Loop: Header=BB84_11 Depth=1
	cmpb	$111, 1(%rbx,%rcx)
	jne	LBB84_10
## %bb.13:                              ##   in Loop: Header=BB84_11 Depth=1
	cmpb	$99, 2(%rbx,%rcx)
	jne	LBB84_10
## %bb.14:                              ##   in Loop: Header=BB84_11 Depth=1
	cmpb	$97, 3(%rbx,%rcx)
	jne	LBB84_10
## %bb.15:
	movl	8(%rbx,%rcx), %r9d
	bswapl	%r9d
	jmp	LBB84_17
LBB84_16:
	xorl	%r9d, %r9d
LBB84_17:
	movl	%r9d, 24(%r14)
	movzwl	4(%rbx,%r12), %eax
	rolw	$8, %ax
	testw	%ax, %ax
	je	LBB84_25
## %bb.18:
	movzwl	%ax, %eax
	movl	%r15d, %ecx
	jmp	LBB84_20
	.p2align	4, 0x90
LBB84_19:                               ##   in Loop: Header=BB84_20 Depth=1
	addl	$16, %ecx
	decq	%rax
	je	LBB84_25
LBB84_20:                               ## =>This Inner Loop Header: Depth=1
	movl	%ecx, %ecx
	cmpb	$104, (%rbx,%rcx)
	jne	LBB84_19
## %bb.21:                              ##   in Loop: Header=BB84_20 Depth=1
	cmpb	$101, 1(%rbx,%rcx)
	jne	LBB84_19
## %bb.22:                              ##   in Loop: Header=BB84_20 Depth=1
	cmpb	$97, 2(%rbx,%rcx)
	jne	LBB84_19
## %bb.23:                              ##   in Loop: Header=BB84_20 Depth=1
	cmpb	$100, 3(%rbx,%rcx)
	jne	LBB84_19
## %bb.24:
	movl	8(%rbx,%rcx), %r8d
	bswapl	%r8d
LBB84_25:
	movl	%r8d, 28(%r14)
	movzwl	4(%rbx,%r12), %eax
	rolw	$8, %ax
	xorl	%r10d, %r10d
	movl	$0, %esi
	testw	%ax, %ax
	je	LBB84_34
## %bb.26:
	movzwl	%ax, %eax
	movl	%r15d, %ecx
	jmp	LBB84_28
	.p2align	4, 0x90
LBB84_27:                               ##   in Loop: Header=BB84_28 Depth=1
	addl	$16, %ecx
	decq	%rax
	je	LBB84_33
LBB84_28:                               ## =>This Inner Loop Header: Depth=1
	movl	%ecx, %ecx
	cmpb	$103, (%rbx,%rcx)
	jne	LBB84_27
## %bb.29:                              ##   in Loop: Header=BB84_28 Depth=1
	cmpb	$108, 1(%rbx,%rcx)
	jne	LBB84_27
## %bb.30:                              ##   in Loop: Header=BB84_28 Depth=1
	cmpb	$121, 2(%rbx,%rcx)
	jne	LBB84_27
## %bb.31:                              ##   in Loop: Header=BB84_28 Depth=1
	cmpb	$102, 3(%rbx,%rcx)
	jne	LBB84_27
## %bb.32:
	movl	8(%rbx,%rcx), %esi
	bswapl	%esi
	jmp	LBB84_34
LBB84_33:
	xorl	%esi, %esi
LBB84_34:
	movl	%esi, 32(%r14)
	movzwl	4(%rbx,%r12), %eax
	rolw	$8, %ax
	testw	%ax, %ax
	je	LBB84_42
## %bb.35:
	movzwl	%ax, %eax
	movl	%r15d, %ecx
	jmp	LBB84_37
	.p2align	4, 0x90
LBB84_36:                               ##   in Loop: Header=BB84_37 Depth=1
	addl	$16, %ecx
	decq	%rax
	je	LBB84_42
LBB84_37:                               ## =>This Inner Loop Header: Depth=1
	movl	%ecx, %ecx
	cmpb	$104, (%rbx,%rcx)
	jne	LBB84_36
## %bb.38:                              ##   in Loop: Header=BB84_37 Depth=1
	cmpb	$104, 1(%rbx,%rcx)
	jne	LBB84_36
## %bb.39:                              ##   in Loop: Header=BB84_37 Depth=1
	cmpb	$101, 2(%rbx,%rcx)
	jne	LBB84_36
## %bb.40:                              ##   in Loop: Header=BB84_37 Depth=1
	cmpb	$97, 3(%rbx,%rcx)
	jne	LBB84_36
## %bb.41:
	movl	8(%rbx,%rcx), %r10d
	bswapl	%r10d
LBB84_42:
	movl	%r10d, 36(%r14)
	movzwl	4(%rbx,%r12), %ecx
	rolw	$8, %cx
	xorl	%eax, %eax
	movl	$0, %edi
	testw	%cx, %cx
	je	LBB84_51
## %bb.43:
	movzwl	%cx, %edi
	movl	%r15d, %ecx
	jmp	LBB84_45
	.p2align	4, 0x90
LBB84_44:                               ##   in Loop: Header=BB84_45 Depth=1
	addl	$16, %ecx
	decq	%rdi
	je	LBB84_50
LBB84_45:                               ## =>This Inner Loop Header: Depth=1
	movl	%ecx, %ecx
	cmpb	$104, (%rbx,%rcx)
	jne	LBB84_44
## %bb.46:                              ##   in Loop: Header=BB84_45 Depth=1
	cmpb	$109, 1(%rbx,%rcx)
	jne	LBB84_44
## %bb.47:                              ##   in Loop: Header=BB84_45 Depth=1
	cmpb	$116, 2(%rbx,%rcx)
	jne	LBB84_44
## %bb.48:                              ##   in Loop: Header=BB84_45 Depth=1
	cmpb	$120, 3(%rbx,%rcx)
	jne	LBB84_44
## %bb.49:
	movl	8(%rbx,%rcx), %edi
	bswapl	%edi
	jmp	LBB84_51
LBB84_50:
	xorl	%edi, %edi
LBB84_51:
	movl	%edi, 40(%r14)
	movzwl	4(%rbx,%r12), %ecx
	rolw	$8, %cx
	testw	%cx, %cx
	je	LBB84_59
## %bb.52:
	movzwl	%cx, %ecx
	movl	%r15d, %edx
	jmp	LBB84_54
	.p2align	4, 0x90
LBB84_53:                               ##   in Loop: Header=BB84_54 Depth=1
	addl	$16, %edx
	decq	%rcx
	je	LBB84_59
LBB84_54:                               ## =>This Inner Loop Header: Depth=1
	movl	%edx, %edx
	cmpb	$107, (%rbx,%rdx)
	jne	LBB84_53
## %bb.55:                              ##   in Loop: Header=BB84_54 Depth=1
	cmpb	$101, 1(%rbx,%rdx)
	jne	LBB84_53
## %bb.56:                              ##   in Loop: Header=BB84_54 Depth=1
	cmpb	$114, 2(%rbx,%rdx)
	jne	LBB84_53
## %bb.57:                              ##   in Loop: Header=BB84_54 Depth=1
	cmpb	$110, 3(%rbx,%rdx)
	jne	LBB84_53
## %bb.58:
	movl	8(%rbx,%rdx), %eax
	bswapl	%eax
LBB84_59:
	movl	%eax, 44(%r14)
	movzwl	4(%rbx,%r12), %ecx
	rolw	$8, %cx
	xorl	%edx, %edx
	movl	$0, %eax
	testw	%cx, %cx
	je	LBB84_68
## %bb.60:
	movzwl	%cx, %eax
	movl	%r15d, %ecx
	jmp	LBB84_62
	.p2align	4, 0x90
LBB84_61:                               ##   in Loop: Header=BB84_62 Depth=1
	addl	$16, %ecx
	decq	%rax
	je	LBB84_67
LBB84_62:                               ## =>This Inner Loop Header: Depth=1
	movl	%ecx, %ecx
	cmpb	$71, (%rbx,%rcx)
	jne	LBB84_61
## %bb.63:                              ##   in Loop: Header=BB84_62 Depth=1
	cmpb	$80, 1(%rbx,%rcx)
	jne	LBB84_61
## %bb.64:                              ##   in Loop: Header=BB84_62 Depth=1
	cmpb	$79, 2(%rbx,%rcx)
	jne	LBB84_61
## %bb.65:                              ##   in Loop: Header=BB84_62 Depth=1
	cmpb	$83, 3(%rbx,%rcx)
	jne	LBB84_61
## %bb.66:
	movl	8(%rbx,%rcx), %eax
	bswapl	%eax
	jmp	LBB84_68
LBB84_67:
	xorl	%eax, %eax
LBB84_68:
	movl	%eax, 48(%r14)
	testl	%r13d, %r13d
	je	LBB84_116
## %bb.69:
	testl	%r8d, %r8d
	je	LBB84_116
## %bb.70:
	testl	%r10d, %r10d
	je	LBB84_116
## %bb.71:
	testl	%edi, %edi
	je	LBB84_116
## %bb.72:
	testl	%esi, %esi
	je	LBB84_91
## %bb.73:
	testl	%r9d, %r9d
	je	LBB84_116
LBB84_74:
	movzwl	4(%rbx,%r12), %ecx
	rolw	$8, %cx
	movl	$65535, %eax                    ## imm = 0xFFFF
	testw	%cx, %cx
	je	LBB84_83
## %bb.75:
	movzwl	%cx, %ecx
	jmp	LBB84_77
	.p2align	4, 0x90
LBB84_76:                               ##   in Loop: Header=BB84_77 Depth=1
	addl	$16, %r15d
	decq	%rcx
	je	LBB84_83
LBB84_77:                               ## =>This Inner Loop Header: Depth=1
	movl	%r15d, %r15d
	cmpb	$109, (%rbx,%r15)
	jne	LBB84_76
## %bb.78:                              ##   in Loop: Header=BB84_77 Depth=1
	cmpb	$97, 1(%rbx,%r15)
	jne	LBB84_76
## %bb.79:                              ##   in Loop: Header=BB84_77 Depth=1
	cmpb	$120, 2(%rbx,%r15)
	jne	LBB84_76
## %bb.80:                              ##   in Loop: Header=BB84_77 Depth=1
	cmpb	$112, 3(%rbx,%r15)
	jne	LBB84_76
## %bb.81:
	movl	8(%rbx,%r15), %ecx
	bswapl	%ecx
	testl	%ecx, %ecx
	je	LBB84_83
## %bb.82:
	movzwl	4(%rbx,%rcx), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
LBB84_83:
	movl	%eax, 20(%r14)
	movl	$-1, 52(%r14)
	movl	%r13d, %eax
	movzwl	2(%rbx,%rax), %eax
	rolw	$8, %ax
	movl	$0, 56(%r14)
	testw	%ax, %ax
	je	LBB84_116
## %bb.84:
	movzwl	%ax, %eax
	leal	4(%r13), %ecx
	xorl	%edx, %edx
	jmp	LBB84_87
	.p2align	4, 0x90
LBB84_85:                               ##   in Loop: Header=BB84_87 Depth=1
	movl	4(%rbx,%rcx), %edx
	bswapl	%edx
	addl	%r13d, %edx
	movl	%edx, 56(%r14)
LBB84_86:                               ##   in Loop: Header=BB84_87 Depth=1
	addl	$8, %ecx
	decq	%rax
	je	LBB84_114
LBB84_87:                               ## =>This Inner Loop Header: Depth=1
	movl	%ecx, %ecx
	movzwl	(%rbx,%rcx), %esi
	rolw	$8, %si
	testw	%si, %si
	je	LBB84_85
## %bb.88:                              ##   in Loop: Header=BB84_87 Depth=1
	cmpw	$3, %si
	jne	LBB84_86
## %bb.89:                              ##   in Loop: Header=BB84_87 Depth=1
	movzwl	2(%rbx,%rcx), %esi
	rolw	$8, %si
	cmpw	$10, %si
	je	LBB84_85
## %bb.90:                              ##   in Loop: Header=BB84_87 Depth=1
	cmpw	$1, %si
	je	LBB84_85
	jmp	LBB84_86
LBB84_91:
	movl	$2, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movzwl	4(%rbx,%r12), %eax
	rolw	$8, %ax
	testw	%ax, %ax
	je	LBB84_116
## %bb.92:
	movzwl	%ax, %eax
	movl	%r15d, %ecx
	jmp	LBB84_94
	.p2align	4, 0x90
LBB84_93:                               ##   in Loop: Header=BB84_94 Depth=1
	addl	$16, %ecx
	decq	%rax
	je	LBB84_116
LBB84_94:                               ## =>This Inner Loop Header: Depth=1
	movl	%ecx, %ecx
	cmpb	$67, (%rbx,%rcx)
	jne	LBB84_93
## %bb.95:                              ##   in Loop: Header=BB84_94 Depth=1
	cmpb	$70, 1(%rbx,%rcx)
	jne	LBB84_93
## %bb.96:                              ##   in Loop: Header=BB84_94 Depth=1
	cmpb	$70, 2(%rbx,%rcx)
	jne	LBB84_93
## %bb.97:                              ##   in Loop: Header=BB84_94 Depth=1
	cmpb	$32, 3(%rbx,%rcx)
	jne	LBB84_93
## %bb.98:
	movl	8(%rbx,%rcx), %eax
	bswapl	%eax
	testl	%eax, %eax
	je	LBB84_116
## %bb.99:
	addq	%rbx, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%ymm0, 128(%r14)
	movq	%rax, 64(%r14)
	movabsq	$2305843009213693952, %rax      ## imm = 0x2000000000000000
	movq	%rax, 72(%r14)
	movq	64(%r14), %rax
	movq	%rax, -64(%rbp)
	movq	72(%r14), %rax
	movq	%rax, -56(%rbp)
	movl	-56(%rbp), %ecx
	cmpl	$-2, %ecx
	jl	LBB84_119
## %bb.100:
	movl	-52(%rbp), %eax
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jl	LBB84_119
## %bb.101:
	xorl	%edx, %edx
	cmpl	%eax, %ecx
	jge	LBB84_103
## %bb.102:
	movq	-64(%rbp), %rdx
	movl	%ecx, %ecx
	movzbl	(%rdx,%rcx), %edx
LBB84_103:
	cmpl	%edx, %eax
	jl	LBB84_120
## %bb.104:
	movl	%edx, -56(%rbp)
	leaq	-64(%rbp), %rdi
	vzeroupper
	callq	__ZL20stbtt__cff_get_indexP10stbtt__buf
	leaq	-64(%rbp), %rdi
	callq	__ZL20stbtt__cff_get_indexP10stbtt__buf
	movq	%rax, %rdi
	movq	%rdx, %rsi
	xorl	%edx, %edx
	callq	__ZL20stbtt__cff_index_get10stbtt__bufi
	movq	%rax, -104(%rbp)
	movq	%rdx, -96(%rbp)
	leaq	-64(%rbp), %rdi
	callq	__ZL20stbtt__cff_get_indexP10stbtt__buf
	leaq	-64(%rbp), %rdi
	callq	__ZL20stbtt__cff_get_indexP10stbtt__buf
	movq	%rax, 96(%r14)
	movq	%rdx, 104(%r14)
	leaq	-104(%rbp), %rdi
	leaq	-76(%rbp), %rcx
	movl	$17, %esi
	movl	$1, %edx
	callq	__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj
	leaq	-80(%rbp), %rcx
	leaq	-104(%rbp), %rdi
	movl	$262, %esi                      ## imm = 0x106
	movl	$1, %edx
	callq	__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj
	leaq	-72(%rbp), %rcx
	leaq	-104(%rbp), %rdi
	movl	$292, %esi                      ## imm = 0x124
	movl	$1, %edx
	callq	__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj
	leaq	-68(%rbp), %rcx
	leaq	-104(%rbp), %rdi
	movl	$293, %esi                      ## imm = 0x125
	movl	$1, %edx
	callq	__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj
	movq	-64(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-104(%rbp), %rdx
	movq	-96(%rbp), %rcx
	movq	%rsi, -88(%rbp)                 ## 8-byte Spill
	callq	__ZL16stbtt__get_subrs10stbtt__bufS_
	movq	%rax, 112(%r14)
	movq	%rdx, 120(%r14)
	cmpl	$2, -80(%rbp)
	movl	$0, %edx
	jne	LBB84_116
## %bb.105:
	movl	-76(%rbp), %ecx
	testl	%ecx, %ecx
	je	LBB84_116
## %bb.106:
	movq	-88(%rbp), %rsi                 ## 8-byte Reload
	shrq	$32, %rsi
	movl	-72(%rbp), %eax
	testl	%eax, %eax
	je	LBB84_111
## %bb.107:
	movslq	-68(%rbp), %rdi
	testq	%rdi, %rdi
	je	LBB84_116
## %bb.108:
	movq	%rdi, -112(%rbp)                ## 8-byte Spill
	movl	%ecx, -88(%rbp)                 ## 4-byte Spill
	testl	%eax, %eax
	js	LBB84_122
## %bb.109:
	cmpl	%esi, %eax
	jg	LBB84_122
## %bb.110:
	movl	%eax, -56(%rbp)
	leaq	-64(%rbp), %rdi
	callq	__ZL20stbtt__cff_get_indexP10stbtt__buf
	movq	%rax, 128(%r14)
	movq	%rdx, 136(%r14)
	movl	-52(%rbp), %esi
	movl	%esi, %eax
	movq	-112(%rbp), %rdi                ## 8-byte Reload
	subl	%edi, %eax
	setl	%cl
	movl	%eax, %edx
	orl	%edi, %edx
	sets	%dl
	orb	%cl, %dl
	addq	-64(%rbp), %rdi
	shlq	$32, %rax
	xorl	%ecx, %ecx
	testb	%dl, %dl
	cmovneq	%rcx, %rdi
	cmovneq	%rcx, %rax
	movq	%rdi, 144(%r14)
	movq	%rax, 152(%r14)
	movl	-88(%rbp), %ecx                 ## 4-byte Reload
LBB84_111:
	testl	%ecx, %ecx
	js	LBB84_121
## %bb.112:
	cmpl	%ecx, %esi
	jl	LBB84_121
## %bb.113:
	movl	%ecx, -56(%rbp)
	leaq	-64(%rbp), %rdi
	callq	__ZL20stbtt__cff_get_indexP10stbtt__buf
	movq	%rax, 80(%r14)
	movq	%rdx, 88(%r14)
	xorl	%edx, %edx
	jmp	LBB84_74
LBB84_114:
	testl	%edx, %edx
	je	LBB84_123
## %bb.115:
	movslq	28(%r14), %rax
	movzwl	50(%rbx,%rax), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	movl	%eax, 60(%r14)
	movl	$1, %edx
LBB84_116:
	movl	%edx, %eax
LBB84_117:
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB84_119:
	vzeroupper
	callq	_stbtt_InitFont.cold.1
	jmp	LBB84_123
LBB84_120:
	vzeroupper
	callq	_stbtt_InitFont.cold.2
	jmp	LBB84_123
LBB84_121:
	callq	_stbtt_InitFont.cold.3
	jmp	LBB84_123
LBB84_122:
	callq	_stbtt_InitFont.cold.4
LBB84_123:
	xorl	%eax, %eax
	jmp	LBB84_117
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetFontOffsetForIndex    ## -- Begin function stbtt_GetFontOffsetForIndex
	.p2align	4, 0x90
_stbtt_GetFontOffsetForIndex:           ## @stbtt_GetFontOffsetForIndex
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	__ZL13stbtt__isfontPh
	testl	%eax, %eax
	je	LBB85_2
## %bb.1:
	xorl	%eax, %eax
	negl	%r14d
	sbbl	%eax, %eax
LBB85_10:
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
LBB85_2:
	movl	$-1, %eax
	cmpb	$116, (%rbx)
	jne	LBB85_10
## %bb.3:
	cmpb	$116, 1(%rbx)
	jne	LBB85_10
## %bb.4:
	cmpb	$99, 2(%rbx)
	jne	LBB85_10
## %bb.5:
	cmpb	$102, 3(%rbx)
	jne	LBB85_10
## %bb.6:
	movl	4(%rbx), %ecx
	bswapl	%ecx
	cmpl	$131072, %ecx                   ## imm = 0x20000
	je	LBB85_8
## %bb.7:
	cmpl	$65536, %ecx                    ## imm = 0x10000
	jne	LBB85_10
LBB85_8:
	movl	8(%rbx), %ecx
	bswapl	%ecx
	cmpl	%r14d, %ecx
	jle	LBB85_10
## %bb.9:
	movslq	%r14d, %rax
	movl	12(%rbx,%rax,4), %eax
	bswapl	%eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_PackFontRange            ## -- Begin function stbtt_PackFontRange
	.p2align	4, 0x90
_stbtt_PackFontRange:                   ## @stbtt_PackFontRange
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	%ecx, -36(%rbp)
	movq	$0, -32(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -16(%rbp)
	vmovss	%xmm0, -40(%rbp)
	leaq	-40(%rbp), %rcx
	movl	$1, %r8d
	callq	_stbtt_PackFontRanges
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function stbtt_GetScaledFontVMetrics
LCPI87_0:
	.long	0x80000000                      ## float -0
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_stbtt_GetScaledFontVMetrics
	.p2align	4, 0x90
_stbtt_GetScaledFontVMetrics:           ## @stbtt_GetScaledFontVMetrics
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movq	%rdx, %r12
	vmovaps	%xmm0, -48(%rbp)                ## 16-byte Spill
	movq	%rdi, %rbx
	callq	_stbtt_GetFontOffsetForIndex
	leaq	-208(%rbp), %rdi
	movq	%rbx, %rsi
	movl	%eax, %edx
	callq	_stbtt_InitFont
	vmovaps	-48(%rbp), %xmm1                ## 16-byte Reload
	vxorps	%xmm0, %xmm0, %xmm0
	vucomiss	%xmm0, %xmm1
	jbe	LBB87_2
## %bb.1:
	movq	-200(%rbp), %rax
	movslq	-172(%rbp), %rcx
	movzbl	5(%rax,%rcx), %esi
	movzbl	4(%rax,%rcx), %edx
	shll	$8, %edx
	movswl	%dx, %edx
	orl	%esi, %edx
	movzbl	7(%rax,%rcx), %edi
	movzbl	6(%rax,%rcx), %esi
	shll	$8, %esi
	movswl	%si, %esi
	orl	%edi, %esi
	movl	%edx, %edi
	subl	%esi, %edi
	vcvtsi2ss	%edi, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	jmp	LBB87_3
LBB87_2:
	vbroadcastss	LCPI87_0(%rip), %xmm0   ## xmm0 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vxorps	%xmm0, %xmm1, %xmm0
	movq	-200(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movzwl	18(%rax,%rcx), %ecx
	rolw	$8, %cx
	movzwl	%cx, %ecx
	vcvtsi2ss	%ecx, %xmm2, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movslq	-172(%rbp), %rcx
	movzwl	4(%rax,%rcx), %edx
	movzwl	6(%rax,%rcx), %esi
	rolw	$8, %dx
	rolw	$8, %si
LBB87_3:
	movzwl	8(%rax,%rcx), %eax
	movswl	%dx, %ecx
	vcvtsi2ss	%ecx, %xmm2, %xmm1
	rolw	$8, %ax
	vmulss	%xmm1, %xmm0, %xmm1
	vmovss	%xmm1, (%r12)
	movswl	%si, %ecx
	vcvtsi2ss	%ecx, %xmm2, %xmm1
	cwtl
	vcvtsi2ss	%eax, %xmm2, %xmm2
	vmulss	%xmm1, %xmm0, %xmm1
	vmovss	%xmm1, (%r15)
	vmulss	%xmm2, %xmm0, %xmm0
	vmovss	%xmm0, (%r14)
	addq	$176, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function stbtt_GetPackedQuad
LCPI88_0:
	.long	0x3f000000                      ## float 0.5
LCPI88_1:
	.long	0x3f800000                      ## float 1
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_stbtt_GetPackedQuad
	.p2align	4, 0x90
_stbtt_GetPackedQuad:                   ## @stbtt_GetPackedQuad
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movslq	%ecx, %rcx
	leaq	(%rcx,%rcx,8), %rax
	leaq	(%rax,%rax,2), %rax
	addq	%rcx, %rax
	cmpl	$0, 24(%rbp)
	movq	16(%rbp), %rcx
	vmovss	8(%rdi,%rax), %xmm0             ## xmm0 = mem[0],zero,zero,zero
	vaddss	(%r8), %xmm0, %xmm1
	je	LBB88_2
## %bb.1:
	vmovss	LCPI88_0(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vaddss	%xmm2, %xmm1, %xmm1
	vroundss	$9, %xmm1, %xmm1, %xmm1
	vcvttps2dq	%xmm1, %xmm1
	vcvtdq2ps	%xmm1, %xmm1
	vmovss	12(%rdi,%rax), %xmm3            ## xmm3 = mem[0],zero,zero,zero
	vaddss	(%r9), %xmm3, %xmm4
	vaddss	%xmm2, %xmm4, %xmm2
	vroundss	$9, %xmm2, %xmm2, %xmm2
	vcvttps2dq	%xmm2, %xmm2
	vcvtdq2ps	%xmm2, %xmm2
	vmovss	%xmm1, (%rcx)
	vmovss	%xmm2, 4(%rcx)
	vaddss	20(%rdi,%rax), %xmm1, %xmm1
	vsubss	%xmm0, %xmm1, %xmm0
	vmovss	%xmm0, 16(%rcx)
	vaddss	24(%rdi,%rax), %xmm2, %xmm0
	vsubss	%xmm3, %xmm0, %xmm0
	jmp	LBB88_3
LBB88_2:
	vmovss	%xmm1, (%rcx)
	vmovss	(%r9), %xmm0                    ## xmm0 = mem[0],zero,zero,zero
	vaddss	12(%rdi,%rax), %xmm0, %xmm0
	vmovss	%xmm0, 4(%rcx)
	vmovss	(%r8), %xmm0                    ## xmm0 = mem[0],zero,zero,zero
	vaddss	20(%rdi,%rax), %xmm0, %xmm0
	vmovss	%xmm0, 16(%rcx)
	vmovss	(%r9), %xmm0                    ## xmm0 = mem[0],zero,zero,zero
	vaddss	24(%rdi,%rax), %xmm0, %xmm0
LBB88_3:
	vcvtsi2ss	%edx, %xmm5, %xmm1
	vmovss	%xmm0, 20(%rcx)
	vcvtsi2ss	%esi, %xmm5, %xmm0
	movzwl	(%rdi,%rax), %edx
	vcvtsi2ss	%edx, %xmm5, %xmm2
	vmovss	LCPI88_1(%rip), %xmm3           ## xmm3 = mem[0],zero,zero,zero
	vdivss	%xmm0, %xmm3, %xmm0
	vmulss	%xmm2, %xmm0, %xmm2
	vmovss	%xmm2, 8(%rcx)
	movzwl	2(%rdi,%rax), %edx
	vcvtsi2ss	%edx, %xmm5, %xmm2
	vdivss	%xmm1, %xmm3, %xmm1
	vmulss	%xmm2, %xmm1, %xmm2
	vmovss	%xmm2, 12(%rcx)
	movzwl	4(%rdi,%rax), %edx
	vcvtsi2ss	%edx, %xmm5, %xmm2
	vmulss	%xmm2, %xmm0, %xmm0
	vmovss	%xmm0, 24(%rcx)
	movzwl	6(%rdi,%rax), %edx
	vcvtsi2ss	%edx, %xmm5, %xmm0
	vmulss	%xmm0, %xmm1, %xmm0
	vmovss	%xmm0, 28(%rcx)
	vmovss	16(%rdi,%rax), %xmm0            ## xmm0 = mem[0],zero,zero,zero
	vaddss	(%r8), %xmm0, %xmm0
	vmovss	%xmm0, (%r8)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function stbtt_GetGlyphSDF
LCPI89_0:
	.long	0x80000000                      ## float -0
LCPI89_1:
	.long	0x3f800000                      ## float 1
LCPI89_2:
	.long	0x3f000000                      ## float 0.5
LCPI89_3:
	.long	0x3c23d70a                      ## float 0.00999999977
LCPI89_4:
	.long	0xbc23d70a                      ## float -0.00999999977
LCPI89_5:
	.long	0x3f7d70a4                      ## float 0.990000009
LCPI89_6:
	.long	0xc97423f0                      ## float -999999
LCPI89_7:
	.long	0xc0000000                      ## float -2
LCPI89_8:
	.long	0xbf800000                      ## float -1
LCPI89_9:
	.long	0x40000000                      ## float 2
LCPI89_10:
	.long	0x497423f0                      ## float 999999
LCPI89_11:
	.long	0x40400000                      ## float 3
LCPI89_12:
	.long	0xc0400000                      ## float -3
LCPI89_13:
	.long	0xc1100000                      ## float -9
LCPI89_14:
	.long	0x41d80000                      ## float 27
LCPI89_15:
	.long	0x40800000                      ## float 4
LCPI89_16:
	.long	0x3eaaaaab                      ## float 0.333333343
LCPI89_17:
	.long	0xc1d80000                      ## float -27
LCPI89_18:
	.long	0xbf000000                      ## float -0.5
LCPI89_20:
	.long	0x3fddb3d7                      ## float 1.73205078
LCPI89_21:
	.long	0xc0800000                      ## float -4
LCPI89_22:
	.long	0x7fffffff                      ## float NaN
LCPI89_23:
	.long	0x437f0000                      ## float 255
LCPI89_24:
	.long	0x00000000                      ## float 0
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3
LCPI89_19:
	.quad	0xbff921fafc8b007a              ## double -1.5707960000000001
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_stbtt_GetGlyphSDF
	.p2align	4, 0x90
_stbtt_GetGlyphSDF:                     ## @stbtt_GetGlyphSDF
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$424, %rsp                      ## imm = 0x1A8
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vxorps	%xmm2, %xmm2, %xmm2
	vucomiss	%xmm2, %xmm0
	jne	LBB89_2
	jnp	LBB89_1
LBB89_2:
	movq	%r8, %r12
	movl	%ecx, %r15d
	movl	%edx, %r13d
	movl	%esi, %ebx
	movq	%rdi, %r14
	movq	%r9, -80(%rbp)                  ## 8-byte Spill
	vmovss	%xmm1, -276(%rbp)               ## 4-byte Spill
	leaq	-100(%rbp), %rdx
	leaq	-96(%rbp), %rcx
	leaq	-92(%rbp), %r8
	leaq	-88(%rbp), %r9
	vxorps	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	vmovaps	%xmm0, -144(%rbp)               ## 16-byte Spill
	vmovaps	%xmm0, %xmm1
	callq	_stbtt_GetGlyphBitmapBoxSubpixel
	movl	-100(%rbp), %ecx
	movl	-92(%rbp), %eax
	cmpl	%eax, %ecx
	je	LBB89_1
## %bb.4:
	movl	%eax, %edx
	movl	%r15d, -128(%rbp)               ## 4-byte Spill
	movl	-96(%rbp), %eax
	movl	-88(%rbp), %r15d
	cmpl	%r15d, %eax
	jne	LBB89_6
LBB89_1:
	xorl	%r15d, %r15d
LBB89_141:
	movq	%r15, %rax
LBB89_142:
	addq	$424, %rsp                      ## imm = 0x1A8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB89_6:
	subl	%r13d, %ecx
	movl	%ecx, -100(%rbp)
	subl	%r13d, %eax
	movl	%eax, -96(%rbp)
	addl	%r13d, %edx
	movl	%edx, -92(%rbp)
	addl	%r13d, %r15d
	movl	%edx, %r13d
	movl	%r15d, -88(%rbp)
	subl	%ecx, %r13d
	testq	%r12, %r12
	je	LBB89_8
## %bb.7:
	movl	%r13d, (%r12)
LBB89_8:
	movq	16(%rbp), %rdx
	subl	%eax, %r15d
	movq	-80(%rbp), %rdi                 ## 8-byte Reload
	testq	%rdi, %rdi
	vmovaps	-144(%rbp), %xmm0               ## 16-byte Reload
	je	LBB89_10
## %bb.9:
	movl	%r15d, (%rdi)
LBB89_10:
	movq	24(%rbp), %rdi
	testq	%rdx, %rdx
	je	LBB89_12
## %bb.11:
	movl	%ecx, (%rdx)
LBB89_12:
	testq	%rdi, %rdi
	je	LBB89_14
## %bb.13:
	movl	%eax, (%rdi)
LBB89_14:
	vbroadcastss	LCPI89_0(%rip), %xmm1   ## xmm1 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	%xmm1, -320(%rbp)               ## 16-byte Spill
	vxorps	%xmm1, %xmm0, %xmm0
	vmovaps	%xmm0, -192(%rbp)               ## 16-byte Spill
	leaq	-248(%rbp), %rdx
	movq	%r14, %rdi
	movl	%ebx, %esi
	callq	_stbtt_GetGlyphShape
	movl	%eax, %ebx
	imull	%r13d, %r15d
	movslq	%r15d, %rdi
	callq	_malloc
	movq	%rax, %r15
	movq	%rbx, -392(%rbp)                ## 8-byte Spill
	movslq	%ebx, %rbx
	leaq	(,%rbx,4), %rdi
	callq	_malloc
	movq	%rax, -200(%rbp)                ## 8-byte Spill
	movl	%ebx, %r8d
	testl	%ebx, %ebx
	jle	LBB89_22
## %bb.15:
	movq	-392(%rbp), %rax                ## 8-byte Reload
	leal	-1(%rax), %esi
	movq	-248(%rbp), %rax
	xorl	%ecx, %ecx
	vmovss	LCPI89_1(%rip), %xmm8           ## xmm8 = mem[0],zero,zero,zero
	movq	%rax, %rdx
	vmovaps	-144(%rbp), %xmm7               ## 16-byte Reload
	vmovaps	-192(%rbp), %xmm0               ## 16-byte Reload
	jmp	LBB89_17
	.p2align	4, 0x90
LBB89_21:                               ##   in Loop: Header=BB89_17 Depth=1
	vdivss	%xmm2, %xmm8, %xmm1
LBB89_16:                               ##   in Loop: Header=BB89_17 Depth=1
	movq	-200(%rbp), %rsi                ## 8-byte Reload
	vmovss	%xmm1, (%rsi,%rcx,4)
	movl	%ecx, %esi
	leaq	1(%rcx), %rdi
	addq	$14, %rdx
	movq	%rdi, %rcx
	cmpq	%rdi, %r8
	je	LBB89_22
LBB89_17:                               ## =>This Inner Loop Header: Depth=1
	movzbl	12(%rdx), %ebx
	cmpb	$3, %bl
	je	LBB89_20
## %bb.18:                              ##   in Loop: Header=BB89_17 Depth=1
	vxorps	%xmm1, %xmm1, %xmm1
	cmpb	$2, %bl
	jne	LBB89_16
## %bb.19:                              ##   in Loop: Header=BB89_17 Depth=1
	movswl	(%rdx), %edi
	vcvtsi2ss	%edi, %xmm9, %xmm1
	vmovaps	-144(%rbp), %xmm5               ## 16-byte Reload
	vmulss	%xmm5, %xmm1, %xmm1
	movswl	2(%rdx), %edi
	vcvtsi2ss	%edi, %xmm9, %xmm2
	movslq	%esi, %rsi
	movq	%rsi, %rdi
	shlq	$4, %rdi
	subq	%rsi, %rdi
	subq	%rsi, %rdi
	movswl	(%rax,%rdi), %esi
	vcvtsi2ss	%esi, %xmm9, %xmm3
	movswl	2(%rax,%rdi), %esi
	vcvtsi2ss	%esi, %xmm9, %xmm4
	vmulss	%xmm5, %xmm3, %xmm3
	vsubss	%xmm1, %xmm3, %xmm1
	vmulss	%xmm5, %xmm2, %xmm2
	vmulss	%xmm5, %xmm4, %xmm3
	vsubss	%xmm3, %xmm2, %xmm2
	vmulss	%xmm2, %xmm2, %xmm2
	vmulss	%xmm1, %xmm1, %xmm1
	vaddss	%xmm2, %xmm1, %xmm1
	vsqrtss	%xmm1, %xmm1, %xmm2
	vxorps	%xmm1, %xmm1, %xmm1
	vucomiss	%xmm1, %xmm2
	jne	LBB89_21
	jnp	LBB89_16
	jmp	LBB89_21
	.p2align	4, 0x90
LBB89_20:                               ##   in Loop: Header=BB89_17 Depth=1
	movslq	%esi, %rsi
	movq	%rsi, %rdi
	shlq	$4, %rdi
	subq	%rsi, %rdi
	subq	%rsi, %rdi
	movswl	(%rax,%rdi), %esi
	vcvtsi2ss	%esi, %xmm9, %xmm1
	vmulss	%xmm7, %xmm1, %xmm1
	movswl	2(%rax,%rdi), %esi
	vcvtsi2ss	%esi, %xmm9, %xmm2
	movswl	4(%rdx), %esi
	vcvtsi2ss	%esi, %xmm9, %xmm3
	vmulss	%xmm7, %xmm3, %xmm3
	movswl	6(%rdx), %esi
	vcvtsi2ss	%esi, %xmm9, %xmm4
	movswl	(%rdx), %esi
	vcvtsi2ss	%esi, %xmm9, %xmm5
	movswl	2(%rdx), %esi
	vcvtsi2ss	%esi, %xmm9, %xmm6
	vmulss	%xmm4, %xmm0, %xmm4
	vmulss	%xmm7, %xmm5, %xmm5
	vmulss	%xmm6, %xmm0, %xmm6
	vaddss	%xmm3, %xmm3, %xmm3
	vsubss	%xmm3, %xmm5, %xmm3
	vaddss	%xmm3, %xmm1, %xmm1
	vaddss	%xmm4, %xmm4, %xmm3
	vsubss	%xmm3, %xmm6, %xmm3
	vmulss	%xmm7, %xmm2, %xmm2
	vsubss	%xmm2, %xmm3, %xmm2
	vmulss	%xmm2, %xmm2, %xmm2
	vmulss	%xmm1, %xmm1, %xmm1
	vaddss	%xmm2, %xmm1, %xmm2
	vxorps	%xmm1, %xmm1, %xmm1
	vucomiss	%xmm1, %xmm2
	jne	LBB89_21
	jnp	LBB89_16
	jmp	LBB89_21
LBB89_22:
	movl	-96(%rbp), %eax
	movl	-88(%rbp), %ecx
	movl	%eax, -164(%rbp)                ## 4-byte Spill
	movl	%ecx, -256(%rbp)                ## 4-byte Spill
	cmpl	%ecx, %eax
	jge	LBB89_139
## %bb.23:
	movl	-100(%rbp), %eax
	movl	-92(%rbp), %ecx
	movq	-248(%rbp), %r14
	movq	%rax, -424(%rbp)                ## 8-byte Spill
	movl	%ecx, -272(%rbp)                ## 4-byte Spill
	cmpl	%ecx, %eax
	jge	LBB89_140
## %bb.24:
	movl	%r13d, -252(%rbp)               ## 4-byte Spill
	movzbl	-128(%rbp), %eax                ## 1-byte Folded Reload
	vcvtsi2ss	%eax, %xmm9, %xmm0
	vmovss	%xmm0, -268(%rbp)               ## 4-byte Spill
	vmovaps	-144(%rbp), %xmm0               ## 16-byte Reload
	vmovaps	-192(%rbp), %xmm8               ## 16-byte Reload
	vinsertps	$16, %xmm8, %xmm0, %xmm11 ## xmm11 = xmm0[0],xmm8[0],xmm0[2,3]
	movq	%r8, %r13
	shlq	$4, %r13
	subq	%r8, %r13
	subq	%r8, %r13
	movq	%r14, %rax
	addq	$-14, %rax
	movq	%rax, -440(%rbp)                ## 8-byte Spill
	vmovss	LCPI89_1(%rip), %xmm12          ## xmm12 = mem[0],zero,zero,zero
	xorl	%r12d, %r12d
	movl	-164(%rbp), %eax                ## 4-byte Reload
	movq	%r15, -432(%rbp)                ## 8-byte Spill
	movq	%r8, -56(%rbp)                  ## 8-byte Spill
	vmovaps	%xmm11, -416(%rbp)              ## 16-byte Spill
	jmp	LBB89_26
	.p2align	4, 0x90
LBB89_25:                               ##   in Loop: Header=BB89_26 Depth=1
	movl	-260(%rbp), %eax                ## 4-byte Reload
	incl	%eax
	cmpl	-256(%rbp), %eax                ## 4-byte Folded Reload
	je	LBB89_140
LBB89_26:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB89_30 Depth 2
                                        ##       Child Loop BB89_34 Depth 3
                                        ##       Child Loop BB89_78 Depth 3
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%eax, %xmm9, %xmm0
	vaddss	LCPI89_2(%rip), %xmm0, %xmm0
	vmovss	%xmm0, -48(%rbp)                ## 4-byte Spill
	vdivss	%xmm8, %xmm0, %xmm0
	vmovaps	%xmm0, -80(%rbp)                ## 16-byte Spill
	vmovaps	%xmm12, %xmm1
	movl	%eax, %ebx
	callq	_fmodf
	movl	%ebx, -260(%rbp)                ## 4-byte Spill
	movl	%ebx, %ecx
	subl	-164(%rbp), %ecx                ## 4-byte Folded Reload
	imull	-252(%rbp), %ecx                ## 4-byte Folded Reload
	vmovss	LCPI89_3(%rip), %xmm3           ## xmm3 = mem[0],zero,zero,zero
	vucomiss	%xmm0, %xmm3
	vmovaps	-80(%rbp), %xmm4                ## 16-byte Reload
	vaddss	LCPI89_4(%rip), %xmm4, %xmm1
	vaddss	%xmm3, %xmm4, %xmm2
	vcmpltss	%xmm3, %xmm0, %xmm3
	vblendvps	%xmm3, %xmm2, %xmm4, %xmm3
	ja	LBB89_28
## %bb.27:                              ##   in Loop: Header=BB89_26 Depth=1
	vmovss	LCPI89_5(%rip), %xmm2           ## xmm2 = mem[0],zero,zero,zero
	vcmpnltss	%xmm0, %xmm2, %xmm0
	vblendvps	%xmm0, %xmm3, %xmm1, %xmm3
LBB89_28:                               ##   in Loop: Header=BB89_26 Depth=1
	movq	-424(%rbp), %rax                ## 8-byte Reload
	subl	%eax, %ecx
	movq	%rcx, -448(%rbp)                ## 8-byte Spill
	vxorps	%xmm15, %xmm15, %xmm15
	vmovaps	%xmm3, -240(%rbp)               ## 16-byte Spill
	vmulss	%xmm3, %xmm15, %xmm0
	vmovss	%xmm0, -264(%rbp)               ## 4-byte Spill
	vmovaps	-144(%rbp), %xmm10              ## 16-byte Reload
	vmovaps	-192(%rbp), %xmm8               ## 16-byte Reload
	movq	-56(%rbp), %r8                  ## 8-byte Reload
	vmovss	LCPI89_1(%rip), %xmm12          ## xmm12 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm14               ## 4-byte Reload
                                        ## xmm14 = mem[0],zero,zero,zero
	jmp	LBB89_30
	.p2align	4, 0x90
LBB89_29:                               ##   in Loop: Header=BB89_30 Depth=2
	vcvttss2si	%xmm0, %eax
	movq	-448(%rbp), %rcx                ## 8-byte Reload
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movb	%al, (%r15,%rcx)
	movq	%rdx, %rax
	incq	%rax
	cmpl	%eax, -272(%rbp)                ## 4-byte Folded Reload
	je	LBB89_25
LBB89_30:                               ##   Parent Loop BB89_26 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB89_34 Depth 3
                                        ##       Child Loop BB89_78 Depth 3
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%eax, %xmm9, %xmm0
	vaddss	LCPI89_2(%rip), %xmm0, %xmm13
	vmovss	LCPI89_6(%rip), %xmm7           ## xmm7 = mem[0],zero,zero,zero
	cmpl	$0, -392(%rbp)                  ## 4-byte Folded Reload
	jle	LBB89_136
## %bb.31:                              ##   in Loop: Header=BB89_30 Depth=2
	movq	%rax, -400(%rbp)                ## 8-byte Spill
	vdivss	%xmm10, %xmm13, %xmm6
	vmulss	LCPI89_0(%rip), %xmm6, %xmm0
	vmovaps	-240(%rbp), %xmm5               ## 16-byte Reload
	vaddss	%xmm0, %xmm5, %xmm0
	vmovss	%xmm0, -80(%rbp)                ## 4-byte Spill
	vaddss	-264(%rbp), %xmm6, %xmm0        ## 4-byte Folded Reload
	vmovss	%xmm0, -224(%rbp)               ## 4-byte Spill
	xorl	%eax, %eax
	movl	$0, -60(%rbp)                   ## 4-byte Folded Spill
                                        ## implicit-def: $xmm0
                                        ## kill: killed $xmm0
                                        ## implicit-def: $xmm0
                                        ## kill: killed $xmm0
                                        ## implicit-def: $xmm0
                                        ## kill: killed $xmm0
                                        ## implicit-def: $xmm0
                                        ## kill: killed $xmm0
	vmovss	%xmm13, -44(%rbp)               ## 4-byte Spill
	vmovss	%xmm6, -128(%rbp)               ## 4-byte Spill
	jmp	LBB89_34
	.p2align	4, 0x90
LBB89_32:                               ##   in Loop: Header=BB89_34 Depth=3
	movq	-56(%rbp), %r8                  ## 8-byte Reload
LBB89_33:                               ##   in Loop: Header=BB89_34 Depth=3
	addq	$14, %rax
	cmpq	%rax, %r13
	je	LBB89_76
LBB89_34:                               ##   Parent Loop BB89_26 Depth=1
                                        ##     Parent Loop BB89_30 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	12(%r14,%rax), %ecx
	cmpb	$2, %cl
	je	LBB89_47
## %bb.35:                              ##   in Loop: Header=BB89_34 Depth=3
	cmpb	$3, %cl
	jne	LBB89_33
## %bb.36:                              ##   in Loop: Header=BB89_34 Depth=3
	movswl	-14(%r14,%rax), %r9d
	movswl	-12(%r14,%rax), %ecx
	movzwl	4(%r14,%rax), %r11d
	movzwl	6(%r14,%rax), %edx
	movswl	(%r14,%rax), %r8d
	movswl	2(%r14,%rax), %r10d
	cmpw	%r8w, %r11w
	movl	%r11d, %ebx
	cmovgel	%r8d, %ebx
	cmpw	%r9w, %bx
	cmovgel	%r9d, %ebx
	cmpw	%r10w, %dx
	movl	%r10d, %esi
	cmovll	%edx, %esi
	movl	%edx, %edi
	cmovlel	%r10d, %edi
	cmpw	%si, %cx
	cmovll	%ecx, %esi
	cmpw	%di, %cx
	movswl	%si, %esi
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%esi, %xmm9, %xmm0
	cmovgl	%ecx, %edi
	vucomiss	%xmm0, %xmm5
	jbe	LBB89_32
## %bb.37:                              ##   in Loop: Header=BB89_34 Depth=3
	movswl	%di, %esi
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%esi, %xmm9, %xmm0
	vucomiss	%xmm5, %xmm0
	jbe	LBB89_32
## %bb.38:                              ##   in Loop: Header=BB89_34 Depth=3
	movswl	%bx, %esi
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%esi, %xmm9, %xmm0
	vucomiss	%xmm0, %xmm6
	jbe	LBB89_32
## %bb.39:                              ##   in Loop: Header=BB89_34 Depth=3
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%r9d, %xmm9, %xmm7
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%ecx, %xmm9, %xmm2
	movswl	%r11w, %esi
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%esi, %xmm9, %xmm3
	movswl	%dx, %edx
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%edx, %xmm9, %xmm4
	vucomiss	%xmm3, %xmm7
	jne	LBB89_41
	jp	LBB89_41
## %bb.40:                              ##   in Loop: Header=BB89_34 Depth=3
	vucomiss	%xmm4, %xmm2
	jne	LBB89_41
	jnp	LBB89_43
LBB89_41:                               ##   in Loop: Header=BB89_34 Depth=3
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%r8d, %xmm9, %xmm13
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%r10d, %xmm9, %xmm12
	vucomiss	%xmm13, %xmm3
	jne	LBB89_54
	jp	LBB89_54
## %bb.42:                              ##   in Loop: Header=BB89_34 Depth=3
	vucomiss	%xmm12, %xmm4
	jne	LBB89_54
	jp	LBB89_54
LBB89_43:                               ##   in Loop: Header=BB89_34 Depth=3
	cmpw	%cx, %r10w
	movl	%ecx, %edx
	cmovll	%r10d, %edx
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%edx, %xmm9, %xmm0
	vucomiss	%xmm0, %xmm5
	jbe	LBB89_51
## %bb.44:                              ##   in Loop: Header=BB89_34 Depth=3
	cmpw	%cx, %r10w
	movl	%ecx, %edx
	cmovgl	%r10d, %edx
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%edx, %xmm9, %xmm0
	vucomiss	%xmm5, %xmm0
	vmovss	-44(%rbp), %xmm13               ## 4-byte Reload
                                        ## xmm13 = mem[0],zero,zero,zero
	jbe	LBB89_32
## %bb.45:                              ##   in Loop: Header=BB89_34 Depth=3
	movl	%r8d, %esi
	subl	%r9d, %esi
	cmovll	%r8d, %r9d
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%r9d, %xmm9, %xmm0
	vucomiss	%xmm0, %xmm6
	jbe	LBB89_32
## %bb.46:                              ##   in Loop: Header=BB89_34 Depth=3
	xorl	%edx, %edx
	cmpw	%cx, %r10w
	setg	%dl
	vsubss	%xmm2, %xmm5, %xmm0
	subl	%ecx, %r10d
	vcvtsi2ss	%r10d, %xmm9, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvtsi2ss	%esi, %xmm9, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	vaddss	%xmm7, %xmm0, %xmm0
	vucomiss	%xmm0, %xmm6
	leal	-1(%rdx,%rdx), %ecx
	cmovbel	%r12d, %ecx
	addl	%ecx, -60(%rbp)                 ## 4-byte Folded Spill
	jmp	LBB89_32
	.p2align	4, 0x90
LBB89_47:                               ##   in Loop: Header=BB89_34 Depth=3
	movswl	-12(%r14,%rax), %ecx
	movswl	2(%r14,%rax), %edx
	cmpw	%cx, %dx
	movl	%ecx, %esi
	cmovll	%edx, %esi
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%esi, %xmm9, %xmm0
	vucomiss	%xmm0, %xmm5
	jbe	LBB89_33
## %bb.48:                              ##   in Loop: Header=BB89_34 Depth=3
	cmpw	%cx, %dx
	movl	%ecx, %esi
	cmovgl	%edx, %esi
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%esi, %xmm9, %xmm0
	vucomiss	%xmm5, %xmm0
	jbe	LBB89_33
## %bb.49:                              ##   in Loop: Header=BB89_34 Depth=3
	movswl	-14(%r14,%rax), %esi
	movswl	(%r14,%rax), %edi
	movl	%edi, %ebx
	subl	%esi, %ebx
	cmovgel	%esi, %edi
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%edi, %xmm9, %xmm0
	vucomiss	%xmm0, %xmm6
	jbe	LBB89_33
## %bb.50:                              ##   in Loop: Header=BB89_34 Depth=3
	xorl	%edi, %edi
	cmpw	%cx, %dx
	setg	%dil
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%ecx, %xmm9, %xmm0
	vsubss	%xmm0, %xmm5, %xmm0
	subl	%ecx, %edx
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%edx, %xmm9, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%ebx, %xmm9, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	vxorps	%xmm9, %xmm9, %xmm9
	vcvtsi2ss	%esi, %xmm9, %xmm1
	vaddss	%xmm1, %xmm0, %xmm0
	vucomiss	%xmm0, %xmm6
	leal	-1(%rdi,%rdi), %ecx
	cmovbel	%r12d, %ecx
	addl	%ecx, -60(%rbp)                 ## 4-byte Folded Spill
	jmp	LBB89_33
LBB89_51:                               ##   in Loop: Header=BB89_34 Depth=3
	movq	-56(%rbp), %r8                  ## 8-byte Reload
	vmovss	-44(%rbp), %xmm13               ## 4-byte Reload
                                        ## xmm13 = mem[0],zero,zero,zero
	jmp	LBB89_33
LBB89_54:                               ##   in Loop: Header=BB89_34 Depth=3
	vmulss	%xmm7, %xmm15, %xmm5
	vsubss	%xmm5, %xmm2, %xmm6
	vmulss	%xmm3, %xmm15, %xmm5
	vsubss	%xmm5, %xmm4, %xmm5
	vmulss	%xmm15, %xmm13, %xmm0
	vsubss	%xmm0, %xmm12, %xmm0
	vaddss	%xmm5, %xmm5, %xmm1
	vsubss	%xmm1, %xmm6, %xmm1
	vaddss	%xmm0, %xmm1, %xmm11
	vxorps	%xmm14, %xmm14, %xmm14
	vsubss	%xmm6, %xmm5, %xmm15
	vsubss	-80(%rbp), %xmm6, %xmm6         ## 4-byte Folded Reload
	vucomiss	%xmm14, %xmm11
	jne	LBB89_55
	jnp	LBB89_65
LBB89_55:                               ##   in Loop: Header=BB89_34 Depth=3
	vmulss	%xmm6, %xmm11, %xmm0
	vmulss	%xmm15, %xmm15, %xmm1
	vsubss	%xmm0, %xmm1, %xmm6
	vucomiss	%xmm14, %xmm6
	movq	-56(%rbp), %r8                  ## 8-byte Reload
	jbe	LBB89_69
## %bb.56:                              ##   in Loop: Header=BB89_34 Depth=3
	vmovss	LCPI89_8(%rip), %xmm0           ## xmm0 = mem[0],zero,zero,zero
	vdivss	%xmm11, %xmm0, %xmm0
	vsqrtss	%xmm6, %xmm6, %xmm10
	vaddss	%xmm10, %xmm15, %xmm1
	vmulss	%xmm1, %xmm0, %xmm9
	vsubss	%xmm10, %xmm15, %xmm1
	vmulss	%xmm1, %xmm0, %xmm8
	vmovss	LCPI89_1(%rip), %xmm5           ## xmm5 = mem[0],zero,zero,zero
	vcmpnleps	%xmm5, %xmm9, %xmm0
	vcmpnleps	%xmm9, %xmm14, %xmm1
	vorps	%xmm0, %xmm1, %xmm0
	vmovd	%xmm0, %edx
	movl	%edx, %ebx
	vucomiss	%xmm8, %xmm5
	setae	%sil
	vmovaps	%xmm8, %xmm6
	testb	$1, %dl
	jne	LBB89_58
## %bb.57:                              ##   in Loop: Header=BB89_34 Depth=3
	vmovaps	%xmm9, %xmm6
LBB89_58:                               ##   in Loop: Header=BB89_34 Depth=3
	vcmpleps	%xmm8, %xmm14, %xmm0
	vcmpltps	%xmm10, %xmm14, %xmm1
	vandps	%xmm0, %xmm1, %xmm0
	vmovd	%xmm0, %edi
	addl	$2, %edx
	xorl	%ecx, %ecx
	testb	%sil, %dil
	jne	LBB89_60
## %bb.59:                              ##   in Loop: Header=BB89_34 Depth=3
	vmovaps	%xmm9, %xmm6
LBB89_60:                               ##   in Loop: Header=BB89_34 Depth=3
	movl	$1, %esi
	cmovel	%esi, %edx
	vmovaps	-144(%rbp), %xmm10              ## 16-byte Reload
	vmovss	LCPI89_9(%rip), %xmm5           ## xmm5 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm14               ## 4-byte Reload
                                        ## xmm14 = mem[0],zero,zero,zero
	jne	LBB89_67
## %bb.61:                              ##   in Loop: Header=BB89_34 Depth=3
	testb	$1, %bl
	jne	LBB89_71
	jmp	LBB89_67
LBB89_65:                               ##   in Loop: Header=BB89_34 Depth=3
	vmulss	LCPI89_7(%rip), %xmm15, %xmm0
	vdivss	%xmm0, %xmm6, %xmm6
	xorl	%ecx, %ecx
	vxorps	%xmm8, %xmm8, %xmm8
	vucomiss	%xmm8, %xmm6
	movq	-56(%rbp), %r8                  ## 8-byte Reload
	vmovss	LCPI89_9(%rip), %xmm5           ## xmm5 = mem[0],zero,zero,zero
	jb	LBB89_73
## %bb.66:                              ##   in Loop: Header=BB89_34 Depth=3
	movl	$1, %edx
	vmovss	LCPI89_1(%rip), %xmm0           ## xmm0 = mem[0],zero,zero,zero
	vucomiss	%xmm6, %xmm0
	vmovss	-48(%rbp), %xmm14               ## 4-byte Reload
                                        ## xmm14 = mem[0],zero,zero,zero
	jb	LBB89_71
LBB89_67:                               ##   in Loop: Header=BB89_34 Depth=3
	vxorps	%xmm1, %xmm1, %xmm1
	vmulss	%xmm1, %xmm2, %xmm0
	vaddss	%xmm7, %xmm0, %xmm2
	vmulss	%xmm1, %xmm4, %xmm0
	vaddss	%xmm3, %xmm0, %xmm0
	vmulss	%xmm1, %xmm12, %xmm1
	vaddss	%xmm1, %xmm13, %xmm3
	vsubss	%xmm2, %xmm0, %xmm1
	vsubss	%xmm2, %xmm3, %xmm0
	vsubss	-224(%rbp), %xmm2, %xmm2        ## 4-byte Folded Reload
	vaddss	%xmm6, %xmm6, %xmm3
	vsubss	%xmm3, %xmm5, %xmm3
	vmulss	%xmm3, %xmm6, %xmm3
	vmulss	%xmm1, %xmm3, %xmm3
	vaddss	%xmm2, %xmm3, %xmm3
	vmulss	%xmm6, %xmm6, %xmm4
	vmulss	%xmm0, %xmm4, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vmovss	%xmm3, -160(%rbp)               ## 4-byte Spill
	vmulss	%xmm6, %xmm11, %xmm3
	vaddss	%xmm3, %xmm15, %xmm3
	vmovss	%xmm3, -384(%rbp)               ## 4-byte Spill
	cmpl	$2, %edx
	jb	LBB89_70
## %bb.68:                              ##   in Loop: Header=BB89_34 Depth=3
	vaddss	%xmm8, %xmm8, %xmm3
	vsubss	%xmm3, %xmm5, %xmm3
	vmulss	%xmm3, %xmm8, %xmm3
	vmulss	%xmm1, %xmm3, %xmm1
	vaddss	%xmm2, %xmm1, %xmm1
	vmulss	%xmm8, %xmm8, %xmm2
	vmulss	%xmm0, %xmm2, %xmm0
	vaddss	%xmm1, %xmm0, %xmm0
	vmovss	%xmm0, -368(%rbp)               ## 4-byte Spill
	vmulss	%xmm8, %xmm11, %xmm0
	vaddss	%xmm0, %xmm15, %xmm0
	vmovss	%xmm0, -352(%rbp)               ## 4-byte Spill
	movb	$1, %cl
	movb	$1, %dl
	jmp	LBB89_72
LBB89_69:                               ##   in Loop: Header=BB89_34 Depth=3
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	jmp	LBB89_74
LBB89_70:                               ##   in Loop: Header=BB89_34 Depth=3
	movb	$1, %cl
LBB89_71:                               ##   in Loop: Header=BB89_34 Depth=3
	xorl	%edx, %edx
LBB89_72:                               ##   in Loop: Header=BB89_34 Depth=3
	vmovaps	-192(%rbp), %xmm8               ## 16-byte Reload
	vxorps	%xmm15, %xmm15, %xmm15
	jmp	LBB89_75
LBB89_73:                               ##   in Loop: Header=BB89_34 Depth=3
	xorl	%edx, %edx
	vmovaps	-192(%rbp), %xmm8               ## 16-byte Reload
LBB89_74:                               ##   in Loop: Header=BB89_34 Depth=3
	vxorps	%xmm15, %xmm15, %xmm15
	vmovss	-48(%rbp), %xmm14               ## 4-byte Reload
                                        ## xmm14 = mem[0],zero,zero,zero
LBB89_75:                               ##   in Loop: Header=BB89_34 Depth=3
	vmovaps	-240(%rbp), %xmm5               ## 16-byte Reload
	vmovss	-44(%rbp), %xmm13               ## 4-byte Reload
                                        ## xmm13 = mem[0],zero,zero,zero
	vmovss	-128(%rbp), %xmm6               ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	xorl	%esi, %esi
	vucomiss	-384(%rbp), %xmm15              ## 4-byte Folded Reload
	setbe	%sil
	vucomiss	-160(%rbp), %xmm15              ## 4-byte Folded Reload
	leal	-1(%rsi,%rsi), %esi
	cmovbel	%r12d, %esi
	testb	%cl, %cl
	cmovel	%r12d, %esi
	addl	-60(%rbp), %esi                 ## 4-byte Folded Reload
	xorl	%ecx, %ecx
	vucomiss	-352(%rbp), %xmm15              ## 4-byte Folded Reload
	setbe	%cl
	vucomiss	-368(%rbp), %xmm15              ## 4-byte Folded Reload
	leal	-1(%rcx,%rcx), %ecx
	cmovbel	%r12d, %ecx
	testb	%dl, %dl
	cmovel	%r12d, %ecx
	addl	%esi, %ecx
	movl	%ecx, -60(%rbp)                 ## 4-byte Spill
	jmp	LBB89_33
	.p2align	4, 0x90
LBB89_76:                               ##   in Loop: Header=BB89_30 Depth=2
	movq	-440(%rbp), %r15                ## 8-byte Reload
	xorl	%r12d, %r12d
	vmovss	LCPI89_10(%rip), %xmm7          ## xmm7 = mem[0],zero,zero,zero
	vmovaps	-416(%rbp), %xmm11              ## 16-byte Reload
	vmovss	LCPI89_1(%rip), %xmm12          ## xmm12 = mem[0],zero,zero,zero
	jmp	LBB89_78
	.p2align	4, 0x90
LBB89_77:                               ##   in Loop: Header=BB89_78 Depth=3
	incq	%r12
	addq	$14, %r15
	cmpq	%r12, %r8
	je	LBB89_133
LBB89_78:                               ##   Parent Loop BB89_26 Depth=1
                                        ##     Parent Loop BB89_30 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovd	14(%r15), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vpmovsxwd	%xmm0, %xmm0
	vcvtdq2ps	%xmm0, %xmm0
	vmulps	%xmm0, %xmm11, %xmm6
	movzbl	26(%r15), %eax
	cmpb	$2, %al
	je	LBB89_83
## %bb.79:                              ##   in Loop: Header=BB89_78 Depth=3
	cmpb	$3, %al
	jne	LBB89_77
## %bb.80:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovd	(%r15), %xmm0                   ## xmm0 = mem[0],zero,zero,zero
	vpmovsxwd	%xmm0, %xmm0
	vcvtdq2ps	%xmm0, %xmm0
	vmulps	%xmm0, %xmm11, %xmm5
	vmovd	18(%r15), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vpmovsxwd	%xmm0, %xmm0
	vcvtdq2ps	%xmm0, %xmm0
	vmulps	%xmm0, %xmm11, %xmm2
	vcmpltps	%xmm2, %xmm6, %xmm0
	vpermilps	$17, %xmm0, %xmm0       ## xmm0 = xmm0[1,0,1,0]
	vshufps	$17, %xmm6, %xmm2, %xmm1        ## xmm1 = xmm2[1,0],xmm6[1,0]
	vmovaps	%xmm2, -128(%rbp)               ## 16-byte Spill
	vshufps	$17, %xmm2, %xmm6, %xmm2        ## xmm2 = xmm6[1,0],xmm2[1,0]
	vblendvps	%xmm0, %xmm1, %xmm2, %xmm0
	vpermilps	$17, %xmm5, %xmm1       ## xmm1 = xmm5[1,0,1,0]
	vcmpltps	%xmm1, %xmm0, %xmm1
	vmovmskps	%xmm1, %eax
	testb	$8, %al
	jne	LBB89_89
## %bb.81:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovaps	%xmm5, %xmm1
	vmovshdup	%xmm5, %xmm4            ## xmm4 = xmm5[1,1,3,3]
	testb	$4, %al
	je	LBB89_90
LBB89_82:                               ##   in Loop: Header=BB89_78 Depth=3
	vpermilpd	$1, %xmm0, %xmm2        ## xmm2 = xmm0[1,0]
	vmovaps	%xmm5, %xmm3
	testb	$2, %al
	je	LBB89_91
	jmp	LBB89_92
	.p2align	4, 0x90
LBB89_83:                               ##   in Loop: Header=BB89_78 Depth=3
	movq	-200(%rbp), %rax                ## 8-byte Reload
	vmovss	(%rax,%r12,4), %xmm0            ## xmm0 = mem[0],zero,zero,zero
	vucomiss	%xmm15, %xmm0
	jne	LBB89_84
	jnp	LBB89_77
LBB89_84:                               ##   in Loop: Header=BB89_78 Depth=3
	vsubss	%xmm13, %xmm6, %xmm1
	vmovshdup	%xmm6, %xmm3            ## xmm3 = xmm6[1,1,3,3]
	vsubss	%xmm14, %xmm3, %xmm2
	vmulss	%xmm2, %xmm2, %xmm4
	vmulss	%xmm1, %xmm1, %xmm5
	vaddss	%xmm4, %xmm5, %xmm4
	vmulss	%xmm7, %xmm7, %xmm5
	vucomiss	%xmm4, %xmm5
	jbe	LBB89_86
## %bb.85:                              ##   in Loop: Header=BB89_78 Depth=3
	vsqrtss	%xmm4, %xmm4, %xmm7
LBB89_86:                               ##   in Loop: Header=BB89_78 Depth=3
	testq	%r12, %r12
	je	LBB89_143
## %bb.87:                              ##   in Loop: Header=BB89_78 Depth=3
	movswl	(%r15), %eax
	vcvtsi2ss	%eax, %xmm8, %xmm4
	vmulss	%xmm4, %xmm10, %xmm4
	movswl	2(%r15), %eax
	vcvtsi2ss	%eax, %xmm8, %xmm5
	vmulss	%xmm5, %xmm8, %xmm5
	vsubss	%xmm6, %xmm4, %xmm4
	vsubss	%xmm3, %xmm5, %xmm3
	vmulss	%xmm3, %xmm1, %xmm5
	vmulss	%xmm2, %xmm4, %xmm6
	vsubss	%xmm5, %xmm6, %xmm5
	vbroadcastss	LCPI89_22(%rip), %xmm6  ## xmm6 = [NaN,NaN,NaN,NaN]
	vandps	%xmm6, %xmm5, %xmm5
	vmulss	%xmm5, %xmm0, %xmm0
	vucomiss	%xmm0, %xmm7
	jbe	LBB89_77
## %bb.88:                              ##   in Loop: Header=BB89_78 Depth=3
	vmulss	%xmm3, %xmm2, %xmm2
	vmulss	%xmm4, %xmm1, %xmm1
	vaddss	%xmm2, %xmm1, %xmm1
	vxorps	-320(%rbp), %xmm1, %xmm1        ## 16-byte Folded Reload
	vmulss	%xmm3, %xmm3, %xmm2
	vmulss	%xmm4, %xmm4, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcmpless	%xmm12, %xmm1, %xmm2
	vblendvps	%xmm2, %xmm0, %xmm7, %xmm0
	vcmpless	%xmm1, %xmm15, %xmm1
	vblendvps	%xmm1, %xmm0, %xmm7, %xmm7
	jmp	LBB89_77
LBB89_89:                               ##   in Loop: Header=BB89_78 Depth=3
	vpermilps	$255, %xmm0, %xmm1      ## xmm1 = xmm0[3,3,3,3]
	vmovshdup	%xmm5, %xmm4            ## xmm4 = xmm5[1,1,3,3]
	testb	$4, %al
	jne	LBB89_82
LBB89_90:                               ##   in Loop: Header=BB89_78 Depth=3
	vmovaps	%xmm4, %xmm2
	vmovaps	%xmm5, %xmm3
	testb	$2, %al
	jne	LBB89_92
LBB89_91:                               ##   in Loop: Header=BB89_78 Depth=3
	vmovshdup	%xmm0, %xmm3            ## xmm3 = xmm0[1,1,3,3]
LBB89_92:                               ##   in Loop: Header=BB89_78 Depth=3
	vmovaps	%xmm4, -80(%rbp)                ## 16-byte Spill
	testb	$1, %al
	jne	LBB89_93
## %bb.94:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovaps	%xmm0, %xmm4
	vsubss	%xmm7, %xmm1, %xmm0
	vucomiss	%xmm0, %xmm13
	ja	LBB89_95
	jmp	LBB89_77
	.p2align	4, 0x90
LBB89_93:                               ##   in Loop: Header=BB89_78 Depth=3
	vsubss	%xmm7, %xmm1, %xmm0
	vucomiss	%xmm0, %xmm13
	jbe	LBB89_77
LBB89_95:                               ##   in Loop: Header=BB89_78 Depth=3
	vaddss	%xmm3, %xmm7, %xmm0
	vucomiss	%xmm13, %xmm0
	jbe	LBB89_77
## %bb.96:                              ##   in Loop: Header=BB89_78 Depth=3
	vsubss	%xmm7, %xmm2, %xmm0
	vucomiss	%xmm0, %xmm14
	jbe	LBB89_77
## %bb.97:                              ##   in Loop: Header=BB89_78 Depth=3
	vaddss	%xmm4, %xmm7, %xmm0
	vucomiss	%xmm14, %xmm0
	jbe	LBB89_77
## %bb.98:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovaps	%xmm7, -224(%rbp)               ## 16-byte Spill
	vmovaps	-128(%rbp), %xmm2               ## 16-byte Reload
	vmovshdup	%xmm2, %xmm4            ## xmm4 = xmm2[1,1,3,3]
	vmovshdup	%xmm6, %xmm7            ## xmm7 = xmm6[1,1,3,3]
	vsubss	%xmm6, %xmm2, %xmm0
	vsubss	%xmm7, %xmm4, %xmm1
	vaddss	%xmm2, %xmm2, %xmm2
	vsubss	%xmm2, %xmm6, %xmm2
	vmovaps	%xmm5, -384(%rbp)               ## 16-byte Spill
	vaddss	%xmm2, %xmm5, %xmm3
	vmovaps	%xmm4, -368(%rbp)               ## 16-byte Spill
	vaddss	%xmm4, %xmm4, %xmm2
	vsubss	%xmm2, %xmm7, %xmm2
	vaddss	-80(%rbp), %xmm2, %xmm5         ## 16-byte Folded Reload
	vmovaps	%xmm6, -160(%rbp)               ## 16-byte Spill
	vmovaps	%xmm13, %xmm12
	vsubss	%xmm13, %xmm6, %xmm9
	vmovaps	%xmm7, -352(%rbp)               ## 16-byte Spill
	vxorps	%xmm13, %xmm13, %xmm13
	vsubss	%xmm14, %xmm7, %xmm10
	movq	-200(%rbp), %rax                ## 8-byte Reload
	vmovss	(%rax,%r12,4), %xmm4            ## xmm4 = mem[0],zero,zero,zero
	vucomiss	%xmm13, %xmm4
	vmulss	%xmm5, %xmm1, %xmm2
	vmulss	%xmm3, %xmm0, %xmm6
	vaddss	%xmm2, %xmm6, %xmm2
	vmulss	LCPI89_11(%rip), %xmm2, %xmm2
	vmulss	%xmm1, %xmm1, %xmm6
	vmulss	%xmm0, %xmm0, %xmm7
	jne	LBB89_102
	jp	LBB89_102
## %bb.99:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovaps	%xmm14, %xmm15
	vaddss	%xmm6, %xmm7, %xmm4
	vmulss	%xmm5, %xmm10, %xmm5
	vmulss	%xmm3, %xmm9, %xmm3
	vaddss	%xmm5, %xmm3, %xmm3
	vaddss	%xmm4, %xmm4, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vmulss	%xmm1, %xmm10, %xmm1
	vmulss	%xmm0, %xmm9, %xmm0
	vaddss	%xmm1, %xmm0, %xmm1
	vucomiss	%xmm13, %xmm2
	vmovaps	%xmm10, %xmm5
	jne	LBB89_104
	jp	LBB89_104
## %bb.100:                             ##   in Loop: Header=BB89_78 Depth=3
	vxorps	%xmm0, %xmm0, %xmm0
	vucomiss	%xmm0, %xmm3
	jne	LBB89_101
	jnp	LBB89_105
LBB89_101:                              ##   in Loop: Header=BB89_78 Depth=3
	vxorps	-320(%rbp), %xmm1, %xmm1        ## 16-byte Folded Reload
	vdivss	%xmm3, %xmm1, %xmm1
	vinsertps	$29, %xmm1, %xmm0, %xmm1 ## xmm1 = zero,xmm1[0],zero,zero
	movb	$1, %dl
	jmp	LBB89_106
LBB89_102:                              ##   in Loop: Header=BB89_78 Depth=3
	vmulss	%xmm4, %xmm2, %xmm2
	vaddss	%xmm6, %xmm7, %xmm6
	vmulss	%xmm5, %xmm10, %xmm5
	vmulss	%xmm3, %xmm9, %xmm3
	vaddss	%xmm5, %xmm3, %xmm3
	vaddss	%xmm6, %xmm6, %xmm5
	vaddss	%xmm3, %xmm5, %xmm3
	vmulss	%xmm4, %xmm3, %xmm3
	vmovss	%xmm10, -168(%rbp)              ## 4-byte Spill
	vmulss	%xmm1, %xmm10, %xmm1
	vmulss	%xmm0, %xmm9, %xmm0
	vaddss	%xmm1, %xmm0, %xmm0
	vmulss	%xmm4, %xmm0, %xmm1
	vmovss	LCPI89_12(%rip), %xmm5          ## xmm5 = mem[0],zero,zero,zero
	vdivss	%xmm5, %xmm2, %xmm6
	vmulss	%xmm2, %xmm2, %xmm0
	vdivss	%xmm5, %xmm0, %xmm0
	vaddss	%xmm0, %xmm3, %xmm0
	vaddss	%xmm2, %xmm2, %xmm4
	vmulss	LCPI89_13(%rip), %xmm3, %xmm3
	vmulss	%xmm2, %xmm4, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vmulss	%xmm3, %xmm2, %xmm2
	vmovss	LCPI89_14(%rip), %xmm3          ## xmm3 = mem[0],zero,zero,zero
	vdivss	%xmm3, %xmm2, %xmm2
	vaddss	%xmm2, %xmm1, %xmm4
	vmulss	%xmm0, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm1
	vmulss	LCPI89_15(%rip), %xmm1, %xmm2
	vdivss	%xmm3, %xmm2, %xmm2
	vmulss	%xmm4, %xmm4, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vucomiss	%xmm13, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	vmovss	%xmm9, -172(%rbp)               ## 4-byte Spill
	vmovaps	%xmm6, -464(%rbp)               ## 16-byte Spill
	jae	LBB89_108
## %bb.103:                             ##   in Loop: Header=BB89_78 Depth=3
	vdivss	%xmm5, %xmm0, %xmm0
	vsqrtss	%xmm0, %xmm0, %xmm0
	vmovaps	%xmm0, -336(%rbp)               ## 16-byte Spill
	vmovss	LCPI89_17(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	vdivss	%xmm1, %xmm0, %xmm0
	vsqrtss	%xmm0, %xmm0, %xmm0
	vmulss	%xmm0, %xmm4, %xmm0
	vmulss	LCPI89_18(%rip), %xmm0, %xmm0
	callq	_acosf
	vdivss	LCPI89_11(%rip), %xmm0, %xmm0
	vmovss	%xmm0, -84(%rbp)                ## 4-byte Spill
	callq	_cosf
	vmovaps	%xmm0, -304(%rbp)               ## 16-byte Spill
	vmovss	-84(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	vaddsd	LCPI89_19(%rip), %xmm0, %xmm0
	callq	_cos
	vmovss	-172(%rbp), %xmm9               ## 4-byte Reload
                                        ## xmm9 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm13               ## 4-byte Reload
                                        ## xmm13 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm14               ## 4-byte Reload
                                        ## xmm14 = mem[0],zero,zero,zero
	vxorps	%xmm15, %xmm15, %xmm15
	vmovss	LCPI89_1(%rip), %xmm12          ## xmm12 = mem[0],zero,zero,zero
	vmovaps	-416(%rbp), %xmm11              ## 16-byte Reload
	movq	-56(%rbp), %r8                  ## 8-byte Reload
	vmovaps	-192(%rbp), %xmm8               ## 16-byte Reload
	vmovaps	-144(%rbp), %xmm10              ## 16-byte Reload
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	vmulss	LCPI89_20(%rip), %xmm0, %xmm0
	vmovaps	-336(%rbp), %xmm4               ## 16-byte Reload
	vaddss	%xmm4, %xmm4, %xmm1
	vmovaps	-304(%rbp), %xmm5               ## 16-byte Reload
	vaddss	%xmm0, %xmm5, %xmm2
	vxorps	-320(%rbp), %xmm4, %xmm3        ## 16-byte Folded Reload
	vinsertps	$28, %xmm1, %xmm3, %xmm1 ## xmm1 = xmm3[0],xmm1[0],zero,zero
	vinsertps	$16, %xmm5, %xmm2, %xmm2 ## xmm2 = xmm2[0],xmm5[0],xmm2[2,3]
	vmulps	%xmm2, %xmm1, %xmm1
	vmovaps	-464(%rbp), %xmm3               ## 16-byte Reload
	vbroadcastss	%xmm3, %xmm2
	vaddps	%xmm2, %xmm1, %xmm1
	vsubss	%xmm0, %xmm5, %xmm0
	vmulss	%xmm0, %xmm4, %xmm0
	vsubss	%xmm0, %xmm3, %xmm0
	movb	$1, %dl
	movb	$1, %cl
	movb	$1, %al
	vmovaps	-224(%rbp), %xmm7               ## 16-byte Reload
	vmovaps	-160(%rbp), %xmm6               ## 16-byte Reload
	vmovaps	-80(%rbp), %xmm4                ## 16-byte Reload
	jmp	LBB89_116
LBB89_104:                              ##   in Loop: Header=BB89_78 Depth=3
	vmulss	LCPI89_21(%rip), %xmm2, %xmm0
	vmulss	%xmm0, %xmm1, %xmm0
	vmulss	%xmm3, %xmm3, %xmm1
	vaddss	%xmm0, %xmm1, %xmm1
	vxorps	%xmm0, %xmm0, %xmm0
	vucomiss	%xmm1, %xmm0
	jbe	LBB89_110
LBB89_105:                              ##   in Loop: Header=BB89_78 Depth=3
	vxorps	%xmm1, %xmm1, %xmm1
	xorl	%edx, %edx
LBB89_106:                              ##   in Loop: Header=BB89_78 Depth=3
	xorl	%ecx, %ecx
	xorl	%eax, %eax
LBB89_107:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovaps	-224(%rbp), %xmm7               ## 16-byte Reload
	vmovaps	-160(%rbp), %xmm6               ## 16-byte Reload
	vmovaps	-80(%rbp), %xmm4                ## 16-byte Reload
	vmovaps	-144(%rbp), %xmm10              ## 16-byte Reload
	vmovaps	%xmm15, %xmm14
	vxorps	%xmm15, %xmm15, %xmm15
	vmovaps	%xmm12, %xmm13
	vmovss	LCPI89_1(%rip), %xmm12          ## xmm12 = mem[0],zero,zero,zero
	jmp	LBB89_117
LBB89_108:                              ##   in Loop: Header=BB89_78 Depth=3
	vsqrtss	%xmm2, %xmm2, %xmm0
	vmovaps	%xmm4, -336(%rbp)               ## 16-byte Spill
	vmovss	%xmm0, -84(%rbp)                ## 4-byte Spill
	vsubss	%xmm4, %xmm0, %xmm0
	vmulss	LCPI89_2(%rip), %xmm0, %xmm0
	vucomiss	%xmm0, %xmm3
	jbe	LBB89_111
## %bb.109:                             ##   in Loop: Header=BB89_78 Depth=3
	vbroadcastss	LCPI89_0(%rip), %xmm1   ## xmm1 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	%xmm1, -304(%rbp)               ## 16-byte Spill
	vxorps	%xmm1, %xmm0, %xmm0
	vmovss	LCPI89_16(%rip), %xmm1          ## xmm1 = mem[0],zero,zero,zero
	callq	_powf
	vxorps	-304(%rbp), %xmm0, %xmm0        ## 16-byte Folded Reload
	jmp	LBB89_112
LBB89_110:                              ##   in Loop: Header=BB89_78 Depth=3
	vsqrtss	%xmm1, %xmm1, %xmm1
	vxorps	-320(%rbp), %xmm3, %xmm4        ## 16-byte Folded Reload
	vaddss	%xmm2, %xmm2, %xmm2
	vinsertps	$16, %xmm4, %xmm1, %xmm4 ## xmm4 = xmm1[0],xmm4[0],xmm1[2,3]
	vinsertps	$16, %xmm1, %xmm3, %xmm1 ## xmm1 = xmm3[0],xmm1[0],xmm3[2,3]
	vsubps	%xmm1, %xmm4, %xmm1
	vbroadcastss	%xmm2, %xmm2
	vdivps	%xmm2, %xmm1, %xmm1
	movb	$1, %dl
	xorl	%eax, %eax
	movb	$1, %cl
	jmp	LBB89_107
LBB89_111:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovss	LCPI89_16(%rip), %xmm1          ## xmm1 = mem[0],zero,zero,zero
	callq	_powf
LBB89_112:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovaps	%xmm0, -304(%rbp)               ## 16-byte Spill
	vmovaps	-336(%rbp), %xmm0               ## 16-byte Reload
	vxorps	-320(%rbp), %xmm0, %xmm0        ## 16-byte Folded Reload
	vsubss	-84(%rbp), %xmm0, %xmm0         ## 4-byte Folded Reload
	vmulss	LCPI89_2(%rip), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomiss	%xmm0, %xmm1
	jbe	LBB89_114
## %bb.113:                             ##   in Loop: Header=BB89_78 Depth=3
	vbroadcastss	LCPI89_0(%rip), %xmm1   ## xmm1 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	%xmm1, -336(%rbp)               ## 16-byte Spill
	vxorps	%xmm1, %xmm0, %xmm0
	vmovss	LCPI89_16(%rip), %xmm1          ## xmm1 = mem[0],zero,zero,zero
	callq	_powf
	vxorps	-336(%rbp), %xmm0, %xmm0        ## 16-byte Folded Reload
	jmp	LBB89_115
LBB89_114:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovss	LCPI89_16(%rip), %xmm1          ## xmm1 = mem[0],zero,zero,zero
	callq	_powf
LBB89_115:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovaps	-304(%rbp), %xmm1               ## 16-byte Reload
	vaddss	-464(%rbp), %xmm1, %xmm1        ## 16-byte Folded Reload
	vaddss	%xmm0, %xmm1, %xmm0
	vinsertps	$29, %xmm0, %xmm0, %xmm1 ## xmm1 = zero,xmm0[0],zero,zero
	movb	$1, %dl
	vxorps	%xmm0, %xmm0, %xmm0
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	vmovaps	-144(%rbp), %xmm10              ## 16-byte Reload
	vmovaps	-192(%rbp), %xmm8               ## 16-byte Reload
	movq	-56(%rbp), %r8                  ## 8-byte Reload
	vmovaps	-416(%rbp), %xmm11              ## 16-byte Reload
	vmovss	LCPI89_1(%rip), %xmm12          ## xmm12 = mem[0],zero,zero,zero
	vxorps	%xmm15, %xmm15, %xmm15
	vmovss	-48(%rbp), %xmm14               ## 4-byte Reload
                                        ## xmm14 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm13               ## 4-byte Reload
                                        ## xmm13 = mem[0],zero,zero,zero
	vmovaps	-224(%rbp), %xmm7               ## 16-byte Reload
	vmovaps	-160(%rbp), %xmm6               ## 16-byte Reload
	vmovaps	-80(%rbp), %xmm4                ## 16-byte Reload
	vmovss	-172(%rbp), %xmm9               ## 4-byte Reload
                                        ## xmm9 = mem[0],zero,zero,zero
LBB89_116:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovss	-168(%rbp), %xmm5               ## 4-byte Reload
                                        ## xmm5 = mem[0],zero,zero,zero
LBB89_117:                              ##   in Loop: Header=BB89_78 Depth=3
	vmulss	%xmm5, %xmm5, %xmm2
	vmulss	%xmm9, %xmm9, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vmulss	%xmm7, %xmm7, %xmm3
	vucomiss	%xmm2, %xmm3
	jbe	LBB89_119
## %bb.118:                             ##   in Loop: Header=BB89_78 Depth=3
	vsqrtss	%xmm2, %xmm2, %xmm7
LBB89_119:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovshdup	%xmm1, %xmm2            ## xmm2 = xmm1[1,1,3,3]
	vucomiss	%xmm15, %xmm2
	setae	%bl
	andb	%bl, %dl
	cmpb	$1, %dl
	jne	LBB89_123
## %bb.120:                             ##   in Loop: Header=BB89_78 Depth=3
	vucomiss	%xmm2, %xmm12
	jb	LBB89_123
## %bb.121:                             ##   in Loop: Header=BB89_78 Depth=3
	vsubss	%xmm2, %xmm12, %xmm3
	vmulss	%xmm3, %xmm3, %xmm4
	vaddss	%xmm2, %xmm2, %xmm5
	vmulss	%xmm3, %xmm5, %xmm3
	vmulss	-128(%rbp), %xmm3, %xmm5        ## 16-byte Folded Reload
	vmulss	%xmm6, %xmm4, %xmm6
	vaddss	%xmm5, %xmm6, %xmm5
	vmulss	%xmm2, %xmm2, %xmm2
	vmulss	-384(%rbp), %xmm2, %xmm6        ## 16-byte Folded Reload
	vaddss	%xmm5, %xmm6, %xmm5
	vmulss	-368(%rbp), %xmm3, %xmm3        ## 16-byte Folded Reload
	vmulss	-352(%rbp), %xmm4, %xmm4        ## 16-byte Folded Reload
	vaddss	%xmm3, %xmm4, %xmm3
	vmovaps	-80(%rbp), %xmm4                ## 16-byte Reload
	vmulss	%xmm4, %xmm2, %xmm2
	vaddss	%xmm3, %xmm2, %xmm2
	vsubss	%xmm13, %xmm5, %xmm3
	vsubss	%xmm14, %xmm2, %xmm2
	vmulss	%xmm2, %xmm2, %xmm2
	vmulss	%xmm3, %xmm3, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vmulss	%xmm7, %xmm7, %xmm3
	vucomiss	%xmm2, %xmm3
	jbe	LBB89_123
## %bb.122:                             ##   in Loop: Header=BB89_78 Depth=3
	vsqrtss	%xmm2, %xmm2, %xmm7
LBB89_123:                              ##   in Loop: Header=BB89_78 Depth=3
	vucomiss	%xmm15, %xmm1
	setae	%dl
	andb	%dl, %cl
	cmpb	$1, %cl
	jne	LBB89_128
## %bb.124:                             ##   in Loop: Header=BB89_78 Depth=3
	vucomiss	%xmm1, %xmm12
	jb	LBB89_128
## %bb.125:                             ##   in Loop: Header=BB89_78 Depth=3
	vsubss	%xmm1, %xmm12, %xmm2
	vmulss	%xmm2, %xmm2, %xmm3
	vmovaps	%xmm4, %xmm9
	vaddss	%xmm1, %xmm1, %xmm4
	vmulss	%xmm2, %xmm4, %xmm2
	vmulss	-128(%rbp), %xmm2, %xmm4        ## 16-byte Folded Reload
	vmovaps	-160(%rbp), %xmm6               ## 16-byte Reload
	vmulss	%xmm6, %xmm3, %xmm5
	vaddss	%xmm4, %xmm5, %xmm4
	vmulss	%xmm1, %xmm1, %xmm1
	vmulss	-384(%rbp), %xmm1, %xmm5        ## 16-byte Folded Reload
	vaddss	%xmm4, %xmm5, %xmm4
	vmulss	-368(%rbp), %xmm2, %xmm2        ## 16-byte Folded Reload
	vmulss	-352(%rbp), %xmm3, %xmm3        ## 16-byte Folded Reload
	vaddss	%xmm2, %xmm3, %xmm2
	vmulss	%xmm1, %xmm9, %xmm1
	vaddss	%xmm2, %xmm1, %xmm1
	vsubss	%xmm13, %xmm4, %xmm2
	vsubss	%xmm14, %xmm1, %xmm1
	vmulss	%xmm1, %xmm1, %xmm1
	vmulss	%xmm2, %xmm2, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vmulss	%xmm7, %xmm7, %xmm2
	vucomiss	%xmm1, %xmm2
	jbe	LBB89_129
## %bb.126:                             ##   in Loop: Header=BB89_78 Depth=3
	vsqrtss	%xmm1, %xmm1, %xmm7
	jmp	LBB89_129
LBB89_128:                              ##   in Loop: Header=BB89_78 Depth=3
	vmovaps	-160(%rbp), %xmm6               ## 16-byte Reload
LBB89_129:                              ##   in Loop: Header=BB89_78 Depth=3
	vucomiss	%xmm15, %xmm0
	setae	%cl
	andb	%cl, %al
	cmpb	$1, %al
	jne	LBB89_77
## %bb.130:                             ##   in Loop: Header=BB89_78 Depth=3
	vucomiss	%xmm0, %xmm12
	jb	LBB89_77
## %bb.131:                             ##   in Loop: Header=BB89_78 Depth=3
	vsubss	%xmm0, %xmm12, %xmm1
	vmulss	%xmm1, %xmm1, %xmm2
	vaddss	%xmm0, %xmm0, %xmm3
	vmulss	%xmm1, %xmm3, %xmm1
	vmulss	-128(%rbp), %xmm1, %xmm3        ## 16-byte Folded Reload
	vmulss	%xmm6, %xmm2, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vmulss	%xmm0, %xmm0, %xmm0
	vmulss	-384(%rbp), %xmm0, %xmm4        ## 16-byte Folded Reload
	vaddss	%xmm3, %xmm4, %xmm3
	vmulss	-368(%rbp), %xmm1, %xmm1        ## 16-byte Folded Reload
	vmulss	-352(%rbp), %xmm2, %xmm2        ## 16-byte Folded Reload
	vaddss	%xmm1, %xmm2, %xmm1
	vmulss	-80(%rbp), %xmm0, %xmm0         ## 16-byte Folded Reload
	vaddss	%xmm1, %xmm0, %xmm0
	vsubss	%xmm13, %xmm3, %xmm1
	vsubss	%xmm14, %xmm0, %xmm0
	vmulss	%xmm0, %xmm0, %xmm0
	vmulss	%xmm1, %xmm1, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmulss	%xmm7, %xmm7, %xmm1
	vucomiss	%xmm0, %xmm1
	jbe	LBB89_77
## %bb.132:                             ##   in Loop: Header=BB89_78 Depth=3
	vsqrtss	%xmm0, %xmm0, %xmm7
	jmp	LBB89_77
	.p2align	4, 0x90
LBB89_133:                              ##   in Loop: Header=BB89_30 Depth=2
	cmpl	$0, -60(%rbp)                   ## 4-byte Folded Reload
	movq	-432(%rbp), %r15                ## 8-byte Reload
	jne	LBB89_135
## %bb.134:                             ##   in Loop: Header=BB89_30 Depth=2
	vxorps	-320(%rbp), %xmm7, %xmm7        ## 16-byte Folded Reload
LBB89_135:                              ##   in Loop: Header=BB89_30 Depth=2
	xorl	%r12d, %r12d
	movq	-400(%rbp), %rax                ## 8-byte Reload
LBB89_136:                              ##   in Loop: Header=BB89_30 Depth=2
	movq	%rax, %rdx
	vmulss	-276(%rbp), %xmm7, %xmm0        ## 4-byte Folded Reload
	vaddss	-268(%rbp), %xmm0, %xmm1        ## 4-byte Folded Reload
	vxorps	%xmm0, %xmm0, %xmm0
	vucomiss	%xmm1, %xmm0
	ja	LBB89_29
## %bb.137:                             ##   in Loop: Header=BB89_30 Depth=2
	vucomiss	LCPI89_23(%rip), %xmm1
	vmovaps	%xmm1, %xmm0
	jbe	LBB89_29
## %bb.138:                             ##   in Loop: Header=BB89_30 Depth=2
	vmovss	LCPI89_23(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	jmp	LBB89_29
LBB89_139:
	movq	-248(%rbp), %r14
LBB89_140:
	movq	-200(%rbp), %rdi                ## 8-byte Reload
	callq	_free
	movq	%r14, %rdi
	callq	_free
	jmp	LBB89_141
LBB89_143:
	callq	_stbtt_GetGlyphSDF.cold.1
	xorl	%eax, %eax
	jmp	LBB89_142
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetCodepointSDF          ## -- Begin function stbtt_GetCodepointSDF
	.p2align	4, 0x90
_stbtt_GetCodepointSDF:                 ## @stbtt_GetCodepointSDF
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, %r14
	movq	%r8, %r15
	vmovss	%xmm1, -48(%rbp)                ## 4-byte Spill
	movl	%ecx, %r12d
	movl	%edx, %r13d
	vmovss	%xmm0, -44(%rbp)                ## 4-byte Spill
	movq	%rdi, %rbx
	callq	_stbtt_FindGlyphIndex
	movq	%rbx, %rdi
	vmovss	-44(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	movl	%eax, %esi
	movl	%r13d, %edx
	movl	%r12d, %ecx
	vmovss	-48(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	movq	%r15, %r8
	movq	%r14, %r9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmp	_stbtt_GetGlyphSDF              ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_FreeSDF                  ## -- Begin function stbtt_FreeSDF
	.p2align	4, 0x90
_stbtt_FreeSDF:                         ## @stbtt_FreeSDF
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_free                           ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetFontNameString        ## -- Begin function stbtt_GetFontNameString
	.p2align	4, 0x90
_stbtt_GetFontNameString:               ## @stbtt_GetFontNameString
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	8(%rdi), %r10
	movl	16(%rdi), %edi
	movzwl	4(%r10,%rdi), %eax
	rolw	$8, %ax
	testw	%ax, %ax
	je	LBB92_16
## %bb.1:
	movzwl	%ax, %ebx
	addl	$12, %edi
	xorl	%eax, %eax
	jmp	LBB92_3
	.p2align	4, 0x90
LBB92_2:                                ##   in Loop: Header=BB92_3 Depth=1
	addl	$16, %edi
	decq	%rbx
	je	LBB92_17
LBB92_3:                                ## =>This Inner Loop Header: Depth=1
	movl	%edi, %edi
	cmpb	$110, (%r10,%rdi)
	jne	LBB92_2
## %bb.4:                               ##   in Loop: Header=BB92_3 Depth=1
	cmpb	$97, 1(%r10,%rdi)
	jne	LBB92_2
## %bb.5:                               ##   in Loop: Header=BB92_3 Depth=1
	cmpb	$109, 2(%r10,%rdi)
	jne	LBB92_2
## %bb.6:                               ##   in Loop: Header=BB92_3 Depth=1
	cmpb	$101, 3(%r10,%rdi)
	jne	LBB92_2
## %bb.7:
	movl	8(%r10,%rdi), %edi
	bswapl	%edi
	testl	%edi, %edi
	je	LBB92_19
## %bb.8:
	movzwl	2(%r10,%rdi), %eax
	rolw	$8, %ax
	testw	%ax, %ax
	je	LBB92_19
## %bb.9:
	movzwl	4(%r10,%rdi), %r11d
	movzwl	%ax, %r14d
	rolw	$8, %r11w
	movzwl	%r11w, %r11d
	addl	%edi, %r11d
	addl	$6, %edi
	xorl	%eax, %eax
	jmp	LBB92_11
	.p2align	4, 0x90
LBB92_10:                               ##   in Loop: Header=BB92_11 Depth=1
	addl	$12, %edi
	decq	%r14
	je	LBB92_17
LBB92_11:                               ## =>This Inner Loop Header: Depth=1
	movl	%edi, %edi
	movzwl	(%r10,%rdi), %ebx
	rolw	$8, %bx
	movzwl	%bx, %ebx
	cmpl	%edx, %ebx
	jne	LBB92_10
## %bb.12:                              ##   in Loop: Header=BB92_11 Depth=1
	movzwl	2(%r10,%rdi), %ebx
	rolw	$8, %bx
	movzwl	%bx, %ebx
	cmpl	%ecx, %ebx
	jne	LBB92_10
## %bb.13:                              ##   in Loop: Header=BB92_11 Depth=1
	movzwl	4(%r10,%rdi), %ebx
	rolw	$8, %bx
	movzwl	%bx, %ebx
	cmpl	%r8d, %ebx
	jne	LBB92_10
## %bb.14:                              ##   in Loop: Header=BB92_11 Depth=1
	movzwl	6(%r10,%rdi), %ebx
	rolw	$8, %bx
	movzwl	%bx, %ebx
	cmpl	%r9d, %ebx
	jne	LBB92_10
## %bb.15:
	movzwl	8(%r10,%rdi), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	movl	%eax, (%rsi)
	movslq	%r11d, %rcx
	addq	%r10, %rcx
	movzwl	10(%r10,%rdi), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	addq	%rcx, %rax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
LBB92_16:
	xorl	%eax, %eax
LBB92_17:
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
LBB92_19:
	xorl	%eax, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_BakeFontBitmap           ## -- Begin function stbtt_BakeFontBitmap
	.p2align	4, 0x90
_stbtt_BakeFontBitmap:                  ## @stbtt_BakeFontBitmap
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$264, %rsp                      ## imm = 0x108
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, %r12d
	movl	%r8d, %r14d
	movl	%ecx, %ebx
	movq	%rdx, %r13
	vmovss	%xmm0, -44(%rbp)                ## 4-byte Spill
	movl	%esi, %edx
	movq	%rdi, %rsi
	movq	$0, -296(%rbp)
	leaq	-296(%rbp), %rdi
	callq	_stbtt_InitFont
	testl	%eax, %eax
	je	LBB93_1
## %bb.2:
	movl	16(%rbp), %r15d
	movl	%r14d, %eax
	movl	%ebx, -68(%rbp)                 ## 4-byte Spill
	imull	%ebx, %eax
	movslq	%eax, %rsi
	movq	%r13, %rdi
	callq	___bzero
	testl	%r15d, %r15d
	jle	LBB93_3
## %bb.4:
	movq	%r13, -104(%rbp)                ## 8-byte Spill
	movl	%r14d, -64(%rbp)                ## 4-byte Spill
	movq	-288(%rbp), %rsi
	movslq	-260(%rbp), %rdx
	movzbl	5(%rsi,%rdx), %eax
	movzbl	4(%rsi,%rdx), %ecx
	shll	$8, %ecx
	movswl	%cx, %ecx
	orl	%eax, %ecx
	movzbl	7(%rsi,%rdx), %eax
	movq	%rdx, -128(%rbp)                ## 8-byte Spill
	movzbl	6(%rsi,%rdx), %edx
	shll	$8, %edx
	movswl	%dx, %edx
	orl	%eax, %edx
	subl	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm1, %xmm0
	movq	24(%rbp), %r14
	vmovss	-44(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vdivss	%xmm0, %xmm1, %xmm1
	movslq	-256(%rbp), %rax
	movq	%rsi, -136(%rbp)                ## 8-byte Spill
	addq	%rsi, %rax
	movq	%rax, -120(%rbp)                ## 8-byte Spill
	movl	%r15d, %eax
	movq	%rax, -96(%rbp)                 ## 8-byte Spill
	movl	%r12d, %eax
	movq	%rax, -112(%rbp)                ## 8-byte Spill
	xorl	%edx, %edx
	leaq	-296(%rbp), %rbx
	movl	$1, %r12d
	movl	$1, %r13d
	movl	$1, %eax
	vmovss	%xmm1, -44(%rbp)                ## 4-byte Spill
	.p2align	4, 0x90
LBB93_5:                                ## =>This Inner Loop Header: Depth=1
	movl	%eax, -52(%rbp)                 ## 4-byte Spill
	movq	%rdx, -88(%rbp)                 ## 8-byte Spill
	movq	-112(%rbp), %rcx                ## 8-byte Reload
	leal	(%rcx,%rdx), %esi
	movq	%rbx, %rdi
	callq	_stbtt_FindGlyphIndex
	movl	%eax, %r15d
	movq	-136(%rbp), %rax                ## 8-byte Reload
	movq	-128(%rbp), %rcx                ## 8-byte Reload
	movzwl	34(%rax,%rcx), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	leal	(,%r15,4), %ecx
	cmpl	%r15d, %eax
	leal	-4(,%rax,4), %eax
	cmovgl	%ecx, %eax
	cltq
	movq	-120(%rbp), %rcx                ## 8-byte Reload
	movzwl	(%rcx,%rax), %eax
	movw	%ax, -48(%rbp)                  ## 2-byte Spill
	vxorps	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	movq	%rbx, %rdi
	movl	%r15d, %esi
	vmovss	-44(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovaps	%xmm0, %xmm1
	leaq	-60(%rbp), %rdx
	leaq	-56(%rbp), %rcx
	leaq	-80(%rbp), %r8
	leaq	-76(%rbp), %r9
	callq	_stbtt_GetGlyphBitmapBoxSubpixel
	movl	-80(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	-76(%rbp), %ecx
	subl	-56(%rbp), %ecx
	leal	(%r12,%rdx), %eax
	incl	%eax
	movl	-68(%rbp), %esi                 ## 4-byte Reload
	cmpl	%esi, %eax
	cmovgel	-52(%rbp), %r13d                ## 4-byte Folded Reload
	movl	$1, %eax
	cmovgel	%eax, %r12d
	leal	(%rcx,%r13), %edi
	incl	%edi
	cmpl	-64(%rbp), %edi                 ## 4-byte Folded Reload
	jge	LBB93_8
## %bb.6:                               ##   in Loop: Header=BB93_5 Depth=1
	movl	%esi, %eax
	movq	%rbx, %r10
	leal	(%r12,%rdx), %ebx
	cmpl	%esi, %ebx
	jge	LBB93_7
## %bb.9:                               ##   in Loop: Header=BB93_5 Depth=1
	movq	%r15, %r9
	movzwl	-48(%rbp), %r15d                ## 2-byte Folded Reload
	rolw	$8, %r15w
	leal	(%rcx,%r13), %esi
	movl	%esi, -72(%rbp)                 ## 4-byte Spill
	movslq	%r12d, %r12
	movq	-104(%rbp), %rsi                ## 8-byte Reload
	movl	%edi, -48(%rbp)                 ## 4-byte Spill
	leaq	(%rsi,%r12), %r8
	movl	%r13d, %esi
	imull	%eax, %esi
	movslq	%esi, %rsi
	addq	%r8, %rsi
	vxorps	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	movq	%r10, %rdi
                                        ## kill: def $edx killed $edx killed $rdx
                                        ## kill: def $ecx killed $ecx killed $rcx
	movl	%eax, %r8d
	vmovss	-44(%rbp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovaps	%xmm0, %xmm1
                                        ## kill: def $r9d killed $r9d killed $r9
	callq	_stbtt_MakeGlyphBitmapSubpixel
	movl	-52(%rbp), %eax                 ## 4-byte Reload
	vmovss	-44(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	movw	%r12w, (%r14)
	movw	%r13w, 2(%r14)
	movw	%bx, 4(%r14)
	movl	-72(%rbp), %edx                 ## 4-byte Reload
	movw	%dx, 6(%r14)
	movswl	%r15w, %ecx
	vcvtsi2ss	%ecx, %xmm4, %xmm0
	vmulss	%xmm0, %xmm1, %xmm0
	vmovss	%xmm0, 16(%r14)
	vcvtsi2ssl	-60(%rbp), %xmm4, %xmm0
	vmovss	%xmm0, 8(%r14)
	vcvtsi2ssl	-56(%rbp), %xmm4, %xmm0
	incl	%ebx
	cmpl	%eax, %edx
	cmovgel	-48(%rbp), %eax                 ## 4-byte Folded Reload
	vmovss	%xmm0, 12(%r14)
	movq	-88(%rbp), %rdx                 ## 8-byte Reload
	incq	%rdx
	addq	$20, %r14
	movl	%ebx, %r12d
	leaq	-296(%rbp), %rbx
	cmpq	%rdx, -96(%rbp)                 ## 8-byte Folded Reload
	jne	LBB93_5
	jmp	LBB93_10
LBB93_1:
	movl	$-1, %eax
	jmp	LBB93_10
LBB93_3:
	movl	$1, %eax
	jmp	LBB93_10
LBB93_8:
	movq	-88(%rbp), %rax                 ## 8-byte Reload
	negl	%eax
                                        ## kill: def $eax killed $eax killed $rax
LBB93_10:
	addq	$264, %rsp                      ## imm = 0x108
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB93_7:
	callq	_stbtt_BakeFontBitmap.cold.1
	xorl	%eax, %eax
	jmp	LBB93_10
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_GetNumberOfFonts         ## -- Begin function stbtt_GetNumberOfFonts
	.p2align	4, 0x90
_stbtt_GetNumberOfFonts:                ## @stbtt_GetNumberOfFonts
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	__ZL13stbtt__isfontPh
	movl	%eax, %ecx
	movl	$1, %eax
	testl	%ecx, %ecx
	je	LBB94_1
LBB94_8:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
LBB94_1:
	xorl	%eax, %eax
	cmpb	$116, (%rbx)
	jne	LBB94_8
## %bb.2:
	cmpb	$116, 1(%rbx)
	jne	LBB94_8
## %bb.3:
	cmpb	$99, 2(%rbx)
	jne	LBB94_8
## %bb.4:
	cmpb	$102, 3(%rbx)
	jne	LBB94_8
## %bb.5:
	movl	4(%rbx), %ecx
	bswapl	%ecx
	cmpl	$131072, %ecx                   ## imm = 0x20000
	je	LBB94_7
## %bb.6:
	cmpl	$65536, %ecx                    ## imm = 0x10000
	jne	LBB94_8
LBB94_7:
	movl	8(%rbx), %eax
	bswapl	%eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_FindMatchingFont         ## -- Begin function stbtt_FindMatchingFont
	.p2align	4, 0x90
_stbtt_FindMatchingFont:                ## @stbtt_FindMatchingFont
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movq	%rsi, %rbx
	movq	%rdi, %r15
	xorl	%r13d, %r13d
	xorl	%esi, %esi
	callq	_stbtt_GetFontOffsetForIndex
	movl	%eax, %r12d
	testl	%eax, %eax
	js	LBB95_30
## %bb.1:
	movq	%rbx, -48(%rbp)                 ## 8-byte Spill
	movq	%rbx, %rdi
	callq	_strlen
	movq	%rax, %rcx
	movl	%r14d, -52(%rbp)                ## 4-byte Spill
	andl	$7, %r14d
	movl	%r14d, -68(%rbp)                ## 4-byte Spill
	jmp	LBB95_2
	.p2align	4, 0x90
LBB95_29:                               ##   in Loop: Header=BB95_2 Depth=1
	incl	%r13d
	movq	%r15, %rdi
	movl	%r13d, %esi
	callq	_stbtt_GetFontOffsetForIndex
	movq	%r14, %rcx
	movl	%eax, %r12d
	testl	%eax, %eax
	js	LBB95_30
LBB95_2:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB95_6 Depth 2
                                        ##     Child Loop BB95_16 Depth 2
	movl	%r12d, %ebx
	addq	%r15, %rbx
	movq	%rbx, %rdi
	movq	%rcx, %r14
	callq	__ZL13stbtt__isfontPh
	testl	%eax, %eax
	je	LBB95_29
## %bb.3:                               ##   in Loop: Header=BB95_2 Depth=1
	movq	%r14, %rcx
	movzwl	4(%rbx), %edx
	rolw	$8, %dx
	leal	12(%r12), %eax
	movzwl	%dx, %edi
	cmpl	$0, -52(%rbp)                   ## 4-byte Folded Reload
	je	LBB95_14
## %bb.4:                               ##   in Loop: Header=BB95_2 Depth=1
	testl	%edi, %edi
	je	LBB95_29
## %bb.5:                               ##   in Loop: Header=BB95_2 Depth=1
	movl	%eax, %edx
	movq	%rdi, %rsi
	jmp	LBB95_6
	.p2align	4, 0x90
LBB95_11:                               ##   in Loop: Header=BB95_6 Depth=2
	addl	$16, %edx
	decq	%rsi
	je	LBB95_12
LBB95_6:                                ##   Parent Loop BB95_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%edx, %edx
	cmpb	$104, (%r15,%rdx)
	jne	LBB95_11
## %bb.7:                               ##   in Loop: Header=BB95_6 Depth=2
	cmpb	$101, 1(%r15,%rdx)
	jne	LBB95_11
## %bb.8:                               ##   in Loop: Header=BB95_6 Depth=2
	cmpb	$97, 2(%r15,%rdx)
	jne	LBB95_11
## %bb.9:                               ##   in Loop: Header=BB95_6 Depth=2
	cmpb	$100, 3(%r15,%rdx)
	jne	LBB95_11
## %bb.10:                              ##   in Loop: Header=BB95_2 Depth=1
	movl	8(%r15,%rdx), %edx
	bswapl	%edx
	jmp	LBB95_13
	.p2align	4, 0x90
LBB95_14:                               ##   in Loop: Header=BB95_2 Depth=1
	testl	%edi, %edi
	je	LBB95_29
## %bb.15:                              ##   in Loop: Header=BB95_2 Depth=1
	movl	%edi, %edi
	jmp	LBB95_16
	.p2align	4, 0x90
LBB95_12:                               ##   in Loop: Header=BB95_2 Depth=1
	xorl	%edx, %edx
LBB95_13:                               ##   in Loop: Header=BB95_2 Depth=1
	movzbl	45(%r15,%rdx), %edx
	andl	$7, %edx
	cmpl	%edx, -68(%rbp)                 ## 4-byte Folded Reload
	je	LBB95_16
	jmp	LBB95_29
	.p2align	4, 0x90
LBB95_20:                               ##   in Loop: Header=BB95_16 Depth=2
	addl	$16, %eax
	decq	%rdi
	je	LBB95_29
LBB95_16:                               ##   Parent Loop BB95_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%eax, %eax
	cmpb	$110, (%r15,%rax)
	jne	LBB95_20
## %bb.17:                              ##   in Loop: Header=BB95_16 Depth=2
	cmpb	$97, 1(%r15,%rax)
	jne	LBB95_20
## %bb.18:                              ##   in Loop: Header=BB95_16 Depth=2
	cmpb	$109, 2(%r15,%rax)
	jne	LBB95_20
## %bb.19:                              ##   in Loop: Header=BB95_16 Depth=2
	cmpb	$101, 3(%r15,%rax)
	jne	LBB95_20
## %bb.21:                              ##   in Loop: Header=BB95_2 Depth=1
	movl	8(%r15,%rax), %ebx
	bswapl	%ebx
	testl	%ebx, %ebx
	je	LBB95_29
## %bb.22:                              ##   in Loop: Header=BB95_2 Depth=1
	cmpl	$0, -52(%rbp)                   ## 4-byte Folded Reload
	movq	%r14, -64(%rbp)                 ## 8-byte Spill
	movq	%r15, %rdi
	movl	%ebx, %esi
	je	LBB95_25
## %bb.23:                              ##   in Loop: Header=BB95_2 Depth=1
	movq	-48(%rbp), %rdx                 ## 8-byte Reload
                                        ## kill: def $ecx killed $ecx killed $rcx
	movl	$16, %r8d
	movl	$-1, %r9d
	callq	__ZL16stbtt__matchpairPhjS_iii
	testl	%eax, %eax
	jne	LBB95_30
## %bb.24:                              ##   in Loop: Header=BB95_2 Depth=1
	movq	%r15, %rdi
	movl	%ebx, %esi
	movq	-48(%rbp), %rdx                 ## 8-byte Reload
	movq	-64(%rbp), %rcx                 ## 8-byte Reload
                                        ## kill: def $ecx killed $ecx killed $rcx
	movl	$1, %r8d
	movl	$-1, %r9d
	callq	__ZL16stbtt__matchpairPhjS_iii
	testl	%eax, %eax
	je	LBB95_28
	jmp	LBB95_30
LBB95_25:                               ##   in Loop: Header=BB95_2 Depth=1
	movq	-48(%rbp), %rdx                 ## 8-byte Reload
                                        ## kill: def $ecx killed $ecx killed $rcx
	movl	$16, %r8d
	movl	$17, %r9d
	callq	__ZL16stbtt__matchpairPhjS_iii
	testl	%eax, %eax
	jne	LBB95_30
## %bb.26:                              ##   in Loop: Header=BB95_2 Depth=1
	movq	%r15, %rdi
	movl	%ebx, %esi
	movq	-48(%rbp), %rdx                 ## 8-byte Reload
	movq	-64(%rbp), %rcx                 ## 8-byte Reload
                                        ## kill: def $ecx killed $ecx killed $rcx
	movl	$1, %r8d
	movl	$2, %r9d
	callq	__ZL16stbtt__matchpairPhjS_iii
	testl	%eax, %eax
	jne	LBB95_30
LBB95_28:                               ##   in Loop: Header=BB95_2 Depth=1
	movq	%r15, %rdi
	movl	%ebx, %esi
	movq	-48(%rbp), %rdx                 ## 8-byte Reload
	movq	-64(%rbp), %rcx                 ## 8-byte Reload
                                        ## kill: def $ecx killed $ecx killed $rcx
	movl	$3, %r8d
	movl	$-1, %r9d
	callq	__ZL16stbtt__matchpairPhjS_iii
	testl	%eax, %eax
	je	LBB95_29
LBB95_30:
	movl	%r12d, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbtt_CompareUTF8toUTF16_bigendian ## -- Begin function stbtt_CompareUTF8toUTF16_bigendian
	.p2align	4, 0x90
_stbtt_CompareUTF8toUTF16_bigendian:    ## @stbtt_CompareUTF8toUTF16_bigendian
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%esi, %ebx
	callq	__ZL42stbtt__CompareUTF8toUTF16_bigendian_prefixPhiS_i
	xorl	%ecx, %ecx
	cmpl	%ebx, %eax
	sete	%cl
	movl	%ecx, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_failure_reason            ## -- Begin function stbi_failure_reason
	.p2align	4, 0x90
_stbi_failure_reason:                   ## @stbi_failure_reason
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	(%rax), %rax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_image_free                ## -- Begin function stbi_image_free
	.p2align	4, 0x90
_stbi_image_free:                       ## @stbi_image_free
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	jmp	_free                           ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_set_flip_vertically_on_load ## -- Begin function stbi_set_flip_vertically_on_load
	.p2align	4, 0x90
_stbi_set_flip_vertically_on_load:      ## @stbi_set_flip_vertically_on_load
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, __ZL36stbi__vertically_flip_on_load_global(%rip)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_set_flip_vertically_on_load_thread ## -- Begin function stbi_set_flip_vertically_on_load_thread
	.p2align	4, 0x90
_stbi_set_flip_vertically_on_load_thread: ## @stbi_set_flip_vertically_on_load_thread
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, %ecx
	movq	__ZL35stbi__vertically_flip_on_load_local@TLVP(%rip), %rdi
	callq	*(%rdi)
	movl	%ecx, (%rax)
	movq	__ZL33stbi__vertically_flip_on_load_set@TLVP(%rip), %rdi
	callq	*(%rdi)
	movb	$1, (%rax)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_load                      ## -- Begin function stbi_load
	.p2align	4, 0x90
_stbi_load:                             ## @stbi_load
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$248, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %ebx
	movq	%rcx, %r15
	movq	%rdx, %r12
	movq	%rsi, %r13
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	leaq	L_.str.5(%rip), %rsi
	callq	_fopen
	testq	%rax, %rax
	je	LBB101_1
## %bb.2:
	movq	%rax, %r14
	movl	%ebx, -276(%rbp)                ## 4-byte Spill
	movq	__ZL21stbi__stdio_callbacks+16(%rip), %rax
	movq	%rax, -240(%rbp)
	vmovups	__ZL21stbi__stdio_callbacks(%rip), %xmm0
	vmovups	%xmm0, -256(%rbp)
	movq	%r14, -232(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -224(%rbp)
	movl	$0, -88(%rbp)
	leaq	-216(%rbp), %rbx
	movq	%rbx, -64(%rbp)
	movq	%rbx, -80(%rbp)
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movl	$128, %edx
	callq	*-256(%rbp)
	movl	-80(%rbp), %ecx
	subl	-64(%rbp), %ecx
	addl	%ecx, -88(%rbp)
	testl	%eax, %eax
	je	LBB101_3
## %bb.4:
	movq	%rbx, -80(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-216, %rax
	jmp	LBB101_5
LBB101_1:
	leaq	L_.str.22(%rip), %rcx
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
	xorl	%ebx, %ebx
	jmp	LBB101_8
LBB101_3:
	movl	$0, -224(%rbp)
	movq	%rbx, -80(%rbp)
	leaq	-215(%rbp), %rax
	movb	$0, -216(%rbp)
LBB101_5:
	movq	%rax, -72(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-272(%rbp), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movl	-276(%rbp), %r8d                ## 4-byte Reload
	callq	__ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i
	movq	%rax, %rbx
	testq	%rax, %rax
	je	LBB101_7
## %bb.6:
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movslq	%eax, %rsi
	movq	%r14, %rdi
	movl	$1, %edx
	callq	_fseek
LBB101_7:
	movq	%r14, %rdi
	callq	_fclose
LBB101_8:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB101_10
## %bb.9:
	movq	%rbx, %rax
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB101_10:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_load_from_file            ## -- Begin function stbi_load_from_file
	.p2align	4, 0x90
_stbi_load_from_file:                   ## @stbi_load_from_file
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$248, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, -276(%rbp)                ## 4-byte Spill
	movq	%rcx, %r15
	movq	%rdx, %r12
	movq	%rsi, %r13
	movq	%rdi, %r14
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	__ZL21stbi__stdio_callbacks+16(%rip), %rax
	movq	%rax, -240(%rbp)
	vmovups	__ZL21stbi__stdio_callbacks(%rip), %xmm0
	vmovups	%xmm0, -256(%rbp)
	movq	%rdi, -232(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -224(%rbp)
	movl	$0, -88(%rbp)
	leaq	-216(%rbp), %rbx
	movq	%rbx, -64(%rbp)
	movq	%rbx, -80(%rbp)
	movq	%rbx, %rsi
	movl	$128, %edx
	callq	*-256(%rbp)
	movl	-80(%rbp), %ecx
	subl	-64(%rbp), %ecx
	addl	%ecx, -88(%rbp)
	testl	%eax, %eax
	je	LBB102_1
## %bb.2:
	movq	%rbx, -80(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-216, %rax
	jmp	LBB102_3
LBB102_1:
	movl	$0, -224(%rbp)
	movq	%rbx, -80(%rbp)
	leaq	-215(%rbp), %rax
	movb	$0, -216(%rbp)
LBB102_3:
	movq	%rax, -72(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-272(%rbp), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movl	-276(%rbp), %r8d                ## 4-byte Reload
	callq	__ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i
	movq	%rax, %rbx
	testq	%rax, %rax
	je	LBB102_5
## %bb.4:
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movslq	%eax, %rsi
	movq	%r14, %rdi
	movl	$1, %edx
	callq	_fseek
LBB102_5:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB102_7
## %bb.6:
	movq	%rbx, %rax
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB102_7:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i
__ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i: ## @_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$2120, %rsp                     ## imm = 0x848
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movq	%rcx, %rbx
	movq	%rdx, %r12
	movq	%rsi, %r13
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	leaq	-2152(%rbp), %r9
	callq	__ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi
	testq	%rax, %rax
	je	LBB103_1
## %bb.2:
	movq	%rax, %r15
	movl	-2152(%rbp), %eax
	cmpl	$8, %eax
	movq	%rbx, -2112(%rbp)               ## 8-byte Spill
	je	LBB103_3
## %bb.4:
	cmpl	$16, %eax
	jne	LBB103_5
## %bb.8:
	movq	%r13, -2104(%rbp)               ## 8-byte Spill
	movl	(%r13), %eax
	movl	(%r12), %r13d
	movl	%r14d, %ecx
	testl	%r14d, %r14d
	jne	LBB103_10
## %bb.9:
	movl	(%rbx), %ecx
LBB103_10:
	imull	%eax, %r13d
	imull	%ecx, %r13d
	movslq	%r13d, %rdi
	callq	_malloc
	movq	%rax, %rbx
	testq	%rax, %rax
	je	LBB103_42
## %bb.11:
	testl	%r13d, %r13d
	jle	LBB103_28
## %bb.12:
	movl	%r13d, %eax
	cmpl	$8, %r13d
	jae	LBB103_14
## %bb.13:
	xorl	%ecx, %ecx
	jmp	LBB103_27
LBB103_1:
	xorl	%ebx, %ebx
	jmp	LBB103_39
LBB103_3:
	movq	%r15, %rbx
	jmp	LBB103_30
LBB103_42:
	leaq	L_.str.131(%rip), %rcx
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
	jmp	LBB103_29
LBB103_14:
	cmpl	$32, %r13d
	jae	LBB103_16
## %bb.15:
	xorl	%ecx, %ecx
	jmp	LBB103_24
LBB103_16:
	movl	%eax, %ecx
	andl	$-32, %ecx
	leaq	-32(%rcx), %rdx
	movq	%rdx, %rsi
	shrq	$5, %rsi
	incq	%rsi
	testq	%rdx, %rdx
	je	LBB103_17
## %bb.18:
	movq	%rsi, %rdi
	andq	$-2, %rdi
	xorl	%edx, %edx
	.p2align	4, 0x90
LBB103_19:                              ## =>This Inner Loop Header: Depth=1
	vmovdqu	(%r15,%rdx,2), %ymm0
	vmovdqu	32(%r15,%rdx,2), %ymm1
	vpsrlw	$8, %ymm0, %ymm0
	vpsrlw	$8, %ymm1, %ymm1
	vextracti128	$1, %ymm0, %xmm2
	vpackuswb	%xmm2, %xmm0, %xmm0
	vextracti128	$1, %ymm1, %xmm2
	vpackuswb	%xmm2, %xmm1, %xmm1
	vmovdqu	%xmm0, (%rbx,%rdx)
	vmovdqu	%xmm1, 16(%rbx,%rdx)
	vmovdqu	64(%r15,%rdx,2), %ymm0
	vmovdqu	96(%r15,%rdx,2), %ymm1
	vpsrlw	$8, %ymm0, %ymm0
	vpsrlw	$8, %ymm1, %ymm1
	vextracti128	$1, %ymm0, %xmm2
	vpackuswb	%xmm2, %xmm0, %xmm0
	vextracti128	$1, %ymm1, %xmm2
	vpackuswb	%xmm2, %xmm1, %xmm1
	vmovdqu	%xmm0, 32(%rbx,%rdx)
	vmovdqu	%xmm1, 48(%rbx,%rdx)
	addq	$64, %rdx
	addq	$-2, %rdi
	jne	LBB103_19
	jmp	LBB103_20
LBB103_5:
	callq	__ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i.cold.1
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB103_41
## %bb.6:
	xorl	%eax, %eax
	jmp	LBB103_7
LBB103_17:
	xorl	%edx, %edx
LBB103_20:
	testb	$1, %sil
	je	LBB103_22
## %bb.21:
	vmovdqu	(%r15,%rdx,2), %ymm0
	vmovdqu	32(%r15,%rdx,2), %ymm1
	vpsrlw	$8, %ymm0, %ymm0
	vpsrlw	$8, %ymm1, %ymm1
	vextracti128	$1, %ymm0, %xmm2
	vpackuswb	%xmm2, %xmm0, %xmm0
	vextracti128	$1, %ymm1, %xmm2
	vpackuswb	%xmm2, %xmm1, %xmm1
	vmovdqu	%xmm0, (%rbx,%rdx)
	vmovdqu	%xmm1, 16(%rbx,%rdx)
LBB103_22:
	cmpq	%rax, %rcx
	je	LBB103_28
## %bb.23:
	testb	$24, %al
	je	LBB103_27
LBB103_24:
	movq	%rcx, %rdx
	movl	%eax, %ecx
	andl	$-8, %ecx
	.p2align	4, 0x90
LBB103_25:                              ## =>This Inner Loop Header: Depth=1
	vmovdqu	(%r15,%rdx,2), %xmm0
	vpsrlw	$8, %xmm0, %xmm0
	vpackuswb	%xmm0, %xmm0, %xmm0
	vmovq	%xmm0, (%rbx,%rdx)
	addq	$8, %rdx
	cmpq	%rdx, %rcx
	jne	LBB103_25
## %bb.26:
	cmpq	%rax, %rcx
	je	LBB103_28
	.p2align	4, 0x90
LBB103_27:                              ## =>This Inner Loop Header: Depth=1
	movzbl	1(%r15,%rcx,2), %edx
	movb	%dl, (%rbx,%rcx)
	incq	%rcx
	cmpq	%rcx, %rax
	jne	LBB103_27
LBB103_28:
	movq	%r15, %rdi
	vzeroupper
	callq	_free
LBB103_29:
	movl	$8, -2152(%rbp)
	movq	-2104(%rbp), %r13               ## 8-byte Reload
LBB103_30:
	movq	__ZL33stbi__vertically_flip_on_load_set@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rax, %rcx
	movq	__ZL35stbi__vertically_flip_on_load_local@TLVP(%rip), %rdi
	callq	*(%rdi)
	leaq	__ZL36stbi__vertically_flip_on_load_global(%rip), %rdx
	cmpb	$0, (%rcx)
	cmovneq	%rax, %rdx
	cmpl	$0, (%rdx)
	je	LBB103_39
## %bb.31:
	testl	%r14d, %r14d
	jne	LBB103_33
## %bb.32:
	movq	-2112(%rbp), %rax               ## 8-byte Reload
	movl	(%rax), %r14d
LBB103_33:
	movl	(%r12), %eax
	movq	%rax, -2104(%rbp)               ## 8-byte Spill
	cmpl	$2, %eax
	jl	LBB103_39
## %bb.34:
	movslq	(%r13), %rax
	movslq	%r14d, %rcx
	imulq	%rax, %rcx
	movq	%rcx, -2136(%rbp)               ## 8-byte Spill
	testq	%rcx, %rcx
	je	LBB103_39
## %bb.35:
	movq	-2104(%rbp), %rax               ## 8-byte Reload
	shrq	%rax
	movq	%rax, -2120(%rbp)               ## 8-byte Spill
	xorl	%eax, %eax
	leaq	-2096(%rbp), %r14
	movq	%rbx, -2128(%rbp)               ## 8-byte Spill
	.p2align	4, 0x90
LBB103_36:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB103_37 Depth 2
	movq	%rax, %r15
	movq	-2136(%rbp), %r13               ## 8-byte Reload
	imulq	%r13, %r15
	addq	%rbx, %r15
	movq	%rax, -2112(%rbp)               ## 8-byte Spill
                                        ## kill: def $eax killed $eax killed $rax
	notl	%eax
	addl	-2104(%rbp), %eax               ## 4-byte Folded Reload
	movslq	%eax, %r12
	imulq	%r13, %r12
	addq	%rbx, %r12
	.p2align	4, 0x90
LBB103_37:                              ##   Parent Loop BB103_36 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpq	$2048, %r13                     ## imm = 0x800
	movl	$2048, %ebx                     ## imm = 0x800
	cmovbq	%r13, %rbx
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%rbx, %rdx
	callq	_memcpy
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	callq	_memcpy
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	callq	_memcpy
	addq	%rbx, %r15
	addq	%rbx, %r12
	subq	%rbx, %r13
	jne	LBB103_37
## %bb.38:                              ##   in Loop: Header=BB103_36 Depth=1
	movq	-2112(%rbp), %rax               ## 8-byte Reload
	incq	%rax
	cmpq	-2120(%rbp), %rax               ## 8-byte Folded Reload
	movq	-2128(%rbp), %rbx               ## 8-byte Reload
	jne	LBB103_36
LBB103_39:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB103_41
## %bb.40:
	movq	%rbx, %rax
LBB103_7:
	addq	$2120, %rsp                     ## imm = 0x848
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB103_41:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_load_from_file_16         ## -- Begin function stbi_load_from_file_16
	.p2align	4, 0x90
_stbi_load_from_file_16:                ## @stbi_load_from_file_16
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$248, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, -276(%rbp)                ## 4-byte Spill
	movq	%rcx, %r15
	movq	%rdx, %r12
	movq	%rsi, %r13
	movq	%rdi, %r14
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	__ZL21stbi__stdio_callbacks+16(%rip), %rax
	movq	%rax, -240(%rbp)
	vmovups	__ZL21stbi__stdio_callbacks(%rip), %xmm0
	vmovups	%xmm0, -256(%rbp)
	movq	%rdi, -232(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -224(%rbp)
	movl	$0, -88(%rbp)
	leaq	-216(%rbp), %rbx
	movq	%rbx, -64(%rbp)
	movq	%rbx, -80(%rbp)
	movq	%rbx, %rsi
	movl	$128, %edx
	callq	*-256(%rbp)
	movl	-80(%rbp), %ecx
	subl	-64(%rbp), %ecx
	addl	%ecx, -88(%rbp)
	testl	%eax, %eax
	je	LBB104_1
## %bb.2:
	movq	%rbx, -80(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-216, %rax
	jmp	LBB104_3
LBB104_1:
	movl	$0, -224(%rbp)
	movq	%rbx, -80(%rbp)
	leaq	-215(%rbp), %rax
	movb	$0, -216(%rbp)
LBB104_3:
	movq	%rax, -72(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-272(%rbp), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movl	-276(%rbp), %r8d                ## 4-byte Reload
	callq	__ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i
	movq	%rax, %rbx
	testq	%rax, %rax
	je	LBB104_5
## %bb.4:
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movslq	%eax, %rsi
	movq	%r14, %rdi
	movl	$1, %edx
	callq	_fseek
LBB104_5:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB104_7
## %bb.6:
	movq	%rbx, %rax
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB104_7:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__const
	.p2align	5                               ## -- Begin function _ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i
LCPI105_0:
	.space	32,1
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4
LCPI105_1:
	.space	16,1
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
__ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i: ## @_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$2120, %rsp                     ## imm = 0x848
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movq	%rcx, %r13
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	leaq	-2152(%rbp), %r9
	callq	__ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi
	testq	%rax, %rax
	je	LBB105_1
## %bb.2:
	movq	%rax, %rbx
	movl	-2152(%rbp), %eax
	cmpl	$8, %eax
	je	LBB105_7
## %bb.3:
	cmpl	$16, %eax
	je	LBB105_29
## %bb.4:
	callq	__ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i.cold.1
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB105_40
## %bb.5:
	xorl	%eax, %eax
	jmp	LBB105_6
LBB105_1:
	xorl	%ebx, %ebx
	jmp	LBB105_38
LBB105_7:
	movq	%r13, -2104(%rbp)               ## 8-byte Spill
	movq	%rbx, -2112(%rbp)               ## 8-byte Spill
	movl	(%r15), %eax
	movl	(%r12), %r13d
	movl	%r14d, %ecx
	testl	%r14d, %r14d
	jne	LBB105_9
## %bb.8:
	movq	-2104(%rbp), %rcx               ## 8-byte Reload
	movl	(%rcx), %ecx
LBB105_9:
	imull	%eax, %r13d
	imull	%ecx, %r13d
	leal	(%r13,%r13), %eax
	movslq	%eax, %rdi
	callq	_malloc
	movq	%rax, %rbx
	testq	%rax, %rax
	je	LBB105_41
## %bb.10:
	testl	%r13d, %r13d
	movq	-2112(%rbp), %rdi               ## 8-byte Reload
	jle	LBB105_27
## %bb.11:
	movl	%r13d, %eax
	cmpl	$8, %r13d
	jae	LBB105_13
## %bb.12:
	xorl	%ecx, %ecx
	jmp	LBB105_26
LBB105_41:
	leaq	L_.str.131(%rip), %rcx
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
	jmp	LBB105_28
LBB105_13:
	cmpl	$32, %r13d
	jae	LBB105_15
## %bb.14:
	xorl	%ecx, %ecx
	jmp	LBB105_23
LBB105_15:
	movl	%eax, %ecx
	andl	$-32, %ecx
	leaq	-32(%rcx), %rsi
	movq	%rsi, %r8
	shrq	$5, %r8
	incq	%r8
	testq	%rsi, %rsi
	je	LBB105_16
## %bb.17:
	movq	%r8, %rdx
	andq	$-2, %rdx
	xorl	%esi, %esi
	vmovdqa	LCPI105_0(%rip), %ymm0          ## ymm0 = [257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257]
	.p2align	4, 0x90
LBB105_18:                              ## =>This Inner Loop Header: Depth=1
	vpmovzxbw	(%rdi,%rsi), %ymm1      ## ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	16(%rdi,%rsi), %ymm2    ## ymm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmullw	%ymm0, %ymm1, %ymm1
	vpmullw	%ymm0, %ymm2, %ymm2
	vmovdqu	%ymm1, (%rbx,%rsi,2)
	vmovdqu	%ymm2, 32(%rbx,%rsi,2)
	vpmovzxbw	32(%rdi,%rsi), %ymm1    ## ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	48(%rdi,%rsi), %ymm2    ## ymm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmullw	%ymm0, %ymm1, %ymm1
	vpmullw	%ymm0, %ymm2, %ymm2
	vmovdqu	%ymm1, 64(%rbx,%rsi,2)
	vmovdqu	%ymm2, 96(%rbx,%rsi,2)
	addq	$64, %rsi
	addq	$-2, %rdx
	jne	LBB105_18
	jmp	LBB105_19
LBB105_16:
	xorl	%esi, %esi
LBB105_19:
	testb	$1, %r8b
	je	LBB105_21
## %bb.20:
	vpmovzxbw	(%rdi,%rsi), %ymm0      ## ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	16(%rdi,%rsi), %ymm1    ## ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vmovdqa	LCPI105_0(%rip), %ymm2          ## ymm2 = [257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257]
	vpmullw	%ymm2, %ymm0, %ymm0
	vpmullw	%ymm2, %ymm1, %ymm1
	vmovdqu	%ymm0, (%rbx,%rsi,2)
	vmovdqu	%ymm1, 32(%rbx,%rsi,2)
LBB105_21:
	cmpq	%rax, %rcx
	je	LBB105_27
## %bb.22:
	testb	$24, %al
	je	LBB105_26
LBB105_23:
	movq	%rcx, %rdx
	movl	%eax, %ecx
	andl	$-8, %ecx
	vmovdqa	LCPI105_1(%rip), %xmm0          ## xmm0 = [257,257,257,257,257,257,257,257]
	.p2align	4, 0x90
LBB105_24:                              ## =>This Inner Loop Header: Depth=1
	vpmovzxbw	(%rdi,%rdx), %xmm1      ## xmm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero
	vpmullw	%xmm0, %xmm1, %xmm1
	vmovdqu	%xmm1, (%rbx,%rdx,2)
	addq	$8, %rdx
	cmpq	%rdx, %rcx
	jne	LBB105_24
## %bb.25:
	cmpq	%rax, %rcx
	je	LBB105_27
	.p2align	4, 0x90
LBB105_26:                              ## =>This Inner Loop Header: Depth=1
	movzbl	(%rdi,%rcx), %edx
	movl	%edx, %esi
	shll	$8, %esi
	orl	%edx, %esi
	movw	%si, (%rbx,%rcx,2)
	incq	%rcx
	cmpq	%rcx, %rax
	jne	LBB105_26
LBB105_27:
	vzeroupper
	callq	_free
LBB105_28:
	movl	$16, -2152(%rbp)
	movq	-2104(%rbp), %r13               ## 8-byte Reload
LBB105_29:
	movq	__ZL33stbi__vertically_flip_on_load_set@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rax, %rcx
	movq	__ZL35stbi__vertically_flip_on_load_local@TLVP(%rip), %rdi
	callq	*(%rdi)
	leaq	__ZL36stbi__vertically_flip_on_load_global(%rip), %rdx
	cmpb	$0, (%rcx)
	cmovneq	%rax, %rdx
	cmpl	$0, (%rdx)
	je	LBB105_38
## %bb.30:
	testl	%r14d, %r14d
	jne	LBB105_32
## %bb.31:
	movl	(%r13), %r14d
LBB105_32:
	movl	(%r12), %eax
	movq	%rax, -2120(%rbp)               ## 8-byte Spill
	cmpl	$2, %eax
	jl	LBB105_38
## %bb.33:
	movslq	(%r15), %rax
	addl	%r14d, %r14d
	movslq	%r14d, %rcx
	imulq	%rax, %rcx
	movq	%rcx, -2136(%rbp)               ## 8-byte Spill
	testq	%rcx, %rcx
	je	LBB105_38
## %bb.34:
	movq	-2120(%rbp), %rax               ## 8-byte Reload
	shrq	%rax
	movq	%rax, -2128(%rbp)               ## 8-byte Spill
	xorl	%eax, %eax
	leaq	-2096(%rbp), %r14
	movq	%rbx, -2112(%rbp)               ## 8-byte Spill
	.p2align	4, 0x90
LBB105_35:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB105_36 Depth 2
	movq	%rax, %r15
	movq	-2136(%rbp), %r13               ## 8-byte Reload
	imulq	%r13, %r15
	addq	%rbx, %r15
	movq	%rax, -2104(%rbp)               ## 8-byte Spill
                                        ## kill: def $eax killed $eax killed $rax
	notl	%eax
	addl	-2120(%rbp), %eax               ## 4-byte Folded Reload
	movslq	%eax, %r12
	imulq	%r13, %r12
	addq	%rbx, %r12
	.p2align	4, 0x90
LBB105_36:                              ##   Parent Loop BB105_35 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpq	$2048, %r13                     ## imm = 0x800
	movl	$2048, %ebx                     ## imm = 0x800
	cmovbq	%r13, %rbx
	movq	%r14, %rdi
	movq	%r15, %rsi
	movq	%rbx, %rdx
	callq	_memcpy
	movq	%r15, %rdi
	movq	%r12, %rsi
	movq	%rbx, %rdx
	callq	_memcpy
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	callq	_memcpy
	addq	%rbx, %r15
	addq	%rbx, %r12
	subq	%rbx, %r13
	jne	LBB105_36
## %bb.37:                              ##   in Loop: Header=BB105_35 Depth=1
	movq	-2104(%rbp), %rax               ## 8-byte Reload
	incq	%rax
	cmpq	-2128(%rbp), %rax               ## 8-byte Folded Reload
	movq	-2112(%rbp), %rbx               ## 8-byte Reload
	jne	LBB105_35
LBB105_38:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB105_40
## %bb.39:
	movq	%rbx, %rax
LBB105_6:
	addq	$2120, %rsp                     ## imm = 0x848
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB105_40:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_load_16                   ## -- Begin function stbi_load_16
	.p2align	4, 0x90
_stbi_load_16:                          ## @stbi_load_16
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$248, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %ebx
	movq	%rcx, %r15
	movq	%rdx, %r12
	movq	%rsi, %r13
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	leaq	L_.str.5(%rip), %rsi
	callq	_fopen
	testq	%rax, %rax
	je	LBB106_1
## %bb.2:
	movq	%rax, %r14
	movl	%ebx, -276(%rbp)                ## 4-byte Spill
	movq	__ZL21stbi__stdio_callbacks+16(%rip), %rax
	movq	%rax, -240(%rbp)
	vmovups	__ZL21stbi__stdio_callbacks(%rip), %xmm0
	vmovups	%xmm0, -256(%rbp)
	movq	%r14, -232(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -224(%rbp)
	movl	$0, -88(%rbp)
	leaq	-216(%rbp), %rbx
	movq	%rbx, -64(%rbp)
	movq	%rbx, -80(%rbp)
	movq	%r14, %rdi
	movq	%rbx, %rsi
	movl	$128, %edx
	callq	*-256(%rbp)
	movl	-80(%rbp), %ecx
	subl	-64(%rbp), %ecx
	addl	%ecx, -88(%rbp)
	testl	%eax, %eax
	je	LBB106_3
## %bb.4:
	movq	%rbx, -80(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-216, %rax
	jmp	LBB106_5
LBB106_1:
	leaq	L_.str.22(%rip), %rcx
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
	xorl	%ebx, %ebx
	jmp	LBB106_8
LBB106_3:
	movl	$0, -224(%rbp)
	movq	%rbx, -80(%rbp)
	leaq	-215(%rbp), %rax
	movb	$0, -216(%rbp)
LBB106_5:
	movq	%rax, -72(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-272(%rbp), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movl	-276(%rbp), %r8d                ## 4-byte Reload
	callq	__ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i
	movq	%rax, %rbx
	testq	%rax, %rax
	je	LBB106_7
## %bb.6:
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movslq	%eax, %rsi
	movq	%r14, %rdi
	movl	$1, %edx
	callq	_fseek
LBB106_7:
	movq	%r14, %rdi
	callq	_fclose
LBB106_8:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB106_10
## %bb.9:
	movq	%rbx, %rax
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB106_10:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_load_16_from_memory       ## -- Begin function stbi_load_16_from_memory
	.p2align	4, 0x90
_stbi_load_16_from_memory:              ## @stbi_load_16_from_memory
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$240, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	$0, -216(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -48(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rdi, -40(%rbp)
	movslq	%esi, %rax
	addq	%rdi, %rax
	movq	%rax, -16(%rbp)
	movq	%rax, -32(%rbp)
	leaq	-232(%rbp), %rdi
	movq	%rdx, %rsi
	movq	%rcx, %rdx
	movq	%r8, %rcx
	movl	%r9d, %r8d
	callq	__ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-8(%rbp), %rcx
	jne	LBB107_2
## %bb.1:
	addq	$240, %rsp
	popq	%rbp
	retq
LBB107_2:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_load_16_from_callbacks    ## -- Begin function stbi_load_16_from_callbacks
	.p2align	4, 0x90
_stbi_load_16_from_callbacks:           ## @stbi_load_16_from_callbacks
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, %r14d
	movq	%r8, %r15
	movq	%rcx, %r12
	movq	%rdx, %r13
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	16(%rdi), %rax
	movq	%rax, -240(%rbp)
	vmovups	(%rdi), %xmm0
	vmovups	%xmm0, -256(%rbp)
	movq	%rsi, -232(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -224(%rbp)
	movl	$0, -88(%rbp)
	leaq	-216(%rbp), %rbx
	movq	%rbx, -64(%rbp)
	movq	%rbx, -80(%rbp)
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movl	$128, %edx
	callq	*-256(%rbp)
	movl	-80(%rbp), %ecx
	subl	-64(%rbp), %ecx
	addl	%ecx, -88(%rbp)
	testl	%eax, %eax
	je	LBB108_1
## %bb.2:
	movq	%rbx, -80(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-216, %rax
	jmp	LBB108_3
LBB108_1:
	movl	$0, -224(%rbp)
	movq	%rbx, -80(%rbp)
	leaq	-215(%rbp), %rax
	movb	$0, -216(%rbp)
LBB108_3:
	movq	%rax, -72(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-272(%rbp), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movl	%r14d, %r8d
	callq	__ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-48(%rbp), %rcx
	jne	LBB108_5
## %bb.4:
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB108_5:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_load_from_memory          ## -- Begin function stbi_load_from_memory
	.p2align	4, 0x90
_stbi_load_from_memory:                 ## @stbi_load_from_memory
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$240, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	$0, -216(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -48(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rdi, -40(%rbp)
	movslq	%esi, %rax
	addq	%rdi, %rax
	movq	%rax, -16(%rbp)
	movq	%rax, -32(%rbp)
	leaq	-232(%rbp), %rdi
	movq	%rdx, %rsi
	movq	%rcx, %rdx
	movq	%r8, %rcx
	movl	%r9d, %r8d
	callq	__ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-8(%rbp), %rcx
	jne	LBB109_2
## %bb.1:
	addq	$240, %rsp
	popq	%rbp
	retq
LBB109_2:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_load_from_callbacks       ## -- Begin function stbi_load_from_callbacks
	.p2align	4, 0x90
_stbi_load_from_callbacks:              ## @stbi_load_from_callbacks
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, %r14d
	movq	%r8, %r15
	movq	%rcx, %r12
	movq	%rdx, %r13
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	16(%rdi), %rax
	movq	%rax, -240(%rbp)
	vmovups	(%rdi), %xmm0
	vmovups	%xmm0, -256(%rbp)
	movq	%rsi, -232(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -224(%rbp)
	movl	$0, -88(%rbp)
	leaq	-216(%rbp), %rbx
	movq	%rbx, -64(%rbp)
	movq	%rbx, -80(%rbp)
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movl	$128, %edx
	callq	*-256(%rbp)
	movl	-80(%rbp), %ecx
	subl	-64(%rbp), %ecx
	addl	%ecx, -88(%rbp)
	testl	%eax, %eax
	je	LBB110_1
## %bb.2:
	movq	%rbx, -80(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-216, %rax
	jmp	LBB110_3
LBB110_1:
	movl	$0, -224(%rbp)
	movq	%rbx, -80(%rbp)
	leaq	-215(%rbp), %rax
	movb	$0, -216(%rbp)
LBB110_3:
	movq	%rax, -72(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-272(%rbp), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movl	%r14d, %r8d
	callq	__ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-48(%rbp), %rcx
	jne	LBB110_5
## %bb.4:
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB110_5:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_loadf_from_memory         ## -- Begin function stbi_loadf_from_memory
	.p2align	4, 0x90
_stbi_loadf_from_memory:                ## @stbi_loadf_from_memory
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$240, %rsp
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	$0, -216(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -48(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rdi, -40(%rbp)
	movslq	%esi, %rax
	addq	%rdi, %rax
	movq	%rax, -16(%rbp)
	movq	%rax, -32(%rbp)
	leaq	-232(%rbp), %rdi
	movq	%rdx, %rsi
	movq	%rcx, %rdx
	movq	%r8, %rcx
	movl	%r9d, %r8d
	callq	__ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-8(%rbp), %rcx
	jne	LBB111_2
## %bb.1:
	addq	$240, %rsp
	popq	%rbp
	retq
LBB111_2:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i
LCPI112_0:
	.long	0x437f0000                      ## float 255
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
__ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i: ## @_ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movq	%rcx, %r15
	movq	%rdx, %r13
	movq	%rsi, %rbx
	callq	__ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i
	testq	%rax, %rax
	je	LBB112_35
## %bb.1:
	movq	%rax, %r12
	movl	(%rbx), %ecx
	movl	(%r13), %ebx
	testl	%r14d, %r14d
	je	LBB112_2
## %bb.3:
	movl	%ebx, %eax
	orl	%ecx, %eax
	jns	LBB112_4
	jmp	LBB112_11
LBB112_35:
	leaq	L_.str.111(%rip), %rcx
	jmp	LBB112_36
LBB112_2:
	movl	(%r15), %r14d
	movl	%ebx, %eax
	orl	%ecx, %eax
	js	LBB112_11
LBB112_4:
	testl	%ebx, %ebx
	je	LBB112_6
## %bb.5:
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	xorl	%edx, %edx
	idivl	%ebx
	cmpl	%ecx, %eax
	jl	LBB112_11
LBB112_6:
	imull	%ecx, %ebx
	movl	%r14d, %eax
	orl	%ebx, %eax
	js	LBB112_11
## %bb.7:
	testl	%r14d, %r14d
	je	LBB112_10
## %bb.8:
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	xorl	%edx, %edx
	idivl	%r14d
	cmpl	%ebx, %eax
	jl	LBB112_11
## %bb.9:
	movl	%r14d, %eax
	imull	%ebx, %eax
	cmpl	$536870911, %eax                ## imm = 0x1FFFFFFF
	ja	LBB112_11
LBB112_10:
	movl	%ebx, %eax
	imull	%r14d, %eax
	shll	$2, %eax
	movslq	%eax, %rdi
	callq	_malloc
	testq	%rax, %rax
	je	LBB112_11
## %bb.12:
	movq	%rax, %r13
	movl	%r14d, %eax
	andl	$1, %eax
	cmpl	$1, %eax
	movl	%r14d, %eax
	sbbl	$0, %eax
	testl	%ebx, %ebx
	jle	LBB112_34
## %bb.13:
	movq	%r13, -56(%rbp)                 ## 8-byte Spill
	movq	%r12, -64(%rbp)                 ## 8-byte Spill
	movl	%r14d, -88(%rbp)                ## 4-byte Spill
	movslq	%r14d, %rcx
	movl	%ebx, -84(%rbp)                 ## 4-byte Spill
	movl	%ebx, %edx
	movl	%eax, -48(%rbp)                 ## 4-byte Spill
	testl	%eax, %eax
	movq	%rcx, -80(%rbp)                 ## 8-byte Spill
	movq	%rdx, -72(%rbp)                 ## 8-byte Spill
	jle	LBB112_26
## %bb.14:
	vmovss	__ZL15stbi__l2h_gamma(%rip), %xmm0 ## xmm0 = mem[0],zero,zero,zero
	vmovss	%xmm0, -44(%rbp)                ## 4-byte Spill
	vmovss	__ZL15stbi__l2h_scale(%rip), %xmm0 ## xmm0 = mem[0],zero,zero,zero
	movl	-48(%rbp), %eax                 ## 4-byte Reload
	movl	%eax, %r14d
	cmpl	$4, %eax
	vmovaps	%xmm0, -144(%rbp)               ## 16-byte Spill
	jae	LBB112_15
## %bb.22:
	leaq	(,%rcx,4), %rax
	movq	%rax, -112(%rbp)                ## 8-byte Spill
	xorl	%r12d, %r12d
	vmovss	LCPI112_0(%rip), %xmm1          ## xmm1 = mem[0],zero,zero,zero
	movq	-64(%rbp), %r13                 ## 8-byte Reload
	movq	-56(%rbp), %rbx                 ## 8-byte Reload
	.p2align	4, 0x90
LBB112_23:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB112_24 Depth 2
	xorl	%r15d, %r15d
	.p2align	4, 0x90
LBB112_24:                              ##   Parent Loop BB112_23 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r13,%r15), %eax
	vcvtsi2ss	%eax, %xmm2, %xmm0
	vdivss	%xmm1, %xmm0, %xmm0
	vmovss	-44(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	callq	_powf
	vmovss	LCPI112_0(%rip), %xmm1          ## xmm1 = mem[0],zero,zero,zero
	vmulss	-144(%rbp), %xmm0, %xmm0        ## 16-byte Folded Reload
	vmovss	%xmm0, (%rbx,%r15,4)
	incq	%r15
	cmpq	%r15, %r14
	jne	LBB112_24
## %bb.25:                              ##   in Loop: Header=BB112_23 Depth=1
	incq	%r12
	addq	-112(%rbp), %rbx                ## 8-byte Folded Reload
	movq	-80(%rbp), %rcx                 ## 8-byte Reload
	addq	%rcx, %r13
	movq	-72(%rbp), %rdx                 ## 8-byte Reload
	cmpq	%rdx, %r12
	jne	LBB112_23
LBB112_26:
	testb	$1, -88(%rbp)                   ## 1-byte Folded Reload
	movq	-64(%rbp), %r12                 ## 8-byte Reload
	movq	-56(%rbp), %r13                 ## 8-byte Reload
	movl	-84(%rbp), %eax                 ## 4-byte Reload
	movl	-48(%rbp), %esi                 ## 4-byte Reload
	jne	LBB112_34
## %bb.27:
	movslq	%esi, %r8
	cmpl	$4, %eax
	jae	LBB112_29
## %bb.28:
	xorl	%esi, %esi
	jmp	LBB112_32
LBB112_11:
	movq	%r12, %rdi
	callq	_free
	leaq	L_.str.131(%rip), %rcx
LBB112_36:
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
	xorl	%r13d, %r13d
LBB112_37:
	movq	%r13, %rax
	addq	$184, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB112_15:
	movl	%r14d, %ebx
	andl	$-4, %ebx
	vbroadcastss	%xmm0, %xmm0
	vmovaps	%xmm0, -176(%rbp)               ## 16-byte Spill
	leaq	(,%rcx,4), %rax
	movq	%rax, -120(%rbp)                ## 8-byte Spill
	xorl	%eax, %eax
	vbroadcastss	LCPI112_0(%rip), %xmm0  ## xmm0 = [2.55E+2,2.55E+2,2.55E+2,2.55E+2]
	vmovaps	%xmm0, -160(%rbp)               ## 16-byte Spill
	movq	-64(%rbp), %r12                 ## 8-byte Reload
	movq	-56(%rbp), %r15                 ## 8-byte Reload
	jmp	LBB112_16
	.p2align	4, 0x90
LBB112_21:                              ##   in Loop: Header=BB112_16 Depth=1
	movq	-128(%rbp), %rax                ## 8-byte Reload
	incq	%rax
	addq	-120(%rbp), %r15                ## 8-byte Folded Reload
	movq	-80(%rbp), %rcx                 ## 8-byte Reload
	addq	%rcx, %r12
	movq	-72(%rbp), %rdx                 ## 8-byte Reload
	cmpq	%rdx, %rax
	movq	%r13, %rbx
	je	LBB112_26
LBB112_16:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB112_17 Depth 2
                                        ##     Child Loop BB112_20 Depth 2
	movq	%rax, -128(%rbp)                ## 8-byte Spill
	xorl	%r13d, %r13d
	.p2align	4, 0x90
LBB112_17:                              ##   Parent Loop BB112_16 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vpmovzxbd	(%r12,%r13), %xmm0      ## xmm0 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero
	vcvtdq2ps	%xmm0, %xmm0
	vdivps	-160(%rbp), %xmm0, %xmm0        ## 16-byte Folded Reload
	vmovaps	%xmm0, -112(%rbp)               ## 16-byte Spill
	vmovss	-44(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	callq	_powf
	vmovaps	%xmm0, -224(%rbp)               ## 16-byte Spill
	vmovshdup	-112(%rbp), %xmm0       ## 16-byte Folded Reload
                                        ## xmm0 = mem[1,1,3,3]
	vmovss	-44(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	callq	_powf
	vmovaps	%xmm0, -208(%rbp)               ## 16-byte Spill
	vpermilpd	$1, -112(%rbp), %xmm0   ## 16-byte Folded Reload
                                        ## xmm0 = mem[1,0]
	vmovss	-44(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	callq	_powf
	vmovapd	%xmm0, -192(%rbp)               ## 16-byte Spill
	vpermilps	$255, -112(%rbp), %xmm0 ## 16-byte Folded Reload
                                        ## xmm0 = mem[3,3,3,3]
	vmovss	-44(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	callq	_powf
	vmovaps	-224(%rbp), %xmm1               ## 16-byte Reload
	vinsertps	$16, -208(%rbp), %xmm1, %xmm1 ## 16-byte Folded Reload
                                        ## xmm1 = xmm1[0],mem[0],xmm1[2,3]
	vinsertps	$32, -192(%rbp), %xmm1, %xmm1 ## 16-byte Folded Reload
                                        ## xmm1 = xmm1[0,1],mem[0],xmm1[3]
	vinsertps	$48, %xmm0, %xmm1, %xmm0 ## xmm0 = xmm1[0,1,2],xmm0[0]
	vmulps	-176(%rbp), %xmm0, %xmm0        ## 16-byte Folded Reload
	vmovups	%xmm0, (%r15,%r13,4)
	addq	$4, %r13
	cmpq	%r13, %rbx
	jne	LBB112_17
## %bb.18:                              ##   in Loop: Header=BB112_16 Depth=1
	movq	%rbx, %r13
	cmpq	%r14, %rbx
	vmovss	LCPI112_0(%rip), %xmm2          ## xmm2 = mem[0],zero,zero,zero
	je	LBB112_21
## %bb.19:                              ##   in Loop: Header=BB112_16 Depth=1
	movq	%r13, %rbx
	.p2align	4, 0x90
LBB112_20:                              ##   Parent Loop BB112_16 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r12,%rbx), %eax
	vcvtsi2ss	%eax, %xmm3, %xmm0
	vdivss	%xmm2, %xmm0, %xmm0
	vmovss	-44(%rbp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	callq	_powf
	vmovss	LCPI112_0(%rip), %xmm2          ## xmm2 = mem[0],zero,zero,zero
	vmovaps	-144(%rbp), %xmm1               ## 16-byte Reload
	vmulss	%xmm0, %xmm1, %xmm0
	vmovss	%xmm0, (%r15,%rbx,4)
	incq	%rbx
	cmpq	%rbx, %r14
	jne	LBB112_20
	jmp	LBB112_21
LBB112_29:
	movl	%edx, %esi
	andl	$-4, %esi
	leaq	(%rcx,%rcx,2), %r11
	leaq	(,%r8,4), %rax
	leaq	(%rax,%r11,4), %r10
	addq	%r13, %r10
	leaq	(,%rcx,4), %r9
	addq	%r8, %r11
	addq	%r12, %r11
	leaq	(%rax,%rcx,8), %r14
	addq	%r13, %r14
	leaq	(%r8,%rcx,2), %r15
	addq	%r12, %r15
	leaq	(%rcx,%r8), %rdi
	movq	%r12, %rbx
	leaq	(,%rdi,4), %r12
	addq	%r13, %r12
	addq	%rbx, %rdi
	leaq	(%r13,%r8,4), %r13
	addq	%r8, %rbx
	xorl	%ecx, %ecx
	vbroadcastss	LCPI112_0(%rip), %xmm0  ## xmm0 = [2.55E+2,2.55E+2,2.55E+2,2.55E+2]
	movq	%rsi, %rax
	.p2align	4, 0x90
LBB112_30:                              ## =>This Inner Loop Header: Depth=1
	movzbl	(%rbx,%rcx), %edx
	vmovd	%edx, %xmm1
	vpinsrb	$1, (%rdi,%rcx), %xmm1, %xmm1
	vpinsrb	$2, (%r15,%rcx), %xmm1, %xmm1
	vpinsrb	$3, (%r11,%rcx), %xmm1, %xmm1
	vpmovzxbd	%xmm1, %xmm1            ## xmm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero
	vcvtdq2ps	%xmm1, %xmm1
	vdivps	%xmm0, %xmm1, %xmm1
	vmovss	%xmm1, (%r13,%rcx,4)
	vextractps	$1, %xmm1, (%r12,%rcx,4)
	vextractps	$2, %xmm1, (%r14,%rcx,4)
	vextractps	$3, %xmm1, (%r10,%rcx,4)
	addq	%r9, %rcx
	addq	$-4, %rax
	jne	LBB112_30
## %bb.31:
	movq	-72(%rbp), %rdx                 ## 8-byte Reload
	cmpq	%rdx, %rsi
	movq	-64(%rbp), %r12                 ## 8-byte Reload
	movq	-56(%rbp), %r13                 ## 8-byte Reload
	movq	-80(%rbp), %rcx                 ## 8-byte Reload
	je	LBB112_34
LBB112_32:
	subq	%rsi, %rdx
	imulq	%rcx, %rsi
	addq	%r8, %rsi
	vmovss	LCPI112_0(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	.p2align	4, 0x90
LBB112_33:                              ## =>This Inner Loop Header: Depth=1
	movzbl	(%r12,%rsi), %eax
	vcvtsi2ss	%eax, %xmm3, %xmm1
	vdivss	%xmm0, %xmm1, %xmm1
	vmovss	%xmm1, (%r13,%rsi,4)
	addq	%rcx, %rsi
	decq	%rdx
	jne	LBB112_33
LBB112_34:
	movq	%r12, %rdi
	callq	_free
	jmp	LBB112_37
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_loadf_from_callbacks      ## -- Begin function stbi_loadf_from_callbacks
	.p2align	4, 0x90
_stbi_loadf_from_callbacks:             ## @stbi_loadf_from_callbacks
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, %r14d
	movq	%r8, %r15
	movq	%rcx, %r12
	movq	%rdx, %r13
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	16(%rdi), %rax
	movq	%rax, -240(%rbp)
	vmovups	(%rdi), %xmm0
	vmovups	%xmm0, -256(%rbp)
	movq	%rsi, -232(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -224(%rbp)
	movl	$0, -88(%rbp)
	leaq	-216(%rbp), %rbx
	movq	%rbx, -64(%rbp)
	movq	%rbx, -80(%rbp)
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movl	$128, %edx
	callq	*-256(%rbp)
	movl	-80(%rbp), %ecx
	subl	-64(%rbp), %ecx
	addl	%ecx, -88(%rbp)
	testl	%eax, %eax
	je	LBB113_1
## %bb.2:
	movq	%rbx, -80(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-216, %rax
	jmp	LBB113_3
LBB113_1:
	movl	$0, -224(%rbp)
	movq	%rbx, -80(%rbp)
	leaq	-215(%rbp), %rax
	movb	$0, -216(%rbp)
LBB113_3:
	movq	%rax, -72(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-272(%rbp), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movl	%r14d, %r8d
	callq	__ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-48(%rbp), %rcx
	jne	LBB113_5
## %bb.4:
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB113_5:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_loadf                     ## -- Begin function stbi_loadf
	.p2align	4, 0x90
_stbi_loadf:                            ## @stbi_loadf
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$248, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movq	%rcx, %rbx
	movq	%rdx, %r12
	movq	%rsi, %r13
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	leaq	L_.str.5(%rip), %rsi
	callq	_fopen
	testq	%rax, %rax
	je	LBB114_1
## %bb.2:
	movq	%rax, %r15
	movq	%rbx, -288(%rbp)                ## 8-byte Spill
	movl	%r14d, -276(%rbp)               ## 4-byte Spill
	movq	__ZL21stbi__stdio_callbacks+16(%rip), %rax
	movq	%rax, -240(%rbp)
	vmovups	__ZL21stbi__stdio_callbacks(%rip), %xmm0
	vmovups	%xmm0, -256(%rbp)
	movq	%r15, -232(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -224(%rbp)
	movl	$0, -88(%rbp)
	leaq	-216(%rbp), %r14
	movq	%r14, -64(%rbp)
	movq	%r14, -80(%rbp)
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	$128, %edx
	callq	*-256(%rbp)
	movl	-80(%rbp), %ecx
	subl	-64(%rbp), %ecx
	addl	%ecx, -88(%rbp)
	testl	%eax, %eax
	je	LBB114_3
## %bb.4:
	movq	%r14, -80(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-216, %rax
	jmp	LBB114_5
LBB114_1:
	leaq	L_.str.22(%rip), %rcx
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
	xorl	%ebx, %ebx
	jmp	LBB114_6
LBB114_3:
	movl	$0, -224(%rbp)
	movq	%r14, -80(%rbp)
	leaq	-215(%rbp), %rax
	movb	$0, -216(%rbp)
LBB114_5:
	movq	%rax, -72(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-272(%rbp), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	-288(%rbp), %rcx                ## 8-byte Reload
	movl	-276(%rbp), %r8d                ## 4-byte Reload
	callq	__ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i
	movq	%rax, %rbx
	movq	%r15, %rdi
	callq	_fclose
LBB114_6:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB114_8
## %bb.7:
	movq	%rbx, %rax
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB114_8:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_loadf_from_file           ## -- Begin function stbi_loadf_from_file
	.p2align	4, 0x90
_stbi_loadf_from_file:                  ## @stbi_loadf_from_file
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movq	%rcx, %r15
	movq	%rdx, %r12
	movq	%rsi, %r13
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	__ZL21stbi__stdio_callbacks+16(%rip), %rax
	movq	%rax, -240(%rbp)
	vmovups	__ZL21stbi__stdio_callbacks(%rip), %xmm0
	vmovups	%xmm0, -256(%rbp)
	movq	%rdi, -232(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -224(%rbp)
	movl	$0, -88(%rbp)
	leaq	-216(%rbp), %rbx
	movq	%rbx, -64(%rbp)
	movq	%rbx, -80(%rbp)
	movq	%rbx, %rsi
	movl	$128, %edx
	callq	*-256(%rbp)
	movl	-80(%rbp), %ecx
	subl	-64(%rbp), %ecx
	addl	%ecx, -88(%rbp)
	testl	%eax, %eax
	je	LBB115_1
## %bb.2:
	movq	%rbx, -80(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-216, %rax
	jmp	LBB115_3
LBB115_1:
	movl	$0, -224(%rbp)
	movq	%rbx, -80(%rbp)
	leaq	-215(%rbp), %rax
	movb	$0, -216(%rbp)
LBB115_3:
	movq	%rax, -72(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-272(%rbp), %rdi
	movq	%r13, %rsi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movl	%r14d, %r8d
	callq	__ZL16stbi__loadf_mainP13stbi__contextPiS1_S1_i
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-48(%rbp), %rcx
	jne	LBB115_5
## %bb.4:
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB115_5:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_is_hdr_from_memory        ## -- Begin function stbi_is_hdr_from_memory
	.p2align	4, 0x90
_stbi_is_hdr_from_memory:               ## @stbi_is_hdr_from_memory
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_is_hdr                    ## -- Begin function stbi_is_hdr
	.p2align	4, 0x90
_stbi_is_hdr:                           ## @stbi_is_hdr
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L_.str.5(%rip), %rsi
	callq	_fopen
	testq	%rax, %rax
	je	LBB117_2
## %bb.1:
	movq	%rax, %rdi
	callq	_fclose
LBB117_2:
	xorl	%eax, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_is_hdr_from_file          ## -- Begin function stbi_is_hdr_from_file
	.p2align	4, 0x90
_stbi_is_hdr_from_file:                 ## @stbi_is_hdr_from_file
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_is_hdr_from_callbacks     ## -- Begin function stbi_is_hdr_from_callbacks
	.p2align	4, 0x90
_stbi_is_hdr_from_callbacks:            ## @stbi_is_hdr_from_callbacks
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_ldr_to_hdr_gamma          ## -- Begin function stbi_ldr_to_hdr_gamma
	.p2align	4, 0x90
_stbi_ldr_to_hdr_gamma:                 ## @stbi_ldr_to_hdr_gamma
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vmovss	%xmm0, __ZL15stbi__l2h_gamma(%rip)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_ldr_to_hdr_scale          ## -- Begin function stbi_ldr_to_hdr_scale
	.p2align	4, 0x90
_stbi_ldr_to_hdr_scale:                 ## @stbi_ldr_to_hdr_scale
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vmovss	%xmm0, __ZL15stbi__l2h_scale(%rip)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_hdr_to_ldr_gamma          ## -- Begin function stbi_hdr_to_ldr_gamma
	.p2align	4, 0x90
_stbi_hdr_to_ldr_gamma:                 ## @stbi_hdr_to_ldr_gamma
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_hdr_to_ldr_scale          ## -- Begin function stbi_hdr_to_ldr_scale
	.p2align	4, 0x90
_stbi_hdr_to_ldr_scale:                 ## @stbi_hdr_to_ldr_scale
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_zlib_decode_malloc_guesssize ## -- Begin function stbi_zlib_decode_malloc_guesssize
	.p2align	4, 0x90
_stbi_zlib_decode_malloc_guesssize:     ## @stbi_zlib_decode_malloc_guesssize
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	movl	$4112, %eax                     ## imm = 0x1010
	callq	____chkstk_darwin
	subq	%rax, %rsp
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r14
	movl	%edx, %r15d
	movl	%esi, %r12d
	movq	%rdi, %rbx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movslq	%edx, %rdi
	callq	_malloc
	testq	%rax, %rax
	je	LBB124_6
## %bb.1:
	movq	%rbx, -4136(%rbp)
	movslq	%r12d, %rcx
	addq	%rbx, %rcx
	movq	%rcx, -4128(%rbp)
	leaq	-4136(%rbp), %rdi
	movq	%rax, %rsi
	movl	%r15d, %edx
	movl	$1, %ecx
	movl	$1, %r8d
	callq	__ZL13stbi__do_zlibP10stbi__zbufPciii
	testl	%eax, %eax
	je	LBB124_5
## %bb.2:
	testq	%r14, %r14
	je	LBB124_3
## %bb.4:
	movl	-4112(%rbp), %ecx
	movq	-4104(%rbp), %rax
	subl	%eax, %ecx
	movl	%ecx, (%r14)
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-40(%rbp), %rcx
	je	LBB124_8
	jmp	LBB124_9
LBB124_5:
	movq	-4104(%rbp), %rdi
	callq	_free
LBB124_6:
	xorl	%eax, %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-40(%rbp), %rcx
	jne	LBB124_9
LBB124_8:
	addq	$4112, %rsp                     ## imm = 0x1010
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB124_3:
	movq	-4104(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-40(%rbp), %rcx
	je	LBB124_8
LBB124_9:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ## -- Begin function _ZL13stbi__do_zlibP10stbi__zbufPciii
LCPI125_0:
	.space	16
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
__ZL13stbi__do_zlibP10stbi__zbufPciii:  ## @_ZL13stbi__do_zlibP10stbi__zbufPciii
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$2584, %rsp                     ## imm = 0xA18
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rsi, %r9
	movq	%rdi, %r13
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	%rsi, 32(%rdi)
	movq	%rsi, 24(%rdi)
	movslq	%edx, %rax
	addq	%rsi, %rax
	movq	%rax, 40(%rdi)
	movl	%ecx, 48(%rdi)
	testl	%r8d, %r8d
	je	LBB125_9
## %bb.1:
	movq	(%r13), %rsi
	movq	8(%r13), %rdx
	xorl	%edi, %edi
	cmpq	%rdx, %rsi
	jae	LBB125_3
## %bb.2:
	leaq	1(%rsi), %rcx
	movq	%rcx, (%r13)
	movzbl	(%rsi), %eax
	movq	%rcx, %rsi
	cmpq	%rdx, %rsi
	jb	LBB125_4
	jmp	LBB125_5
LBB125_3:
	xorl	%eax, %eax
	cmpq	%rdx, %rsi
	jae	LBB125_5
LBB125_4:
	leaq	1(%rsi), %rcx
	movq	%rcx, (%r13)
	movzbl	(%rsi), %edi
	movq	%rcx, %rsi
LBB125_5:
	leaq	L_.str.143(%rip), %rcx
	cmpq	%rdx, %rsi
	jae	LBB125_12
## %bb.6:
	movl	%eax, %edx
	shll	$8, %edx
	orl	%edi, %edx
	imull	$-1108378657, %edx, %edx        ## imm = 0xBDEF7BDF
	cmpl	$138547332, %edx                ## imm = 0x8421084
	ja	LBB125_12
## %bb.7:
	testb	$32, %dil
	jne	LBB125_10
## %bb.8:
	andl	$15, %eax
	cmpl	$8, %eax
	jne	LBB125_11
LBB125_9:
	leaq	16(%r13), %r11
	movq	$0, 16(%r13)
	leaq	20(%r13), %r10
	leaq	52(%r13), %rax
	movq	%rax, -2616(%rbp)               ## 8-byte Spill
	leaq	2072(%r13), %rax
	movq	%rax, -2608(%rbp)               ## 8-byte Spill
	xorl	%edi, %edi
	leaq	__ZZL27stbi__compute_huffman_codesP10stbi__zbufE15length_dezigzag(%rip), %r14
	xorl	%ecx, %ecx
	movq	%r11, -2584(%rbp)               ## 8-byte Spill
	movq	%r10, -2576(%rbp)               ## 8-byte Spill
	testl	%ecx, %ecx
	jg	LBB125_22
	jmp	LBB125_18
LBB125_34:
	cmpl	$6, %eax
	jle	LBB125_37
	jmp	LBB125_149
	.p2align	4, 0x90
LBB125_35:                              ##   in Loop: Header=BB125_37 Depth=1
	leaq	1(%rax), %rdx
	movq	%rdx, (%r13)
	movzbl	(%rax), %eax
LBB125_36:                              ##   in Loop: Header=BB125_37 Depth=1
	movzbl	%al, %eax
	shll	%cl, %eax
	orl	%eax, %r15d
	movl	%r15d, (%r10)
	leal	8(%rcx), %eax
	movl	%eax, (%r11)
	cmpl	$17, %ecx
	movl	%eax, %ecx
	jge	LBB125_150
LBB125_37:                              ## =>This Inner Loop Header: Depth=1
	movl	%r15d, %eax
	shrl	%cl, %eax
	testl	%eax, %eax
	jne	LBB125_148
## %bb.38:                              ##   in Loop: Header=BB125_37 Depth=1
	movq	(%r13), %rax
	cmpq	8(%r13), %rax
	jb	LBB125_35
## %bb.39:                              ##   in Loop: Header=BB125_37 Depth=1
	xorl	%eax, %eax
	jmp	LBB125_36
LBB125_40:
	movl	%ecx, %eax
	andl	$7, %eax
	je	LBB125_238
## %bb.41:
	cmpl	%eax, %ecx
	jl	LBB125_44
	jmp	LBB125_236
	.p2align	4, 0x90
LBB125_42:                              ##   in Loop: Header=BB125_44 Depth=1
	leaq	1(%rdx), %rsi
	movq	%rsi, (%r13)
	movzbl	(%rdx), %edx
LBB125_43:                              ##   in Loop: Header=BB125_44 Depth=1
	movzbl	%dl, %edx
	shll	%cl, %edx
	orl	%edx, %r15d
	movl	%r15d, (%r10)
	leal	8(%rcx), %edx
	movl	%edx, (%r11)
	cmpl	$17, %ecx
	movl	%edx, %ecx
	jge	LBB125_237
LBB125_44:                              ## =>This Inner Loop Header: Depth=1
	movl	%r15d, %edx
	shrl	%cl, %edx
	testl	%edx, %edx
	jne	LBB125_235
## %bb.45:                              ##   in Loop: Header=BB125_44 Depth=1
	movq	(%r13), %rdx
	cmpq	8(%r13), %rdx
	jb	LBB125_42
## %bb.46:                              ##   in Loop: Header=BB125_44 Depth=1
	xorl	%edx, %edx
	jmp	LBB125_43
LBB125_47:
	movq	-2616(%rbp), %rdi               ## 8-byte Reload
	leaq	__ZL21stbi__zdefault_length(%rip), %rsi
	movl	$288, %edx                      ## imm = 0x120
	vzeroupper
	callq	__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi
	testl	%eax, %eax
	je	LBB125_13
## %bb.48:
	movq	-2608(%rbp), %rdi               ## 8-byte Reload
	leaq	__ZL23stbi__zdefault_distance(%rip), %rsi
	movl	$32, %edx
	callq	__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi
	testl	%eax, %eax
	je	LBB125_13
LBB125_49:
	movq	24(%r13), %r9
	movq	-2584(%rbp), %r11               ## 8-byte Reload
	movq	-2576(%rbp), %r10               ## 8-byte Reload
	jmp	LBB125_51
	.p2align	4, 0x90
LBB125_50:                              ##   in Loop: Header=BB125_51 Depth=1
	movb	%r15b, (%r9)
	incq	%r9
LBB125_51:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB125_56 Depth 2
                                        ##     Child Loop BB125_72 Depth 2
                                        ##     Child Loop BB125_82 Depth 2
                                        ##     Child Loop BB125_93 Depth 2
                                        ##     Child Loop BB125_101 Depth 2
                                        ##     Child Loop BB125_110 Depth 2
                                        ##     Child Loop BB125_121 Depth 2
                                        ##     Child Loop BB125_133 Depth 2
                                        ##     Child Loop BB125_141 Depth 2
                                        ##     Child Loop BB125_145 Depth 2
                                        ##     Child Loop BB125_67 Depth 2
	movl	(%r11), %eax
	cmpl	$16, %eax
	jge	LBB125_59
## %bb.52:                              ##   in Loop: Header=BB125_51 Depth=1
	movq	(%r13), %rbx
	movq	8(%r13), %rdx
	cmpq	%rdx, %rbx
	jae	LBB125_90
## %bb.53:                              ##   in Loop: Header=BB125_51 Depth=1
	movl	(%r10), %esi
	movl	%eax, %ecx
	jmp	LBB125_56
	.p2align	4, 0x90
LBB125_54:                              ##   in Loop: Header=BB125_56 Depth=2
	leaq	1(%rbx), %rdi
	movq	%rdi, (%r13)
	movzbl	(%rbx), %eax
	movq	%rdi, %rbx
LBB125_55:                              ##   in Loop: Header=BB125_56 Depth=2
	movzbl	%al, %eax
	shll	%cl, %eax
	orl	%eax, %esi
	movl	%esi, (%r10)
	leal	8(%rcx), %eax
	movl	%eax, (%r11)
	cmpl	$17, %ecx
	movl	%eax, %ecx
	jge	LBB125_61
LBB125_56:                              ##   Parent Loop BB125_51 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%esi, %eax
	shrl	%cl, %eax
	testl	%eax, %eax
	jne	LBB125_60
## %bb.57:                              ##   in Loop: Header=BB125_56 Depth=2
	cmpq	%rdx, %rbx
	jb	LBB125_54
## %bb.58:                              ##   in Loop: Header=BB125_56 Depth=2
	xorl	%eax, %eax
	jmp	LBB125_55
	.p2align	4, 0x90
LBB125_59:                              ##   in Loop: Header=BB125_51 Depth=1
	movl	(%r10), %esi
	jmp	LBB125_61
	.p2align	4, 0x90
LBB125_60:                              ##   in Loop: Header=BB125_51 Depth=1
	movq	%rdx, (%r13)
	movl	%ecx, %eax
LBB125_61:                              ##   in Loop: Header=BB125_51 Depth=1
	movl	%esi, %ecx
	andl	$511, %ecx                      ## imm = 0x1FF
	movzwl	52(%r13,%rcx,2), %r15d
	testl	%r15d, %r15d
	je	LBB125_71
## %bb.62:                              ##   in Loop: Header=BB125_51 Depth=1
	movl	%r15d, %ecx
	shrl	$9, %ecx
	shrl	%cl, %esi
	movl	%esi, (%r10)
	subl	%ecx, %eax
	movl	%eax, (%r11)
	andl	$511, %r15d                     ## imm = 0x1FF
	cmpl	$256, %r15d                     ## imm = 0x100
	jae	LBB125_77
LBB125_63:                              ##   in Loop: Header=BB125_51 Depth=1
	movq	40(%r13), %rax
	cmpq	%rax, %r9
	jb	LBB125_50
## %bb.64:                              ##   in Loop: Header=BB125_51 Depth=1
	movq	%r9, 24(%r13)
	cmpl	$0, 48(%r13)
	je	LBB125_273
## %bb.65:                              ##   in Loop: Header=BB125_51 Depth=1
	movq	32(%r13), %rdi
	subq	%rdi, %r9
	cmpl	$-1, %r9d
	je	LBB125_275
## %bb.66:                              ##   in Loop: Header=BB125_51 Depth=1
	subl	%edi, %eax
	cmpl	%eax, %r9d
	jb	LBB125_69
	.p2align	4, 0x90
LBB125_67:                              ##   Parent Loop BB125_51 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	testl	%eax, %eax
	js	LBB125_275
## %bb.68:                              ##   in Loop: Header=BB125_67 Depth=2
	addl	%eax, %eax
	cmpl	%r9d, %eax
	jbe	LBB125_67
LBB125_69:                              ##   in Loop: Header=BB125_51 Depth=1
	movq	%r9, %rbx
	movl	%eax, %r14d
	movq	%r14, %rsi
	vzeroupper
	callq	_realloc
	testq	%rax, %rax
	je	LBB125_275
## %bb.70:                              ##   in Loop: Header=BB125_51 Depth=1
	movq	%rax, 32(%r13)
	movq	%rbx, %r9
	movl	%r9d, %r9d
	addq	%rax, %r9
	movq	%r9, 24(%r13)
	addq	%rax, %r14
	movq	%r14, 40(%r13)
	movq	-2584(%rbp), %r11               ## 8-byte Reload
	movq	-2576(%rbp), %r10               ## 8-byte Reload
	leaq	__ZZL27stbi__compute_huffman_codesP10stbi__zbufE15length_dezigzag(%rip), %r14
	jmp	LBB125_50
	.p2align	4, 0x90
LBB125_71:                              ##   in Loop: Header=BB125_51 Depth=1
	movq	%r9, %r12
	movl	%esi, %ecx
	rolw	$8, %cx
	movl	%ecx, %edx
	andl	$3855, %edx                     ## imm = 0xF0F
	shll	$4, %edx
	shrl	$4, %ecx
	andl	$3855, %ecx                     ## imm = 0xF0F
	orl	%edx, %ecx
	movl	%ecx, %edx
	andl	$13107, %edx                    ## imm = 0x3333
	shrl	$2, %ecx
	andl	$13107, %ecx                    ## imm = 0x3333
	leal	(%rcx,%rdx,4), %ecx
	movl	%ecx, %edx
	andl	$21845, %edx                    ## imm = 0x5555
	shrl	%ecx
	andl	$21845, %ecx                    ## imm = 0x5555
	leal	(%rcx,%rdx,2), %edx
	xorl	%edi, %edi
	.p2align	4, 0x90
LBB125_72:                              ##   Parent Loop BB125_51 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	%rdi, %rcx
	incq	%rdi
	cmpl	%edx, 1148(%r13,%rcx,4)
	jle	LBB125_72
## %bb.73:                              ##   in Loop: Header=BB125_51 Depth=1
	leaq	9(%rdi), %r8
	cmpl	$15, %r8d
	ja	LBB125_90
## %bb.74:                              ##   in Loop: Header=BB125_51 Depth=1
	movl	%r8d, %ebx
	movb	$7, %cl
	subb	%dil, %cl
	shrl	%cl, %edx
	movzwl	1076(%r13,%rbx,2), %ecx
	subq	%rcx, %rdx
	movzwl	1176(%r13,%rbx,2), %r9d
	addq	%rdx, %r9
	cmpl	$287, %r9d                      ## imm = 0x11F
	jg	LBB125_90
## %bb.75:                              ##   in Loop: Header=BB125_51 Depth=1
	movzbl	1208(%r13,%r9), %ecx
	movl	%edi, %edx
	subl	%ecx, %edx
	cmpl	$-9, %edx
	jne	LBB125_90
## %bb.76:                              ##   in Loop: Header=BB125_51 Depth=1
	movl	%r8d, %ecx
	shrl	%cl, %esi
	movl	%esi, 20(%r13)
	subl	%edi, %eax
	addl	$-9, %eax
	movl	%eax, 16(%r13)
	movzwl	1496(%r13,%r9,2), %r15d
	movq	%r12, %r9
	cmpl	$256, %r15d                     ## imm = 0x100
	jb	LBB125_63
LBB125_77:                              ##   in Loop: Header=BB125_51 Depth=1
	je	LBB125_269
## %bb.78:                              ##   in Loop: Header=BB125_51 Depth=1
	addl	$-257, %r15d                    ## imm = 0xFEFF
	leaq	__ZL18stbi__zlength_base(%rip), %rcx
	movl	(%rcx,%r15,4), %r12d
	leaq	-28(%r15), %rcx
	cmpq	$-20, %rcx
	jb	LBB125_88
## %bb.79:                              ##   in Loop: Header=BB125_51 Depth=1
	leaq	__ZL19stbi__zlength_extra(%rip), %rcx
	movl	(%rcx,%r15,4), %edx
	cmpl	%edx, %eax
	jl	LBB125_82
	jmp	LBB125_86
	.p2align	4, 0x90
LBB125_80:                              ##   in Loop: Header=BB125_82 Depth=2
	leaq	1(%rcx), %rdi
	movq	%rdi, (%r13)
	movzbl	(%rcx), %ecx
LBB125_81:                              ##   in Loop: Header=BB125_82 Depth=2
	movzbl	%cl, %edi
	movl	%eax, %ecx
	shll	%cl, %edi
	orl	%edi, %esi
	movl	%esi, (%r10)
	leal	8(%rax), %edi
	movl	%edi, (%r11)
	cmpl	$17, %eax
	movl	%edi, %eax
	jge	LBB125_87
LBB125_82:                              ##   Parent Loop BB125_51 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%esi, %edi
	movl	%eax, %ecx
	shrl	%cl, %edi
	testl	%edi, %edi
	jne	LBB125_85
## %bb.83:                              ##   in Loop: Header=BB125_82 Depth=2
	movq	(%r13), %rcx
	cmpq	8(%r13), %rcx
	jb	LBB125_80
## %bb.84:                              ##   in Loop: Header=BB125_82 Depth=2
	xorl	%ecx, %ecx
	jmp	LBB125_81
LBB125_85:                              ##   in Loop: Header=BB125_51 Depth=1
	movq	8(%r13), %rcx
	movq	%rcx, (%r13)
LBB125_86:                              ##   in Loop: Header=BB125_51 Depth=1
	movl	%eax, %edi
LBB125_87:                              ##   in Loop: Header=BB125_51 Depth=1
	movl	$-1, %ebx
	movl	%edx, %ecx
	shll	%cl, %ebx
	notl	%ebx
	andl	%esi, %ebx
	shrl	%cl, %esi
	movl	%esi, (%r10)
	subl	%edx, %edi
	movl	%edi, (%r11)
	addl	%r12d, %ebx
	movl	%edi, %eax
	movl	%ebx, %r12d
LBB125_88:                              ##   in Loop: Header=BB125_51 Depth=1
	cmpl	$15, %eax
	jg	LBB125_97
## %bb.89:                              ##   in Loop: Header=BB125_51 Depth=1
	movq	(%r13), %rdi
	movq	8(%r13), %r8
	cmpq	%r8, %rdi
	jb	LBB125_93
	jmp	LBB125_90
	.p2align	4, 0x90
LBB125_91:                              ##   in Loop: Header=BB125_93 Depth=2
	leaq	1(%rdi), %rdx
	movq	%rdx, (%r13)
	movzbl	(%rdi), %ecx
	movq	%rdx, %rdi
LBB125_92:                              ##   in Loop: Header=BB125_93 Depth=2
	movzbl	%cl, %edx
	movl	%eax, %ecx
	shll	%cl, %edx
	orl	%edx, %esi
	movl	%esi, (%r10)
	leal	8(%rax), %edx
	movl	%edx, (%r11)
	cmpl	$17, %eax
	movl	%edx, %eax
	jge	LBB125_98
LBB125_93:                              ##   Parent Loop BB125_51 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%esi, %edx
	movl	%eax, %ecx
	shrl	%cl, %edx
	testl	%edx, %edx
	jne	LBB125_96
## %bb.94:                              ##   in Loop: Header=BB125_93 Depth=2
	cmpq	%r8, %rdi
	jb	LBB125_91
## %bb.95:                              ##   in Loop: Header=BB125_93 Depth=2
	xorl	%ecx, %ecx
	jmp	LBB125_92
LBB125_96:                              ##   in Loop: Header=BB125_51 Depth=1
	movq	%r8, (%r13)
LBB125_97:                              ##   in Loop: Header=BB125_51 Depth=1
	movl	%eax, %edx
LBB125_98:                              ##   in Loop: Header=BB125_51 Depth=1
	movl	%esi, %eax
	andl	$511, %eax                      ## imm = 0x1FF
	movzwl	2072(%r13,%rax,2), %eax
	testl	%eax, %eax
	je	LBB125_100
## %bb.99:                              ##   in Loop: Header=BB125_51 Depth=1
	movl	%eax, %ecx
	shrl	$9, %ecx
	shrl	%cl, %esi
	movl	%esi, (%r10)
	subl	%ecx, %edx
	movl	%edx, (%r11)
	andl	$511, %eax                      ## imm = 0x1FF
	jmp	LBB125_106
LBB125_100:                             ##   in Loop: Header=BB125_51 Depth=1
	movq	%r9, %r15
	movl	%esi, %eax
	rolw	$8, %ax
	movl	%eax, %ecx
	andl	$3855, %ecx                     ## imm = 0xF0F
	shll	$4, %ecx
	shrl	$4, %eax
	andl	$3855, %eax                     ## imm = 0xF0F
	orl	%ecx, %eax
	movl	%eax, %ecx
	andl	$13107, %ecx                    ## imm = 0x3333
	shrl	$2, %eax
	andl	$13107, %eax                    ## imm = 0x3333
	leal	(%rax,%rcx,4), %eax
	movl	%eax, %ecx
	andl	$21845, %ecx                    ## imm = 0x5555
	shrl	%eax
	andl	$21845, %eax                    ## imm = 0x5555
	leal	(%rax,%rcx,2), %eax
	xorl	%edi, %edi
	.p2align	4, 0x90
LBB125_101:                             ##   Parent Loop BB125_51 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	%rdi, %rcx
	incq	%rdi
	cmpl	%eax, 3168(%r13,%rcx,4)
	jle	LBB125_101
## %bb.102:                             ##   in Loop: Header=BB125_51 Depth=1
	leaq	9(%rdi), %r8
	cmpl	$15, %r8d
	ja	LBB125_90
## %bb.103:                             ##   in Loop: Header=BB125_51 Depth=1
	movl	%r8d, %ebx
	movb	$7, %cl
	subb	%dil, %cl
	shrl	%cl, %eax
	movzwl	3096(%r13,%rbx,2), %ecx
	subq	%rcx, %rax
	movzwl	3196(%r13,%rbx,2), %r9d
	addq	%rax, %r9
	cmpl	$287, %r9d                      ## imm = 0x11F
	jg	LBB125_90
## %bb.104:                             ##   in Loop: Header=BB125_51 Depth=1
	movzbl	3228(%r13,%r9), %eax
	movl	%edi, %ecx
	subl	%eax, %ecx
	cmpl	$-9, %ecx
	jne	LBB125_90
## %bb.105:                             ##   in Loop: Header=BB125_51 Depth=1
	movl	%r8d, %ecx
	shrl	%cl, %esi
	movl	%esi, 20(%r13)
	subl	%edi, %edx
	addl	$-9, %edx
	movl	%edx, 16(%r13)
	movzwl	3516(%r13,%r9,2), %eax
	movq	%r15, %r9
LBB125_106:                             ##   in Loop: Header=BB125_51 Depth=1
	movl	%eax, %eax
	leaq	__ZL16stbi__zdist_base(%rip), %rcx
	movl	(%rcx,%rax,4), %ebx
	leaq	-30(%rax), %rcx
	cmpq	$-26, %rcx
	jb	LBB125_116
## %bb.107:                             ##   in Loop: Header=BB125_51 Depth=1
	leaq	__ZL17stbi__zdist_extra(%rip), %rcx
	movl	(%rcx,%rax,4), %eax
	cmpl	%eax, %edx
	jl	LBB125_110
	jmp	LBB125_114
	.p2align	4, 0x90
LBB125_108:                             ##   in Loop: Header=BB125_110 Depth=2
	leaq	1(%rcx), %rdi
	movq	%rdi, (%r13)
	movzbl	(%rcx), %ecx
LBB125_109:                             ##   in Loop: Header=BB125_110 Depth=2
	movzbl	%cl, %edi
	movl	%edx, %ecx
	shll	%cl, %edi
	orl	%edi, %esi
	movl	%esi, (%r10)
	leal	8(%rdx), %edi
	movl	%edi, (%r11)
	cmpl	$17, %edx
	movl	%edi, %edx
	jge	LBB125_115
LBB125_110:                             ##   Parent Loop BB125_51 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%esi, %edi
	movl	%edx, %ecx
	shrl	%cl, %edi
	testl	%edi, %edi
	jne	LBB125_113
## %bb.111:                             ##   in Loop: Header=BB125_110 Depth=2
	movq	(%r13), %rcx
	cmpq	8(%r13), %rcx
	jb	LBB125_108
## %bb.112:                             ##   in Loop: Header=BB125_110 Depth=2
	xorl	%ecx, %ecx
	jmp	LBB125_109
LBB125_113:                             ##   in Loop: Header=BB125_51 Depth=1
	movq	8(%r13), %rcx
	movq	%rcx, (%r13)
LBB125_114:                             ##   in Loop: Header=BB125_51 Depth=1
	movl	%edx, %edi
LBB125_115:                             ##   in Loop: Header=BB125_51 Depth=1
	movl	$-1, %edx
	movl	%eax, %ecx
	shll	%cl, %edx
	notl	%edx
	andl	%esi, %edx
	shrl	%cl, %esi
	movl	%esi, (%r10)
	subl	%eax, %edi
	movl	%edi, (%r11)
	addl	%edx, %ebx
LBB125_116:                             ##   in Loop: Header=BB125_51 Depth=1
	movq	32(%r13), %rdi
	movq	%r9, %r15
	subq	%rdi, %r15
	movslq	%ebx, %rdx
	cmpq	%rdx, %r15
	jl	LBB125_271
## %bb.117:                             ##   in Loop: Header=BB125_51 Depth=1
	movslq	%r12d, %rcx
	addq	%r9, %rcx
	movq	40(%r13), %rax
	cmpq	%rax, %rcx
	jbe	LBB125_125
## %bb.118:                             ##   in Loop: Header=BB125_51 Depth=1
	movq	%r9, 24(%r13)
	cmpl	$0, 48(%r13)
	je	LBB125_273
## %bb.119:                             ##   in Loop: Header=BB125_51 Depth=1
	movl	%r15d, %ecx
	addl	%r12d, %ecx
	jb	LBB125_275
## %bb.120:                             ##   in Loop: Header=BB125_51 Depth=1
	subl	%edi, %eax
	cmpl	%eax, %ecx
	jbe	LBB125_123
	.p2align	4, 0x90
LBB125_121:                             ##   Parent Loop BB125_51 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	testl	%eax, %eax
	js	LBB125_275
## %bb.122:                             ##   in Loop: Header=BB125_121 Depth=2
	addl	%eax, %eax
	cmpl	%eax, %ecx
	ja	LBB125_121
LBB125_123:                             ##   in Loop: Header=BB125_51 Depth=1
	movl	%ebx, -2564(%rbp)               ## 4-byte Spill
	movq	%r12, %rbx
	movq	%rdx, %r12
	movl	%eax, %r14d
	movq	%r14, %rsi
	vzeroupper
	callq	_realloc
	testq	%rax, %rax
	je	LBB125_275
## %bb.124:                             ##   in Loop: Header=BB125_51 Depth=1
	movq	%rax, 32(%r13)
	movl	%r15d, %r9d
	addq	%rax, %r9
	movq	%r9, 24(%r13)
	addq	%rax, %r14
	movq	%r14, 40(%r13)
	movq	-2584(%rbp), %r11               ## 8-byte Reload
	movq	-2576(%rbp), %r10               ## 8-byte Reload
	leaq	__ZZL27stbi__compute_huffman_codesP10stbi__zbufE15length_dezigzag(%rip), %r14
	movq	%r12, %rdx
	movq	%rbx, %r12
	movl	-2564(%rbp), %ebx               ## 4-byte Reload
LBB125_125:                             ##   in Loop: Header=BB125_51 Depth=1
	movq	%r9, %rax
	subq	%rdx, %rax
	cmpl	$1, %ebx
	jne	LBB125_128
## %bb.126:                             ##   in Loop: Header=BB125_51 Depth=1
	testl	%r12d, %r12d
	je	LBB125_51
## %bb.127:                             ##   in Loop: Header=BB125_51 Depth=1
	movl	%r12d, %edx
	movzbl	(%rax), %esi
	movq	%r9, %rdi
	movq	%r9, %rbx
	vzeroupper
	callq	_memset
	movq	%rbx, %r9
	movq	-2576(%rbp), %r10               ## 8-byte Reload
	movq	-2584(%rbp), %r11               ## 8-byte Reload
	decl	%r12d
	leaq	(%rbx,%r12), %r9
	incq	%r9
	jmp	LBB125_51
LBB125_128:                             ##   in Loop: Header=BB125_51 Depth=1
	testl	%r12d, %r12d
	je	LBB125_51
## %bb.129:                             ##   in Loop: Header=BB125_51 Depth=1
	movl	%ebx, %ecx
	movq	%r9, %rbx
	leal	-1(%r12), %r9d
	cmpl	$127, %r9d
	jb	LBB125_138
## %bb.130:                             ##   in Loop: Header=BB125_51 Depth=1
	cmpl	$128, %ecx
	jb	LBB125_138
## %bb.131:                             ##   in Loop: Header=BB125_51 Depth=1
	incq	%r9
	movq	%r9, %r8
	andq	$-128, %r8
	leaq	-128(%r8), %rcx
	movq	%rcx, %r10
	shrq	$7, %r10
	incq	%r10
	testq	%rcx, %rcx
	je	LBB125_147
## %bb.132:                             ##   in Loop: Header=BB125_51 Depth=1
	negq	%rdx
	movq	%r10, %rsi
	andq	$-2, %rsi
	movq	%rdx, %rdi
	movq	%rbx, %rdx
	leaq	224(%rbx), %rcx
	leaq	(%rbx,%rdi), %rdx
	addq	$224, %rdx
	xorl	%edi, %edi
	.p2align	4, 0x90
LBB125_133:                             ##   Parent Loop BB125_51 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovups	-224(%rdx,%rdi), %ymm0
	vmovups	-192(%rdx,%rdi), %ymm1
	vmovups	-160(%rdx,%rdi), %ymm2
	vmovups	-128(%rdx,%rdi), %ymm3
	vmovups	%ymm0, -224(%rcx,%rdi)
	vmovups	%ymm1, -192(%rcx,%rdi)
	vmovups	%ymm2, -160(%rcx,%rdi)
	vmovups	%ymm3, -128(%rcx,%rdi)
	vmovups	-96(%rdx,%rdi), %ymm0
	vmovups	-64(%rdx,%rdi), %ymm1
	vmovups	-32(%rdx,%rdi), %ymm2
	vmovups	(%rdx,%rdi), %ymm3
	vmovups	%ymm0, -96(%rcx,%rdi)
	vmovups	%ymm1, -64(%rcx,%rdi)
	vmovups	%ymm2, -32(%rcx,%rdi)
	vmovups	%ymm3, (%rcx,%rdi)
	addq	$256, %rdi                      ## imm = 0x100
	addq	$-2, %rsi
	jne	LBB125_133
## %bb.134:                             ##   in Loop: Header=BB125_51 Depth=1
	testb	$1, %r10b
	je	LBB125_136
LBB125_135:                             ##   in Loop: Header=BB125_51 Depth=1
	vmovups	(%rax,%rdi), %ymm0
	vmovups	32(%rax,%rdi), %ymm1
	vmovups	64(%rax,%rdi), %ymm2
	vmovups	96(%rax,%rdi), %ymm3
	movq	%rbx, %rcx
	vmovups	%ymm0, (%rbx,%rdi)
	vmovups	%ymm1, 32(%rbx,%rdi)
	vmovups	%ymm2, 64(%rbx,%rdi)
	vmovups	%ymm3, 96(%rbx,%rdi)
LBB125_136:                             ##   in Loop: Header=BB125_51 Depth=1
	addq	%r8, %rbx
	cmpq	%r8, %r9
	movq	%rbx, %r9
	movq	-2576(%rbp), %r10               ## 8-byte Reload
	je	LBB125_51
## %bb.137:                             ##   in Loop: Header=BB125_51 Depth=1
	addq	%r8, %rax
	subl	%r8d, %r12d
	jmp	LBB125_139
LBB125_138:                             ##   in Loop: Header=BB125_51 Depth=1
	movq	%rbx, %r9
LBB125_139:                             ##   in Loop: Header=BB125_51 Depth=1
	leal	-1(%r12), %ecx
	testb	$7, %r12b
	je	LBB125_143
## %bb.140:                             ##   in Loop: Header=BB125_51 Depth=1
	movl	%r12d, %esi
	andl	$7, %esi
	xorl	%edx, %edx
	.p2align	4, 0x90
LBB125_141:                             ##   Parent Loop BB125_51 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rax,%rdx), %ebx
	movb	%bl, (%r9,%rdx)
	incq	%rdx
	cmpl	%edx, %esi
	jne	LBB125_141
## %bb.142:                             ##   in Loop: Header=BB125_51 Depth=1
	addq	%rdx, %r9
	addq	%rdx, %rax
	subl	%edx, %r12d
LBB125_143:                             ##   in Loop: Header=BB125_51 Depth=1
	cmpl	$7, %ecx
	jb	LBB125_51
## %bb.144:                             ##   in Loop: Header=BB125_51 Depth=1
	movl	%r12d, %ecx
	xorl	%edx, %edx
	.p2align	4, 0x90
LBB125_145:                             ##   Parent Loop BB125_51 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rax,%rdx), %ebx
	movb	%bl, (%r9,%rdx)
	movzbl	1(%rax,%rdx), %ebx
	movb	%bl, 1(%r9,%rdx)
	movzbl	2(%rax,%rdx), %ebx
	movb	%bl, 2(%r9,%rdx)
	movzbl	3(%rax,%rdx), %ebx
	movb	%bl, 3(%r9,%rdx)
	movzbl	4(%rax,%rdx), %ebx
	movb	%bl, 4(%r9,%rdx)
	movzbl	5(%rax,%rdx), %ebx
	movb	%bl, 5(%r9,%rdx)
	movzbl	6(%rax,%rdx), %ebx
	movb	%bl, 6(%r9,%rdx)
	movzbl	7(%rax,%rdx), %ebx
	movb	%bl, 7(%r9,%rdx)
	addq	$8, %rdx
	cmpl	%edx, %ecx
	jne	LBB125_145
## %bb.146:                             ##   in Loop: Header=BB125_51 Depth=1
	addq	%rdx, %r9
	jmp	LBB125_51
LBB125_147:                             ##   in Loop: Header=BB125_51 Depth=1
	xorl	%edi, %edi
	testb	$1, %r10b
	jne	LBB125_135
	jmp	LBB125_136
LBB125_148:
	movq	8(%r13), %rax
	movq	%rax, (%r13)
LBB125_149:
	movl	%ecx, %eax
LBB125_150:
	movl	%r15d, %edx
	shrl	$5, %edx
	movl	%edx, (%r10)
	leal	-5(%rax), %ecx
	movl	%ecx, (%r11)
	cmpl	$9, %eax
	jle	LBB125_153
	jmp	LBB125_157
	.p2align	4, 0x90
LBB125_151:                             ##   in Loop: Header=BB125_153 Depth=1
	leaq	1(%rax), %rsi
	movq	%rsi, (%r13)
	movzbl	(%rax), %eax
LBB125_152:                             ##   in Loop: Header=BB125_153 Depth=1
	movzbl	%al, %eax
	shll	%cl, %eax
	orl	%eax, %edx
	movl	%edx, (%r10)
	leal	8(%rcx), %esi
	movl	%esi, (%r11)
	cmpl	$17, %ecx
	movl	%esi, %ecx
	jge	LBB125_158
LBB125_153:                             ## =>This Inner Loop Header: Depth=1
	movl	%edx, %eax
	shrl	%cl, %eax
	testl	%eax, %eax
	jne	LBB125_156
## %bb.154:                             ##   in Loop: Header=BB125_153 Depth=1
	movq	(%r13), %rax
	cmpq	8(%r13), %rax
	jb	LBB125_151
## %bb.155:                             ##   in Loop: Header=BB125_153 Depth=1
	xorl	%eax, %eax
	jmp	LBB125_152
LBB125_156:
	movq	8(%r13), %rax
	movq	%rax, (%r13)
LBB125_157:
	movl	%ecx, %esi
LBB125_158:
	andl	$31, %r15d
	movl	%edx, %ebx
	andl	$31, %ebx
	shrl	$5, %edx
	movl	%edx, (%r10)
	leal	-5(%rsi), %eax
	movl	%eax, (%r11)
	cmpl	$8, %esi
	jle	LBB125_161
	jmp	LBB125_165
	.p2align	4, 0x90
LBB125_159:                             ##   in Loop: Header=BB125_161 Depth=1
	leaq	1(%rcx), %rsi
	movq	%rsi, (%r13)
	movzbl	(%rcx), %ecx
LBB125_160:                             ##   in Loop: Header=BB125_161 Depth=1
	movzbl	%cl, %esi
	movl	%eax, %ecx
	shll	%cl, %esi
	orl	%esi, %edx
	movl	%edx, (%r10)
	leal	8(%rax), %ecx
	movl	%ecx, (%r11)
	cmpl	$17, %eax
	movl	%ecx, %eax
	jge	LBB125_166
LBB125_161:                             ## =>This Inner Loop Header: Depth=1
	movl	%edx, %esi
	movl	%eax, %ecx
	shrl	%cl, %esi
	testl	%esi, %esi
	jne	LBB125_164
## %bb.162:                             ##   in Loop: Header=BB125_161 Depth=1
	movq	(%r13), %rcx
	cmpq	8(%r13), %rcx
	jb	LBB125_159
## %bb.163:                             ##   in Loop: Header=BB125_161 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB125_160
LBB125_164:
	movq	8(%r13), %rcx
	movq	%rcx, (%r13)
LBB125_165:
	movl	%eax, %ecx
LBB125_166:
	addl	$257, %r15d                     ## imm = 0x101
	incl	%ebx
	movl	%edx, %r8d
	andl	$15, %r8d
	shrl	$4, %edx
	movl	%edx, (%r10)
	addl	$-4, %ecx
	movl	%ecx, (%r11)
	addl	$4, %r8d
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%xmm0, -2560(%rbp)
	movl	$0, -2545(%rbp)
	xorl	%esi, %esi
	jmp	LBB125_170
	.p2align	4, 0x90
LBB125_167:                             ##   in Loop: Header=BB125_170 Depth=1
	movq	8(%r13), %rdi
	movq	%rdi, (%r13)
LBB125_168:                             ##   in Loop: Header=BB125_170 Depth=1
	movl	%ecx, %edi
LBB125_169:                             ##   in Loop: Header=BB125_170 Depth=1
	movl	%edx, %eax
	shrl	$3, %eax
	movl	%eax, (%r10)
	addl	$-3, %edi
	movl	%edi, (%r11)
	andb	$7, %dl
	movzbl	(%rsi,%r14), %ecx
	movb	%dl, -2560(%rbp,%rcx)
	incq	%rsi
	movl	%eax, %edx
	movl	%edi, %ecx
	cmpq	%r8, %rsi
	je	LBB125_176
LBB125_170:                             ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB125_173 Depth 2
	cmpl	$2, %ecx
	jle	LBB125_173
	jmp	LBB125_168
	.p2align	4, 0x90
LBB125_171:                             ##   in Loop: Header=BB125_173 Depth=2
	leaq	1(%rdi), %rax
	movq	%rax, (%r13)
	movzbl	(%rdi), %edi
LBB125_172:                             ##   in Loop: Header=BB125_173 Depth=2
	movzbl	%dil, %eax
	shll	%cl, %eax
	orl	%eax, %edx
	movl	%edx, (%r10)
	leal	8(%rcx), %edi
	movl	%edi, (%r11)
	cmpl	$17, %ecx
	movl	%edi, %ecx
	jge	LBB125_169
LBB125_173:                             ##   Parent Loop BB125_170 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%edx, %edi
	shrl	%cl, %edi
	testl	%edi, %edi
	jne	LBB125_167
## %bb.174:                             ##   in Loop: Header=BB125_173 Depth=2
	movq	(%r13), %rdi
	cmpq	8(%r13), %rdi
	jb	LBB125_171
## %bb.175:                             ##   in Loop: Header=BB125_173 Depth=2
	xorl	%edi, %edi
	jmp	LBB125_172
LBB125_176:
	movq	%rbx, -2600(%rbp)               ## 8-byte Spill
	leaq	-2072(%rbp), %rdi
	leaq	-2560(%rbp), %rsi
	movl	$19, %edx
	vzeroupper
	callq	__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi
	testl	%eax, %eax
	je	LBB125_13
## %bb.177:
	movq	-2600(%rbp), %rax               ## 8-byte Reload
	leal	(%rax,%r15), %r11d
	movq	-2584(%rbp), %r9                ## 8-byte Reload
	movl	(%r9), %r14d
	xorl	%edi, %edi
	movq	-2576(%rbp), %r10               ## 8-byte Reload
	jmp	LBB125_179
	.p2align	4, 0x90
LBB125_178:                             ##   in Loop: Header=BB125_179 Depth=1
	incl	%edi
	movb	%sil, -2528(%rbp,%rax)
	cmpl	%edi, %r11d
	jle	LBB125_232
LBB125_179:                             ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB125_184 Depth 2
                                        ##     Child Loop BB125_193 Depth 2
                                        ##     Child Loop BB125_216 Depth 2
                                        ##     Child Loop BB125_204 Depth 2
                                        ##     Child Loop BB125_210 Depth 2
	movl	%edi, -2564(%rbp)               ## 4-byte Spill
	cmpl	$16, %r14d
	jge	LBB125_187
## %bb.180:                             ##   in Loop: Header=BB125_179 Depth=1
	movq	(%r13), %rbx
	movq	8(%r13), %rax
	cmpq	%rax, %rbx
	jae	LBB125_191
## %bb.181:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	(%r10), %edx
	movl	%r14d, %ecx
	jmp	LBB125_184
	.p2align	4, 0x90
LBB125_182:                             ##   in Loop: Header=BB125_184 Depth=2
	leaq	1(%rbx), %rsi
	movq	%rsi, (%r13)
	movzbl	(%rbx), %edi
	movq	%rsi, %rbx
LBB125_183:                             ##   in Loop: Header=BB125_184 Depth=2
	movzbl	%dil, %esi
	shll	%cl, %esi
	orl	%esi, %edx
	movl	%edx, (%r10)
	leal	8(%rcx), %r14d
	movl	%r14d, (%r9)
	cmpl	$17, %ecx
	movl	%r14d, %ecx
	jge	LBB125_189
LBB125_184:                             ##   Parent Loop BB125_179 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%edx, %edi
	shrl	%cl, %edi
	testl	%edi, %edi
	jne	LBB125_188
## %bb.185:                             ##   in Loop: Header=BB125_184 Depth=2
	cmpq	%rax, %rbx
	jb	LBB125_182
## %bb.186:                             ##   in Loop: Header=BB125_184 Depth=2
	xorl	%edi, %edi
	jmp	LBB125_183
	.p2align	4, 0x90
LBB125_187:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	(%r10), %edx
	jmp	LBB125_189
	.p2align	4, 0x90
LBB125_188:                             ##   in Loop: Header=BB125_179 Depth=1
	movq	%rax, (%r13)
	movl	%ecx, %r14d
LBB125_189:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	%edx, %eax
	andl	$511, %eax                      ## imm = 0x1FF
	movzwl	-2072(%rbp,%rax,2), %esi
	testl	%esi, %esi
	je	LBB125_192
## %bb.190:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	%esi, %ecx
	shrl	$9, %ecx
	shrl	%cl, %edx
	movl	%edx, (%r10)
	subl	%ecx, %r14d
	movl	%r14d, (%r9)
	andl	$511, %esi                      ## imm = 0x1FF
	cmpl	$18, %esi
	jbe	LBB125_198
	jmp	LBB125_191
	.p2align	4, 0x90
LBB125_192:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	%edx, %eax
	rolw	$8, %ax
	movl	%eax, %ecx
	andl	$3855, %ecx                     ## imm = 0xF0F
	shll	$4, %ecx
	shrl	$4, %eax
	andl	$3855, %eax                     ## imm = 0xF0F
	orl	%ecx, %eax
	movl	%eax, %ecx
	andl	$13107, %ecx                    ## imm = 0x3333
	shrl	$2, %eax
	andl	$13107, %eax                    ## imm = 0x3333
	leal	(%rax,%rcx,4), %eax
	movl	%eax, %ecx
	andl	$21845, %ecx                    ## imm = 0x5555
	shrl	%eax
	andl	$21845, %eax                    ## imm = 0x5555
	leal	(%rax,%rcx,2), %edi
	xorl	%esi, %esi
	.p2align	4, 0x90
LBB125_193:                             ##   Parent Loop BB125_179 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rax
	incq	%rsi
	cmpl	%edi, -976(%rbp,%rax,4)
	jle	LBB125_193
## %bb.194:                             ##   in Loop: Header=BB125_179 Depth=1
	leaq	9(%rsi), %r8
	cmpl	$15, %r8d
	ja	LBB125_191
## %bb.195:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	%r8d, %eax
	movb	$7, %cl
	subb	%sil, %cl
	shrl	%cl, %edi
	movzwl	-1048(%rbp,%rax,2), %ecx
	subq	%rcx, %rdi
	movzwl	-948(%rbp,%rax,2), %eax
	addq	%rdi, %rax
	cmpl	$287, %eax                      ## imm = 0x11F
	jg	LBB125_191
## %bb.196:                             ##   in Loop: Header=BB125_179 Depth=1
	movzbl	-916(%rbp,%rax), %ecx
	movl	%esi, %edi
	subl	%ecx, %edi
	cmpl	$-9, %edi
	jne	LBB125_191
## %bb.197:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	%r8d, %ecx
	shrl	%cl, %edx
	movl	%edx, (%r10)
	subl	%esi, %r14d
	addl	$-9, %r14d
	movl	%r14d, (%r9)
	movzwl	-628(%rbp,%rax,2), %esi
	cmpl	$18, %esi
	ja	LBB125_191
LBB125_198:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	-2564(%rbp), %edi               ## 4-byte Reload
	movslq	%edi, %rax
	cmpl	$15, %esi
	jbe	LBB125_178
## %bb.199:                             ##   in Loop: Header=BB125_179 Depth=1
	cmpw	$17, %si
	je	LBB125_207
## %bb.200:                             ##   in Loop: Header=BB125_179 Depth=1
	cmpw	$16, %si
	jne	LBB125_213
## %bb.201:                             ##   in Loop: Header=BB125_179 Depth=1
	cmpl	$1, %r14d
	jle	LBB125_204
	jmp	LBB125_220
	.p2align	4, 0x90
LBB125_202:                             ##   in Loop: Header=BB125_204 Depth=2
	leaq	1(%rcx), %rsi
	movq	%rsi, (%r13)
	movzbl	(%rcx), %ecx
LBB125_203:                             ##   in Loop: Header=BB125_204 Depth=2
	movzbl	%cl, %esi
	movl	%r14d, %ecx
	shll	%cl, %esi
	orl	%esi, %edx
	movl	%edx, (%r10)
	leal	8(%r14), %ecx
	movl	%ecx, (%r9)
	cmpl	$17, %r14d
	movl	%ecx, %r14d
	jge	LBB125_221
LBB125_204:                             ##   Parent Loop BB125_179 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%edx, %esi
	movl	%r14d, %ecx
	shrl	%cl, %esi
	testl	%esi, %esi
	jne	LBB125_219
## %bb.205:                             ##   in Loop: Header=BB125_204 Depth=2
	movq	(%r13), %rcx
	cmpq	8(%r13), %rcx
	jb	LBB125_202
## %bb.206:                             ##   in Loop: Header=BB125_204 Depth=2
	xorl	%ecx, %ecx
	jmp	LBB125_203
LBB125_207:                             ##   in Loop: Header=BB125_179 Depth=1
	cmpl	$2, %r14d
	jle	LBB125_210
	jmp	LBB125_224
	.p2align	4, 0x90
LBB125_208:                             ##   in Loop: Header=BB125_210 Depth=2
	leaq	1(%rcx), %rsi
	movq	%rsi, (%r13)
	movzbl	(%rcx), %ecx
LBB125_209:                             ##   in Loop: Header=BB125_210 Depth=2
	movzbl	%cl, %esi
	movl	%r14d, %ecx
	shll	%cl, %esi
	orl	%esi, %edx
	movl	%edx, (%r10)
	leal	8(%r14), %esi
	movl	%esi, (%r9)
	cmpl	$17, %r14d
	movl	%esi, %r14d
	jge	LBB125_225
LBB125_210:                             ##   Parent Loop BB125_179 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%edx, %esi
	movl	%r14d, %ecx
	shrl	%cl, %esi
	testl	%esi, %esi
	jne	LBB125_223
## %bb.211:                             ##   in Loop: Header=BB125_210 Depth=2
	movq	(%r13), %rcx
	cmpq	8(%r13), %rcx
	jb	LBB125_208
## %bb.212:                             ##   in Loop: Header=BB125_210 Depth=2
	xorl	%ecx, %ecx
	jmp	LBB125_209
LBB125_213:                             ##   in Loop: Header=BB125_179 Depth=1
	cmpl	$6, %r14d
	jle	LBB125_216
	jmp	LBB125_227
	.p2align	4, 0x90
LBB125_214:                             ##   in Loop: Header=BB125_216 Depth=2
	leaq	1(%rcx), %rsi
	movq	%rsi, (%r13)
	movzbl	(%rcx), %ecx
LBB125_215:                             ##   in Loop: Header=BB125_216 Depth=2
	movzbl	%cl, %esi
	movl	%r14d, %ecx
	shll	%cl, %esi
	orl	%esi, %edx
	movl	%edx, (%r10)
	leal	8(%r14), %esi
	movl	%esi, (%r9)
	cmpl	$17, %r14d
	movl	%esi, %r14d
	jge	LBB125_228
LBB125_216:                             ##   Parent Loop BB125_179 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%edx, %esi
	movl	%r14d, %ecx
	shrl	%cl, %esi
	testl	%esi, %esi
	jne	LBB125_226
## %bb.217:                             ##   in Loop: Header=BB125_216 Depth=2
	movq	(%r13), %rcx
	cmpq	8(%r13), %rcx
	jb	LBB125_214
## %bb.218:                             ##   in Loop: Header=BB125_216 Depth=2
	xorl	%ecx, %ecx
	jmp	LBB125_215
LBB125_219:                             ##   in Loop: Header=BB125_179 Depth=1
	movq	8(%r13), %rcx
	movq	%rcx, (%r13)
LBB125_220:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	%r14d, %ecx
LBB125_221:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	%edx, %esi
	shrl	$2, %esi
	movl	%esi, (%r10)
	movl	%ecx, %r14d
	addl	$-2, %r14d
	movl	%r14d, (%r9)
	testl	%edi, %edi
	je	LBB125_191
## %bb.222:                             ##   in Loop: Header=BB125_179 Depth=1
	andl	$3, %edx
	addl	$3, %edx
	leaq	-2528(%rbp), %rcx
	movb	-1(%rax,%rcx), %cl
	movl	%edx, %r12d
	movl	-2564(%rbp), %edi               ## 4-byte Reload
	jmp	LBB125_230
LBB125_223:                             ##   in Loop: Header=BB125_179 Depth=1
	movq	8(%r13), %rcx
	movq	%rcx, (%r13)
LBB125_224:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	%r14d, %esi
LBB125_225:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	%edx, %r12d
	andl	$7, %r12d
	shrl	$3, %edx
	movl	%edx, (%r10)
	addl	$-3, %esi
	movl	%esi, (%r9)
	addl	$3, %r12d
	jmp	LBB125_229
LBB125_226:                             ##   in Loop: Header=BB125_179 Depth=1
	movq	8(%r13), %rcx
	movq	%rcx, (%r13)
LBB125_227:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	%r14d, %esi
LBB125_228:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	%edx, %r12d
	andl	$127, %r12d
	shrl	$7, %edx
	movl	%edx, (%r10)
	addl	$-7, %esi
	movl	%esi, (%r9)
	addl	$11, %r12d
LBB125_229:                             ##   in Loop: Header=BB125_179 Depth=1
	xorl	%ecx, %ecx
	movl	%esi, %r14d
LBB125_230:                             ##   in Loop: Header=BB125_179 Depth=1
	movl	%r11d, %edx
	subl	%edi, %edx
	cmpl	%r12d, %edx
	jl	LBB125_191
## %bb.231:                             ##   in Loop: Header=BB125_179 Depth=1
	leaq	(%rax,%rbp), %rdi
	addq	$-2528, %rdi                    ## imm = 0xF620
	movl	%r12d, %edx
	movzbl	%cl, %esi
	movl	%r11d, %ebx
	callq	_memset
	movl	%ebx, %r11d
	movq	-2576(%rbp), %r10               ## 8-byte Reload
	movq	-2584(%rbp), %r9                ## 8-byte Reload
	movl	-2564(%rbp), %edi               ## 4-byte Reload
	addl	%r12d, %edi
	cmpl	%edi, %r11d
	jg	LBB125_179
LBB125_232:
	jne	LBB125_191
## %bb.233:
	movq	-2616(%rbp), %rdi               ## 8-byte Reload
	leaq	-2528(%rbp), %rsi
	movl	%r15d, %edx
	callq	__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi
	testl	%eax, %eax
	leaq	__ZZL27stbi__compute_huffman_codesP10stbi__zbufE15length_dezigzag(%rip), %r14
	je	LBB125_13
## %bb.234:
	movl	%r15d, %eax
	leaq	(%rax,%rbp), %rsi
	addq	$-2528, %rsi                    ## imm = 0xF620
	movq	-2608(%rbp), %rdi               ## 8-byte Reload
	movq	-2600(%rbp), %rdx               ## 8-byte Reload
                                        ## kill: def $edx killed $edx killed $rdx
	callq	__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi
	testl	%eax, %eax
	jne	LBB125_49
	jmp	LBB125_13
LBB125_235:
	movq	8(%r13), %rdx
	movq	%rdx, (%r13)
LBB125_236:
	movl	%ecx, %edx
LBB125_237:
	movl	%eax, %ecx
	shrl	%cl, %r15d
	movl	%r15d, (%r10)
	subl	%eax, %edx
	movl	%edx, (%r11)
	movl	%edx, %ecx
LBB125_238:
	xorl	%edx, %edx
	testl	%ecx, %ecx
	jle	LBB125_242
	.p2align	4, 0x90
LBB125_239:                             ## =>This Inner Loop Header: Depth=1
	movl	%ecx, %eax
	movb	%r15b, -2072(%rbp,%rdx)
	incq	%rdx
	shrl	$8, %r15d
	leal	-8(%rax), %ecx
	cmpl	$8, %eax
	ja	LBB125_239
## %bb.240:
	movl	%r15d, (%r10)
	movl	%ecx, (%r11)
	testl	%ecx, %ecx
	jne	LBB125_274
## %bb.241:
	cmpl	$3, %edx
	movq	-2592(%rbp), %r15               ## 8-byte Reload
	jbe	LBB125_243
	jmp	LBB125_257
LBB125_242:
	testl	%ecx, %ecx
	movq	-2592(%rbp), %r15               ## 8-byte Reload
	js	LBB125_274
LBB125_243:
	movq	(%r13), %rcx
	movq	8(%r13), %rax
	movl	%edx, %r8d
	cmpq	%rax, %rcx
	jae	LBB125_246
## %bb.244:
	testb	$1, %r8b
	jne	LBB125_247
## %bb.245:
	movq	%r8, %rdx
	jmp	LBB125_251
LBB125_246:
	leaq	(%r8,%rbp), %rdi
	addq	$-2072, %rdi                    ## imm = 0xF7E8
	movl	$3, %esi
	subl	%r8d, %esi
	incq	%rsi
	movq	%r9, %rbx
	vzeroupper
	callq	___bzero
	movq	%rbx, %r9
	jmp	LBB125_257
LBB125_247:
	cmpq	%rax, %rcx
	jae	LBB125_249
## %bb.248:
	leaq	1(%rcx), %rdx
	movq	%rdx, (%r13)
	movb	(%rcx), %sil
	movq	%rdx, %rcx
	jmp	LBB125_250
LBB125_249:
	xorl	%esi, %esi
LBB125_250:
	leaq	1(%r8), %rdx
	movb	%sil, -2072(%rbp,%r8)
LBB125_251:
	cmpl	$3, %r8d
	jne	LBB125_253
	jmp	LBB125_257
	.p2align	4, 0x90
LBB125_252:                             ##   in Loop: Header=BB125_253 Depth=1
	leaq	1(%rcx), %rdi
	movq	%rdi, (%r13)
	movzbl	(%rcx), %esi
	movq	%rdi, %rcx
	movb	%sil, -2071(%rbp,%rdx)
	addq	$2, %rdx
	cmpq	$4, %rdx
	je	LBB125_257
LBB125_253:                             ## =>This Inner Loop Header: Depth=1
	cmpq	%rax, %rcx
	jae	LBB125_255
## %bb.254:                             ##   in Loop: Header=BB125_253 Depth=1
	leaq	1(%rcx), %rdi
	movq	%rdi, (%r13)
	movzbl	(%rcx), %esi
	movq	%rdi, %rcx
	movb	%sil, -2072(%rbp,%rdx)
	cmpq	%rax, %rcx
	jb	LBB125_252
	jmp	LBB125_256
	.p2align	4, 0x90
LBB125_255:                             ##   in Loop: Header=BB125_253 Depth=1
	xorl	%esi, %esi
	movb	%sil, -2072(%rbp,%rdx)
	cmpq	%rax, %rcx
	jb	LBB125_252
LBB125_256:                             ##   in Loop: Header=BB125_253 Depth=1
	xorl	%esi, %esi
	movb	%sil, -2071(%rbp,%rdx)
	addq	$2, %rdx
	cmpq	$4, %rdx
	jne	LBB125_253
LBB125_257:
	movzwl	-2072(%rbp), %r14d
	movzwl	-2070(%rbp), %eax
	movl	%r14d, %ecx
	xorl	$65535, %ecx                    ## imm = 0xFFFF
	cmpl	%ecx, %eax
	jne	LBB125_274
## %bb.258:
	movq	(%r13), %rsi
	leaq	(%rsi,%r14), %rax
	cmpq	8(%r13), %rax
	ja	LBB125_272
## %bb.259:
	leaq	(%r9,%r14), %rcx
	movq	40(%r13), %rax
	cmpq	%rax, %rcx
	jbe	LBB125_267
## %bb.260:
	cmpl	$0, 48(%r13)
	je	LBB125_273
## %bb.261:
	movq	32(%r13), %rdi
	subq	%rdi, %r9
	movl	%r9d, %ecx
	addl	%r14d, %ecx
	jb	LBB125_275
## %bb.262:
	subl	%edi, %eax
	cmpl	%eax, %ecx
	jbe	LBB125_265
	.p2align	4, 0x90
LBB125_263:                             ## =>This Inner Loop Header: Depth=1
	testl	%eax, %eax
	js	LBB125_275
## %bb.264:                             ##   in Loop: Header=BB125_263 Depth=1
	addl	%eax, %eax
	cmpl	%eax, %ecx
	ja	LBB125_263
LBB125_265:
	movq	%r9, %rbx
	movl	%eax, %r15d
	movq	%r15, %rsi
	vzeroupper
	callq	_realloc
	testq	%rax, %rax
	je	LBB125_275
## %bb.266:
	movq	%rax, 32(%r13)
	movq	%rbx, %r9
	movl	%r9d, %r9d
	addq	%rax, %r9
	movq	%r9, 24(%r13)
	addq	%rax, %r15
	movq	%r15, 40(%r13)
	movq	(%r13), %rsi
	movq	-2592(%rbp), %r15               ## 8-byte Reload
LBB125_267:
	movq	%r9, %rdi
	movq	%r14, %rdx
	vzeroupper
	callq	_memcpy
	addq	%r14, (%r13)
	addq	24(%r13), %r14
	movq	%r14, 24(%r13)
	movq	%r14, %r9
	movq	-2584(%rbp), %r11               ## 8-byte Reload
	movq	-2576(%rbp), %r10               ## 8-byte Reload
	leaq	__ZZL27stbi__compute_huffman_codesP10stbi__zbufE15length_dezigzag(%rip), %r14
	testb	$1, %r15b
	jne	LBB125_270
LBB125_268:
	movl	(%r11), %ecx
	movl	(%r10), %edi
	testl	%ecx, %ecx
	jg	LBB125_22
	jmp	LBB125_18
LBB125_269:
	movq	%r9, 24(%r13)
	movq	-2592(%rbp), %r15               ## 8-byte Reload
	testb	$1, %r15b
	je	LBB125_268
	jmp	LBB125_270
	.p2align	4, 0x90
LBB125_16:                              ##   in Loop: Header=BB125_18 Depth=1
	leaq	1(%rax), %rdx
	movq	%rdx, (%r13)
	movzbl	(%rax), %eax
LBB125_17:                              ##   in Loop: Header=BB125_18 Depth=1
	movzbl	%al, %eax
	shll	%cl, %eax
	orl	%eax, %edi
	movl	%edi, (%r10)
	leal	8(%rcx), %eax
	movl	%eax, (%r11)
	cmpl	$17, %ecx
	movl	%eax, %ecx
	jge	LBB125_30
LBB125_18:                              ## =>This Inner Loop Header: Depth=1
	movl	%edi, %eax
	shrl	%cl, %eax
	testl	%eax, %eax
	jne	LBB125_21
## %bb.19:                              ##   in Loop: Header=BB125_18 Depth=1
	movq	(%r13), %rax
	cmpq	8(%r13), %rax
	jb	LBB125_16
## %bb.20:                              ##   in Loop: Header=BB125_18 Depth=1
	xorl	%eax, %eax
	jmp	LBB125_17
LBB125_21:
	movq	8(%r13), %rax
	movq	%rax, (%r13)
	jmp	LBB125_22
LBB125_30:
	movq	%rdi, -2592(%rbp)               ## 8-byte Spill
	movl	%edi, %edx
	shrl	%edx
	decl	%eax
	jmp	LBB125_31
LBB125_22:
	movl	%edi, %edx
	shrl	%edx
	movl	%edx, (%r10)
	leal	-1(%rcx), %eax
	movl	%eax, (%r11)
	cmpl	$2, %ecx
	movq	%rdi, -2592(%rbp)               ## 8-byte Spill
	jle	LBB125_25
	jmp	LBB125_31
	.p2align	4, 0x90
LBB125_23:                              ##   in Loop: Header=BB125_25 Depth=1
	leaq	1(%rcx), %rsi
	movq	%rsi, (%r13)
	movzbl	(%rcx), %ecx
LBB125_24:                              ##   in Loop: Header=BB125_25 Depth=1
	movzbl	%cl, %esi
	movl	%eax, %ecx
	shll	%cl, %esi
	orl	%esi, %edx
	movl	%edx, (%r10)
	leal	8(%rax), %ecx
	movl	%ecx, (%r11)
	cmpl	$17, %eax
	movl	%ecx, %eax
	jge	LBB125_29
LBB125_25:                              ## =>This Inner Loop Header: Depth=1
	movl	%edx, %esi
	movl	%eax, %ecx
	shrl	%cl, %esi
	testl	%esi, %esi
	jne	LBB125_28
## %bb.26:                              ##   in Loop: Header=BB125_25 Depth=1
	movq	(%r13), %rcx
	cmpq	8(%r13), %rcx
	jb	LBB125_23
## %bb.27:                              ##   in Loop: Header=BB125_25 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB125_24
LBB125_28:
	movq	8(%r13), %rcx
	movq	%rcx, (%r13)
	jmp	LBB125_31
LBB125_29:
	movl	%ecx, %eax
LBB125_31:
	movl	%edx, %r15d
	shrl	$2, %r15d
	movl	%r15d, (%r10)
	leal	-2(%rax), %ecx
	movl	%ecx, (%r11)
	andl	$3, %edx
	je	LBB125_40
## %bb.32:
	cmpl	$1, %edx
	je	LBB125_47
## %bb.33:
	cmpl	$3, %edx
	jne	LBB125_34
	jmp	LBB125_13
LBB125_191:
	leaq	L_.str.150(%rip), %rcx
	jmp	LBB125_12
LBB125_275:
	leaq	L_.str.131(%rip), %rcx
	jmp	LBB125_12
LBB125_90:
	leaq	L_.str.152(%rip), %rcx
	jmp	LBB125_12
LBB125_10:
	leaq	L_.str.144(%rip), %rcx
	jmp	LBB125_12
LBB125_11:
	leaq	L_.str.145(%rip), %rcx
	jmp	LBB125_12
LBB125_273:
	leaq	L_.str.148(%rip), %rcx
	jmp	LBB125_12
LBB125_271:
	leaq	L_.str.153(%rip), %rcx
	jmp	LBB125_12
LBB125_274:
	leaq	L_.str.146(%rip), %rcx
	jmp	LBB125_12
LBB125_272:
	leaq	L_.str.147(%rip), %rcx
LBB125_12:
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	vzeroupper
	callq	*(%rdi)
	movq	%rcx, (%rax)
LBB125_13:
	xorl	%eax, %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-48(%rbp), %rcx
	jne	LBB125_15
LBB125_276:
	addq	$2584, %rsp                     ## imm = 0xA18
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
LBB125_270:
	movl	$1, %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-48(%rbp), %rcx
	je	LBB125_276
LBB125_15:
	vzeroupper
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_zlib_decode_malloc        ## -- Begin function stbi_zlib_decode_malloc
	.p2align	4, 0x90
_stbi_zlib_decode_malloc:               ## @stbi_zlib_decode_malloc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movl	$4104, %eax                     ## imm = 0x1008
	callq	____chkstk_darwin
	subq	%rax, %rsp
	popq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movl	%esi, %r15d
	movq	%rdi, %rbx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	$16384, %edi                    ## imm = 0x4000
	callq	_malloc
	testq	%rax, %rax
	je	LBB126_6
## %bb.1:
	movq	%rbx, -4128(%rbp)
	movslq	%r15d, %rcx
	addq	%rbx, %rcx
	movq	%rcx, -4120(%rbp)
	leaq	-4128(%rbp), %rdi
	movq	%rax, %rsi
	movl	$16384, %edx                    ## imm = 0x4000
	movl	$1, %ecx
	movl	$1, %r8d
	callq	__ZL13stbi__do_zlibP10stbi__zbufPciii
	testl	%eax, %eax
	je	LBB126_5
## %bb.2:
	testq	%r14, %r14
	je	LBB126_3
## %bb.4:
	movl	-4104(%rbp), %ecx
	movq	-4096(%rbp), %rax
	subl	%eax, %ecx
	movl	%ecx, (%r14)
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-32(%rbp), %rcx
	je	LBB126_8
	jmp	LBB126_9
LBB126_5:
	movq	-4096(%rbp), %rdi
	callq	_free
LBB126_6:
	xorl	%eax, %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-32(%rbp), %rcx
	jne	LBB126_9
LBB126_8:
	addq	$4104, %rsp                     ## imm = 0x1008
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB126_3:
	movq	-4096(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-32(%rbp), %rcx
	je	LBB126_8
LBB126_9:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_zlib_decode_malloc_guesssize_headerflag ## -- Begin function stbi_zlib_decode_malloc_guesssize_headerflag
	.p2align	4, 0x90
_stbi_zlib_decode_malloc_guesssize_headerflag: ## @stbi_zlib_decode_malloc_guesssize_headerflag
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	$4104, %eax                     ## imm = 0x1008
	callq	____chkstk_darwin
	subq	%rax, %rsp
	popq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r15d
	movq	%rcx, %r14
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	%edx, %rdi
	callq	_malloc
	testq	%rax, %rax
	je	LBB127_6
## %bb.1:
	movq	%rbx, -4144(%rbp)
	movslq	%r13d, %rcx
	addq	%rbx, %rcx
	movq	%rcx, -4136(%rbp)
	leaq	-4144(%rbp), %rdi
	movq	%rax, %rsi
	movl	%r12d, %edx
	movl	$1, %ecx
	movl	%r15d, %r8d
	callq	__ZL13stbi__do_zlibP10stbi__zbufPciii
	testl	%eax, %eax
	je	LBB127_5
## %bb.2:
	testq	%r14, %r14
	je	LBB127_3
## %bb.4:
	movl	-4120(%rbp), %ecx
	movq	-4112(%rbp), %rax
	subl	%eax, %ecx
	movl	%ecx, (%r14)
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-48(%rbp), %rcx
	je	LBB127_8
	jmp	LBB127_9
LBB127_5:
	movq	-4112(%rbp), %rdi
	callq	_free
LBB127_6:
	xorl	%eax, %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-48(%rbp), %rcx
	jne	LBB127_9
LBB127_8:
	addq	$4104, %rsp                     ## imm = 0x1008
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB127_3:
	movq	-4112(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-48(%rbp), %rcx
	je	LBB127_8
LBB127_9:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_zlib_decode_buffer        ## -- Begin function stbi_zlib_decode_buffer
	.p2align	4, 0x90
_stbi_zlib_decode_buffer:               ## @stbi_zlib_decode_buffer
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	movl	$4104, %eax                     ## imm = 0x1008
	callq	____chkstk_darwin
	subq	%rax, %rsp
	popq	%rax
	.cfi_offset %rbx, -24
	movl	%esi, %eax
	movq	%rdi, %rsi
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, -16(%rbp)
	movq	%rdx, -4112(%rbp)
	movslq	%ecx, %rcx
	addq	%rdx, %rcx
	movq	%rcx, -4104(%rbp)
	leaq	-4112(%rbp), %rdi
	xorl	%ebx, %ebx
	movl	%eax, %edx
	xorl	%ecx, %ecx
	movl	$1, %r8d
	callq	__ZL13stbi__do_zlibP10stbi__zbufPciii
	movl	-4088(%rbp), %ecx
	subl	-4080(%rbp), %ecx
	cmpl	$1, %eax
	sbbl	%ebx, %ebx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	jne	LBB128_2
## %bb.1:
	orl	%ecx, %ebx
	movl	%ebx, %eax
	addq	$4104, %rsp                     ## imm = 0x1008
	popq	%rbx
	popq	%rbp
	retq
LBB128_2:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_zlib_decode_noheader_malloc ## -- Begin function stbi_zlib_decode_noheader_malloc
	.p2align	4, 0x90
_stbi_zlib_decode_noheader_malloc:      ## @stbi_zlib_decode_noheader_malloc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movl	$4104, %eax                     ## imm = 0x1008
	callq	____chkstk_darwin
	subq	%rax, %rsp
	popq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movl	%esi, %r15d
	movq	%rdi, %rbx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	$16384, %edi                    ## imm = 0x4000
	callq	_malloc
	testq	%rax, %rax
	je	LBB129_6
## %bb.1:
	movq	%rbx, -4128(%rbp)
	movslq	%r15d, %rcx
	addq	%rbx, %rcx
	movq	%rcx, -4120(%rbp)
	leaq	-4128(%rbp), %rdi
	movq	%rax, %rsi
	movl	$16384, %edx                    ## imm = 0x4000
	movl	$1, %ecx
	xorl	%r8d, %r8d
	callq	__ZL13stbi__do_zlibP10stbi__zbufPciii
	testl	%eax, %eax
	je	LBB129_5
## %bb.2:
	testq	%r14, %r14
	je	LBB129_3
## %bb.4:
	movl	-4104(%rbp), %ecx
	movq	-4096(%rbp), %rax
	subl	%eax, %ecx
	movl	%ecx, (%r14)
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-32(%rbp), %rcx
	je	LBB129_8
	jmp	LBB129_9
LBB129_5:
	movq	-4096(%rbp), %rdi
	callq	_free
LBB129_6:
	xorl	%eax, %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-32(%rbp), %rcx
	jne	LBB129_9
LBB129_8:
	addq	$4104, %rsp                     ## imm = 0x1008
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB129_3:
	movq	-4096(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-32(%rbp), %rcx
	je	LBB129_8
LBB129_9:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_zlib_decode_noheader_buffer ## -- Begin function stbi_zlib_decode_noheader_buffer
	.p2align	4, 0x90
_stbi_zlib_decode_noheader_buffer:      ## @stbi_zlib_decode_noheader_buffer
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	movl	$4104, %eax                     ## imm = 0x1008
	callq	____chkstk_darwin
	subq	%rax, %rsp
	popq	%rax
	.cfi_offset %rbx, -24
	movl	%esi, %eax
	movq	%rdi, %rsi
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, -16(%rbp)
	movq	%rdx, -4112(%rbp)
	movslq	%ecx, %rcx
	addq	%rdx, %rcx
	movq	%rcx, -4104(%rbp)
	leaq	-4112(%rbp), %rdi
	xorl	%ebx, %ebx
	movl	%eax, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	callq	__ZL13stbi__do_zlibP10stbi__zbufPciii
	movl	-4088(%rbp), %ecx
	subl	-4080(%rbp), %ecx
	cmpl	$1, %eax
	sbbl	%ebx, %ebx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	jne	LBB130_2
## %bb.1:
	orl	%ecx, %ebx
	movl	%ebx, %eax
	addq	$4104, %rsp                     ## imm = 0x1008
	popq	%rbx
	popq	%rbp
	retq
LBB130_2:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_set_unpremultiply_on_load ## -- Begin function stbi_set_unpremultiply_on_load
	.p2align	4, 0x90
_stbi_set_unpremultiply_on_load:        ## @stbi_set_unpremultiply_on_load
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, __ZL34stbi__unpremultiply_on_load_global(%rip)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_convert_iphone_png_to_rgb ## -- Begin function stbi_convert_iphone_png_to_rgb
	.p2align	4, 0x90
_stbi_convert_iphone_png_to_rgb:        ## @stbi_convert_iphone_png_to_rgb
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, __ZL27stbi__de_iphone_flag_global(%rip)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	__Z34stbi__unpremultiply_on_load_threadi ## -- Begin function _Z34stbi__unpremultiply_on_load_threadi
	.p2align	4, 0x90
__Z34stbi__unpremultiply_on_load_threadi: ## @_Z34stbi__unpremultiply_on_load_threadi
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, %ecx
	movq	__ZL33stbi__unpremultiply_on_load_local@TLVP(%rip), %rdi
	callq	*(%rdi)
	movl	%ecx, (%rax)
	movq	__ZL31stbi__unpremultiply_on_load_set@TLVP(%rip), %rdi
	callq	*(%rdi)
	movb	$1, (%rax)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_convert_iphone_png_to_rgb_thread ## -- Begin function stbi_convert_iphone_png_to_rgb_thread
	.p2align	4, 0x90
_stbi_convert_iphone_png_to_rgb_thread: ## @stbi_convert_iphone_png_to_rgb_thread
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, %ecx
	movq	__ZL26stbi__de_iphone_flag_local@TLVP(%rip), %rdi
	callq	*(%rdi)
	movl	%ecx, (%rax)
	movq	__ZL24stbi__de_iphone_flag_set@TLVP(%rip), %rdi
	callq	*(%rdi)
	movb	$1, (%rax)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_info                      ## -- Begin function stbi_info
	.p2align	4, 0x90
_stbi_info:                             ## @stbi_info
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r14
	movq	%rdx, %r15
	movq	%rsi, %r12
	leaq	L_.str.5(%rip), %rsi
	callq	_fopen
	testq	%rax, %rax
	je	LBB135_1
## %bb.3:
	movq	%rax, %rbx
	movq	%rax, %rdi
	movq	%r12, %rsi
	movq	%r15, %rdx
	movq	%r14, %rcx
	callq	_stbi_info_from_file
	movl	%eax, %r14d
	movq	%rbx, %rdi
	callq	_fclose
	movl	%r14d, %eax
	jmp	LBB135_2
LBB135_1:
	leaq	L_.str.22(%rip), %rcx
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
LBB135_2:
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_info_from_file            ## -- Begin function stbi_info_from_file
	.p2align	4, 0x90
_stbi_info_from_file:                   ## @stbi_info_from_file
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$296, %rsp                      ## imm = 0x128
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, -280(%rbp)                ## 8-byte Spill
	movq	%rdx, %r12
	movq	%rsi, %r13
	movq	%rdi, %r15
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	callq	_ftell
	movq	%rax, -288(%rbp)                ## 8-byte Spill
	vmovups	__ZL21stbi__stdio_callbacks(%rip), %xmm0
	vmovups	%xmm0, -256(%rbp)
	movq	__ZL21stbi__stdio_callbacks+16(%rip), %rax
	movq	%rax, -240(%rbp)
	movq	%r15, -232(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -224(%rbp)
	movl	$0, -88(%rbp)
	leaq	-216(%rbp), %rbx
	movq	%rbx, -64(%rbp)
	movq	%rbx, -80(%rbp)
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movl	$128, %edx
	callq	*-256(%rbp)
	movl	-80(%rbp), %ecx
	subl	-64(%rbp), %ecx
	addl	%ecx, -88(%rbp)
	testl	%eax, %eax
	je	LBB136_1
## %bb.2:
	movq	%rbx, -80(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-216, %rax
	jmp	LBB136_3
LBB136_1:
	movl	$0, -224(%rbp)
	movq	%rbx, -80(%rbp)
	leaq	-215(%rbp), %rax
	movb	$0, -216(%rbp)
LBB136_3:
	movq	%rax, -72(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-272(%rbp), %rax
	movq	%rax, -328(%rbp)
	leaq	-328(%rbp), %rdi
	xorl	%r14d, %r14d
	movl	$2, %esi
	xorl	%edx, %edx
	callq	__ZL20stbi__parse_png_fileP9stbi__pngii
	testl	%eax, %eax
	je	LBB136_11
## %bb.4:
	testq	%r13, %r13
	je	LBB136_6
## %bb.5:
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, (%r13)
LBB136_6:
	testq	%r12, %r12
	movq	-280(%rbp), %rcx                ## 8-byte Reload
	je	LBB136_8
## %bb.7:
	movq	-328(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, (%r12)
LBB136_8:
	testq	%rcx, %rcx
	je	LBB136_10
## %bb.9:
	movq	-328(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, (%rcx)
LBB136_10:
	movl	$1, %r14d
	jmp	LBB136_12
LBB136_11:
	movq	-328(%rbp), %rax
	vmovups	208(%rax), %xmm0
	vmovups	%xmm0, 192(%rax)
	leaq	L_.str.111(%rip), %rcx
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
LBB136_12:
	movq	%r15, %rdi
	movq	-288(%rbp), %rsi                ## 8-byte Reload
	xorl	%edx, %edx
	callq	_fseek
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB136_14
## %bb.13:
	movl	%r14d, %eax
	addq	$296, %rsp                      ## imm = 0x128
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB136_14:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_is_16_bit                 ## -- Begin function stbi_is_16_bit
	.p2align	4, 0x90
_stbi_is_16_bit:                        ## @stbi_is_16_bit
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	leaq	L_.str.5(%rip), %rsi
	callq	_fopen
	testq	%rax, %rax
	je	LBB137_1
## %bb.3:
	movq	%rax, %rbx
	movq	%rax, %rdi
	callq	_stbi_is_16_bit_from_file
	movl	%eax, %r14d
	movq	%rbx, %rdi
	callq	_fclose
	movl	%r14d, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
LBB137_1:
	leaq	L_.str.22(%rip), %rcx
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_is_16_bit_from_file       ## -- Begin function stbi_is_16_bit_from_file
	.p2align	4, 0x90
_stbi_is_16_bit_from_file:              ## @stbi_is_16_bit_from_file
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$280, %rsp                      ## imm = 0x118
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdi, %r15
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	callq	_ftell
	movq	%rax, %r14
	vmovups	__ZL21stbi__stdio_callbacks(%rip), %xmm0
	vmovups	%xmm0, -240(%rbp)
	movq	__ZL21stbi__stdio_callbacks+16(%rip), %rax
	movq	%rax, -224(%rbp)
	movq	%r15, -216(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -208(%rbp)
	movl	$0, -72(%rbp)
	leaq	-200(%rbp), %rbx
	movq	%rbx, -48(%rbp)
	movq	%rbx, -64(%rbp)
	movq	%r15, %rdi
	movq	%rbx, %rsi
	movl	$128, %edx
	callq	*-240(%rbp)
	movl	-64(%rbp), %ecx
	subl	-48(%rbp), %ecx
	addl	%ecx, -72(%rbp)
	testl	%eax, %eax
	je	LBB138_1
## %bb.2:
	movq	%rbx, -64(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-200, %rax
	jmp	LBB138_3
LBB138_1:
	movl	$0, -208(%rbp)
	movq	%rbx, -64(%rbp)
	leaq	-199(%rbp), %rax
	movb	$0, -200(%rbp)
LBB138_3:
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	leaq	-256(%rbp), %rax
	movq	%rax, -296(%rbp)
	leaq	-296(%rbp), %rdi
	movl	$2, %esi
	xorl	%edx, %edx
	callq	__ZL20stbi__parse_png_fileP9stbi__pngii
	testl	%eax, %eax
	je	LBB138_5
## %bb.4:
	cmpl	$16, -264(%rbp)
	jne	LBB138_5
## %bb.8:
	movl	$1, %ebx
	jmp	LBB138_6
LBB138_5:
	movq	-296(%rbp), %rax
	vmovups	208(%rax), %xmm0
	vmovups	%xmm0, 192(%rax)
	xorl	%ebx, %ebx
LBB138_6:
	movq	%r15, %rdi
	movq	%r14, %rsi
	xorl	%edx, %edx
	callq	_fseek
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-32(%rbp), %rax
	jne	LBB138_9
## %bb.7:
	movl	%ebx, %eax
	addq	$280, %rsp                      ## imm = 0x118
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB138_9:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_info_from_memory          ## -- Begin function stbi_info_from_memory
	.p2align	4, 0x90
_stbi_info_from_memory:                 ## @stbi_info_from_memory
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$272, %rsp                      ## imm = 0x110
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movq	%rdx, %r12
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	$0, -248(%rbp)
	movl	$0, -216(%rbp)
	movl	$0, -80(%rbp)
	movq	%rdi, -56(%rbp)
	movq	%rdi, -72(%rbp)
	movslq	%esi, %rax
	addq	%rdi, %rax
	movq	%rax, -48(%rbp)
	movq	%rax, -64(%rbp)
	leaq	-264(%rbp), %rax
	movq	%rax, -304(%rbp)
	leaq	-304(%rbp), %rdi
	xorl	%ebx, %ebx
	movl	$2, %esi
	xorl	%edx, %edx
	callq	__ZL20stbi__parse_png_fileP9stbi__pngii
	testl	%eax, %eax
	je	LBB139_8
## %bb.1:
	testq	%r12, %r12
	je	LBB139_3
## %bb.2:
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, (%r12)
LBB139_3:
	testq	%r15, %r15
	je	LBB139_5
## %bb.4:
	movq	-304(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, (%r15)
LBB139_5:
	testq	%r14, %r14
	je	LBB139_7
## %bb.6:
	movq	-304(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, (%r14)
LBB139_7:
	movl	$1, %ebx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	jne	LBB139_11
LBB139_10:
	movl	%ebx, %eax
	addq	$272, %rsp                      ## imm = 0x110
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB139_8:
	movq	-304(%rbp), %rax
	vmovups	208(%rax), %xmm0
	vmovups	%xmm0, 192(%rax)
	leaq	L_.str.111(%rip), %rcx
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	LBB139_10
LBB139_11:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_info_from_callbacks       ## -- Begin function stbi_info_from_callbacks
	.p2align	4, 0x90
_stbi_info_from_callbacks:              ## @stbi_info_from_callbacks
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$272, %rsp                      ## imm = 0x110
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movq	%rdx, %r12
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	16(%rdi), %rax
	movq	%rax, -232(%rbp)
	vmovups	(%rdi), %xmm0
	vmovups	%xmm0, -248(%rbp)
	movq	%rsi, -224(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -216(%rbp)
	movl	$0, -80(%rbp)
	leaq	-208(%rbp), %rbx
	movq	%rbx, -56(%rbp)
	movq	%rbx, -72(%rbp)
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movl	$128, %edx
	callq	*-248(%rbp)
	movl	-72(%rbp), %ecx
	subl	-56(%rbp), %ecx
	addl	%ecx, -80(%rbp)
	testl	%eax, %eax
	je	LBB140_1
## %bb.2:
	movq	%rbx, -72(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-208, %rax
	jmp	LBB140_3
LBB140_1:
	movl	$0, -216(%rbp)
	movq	%rbx, -72(%rbp)
	leaq	-207(%rbp), %rax
	movb	$0, -208(%rbp)
LBB140_3:
	movq	%rax, -64(%rbp)
	movq	%rax, -48(%rbp)
	leaq	-264(%rbp), %rax
	movq	%rax, -304(%rbp)
	leaq	-304(%rbp), %rdi
	xorl	%ebx, %ebx
	movl	$2, %esi
	xorl	%edx, %edx
	callq	__ZL20stbi__parse_png_fileP9stbi__pngii
	testl	%eax, %eax
	je	LBB140_11
## %bb.4:
	testq	%r12, %r12
	je	LBB140_6
## %bb.5:
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, (%r12)
LBB140_6:
	testq	%r15, %r15
	je	LBB140_8
## %bb.7:
	movq	-304(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, (%r15)
LBB140_8:
	testq	%r14, %r14
	je	LBB140_10
## %bb.9:
	movq	-304(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, (%r14)
LBB140_10:
	movl	$1, %ebx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	jne	LBB140_14
LBB140_13:
	movl	%ebx, %eax
	addq	$272, %rsp                      ## imm = 0x110
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB140_11:
	movq	-304(%rbp), %rax
	vmovups	208(%rax), %xmm0
	vmovups	%xmm0, 192(%rax)
	leaq	L_.str.111(%rip), %rcx
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	je	LBB140_13
LBB140_14:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_is_16_bit_from_memory     ## -- Begin function stbi_is_16_bit_from_memory
	.p2align	4, 0x90
_stbi_is_16_bit_from_memory:            ## @stbi_is_16_bit_from_memory
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp                      ## imm = 0x110
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	$0, -216(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -48(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rdi, -40(%rbp)
	movslq	%esi, %rax
	addq	%rdi, %rax
	movq	%rax, -16(%rbp)
	movq	%rax, -32(%rbp)
	leaq	-232(%rbp), %rax
	movq	%rax, -272(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$2, %esi
	xorl	%edx, %edx
	callq	__ZL20stbi__parse_png_fileP9stbi__pngii
	testl	%eax, %eax
	je	LBB141_2
## %bb.1:
	cmpl	$16, -240(%rbp)
	jne	LBB141_2
## %bb.5:
	movl	$1, %eax
	jmp	LBB141_3
LBB141_2:
	movq	-272(%rbp), %rax
	vmovups	208(%rax), %xmm0
	vmovups	%xmm0, 192(%rax)
	xorl	%eax, %eax
LBB141_3:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-8(%rbp), %rcx
	jne	LBB141_6
## %bb.4:
	addq	$272, %rsp                      ## imm = 0x110
	popq	%rbp
	retq
LBB141_6:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_stbi_is_16_bit_from_callbacks  ## -- Begin function stbi_is_16_bit_from_callbacks
	.p2align	4, 0x90
_stbi_is_16_bit_from_callbacks:         ## @stbi_is_16_bit_from_callbacks
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$280, %rsp                      ## imm = 0x118
	.cfi_offset %rbx, -24
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	16(%rdi), %rax
	movq	%rax, -208(%rbp)
	vmovups	(%rdi), %xmm0
	vmovups	%xmm0, -224(%rbp)
	movq	%rsi, -200(%rbp)
	movabsq	$549755813889, %rax             ## imm = 0x8000000001
	movq	%rax, -192(%rbp)
	movl	$0, -56(%rbp)
	leaq	-184(%rbp), %rbx
	movq	%rbx, -32(%rbp)
	movq	%rbx, -48(%rbp)
	movq	%rsi, %rdi
	movq	%rbx, %rsi
	movl	$128, %edx
	callq	*-224(%rbp)
	movl	-48(%rbp), %ecx
	subl	-32(%rbp), %ecx
	addl	%ecx, -56(%rbp)
	testl	%eax, %eax
	je	LBB142_1
## %bb.2:
	movq	%rbx, -48(%rbp)
	cltq
	addq	%rbp, %rax
	addq	$-184, %rax
	jmp	LBB142_3
LBB142_1:
	movl	$0, -192(%rbp)
	movq	%rbx, -48(%rbp)
	leaq	-183(%rbp), %rax
	movb	$0, -184(%rbp)
LBB142_3:
	movq	%rax, -40(%rbp)
	movq	%rax, -24(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, -280(%rbp)
	leaq	-280(%rbp), %rdi
	movl	$2, %esi
	xorl	%edx, %edx
	callq	__ZL20stbi__parse_png_fileP9stbi__pngii
	testl	%eax, %eax
	je	LBB142_5
## %bb.4:
	cmpl	$16, -248(%rbp)
	jne	LBB142_5
## %bb.8:
	movl	$1, %eax
	jmp	LBB142_6
LBB142_5:
	movq	-280(%rbp), %rax
	vmovups	208(%rax), %xmm0
	vmovups	%xmm0, 192(%rax)
	xorl	%eax, %eax
LBB142_6:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	-16(%rbp), %rcx
	jne	LBB142_9
## %bb.7:
	addq	$280, %rsp                      ## imm = 0x118
	popq	%rbx
	popq	%rbp
	retq
LBB142_9:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ## -- Begin function _Z21update_profiler_statsP4Game
LCPI143_0:
	.quad	4841369599423283200             ## 0x4330000000000000
	.quad	4841369599423283200             ## 0x4330000000000000
LCPI143_1:
	.quad	4985484787499139072             ## 0x4530000000000000
	.quad	4985484787499139072             ## 0x4530000000000000
LCPI143_2:
	.quad	0x4530000000100000              ## double 1.9342813118337666E+25
	.quad	0x4530000000100000              ## double 1.9342813118337666E+25
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z21update_profiler_statsP4Game
	.p2align	4, 0x90
__Z21update_profiler_statsP4Game:       ## @_Z21update_profiler_statsP4Game
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	.cfi_offset %rbx, -24
	cmpl	$0, 3470120(%rdi)
	je	LBB143_1
LBB143_11:
	popq	%rbx
	popq	%rbp
	vzeroupper
	retq
LBB143_1:
	vmovd	36(%rdi), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	movslq	3470112(%rdi), %rax
	vmovd	%xmm0, 3469632(%rdi,%rax,4)
	leaq	_timed_blocks1(%rip), %rcx
	cmpq	%rcx, _timed_blocks(%rip)
	leaq	_timed_blocks2(%rip), %rax
	cmovneq	%rcx, %rax
	leaq	3447200(%rdi), %r8
	xorl	%r9d, %r9d
	vpxor	%xmm0, %xmm0, %xmm0
	vmovdqa	LCPI143_0(%rip), %xmm1          ## xmm1 = [4841369599423283200,4841369599423283200]
	vmovdqa	LCPI143_1(%rip), %xmm2          ## xmm2 = [4985484787499139072,4985484787499139072]
	vmovapd	LCPI143_2(%rip), %xmm3          ## xmm3 = [1.9342813118337666E+25,1.9342813118337666E+25]
	movq	%rdi, %r10
	jmp	LBB143_2
	.p2align	4, 0x90
LBB143_10:                              ##   in Loop: Header=BB143_2 Depth=1
	incq	%r9
	addq	$56, %rax
	addq	$56, %r10
	addq	$176, %r8
	cmpq	$128, %r9
	je	LBB143_11
LBB143_2:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB143_3 Depth 2
	imulq	$176, %r9, %rcx
	movl	%r9d, 3447264(%rdi,%rcx)
	leaq	(%rdi,%rcx), %r11
	addq	$3447232, %r11                  ## imm = 0x3499C0
	movq	%r8, %rdx
	xorl	%esi, %esi
	jmp	LBB143_3
	.p2align	4, 0x90
LBB143_9:                               ##   in Loop: Header=BB143_3 Depth=2
	addq	$7168, %rsi                     ## imm = 0x1C00
	addq	$8, %rdx
	cmpq	$28672, %rsi                    ## imm = 0x7000
	je	LBB143_10
LBB143_3:                               ##   Parent Loop BB143_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movslq	3470112(%rdi), %rcx
	imulq	$28672, %rcx, %rcx              ## imm = 0x7000
	addq	%r10, %rcx
	movl	6496(%rsi,%rcx), %ebx
	testl	%ebx, %ebx
	je	LBB143_5
## %bb.4:                               ##   in Loop: Header=BB143_3 Depth=2
	vmovdqu	6504(%rsi,%rcx), %xmm4
	vpblendd	$10, %xmm0, %xmm4, %xmm5        ## xmm5 = xmm4[0],xmm0[1],xmm4[2],xmm0[3]
	vpor	%xmm1, %xmm5, %xmm5
	vpsrlq	$32, %xmm4, %xmm4
	vpor	%xmm2, %xmm4, %xmm4
	vsubpd	%xmm3, %xmm4, %xmm4
	vaddpd	%xmm4, %xmm5, %xmm4
	vmovsd	-96(%rdx), %xmm5                ## xmm5 = mem[0],zero
	vmovsd	-64(%rdx), %xmm6                ## xmm6 = mem[0],zero
	vsubsd	%xmm4, %xmm5, %xmm5
	vmovsd	%xmm5, -96(%rdx)
	vpermilpd	$1, %xmm4, %xmm5        ## xmm5 = xmm4[1,0]
	vsubsd	%xmm5, %xmm6, %xmm5
	vmovsd	%xmm5, -64(%rdx)
	vcvtsi2sd	%ebx, %xmm8, %xmm5
	vmovsd	-32(%rdx), %xmm6                ## xmm6 = mem[0],zero
	vsubsd	%xmm5, %xmm6, %xmm6
	vmovsd	%xmm6, -32(%rdx)
	vdivsd	%xmm5, %xmm4, %xmm6
	vmovsd	(%rdx), %xmm7                   ## xmm7 = mem[0],zero
	vsubsd	%xmm6, %xmm7, %xmm7
	vmovsd	%xmm7, (%rdx)
	vmovupd	(%r11), %ymm7
	vbroadcastsd	%xmm5, %ymm5
	vblendpd	$4, %ymm5, %ymm4, %ymm4         ## ymm4 = ymm4[0,1],ymm5[2],ymm4[3]
	vbroadcastsd	%xmm6, %ymm5
	vblendpd	$8, %ymm5, %ymm4, %ymm4         ## ymm4 = ymm4[0,1,2],ymm5[3]
	vsubpd	%ymm4, %ymm7, %ymm4
	vmovupd	%ymm4, (%r11)
LBB143_5:                               ##   in Loop: Header=BB143_3 Depth=2
	vmovupd	(%rax,%rsi), %ymm4
	vmovupd	24(%rax,%rsi), %ymm5
	vmovupd	%ymm5, 6488(%rsi,%rcx)
	vmovupd	%ymm4, 6464(%rsi,%rcx)
	movl	32(%rax,%rsi), %ecx
	testl	%ecx, %ecx
	je	LBB143_7
## %bb.6:                               ##   in Loop: Header=BB143_3 Depth=2
	vmovdqu	40(%rax,%rsi), %xmm4
	vpblendd	$10, %xmm0, %xmm4, %xmm5        ## xmm5 = xmm4[0],xmm0[1],xmm4[2],xmm0[3]
	vpor	%xmm1, %xmm5, %xmm5
	vpsrlq	$32, %xmm4, %xmm4
	vpor	%xmm2, %xmm4, %xmm4
	vsubpd	%xmm3, %xmm4, %xmm4
	vaddpd	%xmm4, %xmm5, %xmm4
	vaddsd	-96(%rdx), %xmm4, %xmm5
	vmovsd	%xmm5, -96(%rdx)
	vpermilpd	$1, %xmm4, %xmm5        ## xmm5 = xmm4[1,0]
	vaddsd	-64(%rdx), %xmm5, %xmm5
	vmovsd	%xmm5, -64(%rdx)
	vcvtsi2sd	%ecx, %xmm8, %xmm5
	vaddsd	-32(%rdx), %xmm5, %xmm6
	vmovsd	%xmm6, -32(%rdx)
	vdivsd	%xmm5, %xmm4, %xmm6
	vaddsd	(%rdx), %xmm6, %xmm7
	vmovsd	%xmm7, (%rdx)
	vbroadcastsd	%xmm5, %ymm5
	vblendpd	$4, %ymm5, %ymm4, %ymm4         ## ymm4 = ymm4[0,1],ymm5[2],ymm4[3]
	vbroadcastsd	%xmm6, %ymm5
	vblendpd	$8, %ymm5, %ymm4, %ymm4         ## ymm4 = ymm4[0,1,2],ymm5[3]
	vaddpd	(%r11), %ymm4, %ymm4
	vmovupd	%ymm4, (%r11)
LBB143_7:                               ##   in Loop: Header=BB143_3 Depth=2
	cmpq	$0, 16(%rax,%rsi)
	je	LBB143_9
## %bb.8:                               ##   in Loop: Header=BB143_3 Depth=2
	leaq	(%rax,%rsi), %rcx
	movq	%rcx, 40(%r11)
	jmp	LBB143_9
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z13draw_profilerP4GameP9GameInputP14Render_Context2v2S5_
LCPI144_0:
	.long	0x3f800000                      ## float 1
LCPI144_3:
	.long	0x447a0000                      ## float 1000
LCPI144_4:
	.long	0x40400000                      ## float 3
LCPI144_5:
	.long	0x42f00000                      ## float 120
LCPI144_7:
	.long	0x41855555                      ## float 16.666666
LCPI144_9:
	.long	0x3f000000                      ## float 0.5
LCPI144_11:
	.long	0x3a83126f                      ## float 0.00100000005
LCPI144_15:
	.long	0x3f333333                      ## float 0.699999988
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4
LCPI144_1:
	.long	0x00000000                      ## float 0
	.long	0x3f800000                      ## float 1
	.space	4
	.space	4
LCPI144_2:
	.long	0x00000000                      ## float 0
	.long	0x3f4ccccd                      ## float 0.800000011
	.space	4
	.space	4
LCPI144_10:
	.long	0x3f000000                      ## float 0.5
	.long	0x3f800000                      ## float 1
	.space	4
	.space	4
LCPI144_13:
	.long	0x40a00000                      ## float 5
	.long	0x40000000                      ## float 2
	.space	4
	.space	4
LCPI144_14:
	.long	0x3f333333                      ## float 0.699999988
	.long	0x3f800000                      ## float 1
	.space	4
	.space	4
LCPI144_16:
	.quad	4841369599423283200             ## 0x4330000000000000
	.quad	4841369599423283200             ## 0x4330000000000000
LCPI144_17:
	.quad	4985484787499139072             ## 0x4530000000000000
	.quad	4985484787499139072             ## 0x4530000000000000
LCPI144_18:
	.quad	0x4530000000100000              ## double 1.9342813118337666E+25
	.quad	0x4530000000100000              ## double 1.9342813118337666E+25
LCPI144_19:
	.long	1127219200                      ## 0x43300000
	.long	1160773632                      ## 0x45300000
	.long	0                               ## 0x0
	.long	0                               ## 0x0
LCPI144_20:
	.quad	0x4330000000000000              ## double 4503599627370496
	.quad	0x4530000000000000              ## double 1.9342813113834067E+25
LCPI144_22:
	.space	16
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3
LCPI144_6:
	.quad	0x3feccccccccccccd              ## double 0.90000000000000002
LCPI144_8:
	.quad	4575657221408423936             ## 0x3f80000000000000
LCPI144_12:
	.quad	0x3fd3333333333333              ## double 0.29999999999999999
LCPI144_21:
	.quad	0x4059000000000000              ## double 100
LCPI144_24:
	.quad	0x0000000000000000              ## double 0
	.section	__TEXT,__const
	.p2align	5
LCPI144_23:
	.space	32
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z13draw_profilerP4GameP9GameInputP14Render_Context2v2S5_
	.p2align	4, 0x90
__Z13draw_profilerP4GameP9GameInputP14Render_Context2v2S5_: ## @_Z13draw_profilerP4GameP9GameInputP14Render_Context2v2S5_
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	movl	$23264, %eax                    ## imm = 0x5AE0
	callq	____chkstk_darwin
	subq	%rax, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovaps	%xmm0, 48(%rsp)                 ## 16-byte Spill
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, 23232(%rsp)
	cmpl	$0, 6456(%rdi)
	je	LBB144_84
## %bb.1:
	movq	%rdi, %r14
	cmpl	$0, 196(%rdi)
	je	LBB144_84
## %bb.2:
	movq	%rdx, %r13
	movq	%rsi, %r12
	vmovshdup	48(%rsp), %xmm0         ## 16-byte Folded Reload
                                        ## xmm0 = mem[1,1,3,3]
	vmovaps	%xmm0, 80(%rsp)                 ## 16-byte Spill
	movl	3470128(%r14), %r15d
	leaq	3447104(%r14), %rsi
	leaq	704(%rsp), %rdi
	movl	$22528, %edx                    ## imm = 0x5800
	vmovaps	%xmm1, 32(%rsp)                 ## 16-byte Spill
	vzeroupper
	callq	_memcpy
	movl	$1, 395064(%r13)
	vmovaps	48(%rsp), %xmm3                 ## 16-byte Reload
	vaddps	32(%rsp), %xmm3, %xmm0          ## 16-byte Folded Reload
	vmovlhps	%xmm0, %xmm3, %xmm1             ## xmm1 = xmm3[0],xmm0[0]
	vmovups	%xmm1, 395068(%r13)
	vmovss	4132(%r12), %xmm1               ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, 96(%rsp)                 ## 4-byte Spill
	vmovss	4136(%r12), %xmm1               ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, 68(%rsp)                 ## 4-byte Spill
	vmovsd	(%r13), %xmm1                   ## xmm1 = mem[0],zero
	vcvtdq2ps	%xmm1, %xmm1
	vmulps	%xmm3, %xmm1, %xmm2
	vmovaps	%xmm3, %xmm4
	vmulps	%xmm1, %xmm0, %xmm1
	vblendps	$2, %xmm2, %xmm1, %xmm3         ## xmm3 = xmm1[0],xmm2[1],xmm1[2,3]
	movq	192(%r13), %rax
	movslq	204(%r13), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%r13)
	shlq	$7, %rcx
	vmovlps	%xmm2, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm3, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm1, 24(%rax,%rcx)
	vmovss	LCPI144_0(%rip), %xmm1          ## xmm1 = mem[0],zero,zero,zero
	vunpcklpd	LCPI144_1(%rip), %xmm1, %xmm5 ## xmm5 = xmm1[0],mem[0]
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm5, 36(%rax,%rcx)
	vbroadcastss	LCPI144_0(%rip), %xmm6  ## xmm6 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vmovlps	%xmm6, 52(%rax,%rcx)
	vxorps	%xmm1, %xmm1, %xmm1
	vmovups	%ymm1, 60(%rax,%rcx)
	vmovups	%ymm1, 72(%rax,%rcx)
	vmovsd	LCPI144_2(%rip), %xmm2          ## xmm2 = mem[0],zero
	vmovsd	%xmm2, 104(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vmovsd	(%r13), %xmm3                   ## xmm3 = mem[0],zero
	vcvtdq2ps	%xmm3, %xmm3
	vmulps	%xmm4, %xmm3, %xmm4
	vmulps	%xmm3, %xmm0, %xmm0
	vblendps	$2, %xmm0, %xmm4, %xmm3         ## xmm3 = xmm4[0],xmm0[1],xmm4[2,3]
	movq	192(%r13), %rax
	movslq	204(%r13), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%r13)
	shlq	$7, %rcx
	vmovlps	%xmm4, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm3, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm0, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovaps	%xmm5, 176(%rsp)                ## 16-byte Spill
	vmovups	%xmm5, 36(%rax,%rcx)
	vmovaps	%xmm6, 16(%rsp)                 ## 16-byte Spill
	vmovlps	%xmm6, 52(%rax,%rcx)
	vmovups	%ymm1, 72(%rax,%rcx)
	vmovups	%ymm1, 60(%rax,%rcx)
	vmovsd	%xmm2, 104(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	cmpl	$0, 3470120(%r14)
	je	LBB144_3
## %bb.13:
	movslq	3470116(%r14), %rax
	vmovss	3469632(%r14,%rax,4), %xmm1     ## xmm1 = mem[0],zero,zero,zero
	jmp	LBB144_14
LBB144_3:
	testl	%r15d, %r15d
	jle	LBB144_4
## %bb.5:
	leaq	-1(%r15), %rcx
	movl	%r15d, %eax
	andl	$7, %eax
	cmpq	$7, %rcx
	jae	LBB144_11
## %bb.6:
	vxorps	%xmm0, %xmm0, %xmm0
	xorl	%ecx, %ecx
	jmp	LBB144_7
LBB144_4:
	vxorps	%xmm0, %xmm0, %xmm0
	jmp	LBB144_10
LBB144_11:
	movl	%r15d, %edx
	andl	$-8, %edx
	vxorps	%xmm0, %xmm0, %xmm0
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB144_12:                              ## =>This Inner Loop Header: Depth=1
	vaddss	3469632(%r14,%rcx,4), %xmm0, %xmm0
	vaddss	3469636(%r14,%rcx,4), %xmm0, %xmm0
	vaddss	3469640(%r14,%rcx,4), %xmm0, %xmm0
	vaddss	3469644(%r14,%rcx,4), %xmm0, %xmm0
	vaddss	3469648(%r14,%rcx,4), %xmm0, %xmm0
	vaddss	3469652(%r14,%rcx,4), %xmm0, %xmm0
	vaddss	3469656(%r14,%rcx,4), %xmm0, %xmm0
	vaddss	3469660(%r14,%rcx,4), %xmm0, %xmm0
	addq	$8, %rcx
	cmpq	%rcx, %rdx
	jne	LBB144_12
LBB144_7:
	testq	%rax, %rax
	je	LBB144_10
## %bb.8:
	leaq	(%r14,%rcx,4), %rcx
	addq	$3469632, %rcx                  ## imm = 0x34F140
	xorl	%edx, %edx
	.p2align	4, 0x90
LBB144_9:                               ## =>This Inner Loop Header: Depth=1
	vaddss	(%rcx,%rdx,4), %xmm0, %xmm0
	incq	%rdx
	cmpq	%rdx, %rax
	jne	LBB144_9
LBB144_10:
	vcvtsi2ss	%r15d, %xmm7, %xmm1
	vdivss	%xmm1, %xmm0, %xmm1
LBB144_14:
	vcvtss2sd	%xmm1, %xmm1, %xmm0
	vmovss	LCPI144_3(%rip), %xmm2          ## xmm2 = mem[0],zero,zero,zero
	vdivss	%xmm1, %xmm2, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	$100, (%rsp)
	leaq	L_.str.23(%rip), %rdx
	leaq	192(%rsp), %rbx
	movl	$512, %esi                      ## imm = 0x200
	movq	%rbx, %rdi
	movl	%r15d, %r8d
	movl	$4, %r9d
	movb	$1, %al
	vzeroupper
	callq	_snprintf
	movl	$-1, %edx
	.p2align	4, 0x90
LBB144_15:                              ## =>This Inner Loop Header: Depth=1
	incl	%edx
	cmpb	$0, (%rbx)
	leaq	1(%rbx), %rbx
	jne	LBB144_15
## %bb.16:
	leaq	192(%rsp), %rsi
	vmovss	LCPI144_0(%rip), %xmm3          ## xmm3 = mem[0],zero,zero,zero
	movq	%r13, %rdi
	vmovaps	48(%rsp), %xmm0                 ## 16-byte Reload
	vmovaps	16(%rsp), %xmm1                 ## 16-byte Reload
	vmovaps	%xmm1, %xmm2
	callq	__Z12push_2d_textP14Render_Context6String2v22v4f
	vmovss	6308(%r14), %xmm0               ## xmm0 = mem[0],zero,zero,zero
	vmulss	LCPI144_4(%rip), %xmm0, %xmm3
	vmovaps	32(%rsp), %xmm1                 ## 16-byte Reload
	vdivss	LCPI144_5(%rip), %xmm1, %xmm1
	vaddss	80(%rsp), %xmm0, %xmm2          ## 16-byte Folded Reload
	vcvtss2sd	%xmm1, %xmm1, %xmm0
	vmulsd	LCPI144_6(%rip), %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 76(%rsp)                 ## 4-byte Spill
	vmovss	%xmm2, 72(%rsp)                 ## 4-byte Spill
	vmovss	%xmm3, 80(%rsp)                 ## 4-byte Spill
	vaddss	%xmm3, %xmm2, %xmm11
	vbroadcastss	%xmm11, %xmm0
	vmovaps	%xmm0, 144(%rsp)                ## 16-byte Spill
	xorl	%ebx, %ebx
	vmovaps	LCPI144_1(%rip), %xmm0          ## xmm0 = <0.0E+0,1.0E+0,u,u>
	vmovaps	%xmm0, 32(%rsp)                 ## 16-byte Spill
	vbroadcastss	LCPI144_9(%rip), %xmm0  ## xmm0 = [5.0E-1,5.0E-1,5.0E-1,5.0E-1]
	vmovaps	%xmm0, 128(%rsp)                ## 16-byte Spill
	vmovaps	%xmm11, 160(%rsp)               ## 16-byte Spill
	jmp	LBB144_17
	.p2align	4, 0x90
LBB144_39:                              ##   in Loop: Header=BB144_17 Depth=1
	vcvtsi2ssl	(%r13), %xmm13, %xmm7
	vmovlhps	%xmm5, %xmm6, %xmm10            ## xmm10 = xmm6[0],xmm5[0]
	vcvtsi2ssl	4(%r13), %xmm13, %xmm6
	vmulss	%xmm7, %xmm2, %xmm3
	vmulss	%xmm6, %xmm8, %xmm4
	vinsertps	$16, %xmm4, %xmm3, %xmm3 ## xmm3 = xmm3[0],xmm4[0],xmm3[2,3]
	vmulss	%xmm7, %xmm9, %xmm7
	vinsertps	$16, %xmm4, %xmm7, %xmm4 ## xmm4 = xmm7[0],xmm4[0],xmm7[2,3]
	vmulss	%xmm6, %xmm11, %xmm6
	vinsertps	$16, %xmm6, %xmm7, %xmm6 ## xmm6 = xmm7[0],xmm6[0],xmm7[2,3]
	movq	192(%r13), %rax
	movslq	204(%r13), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%r13)
	shlq	$7, %rcx
	vmovlps	%xmm3, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm4, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm6, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovaps	176(%rsp), %xmm7                ## 16-byte Reload
	vmovups	%xmm7, 36(%rax,%rcx)
	vmovaps	16(%rsp), %xmm5                 ## 16-byte Reload
	vmovlps	%xmm5, 52(%rax,%rcx)
	vxorpd	%xmm12, %xmm12, %xmm12
	vmovupd	%ymm12, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovups	%xmm10, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vmovsd	(%r13), %xmm3                   ## xmm3 = mem[0],zero
	vcvtdq2ps	%xmm3, %xmm3
	vmulss	%xmm3, %xmm2, %xmm2
	vmovshdup	%xmm3, %xmm4            ## xmm4 = xmm3[1,1,3,3]
	vmulss	%xmm4, %xmm8, %xmm4
	vinsertps	$16, %xmm4, %xmm2, %xmm4 ## xmm4 = xmm2[0],xmm4[0],xmm2[2,3]
	vblendps	$14, 144(%rsp), %xmm9, %xmm6    ## 16-byte Folded Reload
                                        ## xmm6 = xmm9[0],mem[1,2,3]
	vmulps	%xmm3, %xmm6, %xmm3
	vblendps	$2, %xmm3, %xmm2, %xmm2         ## xmm2 = xmm2[0],xmm3[1],xmm2[2,3]
	movq	192(%r13), %rax
	movslq	204(%r13), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%r13)
	shlq	$7, %rcx
	vmovlps	%xmm4, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm2, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm3, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm7, 36(%rax,%rcx)
	vmovlps	%xmm5, 52(%rax,%rcx)
	vmovupd	%ymm12, 60(%rax,%rcx)
	movl	$0, 92(%rax,%rcx)
	vmovups	%xmm10, 96(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	movq	%r13, %rdi
	vmovaps	128(%rsp), %xmm2                ## 16-byte Reload
	vmovaps	LCPI144_10(%rip), %xmm3         ## xmm3 = <5.0E-1,1.0E+0,u,u>
	vmovss	LCPI144_11(%rip), %xmm4         ## xmm4 = mem[0],zero,zero,zero
	vzeroupper
	callq	__Z20push_2d_rect_outlineP14Render_Context2v2S1_2v4f
	vmovaps	160(%rsp), %xmm11               ## 16-byte Reload
	incq	%rbx
	cmpq	$120, %rbx
	je	LBB144_24
LBB144_17:                              ## =>This Inner Loop Header: Depth=1
	vmovss	3469632(%r14,%rbx,4), %xmm0     ## xmm0 = mem[0],zero,zero,zero
	vdivss	LCPI144_7(%rip), %xmm0, %xmm5
	vmovss	LCPI144_0(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	vminss	%xmm5, %xmm0, %xmm0
	vcvtsi2ss	%ebx, %xmm13, %xmm1
	vmovss	76(%rsp), %xmm3                 ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmulss	%xmm3, %xmm1, %xmm1
	vaddss	48(%rsp), %xmm1, %xmm2          ## 16-byte Folded Reload
	vmulss	80(%rsp), %xmm0, %xmm0          ## 4-byte Folded Reload
	vsubss	%xmm0, %xmm11, %xmm8
	vinsertps	$16, %xmm8, %xmm2, %xmm0 ## xmm0 = xmm2[0],xmm8[0],xmm2[2,3]
	vaddss	%xmm3, %xmm2, %xmm9
	vinsertps	$16, %xmm11, %xmm9, %xmm1 ## xmm1 = xmm9[0],xmm11[0],xmm9[2,3]
	vmovss	96(%rsp), %xmm4                 ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vucomiss	%xmm2, %xmm4
	vmovss	68(%rsp), %xmm3                 ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	jb	LBB144_32
## %bb.18:                              ##   in Loop: Header=BB144_17 Depth=1
	vucomiss	%xmm4, %xmm9
	jbe	LBB144_32
## %bb.19:                              ##   in Loop: Header=BB144_17 Depth=1
	vucomiss	%xmm8, %xmm3
	jb	LBB144_32
## %bb.20:                              ##   in Loop: Header=BB144_17 Depth=1
	vucomiss	%xmm3, %xmm11
	jbe	LBB144_32
## %bb.21:                              ##   in Loop: Header=BB144_17 Depth=1
	cmpl	$0, 4148(%r12)
	je	LBB144_22
LBB144_32:                              ##   in Loop: Header=BB144_17 Depth=1
	movl	3470112(%r14), %eax
	cmpq	%rax, %rbx
	vmovaps	16(%rsp), %xmm6                 ## 16-byte Reload
	je	LBB144_34
## %bb.33:                              ##   in Loop: Header=BB144_17 Depth=1
	vblendps	$14, LCPI144_22(%rip), %xmm5, %xmm6 ## xmm6 = xmm5[0],mem[1,2,3]
LBB144_34:                              ##   in Loop: Header=BB144_17 Depth=1
	vmovaps	32(%rsp), %xmm5                 ## 16-byte Reload
LBB144_35:                              ##   in Loop: Header=BB144_17 Depth=1
	cmpl	$0, 3470120(%r14)
	je	LBB144_39
## %bb.36:                              ##   in Loop: Header=BB144_17 Depth=1
	movl	3470116(%r14), %eax
	movl	%eax, %eax
	cmpq	%rax, %rbx
	jne	LBB144_39
LBB144_38:                              ##   in Loop: Header=BB144_17 Depth=1
	vmovddup	LCPI144_8(%rip), %xmm5          ## xmm5 = [4575657221408423936,4575657221408423936]
                                        ## xmm5 = mem[0,0]
	vmovaps	%xmm5, %xmm6
	jmp	LBB144_39
LBB144_22:                              ##   in Loop: Header=BB144_17 Depth=1
	vbroadcastss	LCPI144_0(%rip), %xmm5  ## xmm5 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	cmpl	$0, 4(%r12)
	je	LBB144_23
## %bb.30:                              ##   in Loop: Header=BB144_17 Depth=1
	cmpl	$0, 8(%r12)
	vmovaps	32(%rsp), %xmm6                 ## 16-byte Reload
	jne	LBB144_35
## %bb.31:                              ##   in Loop: Header=BB144_17 Depth=1
	movl	$1, 3470120(%r14)
	movl	%ebx, 3470116(%r14)
	vbroadcastss	LCPI144_0(%rip), %xmm5  ## xmm5 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	movl	%ebx, %eax
	vmovaps	32(%rsp), %xmm6                 ## 16-byte Reload
	movl	%eax, %eax
	cmpq	%rax, %rbx
	jne	LBB144_39
	jmp	LBB144_38
LBB144_23:                              ##   in Loop: Header=BB144_17 Depth=1
	vmovaps	32(%rsp), %xmm6                 ## 16-byte Reload
	jmp	LBB144_35
LBB144_24:
	vmovss	6308(%r14), %xmm0               ## xmm0 = mem[0],zero,zero,zero
	vmulss	LCPI144_9(%rip), %xmm0, %xmm1
	vaddss	80(%rsp), %xmm1, %xmm1          ## 4-byte Folded Reload
	vcvtss2sd	%xmm0, %xmm0, %xmm2
	vmulsd	LCPI144_12(%rip), %xmm2, %xmm2
	vaddss	72(%rsp), %xmm1, %xmm9          ## 4-byte Folded Reload
	vcvtsd2ss	%xmm2, %xmm2, %xmm10
	vaddss	%xmm0, %xmm9, %xmm3
	vmovsd	(%r13), %xmm0                   ## xmm0 = mem[0],zero
	vcvtdq2ps	%xmm0, %xmm5
	vmovaps	48(%rsp), %xmm1                 ## 16-byte Reload
	vinsertps	$16, %xmm9, %xmm1, %xmm0 ## xmm0 = xmm1[0],xmm9[0],xmm1[2,3]
	vmulps	%xmm5, %xmm0, %xmm6
	movq	192(%r13), %rax
	movslq	204(%r13), %rcx
	leal	1(%rcx), %edx
	vmovss	6304(%r14), %xmm7               ## xmm7 = mem[0],zero,zero,zero
	movl	%edx, 204(%r13)
	shlq	$7, %rcx
	vmovlps	%xmm6, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovaps	LCPI144_1(%rip), %xmm8          ## xmm8 = <0.0E+0,1.0E+0,u,u>
	vmovss	LCPI144_0(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	vmovlhps	%xmm8, %xmm0, %xmm2             ## xmm2 = xmm0[0],xmm8[0]
	vmovups	%xmm2, 36(%rax,%rcx)
	vbroadcastss	LCPI144_0(%rip), %xmm0  ## xmm0 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vmovlpd	%xmm0, 52(%rax,%rcx)
	vxorps	%xmm4, %xmm4, %xmm4
	vmovups	%ymm4, 60(%rax,%rcx)
	vmovups	%ymm4, 72(%rax,%rcx)
	vmovlps	%xmm8, 104(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vinsertps	$16, %xmm10, %xmm7, %xmm7 ## xmm7 = xmm7[0],xmm10[0],xmm7[2,3]
	vmulps	LCPI144_13(%rip), %xmm7, %xmm7
	vinsertps	$16, %xmm3, %xmm1, %xmm3 ## xmm3 = xmm1[0],xmm3[0],xmm1[2,3]
	vaddps	%xmm3, %xmm7, %xmm3
	vmulps	%xmm5, %xmm3, %xmm5
	vblendps	$2, %xmm6, %xmm5, %xmm6         ## xmm6 = xmm5[0],xmm6[1],xmm5[2,3]
	vmovlps	%xmm6, 12(%rax,%rcx)
	vmovlps	%xmm5, 24(%rax,%rcx)
	vmovsd	(%r13), %xmm5                   ## xmm5 = mem[0],zero
	vcvtdq2ps	%xmm5, %xmm5
	vmulps	%xmm1, %xmm5, %xmm6
	vmovshdup	%xmm5, %xmm7            ## xmm7 = xmm5[1,1,3,3]
	vmulss	%xmm7, %xmm9, %xmm7
	vinsertps	$16, %xmm7, %xmm6, %xmm7 ## xmm7 = xmm6[0],xmm7[0],xmm6[2,3]
	vmulps	%xmm5, %xmm3, %xmm5
	vblendps	$2, %xmm5, %xmm6, %xmm6         ## xmm6 = xmm6[0],xmm5[1],xmm6[2,3]
	movq	192(%r13), %rax
	movslq	204(%r13), %rcx
	leal	1(%rcx), %edx
	movl	%edx, 204(%r13)
	shlq	$7, %rcx
	vmovlps	%xmm7, (%rax,%rcx)
	movl	$0, 8(%rax,%rcx)
	vmovlps	%xmm6, 12(%rax,%rcx)
	movl	$0, 20(%rax,%rcx)
	vmovlps	%xmm5, 24(%rax,%rcx)
	movl	$0, 32(%rax,%rcx)
	vmovups	%xmm2, 36(%rax,%rcx)
	vmovlpd	%xmm0, 52(%rax,%rcx)
	vmovups	%ymm4, 60(%rax,%rcx)
	vmovups	%ymm4, 72(%rax,%rcx)
	vmovlps	%xmm8, 104(%rax,%rcx)
	movq	$0, 112(%rax,%rcx)
	movq	$2, 120(%rax,%rcx)
	vmovss	96(%rsp), %xmm4                 ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vucomiss	%xmm1, %xmm4
	vmovapd	LCPI144_14(%rip), %xmm2         ## xmm2 = <6.99999988E-1,1.0E+0,u,u>
	vbroadcastss	LCPI144_15(%rip), %xmm1 ## xmm1 = [6.99999988E-1,6.99999988E-1,6.99999988E-1,6.99999988E-1]
	jb	LBB144_43
## %bb.25:
	vucomiss	%xmm4, %xmm3
	jbe	LBB144_43
## %bb.26:
	vmovss	68(%rsp), %xmm4                 ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vucomiss	%xmm9, %xmm4
	jb	LBB144_43
## %bb.27:
	vmovshdup	%xmm3, %xmm3            ## xmm3 = xmm3[1,1,3,3]
	vucomiss	%xmm4, %xmm3
	jbe	LBB144_43
## %bb.28:
	cmpl	$0, 4(%r12)
	je	LBB144_29
## %bb.40:
	vbroadcastss	LCPI144_0(%rip), %xmm1  ## xmm1 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	cmpl	$0, 8(%r12)
	vmovapd	%xmm1, %xmm2
	jne	LBB144_43
## %bb.41:
	xorl	%eax, %eax
	cmpl	$0, 3470120(%r14)
	sete	%al
	movl	%eax, 3470120(%r14)
	vbroadcastss	LCPI144_0(%rip), %xmm1  ## xmm1 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vmovapd	%xmm1, %xmm2
	jne	LBB144_43
## %bb.42:
	movl	3470112(%r14), %eax
	movl	%eax, 3470116(%r14)
	vbroadcastss	LCPI144_0(%rip), %xmm1  ## xmm1 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vmovapd	%xmm1, %xmm2
	jmp	LBB144_43
LBB144_29:
	vmovapd	%xmm0, %xmm1
	vmovapd	%xmm0, %xmm2
LBB144_43:
	vmovaps	%xmm9, 16(%rsp)                 ## 16-byte Spill
	vaddss	%xmm10, %xmm9, %xmm0
	vmovaps	48(%rsp), %xmm3                 ## 16-byte Reload
	vinsertps	$16, %xmm0, %xmm3, %xmm0 ## xmm0 = xmm3[0],xmm0[0],xmm3[2,3]
	leaq	L_.str.24(%rip), %rsi
	vmovss	LCPI144_0(%rip), %xmm3          ## xmm3 = mem[0],zero,zero,zero
	movq	%r13, %rdi
	movl	$5, %edx
	vmovaps	%xmm10, 32(%rsp)                ## 16-byte Spill
	vzeroupper
	callq	__Z12push_2d_textP14Render_Context6String2v22v4f
	vmovaps	32(%rsp), %xmm0                 ## 16-byte Reload
	vmulss	LCPI144_4(%rip), %xmm0, %xmm0
	vaddss	6308(%r14), %xmm0, %xmm8
	cmpl	$0, 3470120(%r14)
	je	LBB144_62
## %bb.44:
	movslq	3470116(%r14), %rcx
	leaq	872(%rsp), %rax
	imulq	$28672, %rcx, %rcx              ## imm = 0x7000
	addq	%r14, %rcx
	vxorps	%xmm6, %xmm6, %xmm6
	xorl	%edx, %edx
	vxorpd	%xmm1, %xmm1, %xmm1
	vxorps	%xmm9, %xmm9, %xmm9
	vmovdqa	LCPI144_16(%rip), %xmm10        ## xmm10 = [4841369599423283200,4841369599423283200]
	vmovdqa	LCPI144_17(%rip), %xmm11        ## xmm11 = [4985484787499139072,4985484787499139072]
	vmovapd	LCPI144_18(%rip), %xmm12        ## xmm12 = [1.9342813118337666E+25,1.9342813118337666E+25]
	vmovapd	LCPI144_19(%rip), %xmm5         ## xmm5 = [1127219200,1160773632,0,0]
	vmovapd	LCPI144_20(%rip), %xmm7         ## xmm7 = [4.503599627370496E+15,1.9342813113834067E+25]
	xorl	%r8d, %r8d
	jmp	LBB144_45
	.p2align	4, 0x90
LBB144_61:                              ##   in Loop: Header=BB144_45 Depth=1
	vaddsd	-40(%rax), %xmm6, %xmm6
	incl	%r8d
	addq	$176, %rax
	addq	$56, %rdx
	cmpq	$7168, %rdx                     ## imm = 0x1C00
	je	LBB144_64
LBB144_45:                              ## =>This Inner Loop Header: Depth=1
	vmovupd	%ymm1, -24(%rax)
	vmovupd	%ymm1, -40(%rax)
	vmovupd	%ymm1, -72(%rax)
	vmovupd	%ymm1, -104(%rax)
	vmovupd	%ymm1, -136(%rax)
	vmovupd	%ymm1, -168(%rax)
	movl	%r8d, -8(%rax)
	movl	6496(%rcx,%rdx), %edi
	testl	%edi, %edi
	je	LBB144_47
## %bb.46:                              ##   in Loop: Header=BB144_45 Depth=1
	movq	6504(%rcx,%rdx), %rbx
	movq	6512(%rcx,%rdx), %rsi
	vmovq	%rbx, %xmm0
	subq	%rsi, %rbx
	vmovq	%rsi, %xmm2
	vmovq	%rbx, %xmm3
	vpunpcklqdq	%xmm2, %xmm3, %xmm2     ## xmm2 = xmm3[0],xmm2[0]
	vpblendd	$10, %xmm9, %xmm2, %xmm3        ## xmm3 = xmm2[0],xmm9[1],xmm2[2],xmm9[3]
	vpor	%xmm3, %xmm10, %xmm3
	vpsrlq	$32, %xmm2, %xmm2
	vpor	%xmm2, %xmm11, %xmm2
	vsubpd	%xmm12, %xmm2, %xmm2
	vaddpd	%xmm2, %xmm3, %xmm2
	vaddsd	-168(%rax), %xmm2, %xmm3
	vmovsd	%xmm3, -168(%rax)
	vpermilpd	$1, %xmm2, %xmm3        ## xmm3 = xmm2[1,0]
	vaddsd	-136(%rax), %xmm3, %xmm3
	vmovsd	%xmm3, -136(%rax)
	vcvtsi2sd	%edi, %xmm13, %xmm3
	vaddsd	-104(%rax), %xmm3, %xmm4
	vmovsd	%xmm4, -104(%rax)
	vunpcklps	%xmm5, %xmm0, %xmm0     ## xmm0 = xmm0[0],xmm5[0],xmm0[1],xmm5[1]
	vsubpd	%xmm7, %xmm0, %xmm0
	vpermilpd	$1, %xmm0, %xmm4        ## xmm4 = xmm0[1,0]
	vaddsd	%xmm0, %xmm4, %xmm0
	vdivsd	%xmm3, %xmm0, %xmm0
	vaddsd	-72(%rax), %xmm0, %xmm4
	vmovsd	%xmm4, -72(%rax)
	vbroadcastsd	%xmm3, %ymm3
	vblendpd	$4, %ymm3, %ymm2, %ymm2         ## ymm2 = ymm2[0,1],ymm3[2],ymm2[3]
	vbroadcastsd	%xmm0, %ymm0
	vblendpd	$8, %ymm0, %ymm2, %ymm0         ## ymm0 = ymm2[0,1,2],ymm0[3]
	vaddpd	-40(%rax), %ymm0, %ymm0
	vmovupd	%ymm0, -40(%rax)
LBB144_47:                              ##   in Loop: Header=BB144_45 Depth=1
	cmpq	$0, 6480(%rcx,%rdx)
	je	LBB144_49
## %bb.48:                              ##   in Loop: Header=BB144_45 Depth=1
	leaq	(%rcx,%rdx), %rsi
	addq	$6464, %rsi                     ## imm = 0x1940
	movq	%rsi, (%rax)
LBB144_49:                              ##   in Loop: Header=BB144_45 Depth=1
	movl	13664(%rcx,%rdx), %edi
	testl	%edi, %edi
	je	LBB144_51
## %bb.50:                              ##   in Loop: Header=BB144_45 Depth=1
	movq	13672(%rcx,%rdx), %rsi
	movq	13680(%rcx,%rdx), %rbx
	vmovq	%rsi, %xmm0
	subq	%rbx, %rsi
	vmovq	%rbx, %xmm2
	vmovq	%rsi, %xmm3
	vpunpcklqdq	%xmm2, %xmm3, %xmm2     ## xmm2 = xmm3[0],xmm2[0]
	vpblendd	$10, %xmm9, %xmm2, %xmm3        ## xmm3 = xmm2[0],xmm9[1],xmm2[2],xmm9[3]
	vpor	%xmm3, %xmm10, %xmm3
	vpsrlq	$32, %xmm2, %xmm2
	vpor	%xmm2, %xmm11, %xmm2
	vsubpd	%xmm12, %xmm2, %xmm2
	vaddpd	%xmm2, %xmm3, %xmm2
	vaddsd	-160(%rax), %xmm2, %xmm3
	vmovsd	%xmm3, -160(%rax)
	vpermilpd	$1, %xmm2, %xmm3        ## xmm3 = xmm2[1,0]
	vaddsd	-128(%rax), %xmm3, %xmm3
	vmovsd	%xmm3, -128(%rax)
	vcvtsi2sd	%edi, %xmm13, %xmm3
	vaddsd	-96(%rax), %xmm3, %xmm4
	vmovsd	%xmm4, -96(%rax)
	vunpcklps	%xmm5, %xmm0, %xmm0     ## xmm0 = xmm0[0],xmm5[0],xmm0[1],xmm5[1]
	vsubpd	%xmm7, %xmm0, %xmm0
	vpermilpd	$1, %xmm0, %xmm4        ## xmm4 = xmm0[1,0]
	vaddsd	%xmm0, %xmm4, %xmm0
	vdivsd	%xmm3, %xmm0, %xmm0
	vaddsd	-64(%rax), %xmm0, %xmm4
	vmovsd	%xmm4, -64(%rax)
	vbroadcastsd	%xmm3, %ymm3
	vblendpd	$4, %ymm3, %ymm2, %ymm2         ## ymm2 = ymm2[0,1],ymm3[2],ymm2[3]
	vbroadcastsd	%xmm0, %ymm0
	vblendpd	$8, %ymm0, %ymm2, %ymm0         ## ymm0 = ymm2[0,1,2],ymm0[3]
	vaddpd	-40(%rax), %ymm0, %ymm0
	vmovupd	%ymm0, -40(%rax)
LBB144_51:                              ##   in Loop: Header=BB144_45 Depth=1
	cmpq	$0, 13648(%rcx,%rdx)
	je	LBB144_53
## %bb.52:                              ##   in Loop: Header=BB144_45 Depth=1
	leaq	(%rcx,%rdx), %rsi
	addq	$13632, %rsi                    ## imm = 0x3540
	movq	%rsi, (%rax)
LBB144_53:                              ##   in Loop: Header=BB144_45 Depth=1
	movl	20832(%rcx,%rdx), %edi
	testl	%edi, %edi
	je	LBB144_55
## %bb.54:                              ##   in Loop: Header=BB144_45 Depth=1
	movq	20840(%rcx,%rdx), %rsi
	movq	20848(%rcx,%rdx), %rbx
	vmovq	%rsi, %xmm0
	subq	%rbx, %rsi
	vmovq	%rbx, %xmm2
	vmovq	%rsi, %xmm3
	vpunpcklqdq	%xmm2, %xmm3, %xmm2     ## xmm2 = xmm3[0],xmm2[0]
	vpblendd	$10, %xmm9, %xmm2, %xmm3        ## xmm3 = xmm2[0],xmm9[1],xmm2[2],xmm9[3]
	vpor	%xmm3, %xmm10, %xmm3
	vpsrlq	$32, %xmm2, %xmm2
	vpor	%xmm2, %xmm11, %xmm2
	vsubpd	%xmm12, %xmm2, %xmm2
	vaddpd	%xmm2, %xmm3, %xmm2
	vaddsd	-152(%rax), %xmm2, %xmm3
	vmovsd	%xmm3, -152(%rax)
	vpermilpd	$1, %xmm2, %xmm3        ## xmm3 = xmm2[1,0]
	vaddsd	-120(%rax), %xmm3, %xmm3
	vmovsd	%xmm3, -120(%rax)
	vcvtsi2sd	%edi, %xmm13, %xmm3
	vaddsd	-88(%rax), %xmm3, %xmm4
	vmovsd	%xmm4, -88(%rax)
	vunpcklps	%xmm5, %xmm0, %xmm0     ## xmm0 = xmm0[0],xmm5[0],xmm0[1],xmm5[1]
	vsubpd	%xmm7, %xmm0, %xmm0
	vpermilpd	$1, %xmm0, %xmm4        ## xmm4 = xmm0[1,0]
	vaddsd	%xmm0, %xmm4, %xmm0
	vdivsd	%xmm3, %xmm0, %xmm0
	vaddsd	-56(%rax), %xmm0, %xmm4
	vmovsd	%xmm4, -56(%rax)
	vbroadcastsd	%xmm3, %ymm3
	vblendpd	$4, %ymm3, %ymm2, %ymm2         ## ymm2 = ymm2[0,1],ymm3[2],ymm2[3]
	vbroadcastsd	%xmm0, %ymm0
	vblendpd	$8, %ymm0, %ymm2, %ymm0         ## ymm0 = ymm2[0,1,2],ymm0[3]
	vaddpd	-40(%rax), %ymm0, %ymm0
	vmovupd	%ymm0, -40(%rax)
LBB144_55:                              ##   in Loop: Header=BB144_45 Depth=1
	cmpq	$0, 20816(%rcx,%rdx)
	je	LBB144_57
## %bb.56:                              ##   in Loop: Header=BB144_45 Depth=1
	leaq	(%rcx,%rdx), %rsi
	addq	$20800, %rsi                    ## imm = 0x5140
	movq	%rsi, (%rax)
LBB144_57:                              ##   in Loop: Header=BB144_45 Depth=1
	movl	28000(%rcx,%rdx), %edi
	testl	%edi, %edi
	je	LBB144_59
## %bb.58:                              ##   in Loop: Header=BB144_45 Depth=1
	movq	28008(%rcx,%rdx), %rsi
	movq	28016(%rcx,%rdx), %rbx
	vmovq	%rsi, %xmm0
	subq	%rbx, %rsi
	vmovq	%rbx, %xmm2
	vmovq	%rsi, %xmm3
	vpunpcklqdq	%xmm2, %xmm3, %xmm2     ## xmm2 = xmm3[0],xmm2[0]
	vpblendd	$10, %xmm9, %xmm2, %xmm3        ## xmm3 = xmm2[0],xmm9[1],xmm2[2],xmm9[3]
	vpor	%xmm3, %xmm10, %xmm3
	vpsrlq	$32, %xmm2, %xmm2
	vpor	%xmm2, %xmm11, %xmm2
	vsubpd	%xmm12, %xmm2, %xmm2
	vaddpd	%xmm2, %xmm3, %xmm2
	vaddsd	-144(%rax), %xmm2, %xmm3
	vmovsd	%xmm3, -144(%rax)
	vpermilpd	$1, %xmm2, %xmm3        ## xmm3 = xmm2[1,0]
	vaddsd	-112(%rax), %xmm3, %xmm3
	vmovsd	%xmm3, -112(%rax)
	vcvtsi2sd	%edi, %xmm13, %xmm3
	vaddsd	-80(%rax), %xmm3, %xmm4
	vmovsd	%xmm4, -80(%rax)
	vunpcklps	%xmm5, %xmm0, %xmm0     ## xmm0 = xmm0[0],xmm5[0],xmm0[1],xmm5[1]
	vsubpd	%xmm7, %xmm0, %xmm0
	vpermilpd	$1, %xmm0, %xmm4        ## xmm4 = xmm0[1,0]
	vaddsd	%xmm0, %xmm4, %xmm0
	vdivsd	%xmm3, %xmm0, %xmm0
	vpermpd	$208, %ymm2, %ymm2              ## ymm2 = ymm2[0,0,1,3]
	vblendpd	$1, %ymm0, %ymm2, %ymm2         ## ymm2 = ymm0[0],ymm2[1,2,3]
	vbroadcastsd	%xmm3, %ymm3
	vblendpd	$8, %ymm3, %ymm2, %ymm2         ## ymm2 = ymm2[0,1,2],ymm3[3]
	vaddpd	-48(%rax), %ymm2, %ymm2
	vmovupd	%ymm2, -48(%rax)
	vaddsd	-16(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rax)
LBB144_59:                              ##   in Loop: Header=BB144_45 Depth=1
	cmpq	$0, 27984(%rcx,%rdx)
	je	LBB144_61
## %bb.60:                              ##   in Loop: Header=BB144_45 Depth=1
	leaq	(%rcx,%rdx), %rsi
	addq	$27968, %rsi                    ## imm = 0x6D40
	movq	%rsi, (%rax)
	jmp	LBB144_61
LBB144_62:
	vcvtsi2sd	%r15d, %xmm12, %xmm1
	vbroadcastsd	%xmm1, %ymm1
	vxorps	%xmm6, %xmm6, %xmm6
	movl	$144, %eax
	.p2align	4, 0x90
LBB144_63:                              ## =>This Inner Loop Header: Depth=1
	vmovapd	688(%rsp,%rax), %xmm0
	vdivpd	%xmm1, %xmm0, %xmm0
	vpermilpd	$1, %xmm0, %xmm2        ## xmm2 = xmm0[1,0]
	vmovhpd	%xmm0, 696(%rsp,%rax)
	vmovapd	704(%rsp,%rax), %xmm3
	vdivpd	%xmm1, %xmm3, %xmm3
	vmovapd	%xmm3, 704(%rsp,%rax)
	vsubsd	%xmm2, %xmm0, %xmm0
	vmovsd	%xmm0, 688(%rsp,%rax)
	vmovupd	560(%rsp,%rax), %ymm2
	vmovupd	592(%rsp,%rax), %ymm3
	vmovupd	624(%rsp,%rax), %ymm4
	vmovupd	656(%rsp,%rax), %ymm5
	vdivpd	%ymm1, %ymm4, %ymm4
	vmovupd	%ymm4, 624(%rsp,%rax)
	vdivpd	%ymm1, %ymm5, %ymm4
	vmovupd	%ymm4, 656(%rsp,%rax)
	vdivpd	%ymm1, %ymm3, %ymm3
	vmovupd	%ymm3, 592(%rsp,%rax)
	vdivpd	%ymm1, %ymm2, %ymm2
	vsubpd	%ymm3, %ymm2, %ymm2
	vmovupd	%ymm2, 560(%rsp,%rax)
	vaddsd	%xmm0, %xmm6, %xmm6
	addq	$176, %rax
	cmpq	$22672, %rax                    ## imm = 0x5890
	jne	LBB144_63
LBB144_64:
	vaddss	16(%rsp), %xmm8, %xmm4          ## 16-byte Folded Reload
	xorl	%eax, %eax
	jmp	LBB144_65
	.p2align	4, 0x90
LBB144_69:                              ##   in Loop: Header=BB144_65 Depth=1
	incl	%eax
	cmpl	$128, %eax
	je	LBB144_70
LBB144_65:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB144_66 Depth 2
	xorl	%ecx, %ecx
	jmp	LBB144_66
	.p2align	4, 0x90
LBB144_68:                              ##   in Loop: Header=BB144_66 Depth=2
	addq	$176, %rcx
	cmpq	$22352, %rcx                    ## imm = 0x5750
	je	LBB144_69
LBB144_66:                              ##   Parent Loop BB144_65 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovsd	1008(%rsp,%rcx), %xmm0          ## xmm0 = mem[0],zero
	vucomisd	832(%rsp,%rcx), %xmm0
	jbe	LBB144_68
## %bb.67:                              ##   in Loop: Header=BB144_66 Depth=2
	vmovups	848(%rsp,%rcx), %ymm0
	vmovups	%ymm0, 336(%rsp)
	vmovups	832(%rsp,%rcx), %ymm0
	vmovups	%ymm0, 320(%rsp)
	vmovups	704(%rsp,%rcx), %ymm0
	vmovups	736(%rsp,%rcx), %ymm1
	vmovups	768(%rsp,%rcx), %ymm2
	vmovups	800(%rsp,%rcx), %ymm3
	vmovups	%ymm3, 288(%rsp)
	vmovups	%ymm2, 256(%rsp)
	vmovups	%ymm1, 224(%rsp)
	vmovups	%ymm0, 192(%rsp)
	vmovups	880(%rsp,%rcx), %ymm0
	vmovups	%ymm0, 704(%rsp,%rcx)
	vmovups	912(%rsp,%rcx), %ymm0
	vmovups	%ymm0, 736(%rsp,%rcx)
	vmovups	944(%rsp,%rcx), %ymm0
	vmovups	%ymm0, 768(%rsp,%rcx)
	vmovups	976(%rsp,%rcx), %ymm0
	vmovups	%ymm0, 800(%rsp,%rcx)
	vmovups	1008(%rsp,%rcx), %ymm0
	vmovups	%ymm0, 832(%rsp,%rcx)
	vmovups	1024(%rsp,%rcx), %ymm0
	vmovups	%ymm0, 848(%rsp,%rcx)
	vmovups	336(%rsp), %ymm0
	vmovups	%ymm0, 1024(%rsp,%rcx)
	vmovups	320(%rsp), %ymm0
	vmovups	%ymm0, 1008(%rsp,%rcx)
	vmovupd	192(%rsp), %ymm0
	vmovupd	224(%rsp), %ymm1
	vmovupd	256(%rsp), %ymm2
	vmovupd	288(%rsp), %ymm3
	vmovupd	%ymm3, 976(%rsp,%rcx)
	vmovupd	%ymm2, 944(%rsp,%rcx)
	vmovupd	%ymm1, 912(%rsp,%rcx)
	vmovupd	%ymm0, 880(%rsp,%rcx)
	jmp	LBB144_68
LBB144_70:
	movl	$168, %ebx
	leaq	L_.str.25(%rip), %r15
	leaq	L_.str.26(%rip), %r12
	vmovsd	%xmm6, 80(%rsp)                 ## 8-byte Spill
	jmp	LBB144_71
	.p2align	4, 0x90
LBB144_81:                              ##   in Loop: Header=BB144_71 Depth=1
	vmovss	%xmm4, 3470124(%r14)
	vmovsd	80(%rsp), %xmm6                 ## 8-byte Reload
                                        ## xmm6 = mem[0],zero
LBB144_82:                              ##   in Loop: Header=BB144_71 Depth=1
	addq	$176, %rbx
	cmpq	$22696, %rbx                    ## imm = 0x58A8
	je	LBB144_83
LBB144_71:                              ## =>This Inner Loop Header: Depth=1
	movq	704(%rsp,%rbx), %rax
	testq	%rax, %rax
	je	LBB144_82
## %bb.72:                              ##   in Loop: Header=BB144_71 Depth=1
	vmovsd	664(%rsp,%rbx), %xmm2           ## xmm2 = mem[0],zero
	vmovsd	680(%rsp,%rbx), %xmm3           ## xmm3 = mem[0],zero
	vdivsd	%xmm6, %xmm2, %xmm0
	vmulsd	LCPI144_21(%rip), %xmm0, %xmm1
	movq	(%rax), %rdx
	movq	16(%rax), %rcx
	movl	24(%rax), %r8d
	vmovaps	48(%rsp), %xmm0                 ## 16-byte Reload
	vinsertps	$16, %xmm4, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm4[0],xmm0[2,3]
	movq	%r13, %rdi
	movq	%r15, %rsi
	vmovsd	%xmm2, 32(%rsp)                 ## 8-byte Spill
	movb	$4, %al
	vmovaps	%xmm4, 16(%rsp)                 ## 16-byte Spill
	vzeroupper
	callq	__Z12push_2d_textP14Render_Context2v2PKcz
	vmovaps	16(%rsp), %xmm4                 ## 16-byte Reload
	vmovupd	536(%rsp,%rbx), %ymm5
	vxorps	%xmm0, %xmm0, %xmm0
	vcmpltpd	%ymm5, %ymm0, %ymm0
	vmovmskpd	%ymm0, %eax
	vaddss	6308(%r14), %xmm4, %xmm4
	leal	15(%rax), %ecx
	testb	%cl, %al
	je	LBB144_81
## %bb.73:                              ##   in Loop: Header=BB144_71 Depth=1
	vucomisd	LCPI144_24(%rip), %xmm5
	vmovapd	%ymm5, 96(%rsp)                 ## 32-byte Spill
	jne	LBB144_74
	jnp	LBB144_75
LBB144_74:                              ##   in Loop: Header=BB144_71 Depth=1
	vmovss	LCPI144_4(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	vmulss	6304(%r14), %xmm0, %xmm0
	vaddss	48(%rsp), %xmm0, %xmm0          ## 16-byte Folded Reload
	vdivsd	32(%rsp), %xmm5, %xmm1          ## 8-byte Folded Reload
	vmulsd	LCPI144_21(%rip), %xmm1, %xmm1
	vmovsd	600(%rsp,%rbx), %xmm3           ## xmm3 = mem[0],zero
	vinsertps	$16, %xmm4, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm4[0],xmm0[2,3]
	movq	%r13, %rdi
	movq	%r12, %rsi
	vmovapd	%xmm5, %xmm2
	xorl	%edx, %edx
	movb	$4, %al
	vmovaps	%xmm4, 16(%rsp)                 ## 16-byte Spill
	vzeroupper
	callq	__Z12push_2d_textP14Render_Context2v2PKcz
	vmovapd	96(%rsp), %ymm5                 ## 32-byte Reload
	vmovaps	16(%rsp), %xmm4                 ## 16-byte Reload
	vaddss	6308(%r14), %xmm4, %xmm4
LBB144_75:                              ##   in Loop: Header=BB144_71 Depth=1
	vpermilpd	$1, %xmm5, %xmm2        ## xmm2 = xmm5[1,0]
	vucomisd	LCPI144_24(%rip), %xmm2
	jne	LBB144_76
	jnp	LBB144_77
LBB144_76:                              ##   in Loop: Header=BB144_71 Depth=1
	vmovss	LCPI144_4(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	vmulss	6304(%r14), %xmm0, %xmm0
	vaddss	48(%rsp), %xmm0, %xmm0          ## 16-byte Folded Reload
	vdivsd	32(%rsp), %xmm2, %xmm1          ## 8-byte Folded Reload
	vmulsd	LCPI144_21(%rip), %xmm1, %xmm1
	vmovsd	608(%rsp,%rbx), %xmm3           ## xmm3 = mem[0],zero
	vinsertps	$16, %xmm4, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm4[0],xmm0[2,3]
	movq	%r13, %rdi
	movq	%r12, %rsi
	movl	$1, %edx
	movb	$4, %al
	vmovaps	%xmm4, 16(%rsp)                 ## 16-byte Spill
	vzeroupper
	callq	__Z12push_2d_textP14Render_Context2v2PKcz
	vmovapd	96(%rsp), %ymm5                 ## 32-byte Reload
	vmovaps	16(%rsp), %xmm4                 ## 16-byte Reload
	vaddss	6308(%r14), %xmm4, %xmm4
LBB144_77:                              ##   in Loop: Header=BB144_71 Depth=1
	vextractf128	$1, %ymm5, %xmm2
	vucomisd	LCPI144_24(%rip), %xmm2
	jne	LBB144_78
	jnp	LBB144_79
LBB144_78:                              ##   in Loop: Header=BB144_71 Depth=1
	vmovss	LCPI144_4(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	vmulss	6304(%r14), %xmm0, %xmm0
	vaddss	48(%rsp), %xmm0, %xmm0          ## 16-byte Folded Reload
	vdivsd	32(%rsp), %xmm2, %xmm1          ## 8-byte Folded Reload
	vmulsd	LCPI144_21(%rip), %xmm1, %xmm1
	vmovsd	616(%rsp,%rbx), %xmm3           ## xmm3 = mem[0],zero
	vinsertps	$16, %xmm4, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm4[0],xmm0[2,3]
	movq	%r13, %rdi
	movq	%r12, %rsi
	vmovapd	%xmm2, 96(%rsp)                 ## 16-byte Spill
	vmovaps	96(%rsp), %xmm2                 ## 16-byte Reload
	movl	$2, %edx
	movb	$4, %al
	vmovaps	%xmm4, 16(%rsp)                 ## 16-byte Spill
	vzeroupper
	callq	__Z12push_2d_textP14Render_Context2v2PKcz
	vmovapd	96(%rsp), %xmm2                 ## 16-byte Reload
	vmovaps	16(%rsp), %xmm4                 ## 16-byte Reload
	vaddss	6308(%r14), %xmm4, %xmm4
LBB144_79:                              ##   in Loop: Header=BB144_71 Depth=1
	vpermilpd	$1, %xmm2, %xmm2        ## xmm2 = xmm2[1,0]
	vucomisd	LCPI144_24(%rip), %xmm2
	jne	LBB144_80
	jnp	LBB144_81
LBB144_80:                              ##   in Loop: Header=BB144_71 Depth=1
	vmovss	LCPI144_4(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	vmulss	6304(%r14), %xmm0, %xmm0
	vaddss	48(%rsp), %xmm0, %xmm0          ## 16-byte Folded Reload
	vdivsd	32(%rsp), %xmm2, %xmm1          ## 8-byte Folded Reload
	vmulsd	LCPI144_21(%rip), %xmm1, %xmm1
	vmovsd	624(%rsp,%rbx), %xmm3           ## xmm3 = mem[0],zero
	vinsertps	$16, %xmm4, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm4[0],xmm0[2,3]
	movq	%r13, %rdi
	movq	%r12, %rsi
	movl	$3, %edx
	movb	$4, %al
	vmovaps	%xmm4, 16(%rsp)                 ## 16-byte Spill
	vzeroupper
	callq	__Z12push_2d_textP14Render_Context2v2PKcz
	vmovaps	16(%rsp), %xmm4                 ## 16-byte Reload
	vaddss	6308(%r14), %xmm4, %xmm4
	jmp	LBB144_81
LBB144_83:
	movl	$0, 395064(%r13)
LBB144_84:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	23232(%rsp), %rax
	jne	LBB144_86
## %bb.85:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
LBB144_86:
	vzeroupper
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z13end_profilingP4Game
LCPI145_0:
	.long	0x42f00000                      ## float 120
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z13end_profilingP4Game
	.p2align	4, 0x90
__Z13end_profilingP4Game:               ## @_Z13end_profilingP4Game
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	_timed_blocks1(%rip), %rcx
	cmpq	%rcx, _timed_blocks(%rip)
	leaq	_timed_blocks2(%rip), %rax
	cmovneq	%rcx, %rax
	movq	%rax, _timed_blocks(%rip)
	addq	$21544, %rax                    ## imm = 0x5428
	movq	$-7168, %rcx                    ## imm = 0xE400
	vxorps	%xmm0, %xmm0, %xmm0
	.p2align	4, 0x90
LBB145_1:                               ## =>This Inner Loop Header: Depth=1
	movl	$0, -14344(%rax,%rcx)
	vmovups	%xmm0, -14336(%rax,%rcx)
	movl	$0, -7176(%rax,%rcx)
	vmovups	%xmm0, -7168(%rax,%rcx)
	movl	$0, -8(%rax,%rcx)
	vmovups	%xmm0, (%rax,%rcx)
	movl	$0, 7160(%rax,%rcx)
	vmovups	%xmm0, 7168(%rax,%rcx)
	addq	$56, %rcx
	jne	LBB145_1
## %bb.2:
	cmpl	$0, 3470120(%rdi)
	je	LBB145_3
## %bb.6:
	popq	%rbp
	retq
LBB145_3:
	cmpl	$0, 196(%rdi)
	je	LBB145_5
## %bb.4:
	movl	3470112(%rdi), %eax
	movl	%eax, %ecx
	incl	%ecx
	movslq	%ecx, %rcx
	imulq	$-2004318071, %rcx, %rcx        ## imm = 0x88888889
	shrq	$32, %rcx
	addl	%eax, %ecx
	incl	%ecx
	movl	%ecx, %edx
	shrl	$31, %edx
	sarl	$6, %ecx
	addl	%edx, %ecx
	imull	$120, %ecx, %ecx
	negl	%ecx
	addl	%ecx, %eax
	incl	%eax
	movl	%eax, 3470112(%rdi)
LBB145_5:
	movl	3470128(%rdi), %eax
	incl	%eax
	vcvtsi2ss	%eax, %xmm1, %xmm0
	vmovss	LCPI145_0(%rip), %xmm1          ## xmm1 = mem[0],zero,zero,zero
	vminss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, 3470128(%rdi)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z12load_textureP5ArenaPKc
LCPI146_0:
	.long	4278190080                      ## 0xff000000
	.section	__TEXT,__const
	.p2align	5
LCPI146_1:
	.byte	3                               ## 0x3
	.byte	2                               ## 0x2
	.byte	1                               ## 0x1
	.byte	0                               ## 0x0
	.byte	7                               ## 0x7
	.byte	6                               ## 0x6
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	11                              ## 0xb
	.byte	10                              ## 0xa
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	15                              ## 0xf
	.byte	14                              ## 0xe
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.byte	3                               ## 0x3
	.byte	2                               ## 0x2
	.byte	1                               ## 0x1
	.byte	0                               ## 0x0
	.byte	7                               ## 0x7
	.byte	6                               ## 0x6
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	11                              ## 0xb
	.byte	10                              ## 0xa
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	15                              ## 0xf
	.byte	14                              ## 0xe
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z12load_textureP5ArenaPKc
	.p2align	4, 0x90
__Z12load_textureP5ArenaPKc:            ## @_Z12load_textureP5ArenaPKc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r12
	movq	%rsi, %r15
	movq	%rdi, %r13
	leaq	-92(%rbp), %rsi
	leaq	-88(%rbp), %rdx
	leaq	-84(%rbp), %rcx
	movq	%r12, %rdi
	movl	$4, %r8d
	callq	_stbi_load
	movq	%rax, -64(%rbp)                 ## 8-byte Spill
	testq	%rax, %rax
	je	LBB146_1
## %bb.2:
	movl	-84(%rbp), %eax
	addl	$-5, %eax
	cmpl	$-3, %eax
	jbe	LBB146_3
## %bb.6:
	movslq	-92(%rbp), %rax
	movl	%eax, (%r13)
	movslq	-88(%rbp), %rcx
	movl	%ecx, 4(%r13)
	movl	%eax, 8(%r13)
	movb	$1, %dl
	testb	%dl, %dl
	je	LBB146_7
## %bb.8:
	movq	%rax, %rdi
	imulq	%rcx, %rdi
	shlq	$2, %rdi
	movq	(%r15), %r10
	movq	8(%r15), %r14
	leaq	(%r10,%r14), %rbx
	addq	$31, %rbx
	movl	%ebx, %edx
	andl	$31, %edx
	movq	%rdx, -48(%rbp)                 ## 8-byte Spill
	leaq	(%rdx,%r10), %rsi
	movq	%rbx, %rdx
	subq	%rsi, %rdx
	movq	%rdx, -56(%rbp)                 ## 8-byte Spill
	leaq	(%rdx,%rdi), %rsi
	cmpq	16(%r15), %rsi
	ja	LBB146_9
## %bb.10:
	movq	%r12, -112(%rbp)                ## 8-byte Spill
	movl	%eax, %r8d
	movl	%ecx, %eax
	andq	$-32, %rbx
	movq	%rsi, 8(%r15)
	movq	%r13, -120(%rbp)                ## 8-byte Spill
	movq	%rbx, 16(%r13)
	movq	%rax, %rdx
	testl	%edx, %edx
	jle	LBB146_52
## %bb.11:
	testl	%r8d, %r8d
	jle	LBB146_52
## %bb.12:
	cmpl	$31, %r8d
	movq	%rdx, -80(%rbp)                 ## 8-byte Spill
	ja	LBB146_23
## %bb.13:
	leaq	-1(%r8), %rcx
	movl	%r8d, %r11d
	andl	$3, %r11d
	movl	%r8d, %r13d
	andl	$-4, %r13d
	subq	-48(%rbp), %r14                 ## 8-byte Folded Reload
	leaq	(%r14,%r10), %rax
	addq	$43, %rax
	movq	%rax, -48(%rbp)                 ## 8-byte Spill
	leal	-1(%rdx), %r14d
	imull	%r8d, %r14d
	addq	%r10, -56(%rbp)                 ## 8-byte Folded Spill
	leaq	(,%r11,4), %r9
	xorl	%r15d, %r15d
	movl	$-16777216, %ebx                ## imm = 0xFF000000
	movq	-64(%rbp), %rsi                 ## 8-byte Reload
	jmp	LBB146_14
	.p2align	4, 0x90
LBB146_22:                              ##   in Loop: Header=BB146_14 Depth=1
	incq	%r15
	subl	%r8d, %r14d
	movq	-80(%rbp), %rdx                 ## 8-byte Reload
	cmpq	%rdx, %r15
	je	LBB146_52
LBB146_14:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB146_17 Depth 2
                                        ##     Child Loop BB146_20 Depth 2
	movslq	%r14d, %r10
	cmpq	$3, %rcx
	jae	LBB146_16
## %bb.15:                              ##   in Loop: Header=BB146_14 Depth=1
	xorl	%edx, %edx
	jmp	LBB146_18
	.p2align	4, 0x90
LBB146_16:                              ##   in Loop: Header=BB146_14 Depth=1
	movq	-48(%rbp), %rax                 ## 8-byte Reload
	leaq	(%rax,%r10,4), %rdi
	xorl	%edx, %edx
	.p2align	4, 0x90
LBB146_17:                              ##   Parent Loop BB146_14 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	(%rsi), %r12d
	orl	%ebx, %r12d
	bswapl	%r12d
	movl	%r12d, -12(%rdi,%rdx,4)
	movl	4(%rsi), %eax
	orl	%ebx, %eax
	bswapl	%eax
	movl	%eax, -8(%rdi,%rdx,4)
	movl	8(%rsi), %eax
	orl	%ebx, %eax
	bswapl	%eax
	movl	%eax, -4(%rdi,%rdx,4)
	movl	12(%rsi), %eax
	orl	%ebx, %eax
	bswapl	%eax
	movl	%eax, (%rdi,%rdx,4)
	addq	$16, %rsi
	addq	$4, %rdx
	cmpq	%rdx, %r13
	jne	LBB146_17
LBB146_18:                              ##   in Loop: Header=BB146_14 Depth=1
	testq	%r11, %r11
	je	LBB146_22
## %bb.19:                              ##   in Loop: Header=BB146_14 Depth=1
	shlq	$2, %r10
	leaq	(%r10,%rdx,4), %rdx
	addq	-56(%rbp), %rdx                 ## 8-byte Folded Reload
	xorl	%edi, %edi
	.p2align	4, 0x90
LBB146_20:                              ##   Parent Loop BB146_14 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	(%rsi,%rdi), %eax
	orl	%ebx, %eax
	bswapl	%eax
	movl	%eax, (%rdx,%rdi)
	addq	$4, %rdi
	cmpq	%rdi, %r9
	jne	LBB146_20
## %bb.21:                              ##   in Loop: Header=BB146_14 Depth=1
	addq	%rdi, %rsi
	jmp	LBB146_22
LBB146_23:
	leaq	(%r14,%r10), %rax
	addq	$31, %rax
	movq	%rax, -104(%rbp)                ## 8-byte Spill
	movl	%r8d, %r13d
	andl	$-32, %r13d
	cmpq	%r8, %r13
	jne	LBB146_24
## %bb.27:
	leaq	-1(%r8), %rax
	movq	%rax, -136(%rbp)                ## 8-byte Spill
	movl	%r8d, %ecx
	andl	$3, %ecx
	movl	%r8d, %esi
	andl	$-4, %esi
	leaq	(,%r8,4), %rax
	andq	$-128, %rax
	subq	-48(%rbp), %r14                 ## 8-byte Folded Reload
	leaq	(%r14,%r10), %rdi
	addq	$127, %rdi
	movq	%rdi, -72(%rbp)                 ## 8-byte Spill
	leal	-1(%rdx), %r15d
	imull	%r8d, %r15d
	addq	%r10, -56(%rbp)                 ## 8-byte Folded Spill
	movq	%rcx, -128(%rbp)                ## 8-byte Spill
	leaq	(,%rcx,4), %rdi
	xorl	%r12d, %r12d
	movl	$-16777216, %r9d                ## imm = 0xFF000000
	vpbroadcastd	LCPI146_0(%rip), %ymm0  ## ymm0 = [4278190080,4278190080,4278190080,4278190080,4278190080,4278190080,4278190080,4278190080]
	vmovdqa	LCPI146_1(%rip), %ymm1          ## ymm1 = [3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12,3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12]
	movq	-64(%rbp), %r11                 ## 8-byte Reload
	jmp	LBB146_28
	.p2align	4, 0x90
LBB146_40:                              ##   in Loop: Header=BB146_28 Depth=1
	incq	%r12
	subl	%r8d, %r15d
	movq	%r14, %r11
	movq	-80(%rbp), %rdx                 ## 8-byte Reload
	cmpq	%rdx, %r12
	je	LBB146_52
LBB146_28:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB146_32 Depth 2
                                        ##     Child Loop BB146_34 Depth 2
                                        ##     Child Loop BB146_38 Depth 2
	movslq	%r15d, %r10
	movl	%r12d, %ecx
	notl	%ecx
	addl	%edx, %ecx
	imull	%r8d, %ecx
	movslq	%ecx, %rcx
	movq	-104(%rbp), %rdx                ## 8-byte Reload
	leaq	(%rdx,%rcx,4), %rcx
	movq	-48(%rbp), %rdx                 ## 8-byte Reload
	addq	%r11, %rdx
	subq	%rdx, %rcx
	cmpq	$127, %rcx
	ja	LBB146_31
## %bb.29:                              ##   in Loop: Header=BB146_28 Depth=1
	cmpq	$3, -136(%rbp)                  ## 8-byte Folded Reload
	jae	LBB146_33
## %bb.30:                              ##   in Loop: Header=BB146_28 Depth=1
                                        ## implicit-def: $r14
	xorl	%ebx, %ebx
	cmpq	$0, -128(%rbp)                  ## 8-byte Folded Reload
	jne	LBB146_37
	jmp	LBB146_40
	.p2align	4, 0x90
LBB146_31:                              ##   in Loop: Header=BB146_28 Depth=1
	movq	-72(%rbp), %rcx                 ## 8-byte Reload
	leaq	(%rcx,%r10,4), %rdx
	leaq	(%r11,%r13,4), %r14
	xorl	%ebx, %ebx
	.p2align	4, 0x90
LBB146_32:                              ##   Parent Loop BB146_28 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vpor	(%r11,%rbx), %ymm0, %ymm2
	vpor	32(%r11,%rbx), %ymm0, %ymm3
	vpor	64(%r11,%rbx), %ymm0, %ymm4
	vpor	96(%r11,%rbx), %ymm0, %ymm5
	vpshufb	%ymm1, %ymm2, %ymm2
	vpshufb	%ymm1, %ymm3, %ymm3
	vpshufb	%ymm1, %ymm4, %ymm4
	vpshufb	%ymm1, %ymm5, %ymm5
	vmovdqu	%ymm2, -96(%rdx,%rbx)
	vmovdqu	%ymm3, -64(%rdx,%rbx)
	vmovdqu	%ymm4, -32(%rdx,%rbx)
	vmovdqu	%ymm5, (%rdx,%rbx)
	subq	$-128, %rbx
	cmpq	%rbx, %rax
	jne	LBB146_32
	jmp	LBB146_40
	.p2align	4, 0x90
LBB146_33:                              ##   in Loop: Header=BB146_28 Depth=1
	movq	-72(%rbp), %rcx                 ## 8-byte Reload
	leaq	(%rcx,%r10,4), %rdx
	addq	$-84, %rdx
	xorl	%ebx, %ebx
	.p2align	4, 0x90
LBB146_34:                              ##   Parent Loop BB146_28 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	(%r11), %ecx
	orl	%r9d, %ecx
	bswapl	%ecx
	movl	%ecx, -12(%rdx,%rbx,4)
	movl	4(%r11), %ecx
	orl	%r9d, %ecx
	bswapl	%ecx
	movl	%ecx, -8(%rdx,%rbx,4)
	movl	8(%r11), %ecx
	orl	%r9d, %ecx
	bswapl	%ecx
	movl	%ecx, -4(%rdx,%rbx,4)
	movl	12(%r11), %ecx
	orl	%r9d, %ecx
	bswapl	%ecx
	movl	%ecx, (%rdx,%rbx,4)
	addq	$16, %r11
	addq	$4, %rbx
	cmpq	%rbx, %rsi
	jne	LBB146_34
## %bb.35:                              ##   in Loop: Header=BB146_28 Depth=1
	movq	%r11, %r14
	cmpq	$0, -128(%rbp)                  ## 8-byte Folded Reload
	je	LBB146_40
LBB146_37:                              ##   in Loop: Header=BB146_28 Depth=1
	shlq	$2, %r10
	leaq	(%r10,%rbx,4), %rdx
	addq	-56(%rbp), %rdx                 ## 8-byte Folded Reload
	xorl	%ebx, %ebx
	.p2align	4, 0x90
LBB146_38:                              ##   Parent Loop BB146_28 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	(%r11,%rbx), %ecx
	orl	%r9d, %ecx
	bswapl	%ecx
	movl	%ecx, (%rdx,%rbx)
	addq	$4, %rbx
	cmpq	%rbx, %rdi
	jne	LBB146_38
## %bb.39:                              ##   in Loop: Header=BB146_28 Depth=1
	addq	%rbx, %r11
	movq	%r11, %r14
	jmp	LBB146_40
LBB146_24:
	movl	%r8d, %edi
	andl	$3, %edi
	subq	-48(%rbp), %r14                 ## 8-byte Folded Reload
	leaq	(%r14,%r10), %rax
	addq	$127, %rax
	movq	%rax, -72(%rbp)                 ## 8-byte Spill
	leal	-1(%rdx), %r12d
	imull	%r8d, %r12d
	addq	%r10, -56(%rbp)                 ## 8-byte Folded Spill
	leaq	(%r14,%r10), %r11
	addq	$43, %r11
	xorl	%esi, %esi
	movl	$-16777216, %r14d               ## imm = 0xFF000000
	vpbroadcastd	LCPI146_0(%rip), %ymm0  ## ymm0 = [4278190080,4278190080,4278190080,4278190080,4278190080,4278190080,4278190080,4278190080]
	vmovdqa	LCPI146_1(%rip), %ymm1          ## ymm1 = [3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12,3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12]
	movq	-64(%rbp), %r15                 ## 8-byte Reload
	jmp	LBB146_25
	.p2align	4, 0x90
LBB146_51:                              ##   in Loop: Header=BB146_25 Depth=1
	incq	%rsi
	subl	%r8d, %r12d
	movq	-80(%rbp), %rdx                 ## 8-byte Reload
	cmpq	%rdx, %rsi
	je	LBB146_52
LBB146_25:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB146_42 Depth 2
                                        ##     Child Loop BB146_46 Depth 2
                                        ##     Child Loop BB146_50 Depth 2
	movslq	%r12d, %r10
	movl	%esi, %eax
	notl	%eax
	addl	%edx, %eax
	imull	%r8d, %eax
	cltq
	movq	-104(%rbp), %rcx                ## 8-byte Reload
	leaq	(%rcx,%rax,4), %rax
	movq	-48(%rbp), %rcx                 ## 8-byte Reload
	addq	%r15, %rcx
	subq	%rcx, %rax
	cmpq	$128, %rax
	jae	LBB146_41
## %bb.26:                              ##   in Loop: Header=BB146_25 Depth=1
	xorl	%edx, %edx
	jmp	LBB146_44
	.p2align	4, 0x90
LBB146_41:                              ##   in Loop: Header=BB146_25 Depth=1
	movq	-72(%rbp), %rax                 ## 8-byte Reload
	leaq	(%rax,%r10,4), %rax
	leaq	(%r15,%r13,4), %rbx
	xorl	%edx, %edx
	.p2align	4, 0x90
LBB146_42:                              ##   Parent Loop BB146_25 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vpor	(%r15,%rdx,4), %ymm0, %ymm2
	vpor	32(%r15,%rdx,4), %ymm0, %ymm3
	vpor	64(%r15,%rdx,4), %ymm0, %ymm4
	vpor	96(%r15,%rdx,4), %ymm0, %ymm5
	vpshufb	%ymm1, %ymm2, %ymm2
	vpshufb	%ymm1, %ymm3, %ymm3
	vpshufb	%ymm1, %ymm4, %ymm4
	vpshufb	%ymm1, %ymm5, %ymm5
	vmovdqu	%ymm2, -96(%rax,%rdx,4)
	vmovdqu	%ymm3, -64(%rax,%rdx,4)
	vmovdqu	%ymm4, -32(%rax,%rdx,4)
	vmovdqu	%ymm5, (%rax,%rdx,4)
	addq	$32, %rdx
	cmpq	%rdx, %r13
	jne	LBB146_42
## %bb.43:                              ##   in Loop: Header=BB146_25 Depth=1
	movq	%r13, %rdx
	movq	%rbx, %r15
LBB146_44:                              ##   in Loop: Header=BB146_25 Depth=1
	shlq	$2, %r10
	movq	%rdx, %rbx
	notq	%rbx
	addq	%r8, %rbx
	testq	%rdi, %rdi
	je	LBB146_48
## %bb.45:                              ##   in Loop: Header=BB146_25 Depth=1
	leaq	(%r10,%rdx,4), %rax
	addq	-56(%rbp), %rax                 ## 8-byte Folded Reload
	xorl	%r9d, %r9d
	.p2align	4, 0x90
LBB146_46:                              ##   Parent Loop BB146_25 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	(%r15), %ecx
	orl	%r14d, %ecx
	bswapl	%ecx
	movl	%ecx, (%rax,%r9,4)
	addq	$4, %r15
	incq	%r9
	cmpq	%r9, %rdi
	jne	LBB146_46
## %bb.47:                              ##   in Loop: Header=BB146_25 Depth=1
	addq	%r9, %rdx
LBB146_48:                              ##   in Loop: Header=BB146_25 Depth=1
	cmpq	$3, %rbx
	jb	LBB146_51
## %bb.49:                              ##   in Loop: Header=BB146_25 Depth=1
	movq	%r8, %rbx
	subq	%rdx, %rbx
	leaq	(%r10,%rdx,4), %rax
	addq	%r11, %rax
	xorl	%edx, %edx
	.p2align	4, 0x90
LBB146_50:                              ##   Parent Loop BB146_25 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	(%r15), %ecx
	orl	%r14d, %ecx
	bswapl	%ecx
	movl	%ecx, -12(%rax,%rdx,4)
	movl	4(%r15), %ecx
	orl	%r14d, %ecx
	bswapl	%ecx
	movl	%ecx, -8(%rax,%rdx,4)
	movl	8(%r15), %ecx
	orl	%r14d, %ecx
	bswapl	%ecx
	movl	%ecx, -4(%rax,%rdx,4)
	movl	12(%r15), %ecx
	orl	%r14d, %ecx
	bswapl	%ecx
	movl	%ecx, (%rax,%rdx,4)
	addq	$16, %r15
	addq	$4, %rdx
	cmpq	%rdx, %rbx
	jne	LBB146_50
	jmp	LBB146_51
LBB146_52:
	leaq	L_.str.31(%rip), %rdi
	movq	-112(%rbp), %rsi                ## 8-byte Reload
	movq	%rdx, %rcx
	movl	%r8d, %edx
                                        ## kill: def $ecx killed $ecx killed $rcx
	xorl	%eax, %eax
	vzeroupper
	callq	_printf
	movq	-64(%rbp), %rdi                 ## 8-byte Reload
	callq	_free
	movq	-120(%rbp), %rax                ## 8-byte Reload
LBB146_5:
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB146_1:
	movq	%r12, %rdi
	callq	__Z12load_textureP5ArenaPKc.cold.1
	jmp	LBB146_4
LBB146_9:
	callq	__Z12load_textureP5ArenaPKc.cold.3
LBB146_4:
	movq	%r13, %rax
	jmp	LBB146_5
LBB146_3:
	callq	__Z12load_textureP5ArenaPKc.cold.2
	jmp	LBB146_4
LBB146_7:
	callq	__Z12load_textureP5ArenaPKc.cold.4
	jmp	LBB146_4
	.cfi_endproc
                                        ## -- End function
	.globl	__Z11read_vertexPPcPi           ## -- Begin function _Z11read_vertexPPcPi
	.p2align	4, 0x90
__Z11read_vertexPPcPi:                  ## @_Z11read_vertexPPcPi
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	(%rdi), %rdi
	movq	%r14, %rsi
	movl	$10, %edx
	callq	_strtol
	movl	%eax, (%rbx)
	movq	(%r14), %rdi
	cmpb	$47, (%rdi)
	jne	LBB147_3
## %bb.1:
	addq	$4, %rbx
	.p2align	4, 0x90
LBB147_2:                               ## =>This Inner Loop Header: Depth=1
	incq	%rdi
	movq	%rdi, (%r14)
	movq	%r14, %rsi
	movl	$10, %edx
	callq	_strtol
	movl	%eax, (%rbx)
	movq	(%r14), %rdi
	addq	$4, %rbx
	cmpb	$47, (%rdi)
	je	LBB147_2
LBB147_3:
	incq	%rdi
	movq	%rdi, (%r14)
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture
LCPI148_0:
	.long	0x00800000                      ## float 1.17549435E-38
LCPI148_1:
	.long	0x3727c5ac                      ## float 9.99999974E-6
LCPI148_2:
	.long	0x3f800000                      ## float 1
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__Z9load_meshP5ArenaPKcP7Texture
	.p2align	4, 0x90
__Z9load_meshP5ArenaPKcP7Texture:       ## @_Z9load_meshP5ArenaPKcP7Texture
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$200, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, -232(%rbp)                ## 8-byte Spill
	movq	%rdi, %r12
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%ymm0, 16(%rdi)
	vmovups	%ymm0, (%rdi)
	movb	$1, %al
	testb	%al, %al
	je	LBB148_73
## %bb.1:
	movq	%rsi, %r15
	movq	(%rsi), %rcx
	movq	8(%rsi), %rsi
	leaq	(%rcx,%rsi), %r14
	addq	$31, %r14
	movl	%r14d, %edi
	andl	$31, %edi
	movq	%r14, %r13
	subq	%rdi, %r13
	subq	%rcx, %r13
	addq	$134217728, %r13                ## imm = 0x8000000
	cmpq	16(%r15), %r13
	ja	LBB148_64
## %bb.2:
	movq	%rdi, -184(%rbp)                ## 8-byte Spill
	movq	%rsi, -192(%rbp)                ## 8-byte Spill
	movq	%rcx, -200(%rbp)                ## 8-byte Spill
	andq	$-32, %r14
	movq	%r13, 8(%r15)
	movq	%r14, (%r12)
	movq	%r15, %rdi
	movq	%rdx, %rsi
	vzeroupper
	callq	__Z16read_entire_fileP5ArenaPKc
	movq	%rax, %rdi
	movb	$1, %al
	testb	%al, %al
	je	LBB148_74
## %bb.3:
	movq	(%r15), %rax
	movq	8(%r15), %rcx
	leaq	(%rax,%rcx), %rdx
	addq	$31, %rdx
	movl	%edx, %ecx
	andl	$31, %ecx
	addq	%rax, %rcx
	movq	%rdx, -128(%rbp)                ## 8-byte Spill
	subq	%rcx, %rdx
	addq	$8388608, %rdx                  ## imm = 0x800000
	movq	16(%r15), %rcx
	cmpq	%rcx, %rdx
	ja	LBB148_65
## %bb.4:
	movq	%rdx, 8(%r15)
	movb	$1, %bl
	testb	%bl, %bl
	je	LBB148_75
## %bb.5:
	addq	%rax, %rdx
	addq	$31, %rdx
	movl	%edx, %esi
	andl	$31, %esi
	addq	%rax, %rsi
	movq	%rdx, -120(%rbp)                ## 8-byte Spill
	subq	%rsi, %rdx
	addq	$12582912, %rdx                 ## imm = 0xC00000
	cmpq	%rcx, %rdx
	ja	LBB148_66
## %bb.6:
	movq	%rdx, 8(%r15)
	movb	$1, %bl
	testb	%bl, %bl
	je	LBB148_76
## %bb.7:
	leaq	(%rax,%rdx), %rsi
	addq	$31, %rsi
	movl	%esi, %edx
	andl	$31, %edx
	addq	%rax, %rdx
	movq	%rsi, %rax
	subq	%rdx, %rax
	addq	$12582912, %rax                 ## imm = 0xC00000
	cmpq	%rcx, %rax
	ja	LBB148_67
## %bb.8:
	movq	%r13, -208(%rbp)                ## 8-byte Spill
	andq	$-32, -128(%rbp)                ## 8-byte Folded Spill
	andq	$-32, -120(%rbp)                ## 8-byte Folded Spill
	andq	$-32, %rsi
	movq	%rsi, -144(%rbp)                ## 8-byte Spill
	movq	%r15, -216(%rbp)                ## 8-byte Spill
	movq	%rax, 8(%r15)
	movq	%rdi, -96(%rbp)
	vmovss	LCPI148_0(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	vmovaps	%xmm0, -176(%rbp)               ## 16-byte Spill
	xorl	%r13d, %r13d
	leaq	-96(%rbp), %r15
	movl	$0, -108(%rbp)                  ## 4-byte Folded Spill
	movl	$0, -104(%rbp)                  ## 4-byte Folded Spill
	movl	$0, -100(%rbp)                  ## 4-byte Folded Spill
	movq	%r12, -224(%rbp)                ## 8-byte Spill
	movb	(%rdi), %al
	cmpb	$102, %al
	jne	LBB148_10
	jmp	LBB148_24
	.p2align	4, 0x90
LBB148_9:
	movq	%rdi, -96(%rbp)
	movl	%r9d, %r13d
	movb	(%rdi), %al
	cmpb	$102, %al
	je	LBB148_24
LBB148_10:
	cmpb	$118, %al
	je	LBB148_13
## %bb.11:
	testb	%al, %al
	jne	LBB148_12
	jmp	LBB148_58
	.p2align	4, 0x90
LBB148_13:
	movb	1(%rdi), %al
	cmpb	$116, %al
	je	LBB148_18
## %bb.14:
	cmpb	$110, %al
	je	LBB148_19
## %bb.15:
	cmpb	$32, %al
	jne	LBB148_12
## %bb.16:
	addq	$2, %rdi
	movq	%rdi, -96(%rbp)
	movq	%r15, %rsi
	callq	_strtof
	vmovss	%xmm0, -160(%rbp)               ## 4-byte Spill
	movq	-96(%rbp), %rdi
	incq	%rdi
	movq	%rdi, -96(%rbp)
	movq	%r15, %rsi
	callq	_strtof
	vmovss	%xmm0, -132(%rbp)               ## 4-byte Spill
	movq	-96(%rbp), %rdi
	incq	%rdi
	movq	%rdi, -96(%rbp)
	movq	%r15, %rsi
	callq	_strtof
	movl	-100(%rbp), %ecx                ## 4-byte Reload
	cmpl	$1048576, %ecx                  ## imm = 0x100000
	jge	LBB148_72
## %bb.17:
	vmovss	-132(%rbp), %xmm5               ## 4-byte Reload
                                        ## xmm5 = mem[0],zero,zero,zero
	vmaxss	%xmm5, %xmm0, %xmm1
	vcmpunordss	%xmm5, %xmm5, %xmm2
	vblendvps	%xmm2, %xmm0, %xmm1, %xmm1
	vmovss	-160(%rbp), %xmm4               ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vmaxss	%xmm4, %xmm1, %xmm2
	vcmpunordss	%xmm4, %xmm4, %xmm3
	vblendvps	%xmm3, %xmm1, %xmm2, %xmm1
	vmovaps	-176(%rbp), %xmm3               ## 16-byte Reload
	vmaxss	%xmm3, %xmm1, %xmm2
	vcmpunordss	%xmm3, %xmm3, %xmm3
	vblendvps	%xmm3, %xmm1, %xmm2, %xmm1
	vmovaps	%xmm1, -176(%rbp)               ## 16-byte Spill
	movslq	%ecx, %rax
	incl	%ecx
	movl	%ecx, -100(%rbp)                ## 4-byte Spill
	leaq	(%rax,%rax,2), %rax
	movq	-144(%rbp), %rcx                ## 8-byte Reload
	vmovss	%xmm4, (%rcx,%rax,4)
	vmovss	%xmm5, 4(%rcx,%rax,4)
	vmovss	%xmm0, 8(%rcx,%rax,4)
	movl	%r13d, %r9d
	movq	-96(%rbp), %rdi
	movb	(%rdi), %cl
	testb	%cl, %cl
	jne	LBB148_55
	jmp	LBB148_57
LBB148_18:
	addq	$3, %rdi
	movq	%rdi, -96(%rbp)
	movq	%r15, %rsi
	callq	_strtof
	vmovaps	%xmm0, -160(%rbp)               ## 16-byte Spill
	movq	-96(%rbp), %rdi
	incq	%rdi
	movq	%rdi, -96(%rbp)
	movq	%r15, %rsi
	callq	_strtof
	vmovaps	-160(%rbp), %xmm1               ## 16-byte Reload
	vinsertps	$16, %xmm0, %xmm1, %xmm0 ## xmm0 = xmm1[0],xmm0[0],xmm1[2,3]
	movl	-104(%rbp), %ecx                ## 4-byte Reload
	movslq	%ecx, %rax
	incl	%ecx
	movl	%ecx, -104(%rbp)                ## 4-byte Spill
	movq	-128(%rbp), %rcx                ## 8-byte Reload
	vmovlps	%xmm0, (%rcx,%rax,8)
	movl	%r13d, %r9d
	movq	-96(%rbp), %rdi
	movb	(%rdi), %cl
	testb	%cl, %cl
	jne	LBB148_55
	jmp	LBB148_57
LBB148_19:
	addq	$3, %rdi
	movq	%rdi, -96(%rbp)
	movslq	-108(%rbp), %rax                ## 4-byte Folded Reload
	leaq	(%rax,%rax,2), %r12
	movq	%r15, %rsi
	callq	_strtof
	movq	-120(%rbp), %rbx                ## 8-byte Reload
	vmovss	%xmm0, (%rbx,%r12,4)
	movq	-96(%rbp), %rdi
	incq	%rdi
	movq	%rdi, -96(%rbp)
	movq	%r15, %rsi
	callq	_strtof
	vmovss	%xmm0, 4(%rbx,%r12,4)
	movq	-96(%rbp), %rdi
	incq	%rdi
	movq	%rdi, -96(%rbp)
	movq	%r15, %rsi
	callq	_strtof
	vmovsd	(%rbx,%r12,4), %xmm1            ## xmm1 = mem[0],zero
	vmulps	%xmm1, %xmm1, %xmm2
	vmovshdup	%xmm2, %xmm2            ## xmm2 = xmm2[1,1,3,3]
	vmulss	%xmm1, %xmm1, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vmulss	%xmm0, %xmm0, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vsqrtss	%xmm2, %xmm2, %xmm2
	vmovss	LCPI148_1(%rip), %xmm3          ## xmm3 = mem[0],zero,zero,zero
	vucomiss	%xmm2, %xmm3
	jae	LBB148_22
## %bb.20:
	vmovss	LCPI148_2(%rip), %xmm3          ## xmm3 = mem[0],zero,zero,zero
	vdivss	%xmm2, %xmm3, %xmm2
	vbroadcastss	%xmm2, %xmm3
	vmulps	%xmm3, %xmm1, %xmm1
	vmulss	%xmm2, %xmm0, %xmm0
	jmp	LBB148_23
LBB148_22:
	vxorps	%xmm0, %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
LBB148_23:
	incl	-108(%rbp)                      ## 4-byte Folded Spill
	movq	-120(%rbp), %rax                ## 8-byte Reload
	leaq	(%rax,%r12,4), %rax
	vmovlps	%xmm1, (%rax)
	vmovss	%xmm0, 8(%rax)
	movl	%r13d, %r9d
	movq	-224(%rbp), %r12                ## 8-byte Reload
	movq	-96(%rbp), %rdi
	movb	(%rdi), %cl
	testb	%cl, %cl
	jne	LBB148_55
	jmp	LBB148_57
	.p2align	4, 0x90
LBB148_24:
	cmpb	$32, 1(%rdi)
	jne	LBB148_12
## %bb.25:
	addq	$2, %rdi
	movq	%rdi, -96(%rbp)
	movq	$0, -56(%rbp)
	movq	$0, -68(%rbp)
	movq	$0, -80(%rbp)
	movq	%r15, %rsi
	movl	$10, %edx
	callq	_strtol
	movl	%eax, -60(%rbp)
	movq	-96(%rbp), %rdi
	cmpb	$47, (%rdi)
	jne	LBB148_28
## %bb.26:
	leaq	-56(%rbp), %rbx
	.p2align	4, 0x90
LBB148_27:                              ## =>This Inner Loop Header: Depth=1
	incq	%rdi
	movq	%rdi, -96(%rbp)
	movq	%r15, %rsi
	movl	$10, %edx
	callq	_strtol
	movl	%eax, (%rbx)
	movq	-96(%rbp), %rdi
	addq	$4, %rbx
	cmpb	$47, (%rdi)
	je	LBB148_27
LBB148_28:
	incq	%rdi
	movq	%rdi, -96(%rbp)
	movq	%r15, %rsi
	movl	$10, %edx
	callq	_strtol
	movl	%eax, -72(%rbp)
	movq	-96(%rbp), %rdi
	cmpb	$47, (%rdi)
	jne	LBB148_31
## %bb.29:
	leaq	-68(%rbp), %rbx
	.p2align	4, 0x90
LBB148_30:                              ## =>This Inner Loop Header: Depth=1
	incq	%rdi
	movq	%rdi, -96(%rbp)
	movq	%r15, %rsi
	movl	$10, %edx
	callq	_strtol
	movl	%eax, (%rbx)
	movq	-96(%rbp), %rdi
	addq	$4, %rbx
	cmpb	$47, (%rdi)
	je	LBB148_30
LBB148_31:
	incq	%rdi
	movq	%rdi, -96(%rbp)
	movq	%r15, %rsi
	movl	$10, %edx
	callq	_strtol
	movl	%eax, -84(%rbp)
	movq	-96(%rbp), %rdi
	cmpb	$47, (%rdi)
	jne	LBB148_34
## %bb.32:
	leaq	-80(%rbp), %rbx
	.p2align	4, 0x90
LBB148_33:                              ## =>This Inner Loop Header: Depth=1
	incq	%rdi
	movq	%rdi, -96(%rbp)
	movq	%r15, %rsi
	movl	$10, %edx
	callq	_strtol
	movl	%eax, (%rbx)
	movq	-96(%rbp), %rdi
	addq	$4, %rbx
	cmpb	$47, (%rdi)
	je	LBB148_33
LBB148_34:
	movq	%rdi, -96(%rbp)
	cmpl	$1048576, %r13d                 ## imm = 0x100000
	jge	LBB148_71
## %bb.35:
	leal	1(%r13), %r9d
	movl	%r9d, 8(%r12)
	movl	-60(%rbp), %ebx
	testl	%ebx, %ebx
	jle	LBB148_68
## %bb.36:
	movl	-72(%rbp), %edi
	testl	%edi, %edi
	jle	LBB148_68
## %bb.37:
	movl	-84(%rbp), %esi
	testl	%esi, %esi
	jle	LBB148_68
## %bb.38:
	movslq	%r13d, %rcx
	shlq	$7, %rcx
	leaq	(%r14,%rcx), %r8
	decl	%ebx
	leaq	(%rbx,%rbx,2), %rbx
	movq	-144(%rbp), %rax                ## 8-byte Reload
	movl	8(%rax,%rbx,4), %edx
	movl	%edx, 8(%r8)
	movq	(%rax,%rbx,4), %rdx
	movq	%rdx, (%r8)
	decl	%edi
	leaq	(%rdi,%rdi,2), %rdx
	movl	8(%rax,%rdx,4), %edi
	movl	%edi, 20(%r14,%rcx)
	movq	(%rax,%rdx,4), %rdx
	movq	%rdx, 12(%r14,%rcx)
	decl	%esi
	leaq	(%rsi,%rsi,2), %rdx
	movl	8(%rax,%rdx,4), %esi
	movl	%esi, 32(%r14,%rcx)
	movq	(%rax,%rdx,4), %rdx
	movq	%rdx, 24(%r14,%rcx)
	movq	-232(%rbp), %rdx                ## 8-byte Reload
	movq	%rdx, 112(%r14,%rcx)
	movl	-56(%rbp), %esi
	testl	%esi, %esi
	je	LBB148_43
## %bb.39:
	jle	LBB148_69
## %bb.40:
	movl	-68(%rbp), %edi
	testl	%edi, %edi
	jle	LBB148_69
## %bb.41:
	movl	-80(%rbp), %ebx
	testl	%ebx, %ebx
	jle	LBB148_69
## %bb.42:
	decl	%esi
	movq	-128(%rbp), %rdx                ## 8-byte Reload
	vmovsd	(%rdx,%rsi,8), %xmm0            ## xmm0 = mem[0],zero
	vmovsd	%xmm0, 36(%r14,%rcx)
	decl	%edi
	vmovsd	(%rdx,%rdi,8), %xmm0            ## xmm0 = mem[0],zero
	vmovsd	%xmm0, 44(%r14,%rcx)
	decl	%ebx
	vmovsd	(%rdx,%rbx,8), %xmm0            ## xmm0 = mem[0],zero
	vmovsd	%xmm0, 52(%r14,%rcx)
LBB148_43:
	movl	-52(%rbp), %esi
	testl	%esi, %esi
	je	LBB148_49
## %bb.44:
	jle	LBB148_70
## %bb.45:
	movl	-64(%rbp), %edi
	testl	%edi, %edi
	jle	LBB148_70
## %bb.46:
	movl	-76(%rbp), %edx
	testl	%edx, %edx
	jle	LBB148_70
## %bb.47:
	decl	%esi
	leaq	(%rsi,%rsi,2), %rsi
	movq	-120(%rbp), %rax                ## 8-byte Reload
	movl	8(%rax,%rsi,4), %ebx
	movl	%ebx, 68(%r14,%rcx)
	movq	(%rax,%rsi,4), %rsi
	movq	%rsi, 60(%r14,%rcx)
	decl	%edi
	leaq	(%rdi,%rdi,2), %rsi
	movq	(%rax,%rsi,4), %rdi
	movq	%rdi, 72(%r14,%rcx)
	movl	8(%rax,%rsi,4), %esi
	movl	%esi, 80(%r14,%rcx)
	decl	%edx
	leaq	(%rdx,%rdx,2), %rdx
	leaq	(%rax,%rdx,4), %rdx
	addq	%r14, %rcx
	addq	$84, %rcx
	jmp	LBB148_53
	.p2align	4, 0x90
LBB148_12:
	movl	%r13d, %r9d
	movq	-96(%rbp), %rdi
	movb	(%rdi), %cl
	testb	%cl, %cl
	je	LBB148_57
	.p2align	4, 0x90
LBB148_55:                              ## =>This Inner Loop Header: Depth=1
	incq	%rdi
	cmpb	$10, %cl
	je	LBB148_9
## %bb.56:                              ##   in Loop: Header=BB148_55 Depth=1
	movq	%rdi, -96(%rbp)
	movzbl	(%rdi), %ecx
	testb	%cl, %cl
	jne	LBB148_55
LBB148_57:
	movl	%r9d, %r13d
	movb	(%rdi), %al
	cmpb	$102, %al
	jne	LBB148_10
	jmp	LBB148_24
LBB148_49:
	leaq	(%r14,%rcx), %rdx
	addq	$12, %rdx
	vmovsd	(%rdx), %xmm0                   ## xmm0 = mem[0],zero
	vmovss	8(%r14,%rcx), %xmm1             ## xmm1 = mem[0],zero,zero,zero
	vmovss	20(%r14,%rcx), %xmm2            ## xmm2 = mem[0],zero,zero,zero
	vmovsd	(%r8), %xmm3                    ## xmm3 = mem[0],zero
	vsubps	%xmm3, %xmm0, %xmm4
	vmovshdup	%xmm4, %xmm5            ## xmm5 = xmm4[1,1,3,3]
	vsubss	%xmm1, %xmm2, %xmm2
	vmovsd	12(%rdx), %xmm0                 ## xmm0 = mem[0],zero
	vmovss	32(%r14,%rcx), %xmm6            ## xmm6 = mem[0],zero,zero,zero
	vsubps	%xmm3, %xmm0, %xmm3
	vmovshdup	%xmm3, %xmm7            ## xmm7 = xmm3[1,1,3,3]
	vsubss	%xmm1, %xmm6, %xmm1
	vmulss	%xmm7, %xmm2, %xmm0
	vmulss	%xmm1, %xmm5, %xmm6
	vsubss	%xmm0, %xmm6, %xmm0
	vmulss	%xmm4, %xmm1, %xmm1
	vmulss	%xmm3, %xmm2, %xmm2
	vsubss	%xmm1, %xmm2, %xmm1
	vmulss	%xmm5, %xmm3, %xmm2
	vmulss	%xmm7, %xmm4, %xmm3
	vsubss	%xmm2, %xmm3, %xmm2
	vmulss	%xmm1, %xmm1, %xmm3
	vmulss	%xmm0, %xmm0, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vmulss	%xmm2, %xmm2, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vsqrtss	%xmm3, %xmm3, %xmm3
	vmovss	LCPI148_1(%rip), %xmm4          ## xmm4 = mem[0],zero,zero,zero
	vucomiss	%xmm3, %xmm4
	jae	LBB148_51
## %bb.50:
	vmovss	LCPI148_2(%rip), %xmm4          ## xmm4 = mem[0],zero,zero,zero
	vdivss	%xmm3, %xmm4, %xmm3
	vmulss	%xmm3, %xmm0, %xmm0
	vmulss	%xmm3, %xmm1, %xmm1
	vinsertps	$16, %xmm1, %xmm0, %xmm1 ## xmm1 = xmm0[0],xmm1[0],xmm0[2,3]
	vmulss	%xmm3, %xmm2, %xmm0
	jmp	LBB148_52
LBB148_51:
	vxorps	%xmm0, %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
LBB148_52:
	leaq	(%r14,%rcx), %rdx
	addq	$84, %rdx
	vmovlps	%xmm1, 84(%r14,%rcx)
	vmovss	%xmm0, 92(%r14,%rcx)
	movq	84(%r14,%rcx), %rsi
	movq	%rsi, 72(%r14,%rcx)
	movl	92(%r14,%rcx), %esi
	movl	%esi, 80(%r14,%rcx)
	addq	%r14, %rcx
	addq	$60, %rcx
LBB148_53:
	movl	8(%rdx), %esi
	movl	%esi, 8(%rcx)
	movq	(%rdx), %rdx
	movq	%rdx, (%rcx)
	movq	-96(%rbp), %rdi
	movb	(%rdi), %cl
	testb	%cl, %cl
	jne	LBB148_55
	jmp	LBB148_57
LBB148_58:
	leaq	L_.str.37(%rip), %rdi
	movl	%r13d, %esi
	xorl	%eax, %eax
	callq	_printf
	testl	%r13d, %r13d
	jle	LBB148_61
## %bb.59:
	vmovss	LCPI148_2(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	vdivss	-176(%rbp), %xmm0, %xmm0        ## 16-byte Folded Reload
	movl	%r13d, %eax
	vbroadcastss	%xmm0, %xmm1
	movq	-192(%rbp), %rdx                ## 8-byte Reload
	subq	-184(%rbp), %rdx                ## 8-byte Folded Reload
	movq	-200(%rbp), %rcx                ## 8-byte Reload
	addq	%rdx, %rcx
	addq	$63, %rcx
	shlq	$7, %rax
	xorl	%edx, %edx
	.p2align	4, 0x90
LBB148_60:                              ## =>This Inner Loop Header: Depth=1
	vmovsd	-32(%rcx,%rdx), %xmm2           ## xmm2 = mem[0],zero
	vmovsd	-20(%rcx,%rdx), %xmm3           ## xmm3 = mem[0],zero
	vmovsd	-8(%rcx,%rdx), %xmm4            ## xmm4 = mem[0],zero
	vmulps	%xmm2, %xmm1, %xmm2
	vmulss	-24(%rcx,%rdx), %xmm0, %xmm5
	vmovlps	%xmm2, -32(%rcx,%rdx)
	vmovss	%xmm5, -24(%rcx,%rdx)
	vmulps	%xmm3, %xmm1, %xmm2
	vmulss	-12(%rcx,%rdx), %xmm0, %xmm3
	vmovlps	%xmm2, -20(%rcx,%rdx)
	vmovss	%xmm3, -12(%rcx,%rdx)
	vmulps	%xmm4, %xmm1, %xmm2
	vmulss	(%rcx,%rdx), %xmm0, %xmm3
	vmovlps	%xmm2, -8(%rcx,%rdx)
	vmovss	%xmm3, (%rcx,%rdx)
	subq	$-128, %rdx
	cmpq	%rdx, %rax
	jne	LBB148_60
LBB148_61:
	movl	$1048576, %eax                  ## imm = 0x100000
	subl	%r13d, %eax
	cltq
	shlq	$7, %rax
	movq	-208(%rbp), %rcx                ## 8-byte Reload
	subq	%rax, %rcx
	movq	-216(%rbp), %rax                ## 8-byte Reload
	movq	%rcx, 8(%rax)
LBB148_62:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB148_77
## %bb.63:
	movq	%r12, %rax
	addq	$200, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB148_64:
	vzeroupper
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.1
	jmp	LBB148_62
LBB148_65:
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.2
	jmp	LBB148_62
LBB148_66:
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.3
	jmp	LBB148_62
LBB148_67:
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.4
	jmp	LBB148_62
LBB148_68:
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.9
	jmp	LBB148_62
LBB148_69:
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.8
	jmp	LBB148_62
LBB148_70:
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.7
	jmp	LBB148_62
LBB148_71:
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.6
	jmp	LBB148_62
LBB148_72:
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.5
	jmp	LBB148_62
LBB148_73:
	vzeroupper
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.13
	jmp	LBB148_62
LBB148_74:
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.12
	jmp	LBB148_62
LBB148_75:
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.11
	jmp	LBB148_62
LBB148_76:
	callq	__Z9load_meshP5ArenaPKcP7Texture.cold.10
	jmp	LBB148_62
LBB148_77:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	_game_thread_work               ## -- Begin function game_thread_work
	.p2align	4, 0x90
_game_thread_work:                      ## @game_thread_work
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	movl	$1, %ecx
	lock		xaddl	%ecx, 6312(%rdi)
	incl	%ecx
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movl	%ecx, (%rax)
	.p2align	4, 0x90
LBB149_1:                               ## =>This Inner Loop Header: Depth=1
	movl	$1, %esi
	lock		xaddl	%esi, 6316(%rbx)
	cmpl	$99, %esi
	jg	LBB149_1
## %bb.2:                               ##   in Loop: Header=BB149_1 Depth=1
	movq	6296(%rbx), %rdi
	callq	__Z11render_tileP14Render_Contexti
	lock		incl	6320(%rbx)
	jmp	LBB149_1
	.cfi_endproc
                                        ## -- End function
	.globl	__ZTW13g_thread_info            ## -- Begin function _ZTW13g_thread_info
	.p2align	4, 0x90
__ZTW13g_thread_info:                   ## @_ZTW13g_thread_info
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ## -- Begin function game_update_and_render
LCPI151_0:
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	4                               ## 0x4
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
LCPI151_1:
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	32                              ## 0x20
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
LCPI151_2:
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	192                             ## 0xc0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
LCPI151_36:
	.long	0x00000000                      ## float 0
	.long	0x3f800000                      ## float 1
	.space	4
	.space	4
LCPI151_37:
	.long	0x3f333333                      ## float 0.699999988
	.space	4
	.space	4
	.space	4
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2
LCPI151_3:
	.long	0x41a00000                      ## float 20
LCPI151_4:
	.long	0x3f800000                      ## float 1
LCPI151_5:
	.long	0x42c80000                      ## float 100
LCPI151_6:
	.long	0x42b40000                      ## float 90
LCPI151_7:
	.long	0x42800000                      ## float 64
LCPI151_8:
	.long	0x80000000                      ## float -0
LCPI151_9:
	.long	0x3effffff                      ## float 0.49999997
LCPI151_10:
	.long	0x3c23d70a                      ## float 0.00999999977
LCPI151_11:
	.long	4294967040                      ## 0xffffff00
LCPI151_15:
	.long	0xc0a00000                      ## float -5
LCPI151_16:
	.long	0x3e99999a                      ## float 0.300000012
LCPI151_17:
	.long	0x40a00000                      ## float 5
LCPI151_18:
	.long	0x3f333333                      ## float 0.699999988
LCPI151_19:
	.long	0xbe99999a                      ## float -0.300000012
LCPI151_20:
	.long	0x3ecccccc                      ## float 0.399999976
LCPI151_21:
	.long	0x3f000000                      ## float 0.5
LCPI151_25:
	.long	0x3727c5ac                      ## float 9.99999974E-6
LCPI151_26:
	.long	0x41000000                      ## float 8
LCPI151_27:
	.long	0x3c888889                      ## float 0.0166666675
LCPI151_30:
	.long	0xbf800000                      ## float -1
LCPI151_31:
	.long	1296911616                      ## 0x4d4d4d00
LCPI151_33:
	.long	0x40400000                      ## float 3
LCPI151_34:
	.long	0x41200000                      ## float 10
LCPI151_35:
	.long	0xc0400000                      ## float -3
LCPI151_38:
	.long	0x42f00000                      ## float 120
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3
LCPI151_12:
	.quad	0x3df0000000100000              ## double 2.3283064370807974E-10
LCPI151_13:
	.quad	0x407f400000000000              ## double 500
LCPI151_14:
	.quad	0x4024000000000000              ## double 10
LCPI151_22:
	.quad	0x4004f1a6d88c422c              ## double 2.6179940145305149
LCPI151_23:
	.quad	0x3fa015bf8c0eff43              ## double 0.031415925833697254
LCPI151_24:
	.quad	0xbfa015bf8c0eff43              ## double -0.031415925833697254
LCPI151_39:
	.quad	0x412e848000000000              ## double 1.0E+6
LCPI151_40:
	.quad	0x408f400000000000              ## double 1000
	.section	__TEXT,__const
	.p2align	5
LCPI151_28:
	.long	0                               ## 0x0
	.long	1                               ## 0x1
	.long	2                               ## 0x2
	.long	2                               ## 0x2
	.long	2                               ## 0x2
	.long	3                               ## 0x3
	.long	3                               ## 0x3
	.long	3                               ## 0x3
LCPI151_29:
	.long	0                               ## 0x0
	.long	1                               ## 0x1
	.long	2                               ## 0x2
	.long	3                               ## 0x3
	.long	4                               ## 0x4
	.long	2                               ## 0x2
	.long	3                               ## 0x3
	.long	4                               ## 0x4
LCPI151_32:
	.long	0                               ## 0x0
	.long	3                               ## 0x3
	.long	6                               ## 0x6
	.long	1                               ## 0x1
	.long	4                               ## 0x4
	.long	7                               ## 0x7
	.long	2                               ## 0x2
	.long	5                               ## 0x5
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_game_update_and_render
	.p2align	4, 0x90
_game_update_and_render:                ## @game_update_and_render
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	movl	$395712, %eax                   ## imm = 0x609C0
	callq	____chkstk_darwin
	subq	%rax, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, 395680(%rsp)
	cmpl	$0, 184(%rdi)
	movq	%rdi, 24(%rsp)                  ## 8-byte Spill
	jne	LBB151_85
## %bb.1:
	movq	(%rsi), %rax
	leal	-1(%rax), %ecx
	andl	$31, %ecx
	movq	%rcx, %rdx
	xorq	$31, %rdx
	addq	%rax, %rdx
	testb	$31, %dl
	jne	LBB151_2
## %bb.5:
	movq	8(%rsi), %r8
	xorq	$67108895, %rcx                 ## imm = 0x400001F
	cmpq	%r8, %rcx
	ja	LBB151_6
## %bb.7:
	movq	%rdx, 6424(%rdi)
	vmovaps	LCPI151_0(%rip), %xmm0          ## xmm0 = [0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0]
	vmovups	%xmm0, 6432(%rdi)
	movb	$1, %bl
	testb	%bl, %bl
	je	LBB151_8
## %bb.9:
	leaq	(%rax,%rcx), %rdx
	addq	$31, %rdx
	movl	%edx, %ecx
	andl	$31, %ecx
	addq	%rax, %rcx
	movq	%rdx, %rsi
	subq	%rcx, %rsi
	addq	$67108864, %rsi                 ## imm = 0x4000000
	cmpq	%r8, %rsi
	ja	LBB151_10
## %bb.11:
	andq	$-32, %rdx
	movq	%rdx, 6352(%rdi)
	vmovups	%xmm0, 6360(%rdi)
	movb	$1, %dl
	testb	%dl, %dl
	je	LBB151_12
## %bb.13:
	addq	%rax, %rsi
	addq	$31, %rsi
	movl	%esi, %ecx
	andl	$31, %ecx
	addq	%rax, %rcx
	movq	%rsi, %rdx
	subq	%rcx, %rdx
	addq	$536870912, %rdx                ## imm = 0x20000000
	cmpq	%r8, %rdx
	ja	LBB151_14
## %bb.15:
	andq	$-32, %rsi
	movq	%rsi, 6376(%rdi)
	vmovaps	LCPI151_1(%rip), %xmm0          ## xmm0 = [0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0]
	vmovups	%xmm0, 6384(%rdi)
	movb	$1, %bl
	testb	%bl, %bl
	je	LBB151_16
## %bb.17:
	addq	%rax, %rdx
	addq	$31, %rdx
	movl	%edx, %esi
	andl	$31, %esi
	addq	%rax, %rsi
	movq	%rdx, %rax
	subq	%rsi, %rax
	movl	$3221225472, %esi               ## imm = 0xC0000000
	addq	%rax, %rsi
	cmpq	%r8, %rsi
	ja	LBB151_18
## %bb.19:
	leaq	6376(%rdi), %r13
	andq	$-32, %rdx
	movq	%rdx, 6400(%rdi)
	vmovaps	LCPI151_2(%rip), %xmm0          ## xmm0 = [0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0]
	vmovups	%xmm0, 6408(%rdi)
	leaq	L_.str.38(%rip), %rdx
	leaq	576(%rsp), %rdi
	movq	%r13, %rsi
	vzeroupper
	callq	__Z12load_textureP5ArenaPKc
	movq	592(%rsp), %rax
	movq	24(%rsp), %rcx                  ## 8-byte Reload
	movq	%rax, 280(%rcx)
	vmovups	576(%rsp), %xmm0
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%xmm0, 264(%rax)
	leaq	L_.str.39(%rip), %rdx
	leaq	576(%rsp), %rdi
	movq	%r13, %rsi
	callq	__Z12load_textureP5ArenaPKc
	movq	592(%rsp), %rax
	movq	24(%rsp), %rcx                  ## 8-byte Reload
	movq	%rax, 232(%rcx)
	vmovups	576(%rsp), %xmm0
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%xmm0, 216(%rax)
	leaq	L_.str.40(%rip), %rdx
	leaq	576(%rsp), %rdi
	movq	%r13, %rsi
	callq	__Z12load_textureP5ArenaPKc
	movq	592(%rsp), %rax
	movq	24(%rsp), %rcx                  ## 8-byte Reload
	movq	%rax, 256(%rcx)
	vmovups	576(%rsp), %xmm0
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%xmm0, 240(%rax)
	leaq	L_.str.41(%rip), %rdx
	leaq	576(%rsp), %rdi
	movq	%r13, %rsi
	callq	__Z12load_textureP5ArenaPKc
	movq	592(%rsp), %rax
	movq	24(%rsp), %rcx                  ## 8-byte Reload
	movq	%rax, 328(%rcx)
	vmovups	576(%rsp), %xmm0
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%xmm0, 312(%rax)
	leaq	L_.str.42(%rip), %rdx
	leaq	576(%rsp), %rdi
	movq	%r13, %rsi
	callq	__Z12load_textureP5ArenaPKc
	movq	24(%rsp), %r8                   ## 8-byte Reload
	movq	592(%rsp), %rax
	movq	%rax, 352(%r8)
	vmovups	576(%rsp), %xmm0
	vmovups	%xmm0, 336(%r8)
	movl	$2, 296(%r8)
	movabsq	$8589934594, %rax               ## imm = 0x200000002
	movq	%rax, 288(%r8)
	movb	$1, %al
	testb	%al, %al
	je	LBB151_20
## %bb.21:
	movq	6352(%r8), %rcx
	movq	6360(%r8), %rax
	addq	%rcx, %rax
	addq	$31, %rax
	movl	%eax, %esi
	andl	$31, %esi
	addq	%rcx, %rsi
	movq	%rax, %rdx
	subq	%rsi, %rdx
	addq	$16, %rdx
	cmpq	6368(%r8), %rdx
	ja	LBB151_22
## %bb.23:
	movq	%r14, 152(%rsp)                 ## 8-byte Spill
	leaq	6424(%r8), %rcx
	movq	%rcx, 32(%rsp)                  ## 8-byte Spill
	leaq	6400(%r8), %r12
	leaq	264(%r8), %rcx
	leaq	336(%r8), %r14
	leaq	288(%r8), %r15
	andq	$-32, %rax
	movq	%rdx, 6360(%r8)
	movq	%rax, 304(%r8)
	movl	$2, %edi
	xorl	%edx, %edx
	movl	$2, %esi
	jmp	LBB151_24
	.p2align	4, 0x90
LBB151_28:                              ##   in Loop: Header=BB151_24 Depth=1
	incq	%rdx
	cmpl	%edi, %edx
	jge	LBB151_29
LBB151_24:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB151_26 Depth 2
	testl	%esi, %esi
	jle	LBB151_28
## %bb.25:                              ##   in Loop: Header=BB151_24 Depth=1
	xorl	%edi, %edi
	.p2align	4, 0x90
LBB151_26:                              ##   Parent Loop BB151_24 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	leal	(%rdx,%rdi), %ebx
	andl	$1, %ebx
	negl	%ebx
	movl	$0, %ebx
	sbbl	%ebx, %ebx
	orl	$572662527, %ebx                ## imm = 0x222222FF
	imull	%edx, %esi
	movslq	%esi, %rsi
	addq	%rdi, %rsi
	movl	%ebx, (%rax,%rsi,4)
	movl	(%r15), %esi
	incq	%rdi
	cmpl	%esi, %edi
	jl	LBB151_26
## %bb.27:                              ##   in Loop: Header=BB151_24 Depth=1
	movl	292(%r8), %edi
	jmp	LBB151_28
LBB151_29:
	leaq	L_.str.43(%rip), %rdx
	leaq	576(%rsp), %rdi
	movq	%r13, %rsi
	callq	__Z9load_meshP5ArenaPKcP7Texture
	vmovups	576(%rsp), %ymm0
	vmovups	592(%rsp), %ymm1
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%ymm1, 472(%rax)
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%ymm0, 456(%rax)
	leaq	L_.str.44(%rip), %rdx
	leaq	576(%rsp), %rdi
	movq	%r13, %rsi
	movq	%r14, %rcx
	vzeroupper
	callq	__Z9load_meshP5ArenaPKcP7Texture
	vmovups	576(%rsp), %ymm0
	vmovups	592(%rsp), %ymm1
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%ymm1, 520(%rax)
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%ymm0, 504(%rax)
	leaq	L_.str.45(%rip), %rdx
	leaq	576(%rsp), %rdi
	movq	%r13, %rsi
	movq	%r15, %rcx
	vzeroupper
	callq	__Z9load_meshP5ArenaPKcP7Texture
	movq	24(%rsp), %rsi                  ## 8-byte Reload
	vmovups	576(%rsp), %ymm0
	vmovups	592(%rsp), %ymm1
	vmovups	%ymm1, 376(%rsi)
	vmovups	%ymm0, 360(%rsi)
	cmpl	$0, 368(%rsi)
	jle	LBB151_32
## %bb.30:
	xorl	%eax, %eax
	vbroadcastss	LCPI151_3(%rip), %xmm0  ## xmm0 = [2.0E+1,2.0E+1,2.0E+1,2.0E+1]
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB151_31:                              ## =>This Inner Loop Header: Depth=1
	movq	360(%rsi), %rdx
	vmovsd	36(%rdx,%rax), %xmm1            ## xmm1 = mem[0],zero
	vmulps	%xmm0, %xmm1, %xmm1
	vmovlps	%xmm1, 36(%rdx,%rax)
	movq	360(%rsi), %rdx
	vmovsd	44(%rdx,%rax), %xmm1            ## xmm1 = mem[0],zero
	vmulps	%xmm0, %xmm1, %xmm1
	vmovlps	%xmm1, 44(%rdx,%rax)
	movq	360(%rsi), %rdx
	vmovsd	52(%rdx,%rax), %xmm1            ## xmm1 = mem[0],zero
	vmulps	%xmm0, %xmm1, %xmm1
	vmovlps	%xmm1, 52(%rdx,%rax)
	incq	%rcx
	movslq	368(%rsi), %rdx
	subq	$-128, %rax
	cmpq	%rdx, %rcx
	jl	LBB151_31
LBB151_32:
	leaq	L_.str.46(%rip), %rdx
	leaq	576(%rsp), %rdi
	movq	%r13, %rsi
	xorl	%ecx, %ecx
	vzeroupper
	callq	__Z9load_meshP5ArenaPKcP7Texture
	vmovups	576(%rsp), %ymm0
	vmovups	592(%rsp), %ymm1
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%ymm1, 424(%rax)
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%ymm0, 408(%rax)
	leaq	L_.str.47(%rip), %rdx
	leaq	576(%rsp), %rdi
	movq	%r13, %rsi
	vzeroupper
	callq	__Z12load_textureP5ArenaPKc
	movq	24(%rsp), %rax                  ## 8-byte Reload
	leaq	696(%rax), %rcx
	movq	592(%rsp), %rax
	movq	24(%rsp), %rdx                  ## 8-byte Reload
	movq	%rax, 712(%rdx)
	vmovups	576(%rsp), %xmm0
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%xmm0, 696(%rax)
	leaq	L_.str.48(%rip), %rdx
	leaq	576(%rsp), %rdi
	movq	%r13, %rsi
	callq	__Z9load_meshP5ArenaPKcP7Texture
	vmovups	576(%rsp), %ymm0
	vmovups	592(%rsp), %ymm1
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%ymm1, 568(%rax)
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovups	%ymm0, 552(%rax)
	leaq	L_.str.49(%rip), %rdx
	leaq	576(%rsp), %rdi
	movq	%r13, %rsi
	xorl	%ecx, %ecx
	vzeroupper
	callq	__Z9load_meshP5ArenaPKcP7Texture
	movq	24(%rsp), %rdx                  ## 8-byte Reload
	vmovups	576(%rsp), %ymm0
	vmovups	592(%rsp), %ymm1
	vmovups	%ymm1, 664(%rdx)
	vmovups	%ymm0, 648(%rdx)
	movq	$0, 40(%rdx)
	movl	$0, 48(%rdx)
	movb	$1, %al
	testb	%al, %al
	je	LBB151_33
## %bb.34:
	movq	6400(%rdx), %rcx
	movq	6408(%rdx), %rax
	addq	%rcx, %rax
	addq	$31, %rax
	movl	%eax, %esi
	andl	$31, %esi
	addq	%rcx, %rsi
	movq	%rax, %rcx
	subq	%rsi, %rcx
	addq	$395104, %rcx                   ## imm = 0x60760
	cmpq	6416(%rdx), %rcx
	ja	LBB151_35
## %bb.37:
	andq	$-32, %rax
	movq	%rcx, 6408(%rdx)
	movq	%rax, 6296(%rdx)
	subq	$32, %rsp
	movq	16(%rdx), %rax
	movq	%rax, 16(%rsp)
	vmovups	(%rdx), %xmm0
	vmovups	%xmm0, (%rsp)
	leaq	608(%rsp), %r14
	vmovss	LCPI151_4(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	vmovss	LCPI151_5(%rip), %xmm1          ## xmm1 = mem[0],zero,zero,zero
	vmovss	LCPI151_6(%rip), %xmm2          ## xmm2 = mem[0],zero,zero,zero
	movq	%r14, %rdi
	movq	%r12, %rsi
	movl	$200000, %ecx                   ## imm = 0x30D40
	movq	%rdx, %rbx
	vzeroupper
	callq	__Z18new_render_contextP5ArenaP4Game7Texturefffi
	addq	$32, %rsp
	movq	6296(%rbx), %rdi
	movl	$395104, %edx                   ## imm = 0x60760
	movq	%r14, %rsi
	callq	_memcpy
	leaq	L_.str.50(%rip), %rsi
	movq	32(%rsp), %rdi                  ## 8-byte Reload
	callq	__Z16read_entire_fileP5ArenaPKc
	leaq	576(%rsp), %rdi
	movq	%rax, %rsi
	xorl	%edx, %edx
	callq	_stbtt_InitFont
	testl	%eax, %eax
	je	LBB151_36
## %bb.38:
	movq	584(%rsp), %r13
	movslq	612(%rsp), %r14
	movzbl	5(%r13,%r14), %r15d
	movzbl	4(%r13,%r14), %ebx
	movzbl	7(%r13,%r14), %eax
	movl	%eax, 32(%rsp)                  ## 4-byte Spill
	movzbl	6(%r13,%r14), %r12d
	leaq	576(%rsp), %rdi
	movl	$65, %esi
	callq	_stbtt_FindGlyphIndex
                                        ## kill: def $eax killed $eax def $rax
	movq	%r14, 432(%rsp)                 ## 8-byte Spill
	movzwl	34(%r13,%r14), %ecx
	rolw	$8, %cx
	movzwl	%cx, %ecx
	leal	(,%rax,4), %edx
	cmpl	%ecx, %eax
	leal	-4(,%rcx,4), %eax
	cmovll	%edx, %eax
	movb	$1, %cl
	testb	%cl, %cl
	je	LBB151_39
## %bb.40:
	shll	$8, %ebx
	movswl	%bx, %r10d
	orl	%r15d, %r10d
	shll	$8, %r12d
	movswl	%r12w, %ecx
	addl	32(%rsp), %ecx                  ## 4-byte Folded Reload
	movl	%r10d, %esi
	subl	%ecx, %esi
	vcvtsi2ss	%esi, %xmm3, %xmm1
	vmovss	LCPI151_7(%rip), %xmm0          ## xmm0 = mem[0],zero,zero,zero
	vdivss	%xmm1, %xmm0, %xmm3
	movslq	616(%rsp), %rcx
	addq	%r13, %rcx
	cltq
	movq	%rcx, 320(%rsp)                 ## 8-byte Spill
	movzwl	(%rax,%rcx), %eax
	rolw	$8, %ax
	cwtl
	vcvtsi2ss	%eax, %xmm4, %xmm1
	vmulss	%xmm1, %xmm3, %xmm1
	vroundss	$10, %xmm1, %xmm1, %xmm1
	vcvttss2si	%xmm1, %r14d
	imull	$95, %r14d, %r9d
	movslq	%r9d, %r11
	movq	%r11, %rdi
	shlq	$8, %rdi
	movq	24(%rsp), %rax                  ## 8-byte Reload
	movq	6400(%rax), %rdx
	movq	6408(%rax), %r8
	leaq	(%rdx,%r8), %r15
	addq	$31, %r15
	movl	%r15d, %esi
	andl	$31, %esi
	movq	%r15, %rcx
	subq	%rsi, %rcx
	subq	%rdx, %rcx
	movq	%rcx, 504(%rsp)                 ## 8-byte Spill
	leaq	(%rcx,%rdi), %rbx
	cmpq	6416(%rax), %rbx
	ja	LBB151_41
## %bb.42:
	movq	%rsi, 64(%rsp)                  ## 8-byte Spill
	movq	%r8, 32(%rsp)                   ## 8-byte Spill
	movq	%rdx, 88(%rsp)                  ## 8-byte Spill
	andq	$-32, %r15
	movq	%rbx, 6408(%rax)
	movq	6296(%rax), %rdi
	movl	%r9d, 1792(%rdi)
	movl	$64, 1796(%rdi)
	movl	%r9d, 1800(%rdi)
	movq	%r15, 1808(%rdi)
	vcvtsi2ss	%r14d, %xmm4, %xmm1
	movq	6296(%rax), %rdi
	vcvtsi2ss	%r9d, %xmm4, %xmm2
	movabsq	$545460846624, %rsi             ## imm = 0x7F00000020
	movq	%rsi, 1820(%rdi)
	vdivss	%xmm2, %xmm1, %xmm2
	vmovss	%xmm2, 1816(%rdi)
	vdivss	%xmm1, %xmm0, %xmm0
	vmovss	%xmm0, 1828(%rdi)
	vmulss	LCPI151_10(%rip), %xmm0, %xmm0
	movl	$1008981770, 6304(%rax)         ## imm = 0x3C23D70A
	vmovss	%xmm0, 6308(%rax)
	movb	$1, %bl
	testb	%bl, %bl
	je	LBB151_43
## %bb.44:
	movl	%r10d, %ecx
	movslq	%r14d, %r10
	movq	%r10, %rdi
	shlq	$6, %rdi
	movq	6424(%rax), %r12
	movq	6432(%rax), %rsi
	leaq	(%r12,%rsi), %r9
	addq	$31, %r9
	movl	%r9d, %r8d
	andl	$31, %r8d
	movq	%r9, %rbx
	subq	%r8, %rbx
	subq	%r12, %rbx
	addq	%rdi, %rbx
	cmpq	6440(%rax), %rbx
	ja	LBB151_45
## %bb.46:
	movq	%r15, 192(%rsp)                 ## 8-byte Spill
	movq	%r13, 416(%rsp)                 ## 8-byte Spill
	vcvtsi2ss	%ecx, %xmm4, %xmm0
	vmovss	%xmm3, 224(%rsp)                ## 4-byte Spill
	vmulss	%xmm0, %xmm3, %xmm0
	vbroadcastss	LCPI151_8(%rip), %xmm1  ## xmm1 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	%xmm1, 384(%rsp)                ## 16-byte Spill
	vandps	%xmm1, %xmm0, %xmm1
	vbroadcastss	LCPI151_9(%rip), %xmm2  ## xmm2 = [4.9999997E-1,4.9999997E-1,4.9999997E-1,4.9999997E-1]
	vmovaps	%xmm2, 528(%rsp)                ## 16-byte Spill
	vorps	%xmm2, %xmm1, %xmm1
	vaddss	%xmm1, %xmm0, %xmm0
	vroundss	$11, %xmm0, %xmm0, %xmm0
	andq	$-32, %r9
	movq	%rbx, 6432(%rax)
	movl	%r14d, %edx
	shll	$6, %edx
	movslq	%edx, %rax
	movq	%rax, 512(%rsp)                 ## 8-byte Spill
	movl	%r14d, 208(%rsp)                ## 4-byte Spill
	movl	%r14d, %ebx
	shlq	$2, %r11
	movq	32(%rsp), %rcx                  ## 8-byte Reload
	leaq	(%rcx,%rbx,4), %rax
	movq	64(%rsp), %r15                  ## 8-byte Reload
	subq	%r15, %rax
	addq	$31, %rax
	movq	%rax, 496(%rsp)                 ## 8-byte Spill
	subq	%r10, %rdi
	leaq	(%rsi,%rdi), %rdx
	addq	%rdi, %rsi
	addq	$31, %rsi
	leaq	(%rbx,%rdx), %rax
	addq	$31, %rax
	movq	%rax, 464(%rsp)                 ## 8-byte Spill
	movl	%ebx, %r14d
	andl	$-32, %r14d
	movq	%r12, %rax
	movl	%ebx, %r12d
	andl	$3, %r12d
	movl	%ebx, %r13d
	andl	$-4, %r13d
	subq	%r8, %rdx
	leaq	(%rdx,%rax), %rdi
	addq	$55, %rdi
	movq	%rdi, 488(%rsp)                 ## 8-byte Spill
	movq	%r10, %rdi
	negq	%rdi
	movq	%rdi, 128(%rsp)                 ## 8-byte Spill
	subq	%r15, %rcx
	movq	%rsi, 448(%rsp)                 ## 8-byte Spill
	subq	%r8, %rsi
	addq	%rax, %rsi
	movq	%rsi, 280(%rsp)                 ## 8-byte Spill
	movq	%rax, 168(%rsp)                 ## 8-byte Spill
	addq	%rdx, %rax
	addq	$34, %rax
	movq	%rax, 480(%rsp)                 ## 8-byte Spill
	vpbroadcastd	LCPI151_11(%rip), %ymm4 ## ymm4 = [4294967040,4294967040,4294967040,4294967040,4294967040,4294967040,4294967040,4294967040]
	movq	88(%rsp), %rax                  ## 8-byte Reload
	leaq	127(%rcx,%rax), %rdx
	movq	%rdx, 368(%rsp)                 ## 8-byte Spill
	leaq	43(%rcx,%rax), %rax
	movq	%rax, 352(%rsp)                 ## 8-byte Spill
	vcvttss2si	%xmm0, %eax
	movl	%eax, 176(%rsp)                 ## 4-byte Spill
	movq	%r10, 256(%rsp)                 ## 8-byte Spill
	leaq	(,%r10,4), %rax
	movq	%rax, 80(%rsp)                  ## 8-byte Spill
	movq	%rbx, 32(%rsp)                  ## 8-byte Spill
	leaq	-1(%rbx), %rax
	movq	%rax, 64(%rsp)                  ## 8-byte Spill
	movl	$32, %esi
	xorl	%eax, %eax
	movq	%rax, 336(%rsp)                 ## 8-byte Spill
	leaq	576(%rsp), %rdi
	movq	%r9, %r15
	movq	%r8, 160(%rsp)                  ## 8-byte Spill
	movq	%r11, 112(%rsp)                 ## 8-byte Spill
	movq	%r9, 520(%rsp)                  ## 8-byte Spill
	vmovdqa	%ymm4, 544(%rsp)                ## 32-byte Spill
	jmp	LBB151_47
	.p2align	4, 0x90
LBB151_76:                              ##   in Loop: Header=BB151_47 Depth=1
	movq	240(%rsp), %rsi                 ## 8-byte Reload
	incq	%rsi
	incq	336(%rsp)                       ## 8-byte Folded Spill
	movq	80(%rsp), %rax                  ## 8-byte Reload
	addq	%rax, 368(%rsp)                 ## 8-byte Folded Spill
	addq	%rax, 192(%rsp)                 ## 8-byte Folded Spill
	addq	%rax, 352(%rsp)                 ## 8-byte Folded Spill
	cmpq	$127, %rsi
	leaq	576(%rsp), %rdi
	je	LBB151_77
LBB151_47:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB151_55 Depth 2
                                        ##       Child Loop BB151_68 Depth 3
                                        ##       Child Loop BB151_72 Depth 3
                                        ##       Child Loop BB151_74 Depth 3
                                        ##     Child Loop BB151_59 Depth 2
                                        ##       Child Loop BB151_62 Depth 3
                                        ##       Child Loop BB151_65 Depth 3
	movq	%rsi, 240(%rsp)                 ## 8-byte Spill
                                        ## kill: def $esi killed $esi killed $rsi
	vzeroupper
	callq	_stbtt_FindGlyphIndex
	movq	416(%rsp), %rcx                 ## 8-byte Reload
	movq	432(%rsp), %rdx                 ## 8-byte Reload
	movzwl	34(%rcx,%rdx), %ecx
	rolw	$8, %cx
	movzwl	%cx, %edx
	movl	%eax, %ecx
	subl	%edx, %ecx
	jge	LBB151_49
## %bb.48:                              ##   in Loop: Header=BB151_47 Depth=1
	cltq
	movq	320(%rsp), %rcx                 ## 8-byte Reload
	movzwl	(%rcx,%rax,4), %edx
	rolw	$8, %dx
	movw	%dx, 48(%rsp)                   ## 2-byte Spill
	leaq	(%rcx,%rax,4), %rax
	addq	$2, %rax
	jmp	LBB151_50
	.p2align	4, 0x90
LBB151_49:                              ##   in Loop: Header=BB151_47 Depth=1
	movq	320(%rsp), %rax                 ## 8-byte Reload
	movzwl	-4(%rax,%rdx,4), %esi
	rolw	$8, %si
	movw	%si, 48(%rsp)                   ## 2-byte Spill
	leaq	(%rax,%rdx,4), %rdx
	addl	%ecx, %ecx
	movslq	%ecx, %rax
	addq	%rdx, %rax
LBB151_50:                              ##   in Loop: Header=BB151_47 Depth=1
	movzbl	(%rax), %ebx
	movzbl	1(%rax), %eax
	movl	%eax, 96(%rsp)                  ## 4-byte Spill
	leaq	576(%rsp), %r15
	movq	%r15, %rdi
	movq	240(%rsp), %rsi                 ## 8-byte Reload
                                        ## kill: def $esi killed $esi killed $rsi
	callq	_stbtt_FindGlyphIndex
	vxorps	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	movq	%r15, %rdi
	movl	%eax, %esi
	vmovss	224(%rsp), %xmm0                ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovaps	%xmm0, %xmm1
	leaq	400(%rsp), %rdx
	leaq	188(%rsp), %rcx
	leaq	184(%rsp), %r8
	leaq	180(%rsp), %r9
	callq	_stbtt_GetGlyphBitmapBoxSubpixel
	vmovss	224(%rsp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	movswl	48(%rsp), %eax                  ## 2-byte Folded Reload
	vcvtsi2ss	%eax, %xmm5, %xmm0
	vmulss	%xmm0, %xmm1, %xmm0
	vroundss	$10, %xmm0, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	208(%rsp), %edx                 ## 4-byte Reload
	cmpl	%edx, %eax
	jne	LBB151_51
## %bb.52:                              ##   in Loop: Header=BB151_47 Depth=1
	movzwl	%bx, %eax
	shll	$8, %eax
	movzwl	96(%rsp), %ecx                  ## 2-byte Folded Reload
	orl	%eax, %ecx
	movl	184(%rsp), %eax
	subl	400(%rsp), %eax
	movl	%eax, 48(%rsp)                  ## 4-byte Spill
	movl	180(%rsp), %esi
	movl	188(%rsp), %eax
	subl	%eax, %esi
	movl	%esi, 96(%rsp)                  ## 4-byte Spill
	addl	176(%rsp), %eax                 ## 4-byte Folded Reload
	movswl	%cx, %ecx
	vcvtsi2ss	%ecx, %xmm5, %xmm0
	vmulss	%xmm0, %xmm1, %xmm0
	vandps	384(%rsp), %xmm0, %xmm1         ## 16-byte Folded Reload
	vorps	528(%rsp), %xmm1, %xmm1         ## 16-byte Folded Reload
	vaddss	%xmm1, %xmm0, %xmm0
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm5, %xmm1
	vroundss	$11, %xmm0, %xmm0, %xmm0
	vaddss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %ebx
	movq	520(%rsp), %r15                 ## 8-byte Reload
	movq	%r15, %rdi
	movq	512(%rsp), %rsi                 ## 8-byte Reload
	callq	___bzero
	movslq	%ebx, %rbx
	addq	%r15, %rbx
	leaq	576(%rsp), %rdi
	movq	240(%rsp), %rsi                 ## 8-byte Reload
                                        ## kill: def $esi killed $esi killed $rsi
	callq	_stbtt_FindGlyphIndex
	vxorps	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	leaq	576(%rsp), %rdi
	movq	%rbx, %rsi
	movl	48(%rsp), %edx                  ## 4-byte Reload
	movl	96(%rsp), %ecx                  ## 4-byte Reload
	movl	208(%rsp), %ebx                 ## 4-byte Reload
	movl	%ebx, %r8d
	vmovd	224(%rsp), %xmm0                ## 4-byte Folded Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovdqa	%xmm0, %xmm1
	movl	%eax, %r9d
	callq	_stbtt_MakeGlyphBitmapSubpixel
	testl	%ebx, %ebx
	movq	112(%rsp), %r11                 ## 8-byte Reload
	vmovdqa	544(%rsp), %ymm4                ## 32-byte Reload
	jle	LBB151_76
## %bb.53:                              ##   in Loop: Header=BB151_47 Depth=1
	cmpl	$32, 208(%rsp)                  ## 4-byte Folded Reload
	jae	LBB151_54
## %bb.58:                              ##   in Loop: Header=BB151_47 Depth=1
	movq	280(%rsp), %r8                  ## 8-byte Reload
	movq	192(%rsp), %r9                  ## 8-byte Reload
	movq	352(%rsp), %rdx                 ## 8-byte Reload
	movq	480(%rsp), %rsi                 ## 8-byte Reload
	xorl	%r10d, %r10d
	jmp	LBB151_59
	.p2align	4, 0x90
LBB151_66:                              ##   in Loop: Header=BB151_59 Depth=2
	incq	%r10
	movq	128(%rsp), %rax                 ## 8-byte Reload
	addq	%rax, %rsi
	addq	%r11, %rdx
	addq	%r11, %r9
	addq	%rax, %r8
	cmpq	$64, %r10
	je	LBB151_76
LBB151_59:                              ##   Parent Loop BB151_47 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB151_62 Depth 3
                                        ##       Child Loop BB151_65 Depth 3
	cmpq	$3, 64(%rsp)                    ## 8-byte Folded Reload
	jae	LBB151_61
## %bb.60:                              ##   in Loop: Header=BB151_59 Depth=2
	xorl	%ebx, %ebx
	jmp	LBB151_63
	.p2align	4, 0x90
LBB151_61:                              ##   in Loop: Header=BB151_59 Depth=2
	xorl	%ebx, %ebx
	.p2align	4, 0x90
LBB151_62:                              ##   Parent Loop BB151_47 Depth=1
                                        ##     Parent Loop BB151_59 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	-3(%rsi,%rbx), %eax
	orl	$-256, %eax
	movl	%eax, -12(%rdx,%rbx,4)
	movzbl	-2(%rsi,%rbx), %eax
	orl	$-256, %eax
	movl	%eax, -8(%rdx,%rbx,4)
	movzbl	-1(%rsi,%rbx), %eax
	orl	$-256, %eax
	movl	%eax, -4(%rdx,%rbx,4)
	movzbl	(%rsi,%rbx), %eax
	orl	$-256, %eax
	movl	%eax, (%rdx,%rbx,4)
	addq	$4, %rbx
	cmpq	%rbx, %r13
	jne	LBB151_62
LBB151_63:                              ##   in Loop: Header=BB151_59 Depth=2
	testb	$3, 32(%rsp)                    ## 1-byte Folded Reload
	je	LBB151_66
## %bb.64:                              ##   in Loop: Header=BB151_59 Depth=2
	leaq	(%r9,%rbx,4), %rax
	addq	%r8, %rbx
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB151_65:                              ##   Parent Loop BB151_47 Depth=1
                                        ##     Parent Loop BB151_59 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	(%rbx,%rcx), %edi
	orl	$-256, %edi
	movl	%edi, (%rax,%rcx,4)
	incq	%rcx
	cmpq	%rcx, %r12
	jne	LBB151_65
	jmp	LBB151_66
	.p2align	4, 0x90
LBB151_54:                              ##   in Loop: Header=BB151_47 Depth=1
	movq	80(%rsp), %rcx                  ## 8-byte Reload
	imulq	336(%rsp), %rcx                 ## 8-byte Folded Reload
	movq	504(%rsp), %rax                 ## 8-byte Reload
	addq	%rcx, %rax
	movq	%rax, 48(%rsp)                  ## 8-byte Spill
	addq	496(%rsp), %rcx                 ## 8-byte Folded Reload
	movq	%rcx, 96(%rsp)                  ## 8-byte Spill
	movq	280(%rsp), %r9                  ## 8-byte Reload
	movq	192(%rsp), %rsi                 ## 8-byte Reload
	movq	368(%rsp), %rdi                 ## 8-byte Reload
	movq	488(%rsp), %rax                 ## 8-byte Reload
	xorl	%r10d, %r10d
	jmp	LBB151_55
	.p2align	4, 0x90
LBB151_75:                              ##   in Loop: Header=BB151_55 Depth=2
	incq	%r10
	movq	128(%rsp), %rcx                 ## 8-byte Reload
	addq	%rcx, %rax
	movq	112(%rsp), %r11                 ## 8-byte Reload
	addq	%r11, %rdi
	addq	%r11, %rsi
	addq	%rcx, %r9
	cmpq	$64, %r10
	je	LBB151_76
LBB151_55:                              ##   Parent Loop BB151_47 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB151_68 Depth 3
                                        ##       Child Loop BB151_72 Depth 3
                                        ##       Child Loop BB151_74 Depth 3
	movq	%r11, %rbx
	movq	%r10, %r11
	imulq	256(%rsp), %r11                 ## 8-byte Folded Reload
	addq	160(%rsp), %r11                 ## 8-byte Folded Reload
	movq	464(%rsp), %rcx                 ## 8-byte Reload
	subq	%r11, %rcx
	movq	168(%rsp), %r15                 ## 8-byte Reload
	addq	%r15, %rcx
	imulq	%r10, %rbx
	movq	48(%rsp), %rdx                  ## 8-byte Reload
	leaq	(%rdx,%rbx), %r8
	movq	88(%rsp), %rdx                  ## 8-byte Reload
	addq	%rdx, %r8
	cmpq	%rcx, %r8
	jae	LBB151_67
## %bb.56:                              ##   in Loop: Header=BB151_55 Depth=2
	movq	448(%rsp), %rcx                 ## 8-byte Reload
	subq	%r11, %rcx
	addq	%r15, %rcx
	addq	96(%rsp), %rbx                  ## 8-byte Folded Reload
	addq	%rdx, %rbx
	cmpq	%rbx, %rcx
	jae	LBB151_67
## %bb.57:                              ##   in Loop: Header=BB151_55 Depth=2
	xorl	%ebx, %ebx
	movq	32(%rsp), %r8                   ## 8-byte Reload
	jmp	LBB151_70
	.p2align	4, 0x90
LBB151_67:                              ##   in Loop: Header=BB151_55 Depth=2
	xorl	%ecx, %ecx
	movq	32(%rsp), %r8                   ## 8-byte Reload
	.p2align	4, 0x90
LBB151_68:                              ##   Parent Loop BB151_47 Depth=1
                                        ##     Parent Loop BB151_55 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vpmovzxbd	-24(%rax,%rcx), %ymm0   ## ymm0 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	-16(%rax,%rcx), %ymm1   ## ymm1 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	-8(%rax,%rcx), %ymm2    ## ymm2 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	(%rax,%rcx), %ymm3      ## ymm3 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpor	%ymm4, %ymm0, %ymm0
	vpor	%ymm4, %ymm1, %ymm1
	vpor	%ymm4, %ymm2, %ymm2
	vpor	%ymm4, %ymm3, %ymm3
	vmovdqu	%ymm0, -96(%rdi,%rcx,4)
	vmovdqu	%ymm1, -64(%rdi,%rcx,4)
	vmovdqu	%ymm2, -32(%rdi,%rcx,4)
	vmovdqu	%ymm3, (%rdi,%rcx,4)
	addq	$32, %rcx
	cmpq	%rcx, %r14
	jne	LBB151_68
## %bb.69:                              ##   in Loop: Header=BB151_55 Depth=2
	movq	%r14, %rbx
	cmpq	%r8, %r14
	je	LBB151_75
LBB151_70:                              ##   in Loop: Header=BB151_55 Depth=2
	movq	64(%rsp), %r11                  ## 8-byte Reload
	subq	%rbx, %r11
	testq	%r12, %r12
	je	LBB151_73
## %bb.71:                              ##   in Loop: Header=BB151_55 Depth=2
	movq	%r12, %rcx
	.p2align	4, 0x90
LBB151_72:                              ##   Parent Loop BB151_47 Depth=1
                                        ##     Parent Loop BB151_55 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	(%r9,%rbx), %edx
	orl	$-256, %edx
	movl	%edx, (%rsi,%rbx,4)
	incq	%rbx
	decq	%rcx
	jne	LBB151_72
LBB151_73:                              ##   in Loop: Header=BB151_55 Depth=2
	cmpq	$3, %r11
	jb	LBB151_75
	.p2align	4, 0x90
LBB151_74:                              ##   Parent Loop BB151_47 Depth=1
                                        ##     Parent Loop BB151_55 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	(%r9,%rbx), %ecx
	orl	$-256, %ecx
	movl	%ecx, (%rsi,%rbx,4)
	movzbl	1(%r9,%rbx), %ecx
	orl	$-256, %ecx
	movl	%ecx, 4(%rsi,%rbx,4)
	movzbl	2(%r9,%rbx), %ecx
	orl	$-256, %ecx
	movl	%ecx, 8(%rsi,%rbx,4)
	movzbl	3(%r9,%rbx), %ecx
	orl	$-256, %ecx
	movl	%ecx, 12(%rsi,%rbx,4)
	addq	$4, %rbx
	cmpq	%rbx, %r8
	jne	LBB151_74
	jmp	LBB151_75
LBB151_77:
	movq	24(%rsp), %rbx                  ## 8-byte Reload
	movq	$0, 6432(%rbx)
	movl	$1, 184(%rbx)
	movl	$0, 6456(%rbx)
	movl	$1084227584, 3470168(%rbx)      ## imm = 0x40A00000
	movq	$-12000, %rax                   ## imm = 0xD120
	movl	__ZZ12random_floatffE9rng_state(%rip), %edx
	vmovsd	LCPI151_12(%rip), %xmm0         ## xmm0 = mem[0],zero
	vmovsd	LCPI151_13(%rip), %xmm13        ## xmm13 = mem[0],zero
	vxorps	%xmm2, %xmm2, %xmm2
	vmovsd	LCPI151_14(%rip), %xmm3         ## xmm3 = mem[0],zero
	vmovss	LCPI151_15(%rip), %xmm12        ## xmm12 = mem[0],zero,zero,zero
	vmovss	LCPI151_16(%rip), %xmm5         ## xmm5 = mem[0],zero,zero,zero
	vbroadcastss	LCPI151_21(%rip), %xmm6 ## xmm6 = [5.0E-1,5.0E-1,5.0E-1,5.0E-1]
	vmovss	LCPI151_17(%rip), %xmm11        ## xmm11 = mem[0],zero,zero,zero
	vmovss	LCPI151_18(%rip), %xmm8         ## xmm8 = mem[0],zero,zero,zero
	vmovss	LCPI151_19(%rip), %xmm9         ## xmm9 = mem[0],zero,zero,zero
	vmovss	LCPI151_20(%rip), %xmm10        ## xmm10 = mem[0],zero,zero,zero
	movq	152(%rsp), %r14                 ## 8-byte Reload
	jmp	LBB151_78
	.p2align	4, 0x90
LBB151_79:                              ##   in Loop: Header=BB151_78 Depth=1
	vmovaps	%xmm12, %xmm1
LBB151_83:                              ##   in Loop: Header=BB151_78 Depth=1
	vaddsd	%xmm2, %xmm7, %xmm7
	vcvtsd2ss	%xmm7, %xmm7, %xmm7
	vcvtsd2ss	%xmm4, %xmm4, %xmm4
	vinsertps	$16, %xmm4, %xmm1, %xmm1 ## xmm1 = xmm1[0],xmm4[0],xmm1[2,3]
	vxorps	384(%rsp), %xmm7, %xmm4         ## 16-byte Folded Reload
	vmovlps	%xmm1, 3482172(%rbx,%rax)
	vmovss	%xmm4, 3482180(%rbx,%rax)
	vmovlps	%xmm6, 3494172(%rbx,%rax)
	movl	$1056964608, 3494180(%rbx,%rax) ## imm = 0x3F000000
	addq	$12, %rax
	je	LBB151_84
LBB151_78:                              ## =>This Inner Loop Header: Depth=1
	imull	$747796405, %edx, %edi          ## imm = 0x2C9277B5
	movl	%edx, %ecx
	shrl	$28, %ecx
	addb	$4, %cl
	movl	%edx, %esi
                                        ## kill: def $cl killed $cl killed $ecx
	shrl	%cl, %esi
	addl	$-1403630843, %edi              ## imm = 0xAC564B05
	xorl	%edx, %esi
	imull	$277803737, %esi, %ecx          ## imm = 0x108EF2D9
	movl	%ecx, %edx
	shrl	$22, %edx
	xorl	%ecx, %edx
	vcvtsi2sd	%rdx, %xmm14, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm13, %xmm7
	imull	$747796405, %edi, %esi          ## imm = 0x2C9277B5
	addl	$-1403630843, %esi              ## imm = 0xAC564B05
	movl	%edi, %ecx
	shrl	$28, %ecx
	addb	$4, %cl
	movl	%edi, %edx
                                        ## kill: def $cl killed $cl killed $ecx
	shrl	%cl, %edx
	xorl	%edi, %edx
	imull	$277803737, %edx, %ecx          ## imm = 0x108EF2D9
	movl	%ecx, %edx
	shrl	$22, %edx
	xorl	%ecx, %edx
	vcvtsi2sd	%rdx, %xmm14, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm1
	vmulsd	%xmm3, %xmm1, %xmm1
	vaddsd	%xmm2, %xmm1, %xmm4
	imull	$747796405, %esi, %edx          ## imm = 0x2C9277B5
	addl	$-1403630843, %edx              ## imm = 0xAC564B05
	movl	%esi, %ecx
	shrl	$28, %ecx
	addb	$4, %cl
	movl	%esi, %edi
                                        ## kill: def $cl killed $cl killed $ecx
	shrl	%cl, %edi
	xorl	%esi, %edi
	imull	$277803737, %edi, %ecx          ## imm = 0x108EF2D9
	movl	%ecx, %esi
	shrl	$22, %esi
	xorl	%ecx, %esi
	vcvtsi2sd	%rsi, %xmm14, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm1
	vaddsd	%xmm2, %xmm1, %xmm1
	vcvtsd2ss	%xmm1, %xmm1, %xmm1
	vucomiss	%xmm1, %xmm5
	ja	LBB151_79
## %bb.80:                              ##   in Loop: Header=BB151_78 Depth=1
	vucomiss	%xmm8, %xmm1
	jbe	LBB151_82
## %bb.81:                              ##   in Loop: Header=BB151_78 Depth=1
	vmovaps	%xmm11, %xmm1
	jmp	LBB151_83
	.p2align	4, 0x90
LBB151_82:                              ##   in Loop: Header=BB151_78 Depth=1
	vaddss	%xmm1, %xmm9, %xmm1
	vdivss	%xmm10, %xmm1, %xmm1
	vmulss	%xmm1, %xmm11, %xmm1
	vaddss	%xmm1, %xmm1, %xmm1
	movl	%edx, %ecx
	shrl	$28, %ecx
	addb	$4, %cl
	movl	%edx, %esi
                                        ## kill: def $cl killed $cl killed $ecx
	shrl	%cl, %esi
	vaddss	%xmm1, %xmm12, %xmm1
	xorl	%edx, %esi
	imull	$747796405, %edx, %edx          ## imm = 0x2C9277B5
	imull	$277803737, %esi, %ecx          ## imm = 0x108EF2D9
	movl	%ecx, %esi
	shrl	$22, %esi
	xorl	%ecx, %esi
	vcvtsi2sd	%rsi, %xmm14, %xmm4
	addl	$-1403630843, %edx              ## imm = 0xAC564B05
	vmulsd	%xmm0, %xmm4, %xmm4
	vaddsd	%xmm4, %xmm4, %xmm4
	vaddsd	%xmm2, %xmm4, %xmm4
	jmp	LBB151_83
LBB151_84:
	movl	%edx, __ZZ12random_floatffE9rng_state(%rip)
LBB151_85:
	leaq	400(%rsp), %rsi
	movl	$6, %edi
	vzeroupper
	callq	_clock_gettime
	movq	24(%rsp), %rsi                  ## 8-byte Reload
	cmpl	$0, 180(%r14)
	je	LBB151_88
## %bb.86:
	cmpl	$0, 184(%r14)
	je	LBB151_87
LBB151_88:
	cmpl	$0, 6452(%rsi)
	jne	LBB151_3
LBB151_89:
	cmpl	$0, 492(%r14)
	je	LBB151_92
## %bb.90:
	cmpl	$0, 496(%r14)
	jne	LBB151_92
## %bb.91:
	xorl	%eax, %eax
	cmpl	$0, 6448(%rsi)
	sete	%al
	movl	%eax, 6448(%rsi)
LBB151_92:
	cmpl	$0, 500(%r14)
	je	LBB151_95
## %bb.93:
	cmpl	$0, 504(%r14)
	jne	LBB151_95
## %bb.94:
	xorl	%eax, %eax
	cmpl	$0, 6456(%rsi)
	sete	%al
	movl	%eax, 6456(%rsi)
LBB151_95:
	cmpl	$0, 508(%r14)
	je	LBB151_98
## %bb.96:
	cmpl	$0, 512(%r14)
	jne	LBB151_98
## %bb.97:
	xorl	%eax, %eax
	cmpl	$0, 6460(%rsi)
	sete	%al
	movl	%eax, 6460(%rsi)
LBB151_98:
	movl	4148(%r14), %eax
	movl	4(%r14), %ecx
	orl	%eax, %ecx
	je	LBB151_100
## %bb.99:
	xorl	%ecx, %ecx
	cmpl	$1, %eax
	movl	$0, %edx
	sbbl	%edx, %edx
	orl	$1, %edx
	negl	%eax
	sbbl	%ecx, %ecx
	orl	$1, %ecx
	vcvtsi2ss	%ecx, %xmm14, %xmm0
	vmulss	4140(%r14), %xmm0, %xmm0
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	vmovss	56(%rsi), %xmm1                 ## xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm1, %xmm1
	vmovsd	LCPI151_22(%rip), %xmm2         ## xmm2 = mem[0],zero
	vmulsd	%xmm2, %xmm0, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	vcvtsi2ss	%edx, %xmm14, %xmm1
	vmovss	52(%rsi), %xmm3                 ## xmm3 = mem[0],zero,zero,zero
	vmovss	%xmm0, 56(%rsi)
	vmulss	4144(%r14), %xmm1, %xmm0
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	vcvtss2sd	%xmm3, %xmm3, %xmm1
	vmulsd	%xmm2, %xmm0, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 52(%rsi)
LBB151_100:
	vxorps	%xmm0, %xmm0, %xmm0
	vmovlps	%xmm0, 100(%rsi)
	movl	$0, 108(%rsi)
	cmpl	$0, 236(%r14)
	je	LBB151_101
## %bb.102:
	vmovsd	88(%rsi), %xmm0                 ## xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vaddps	%xmm1, %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vaddss	96(%rsi), %xmm1, %xmm1
	vmovlps	%xmm0, 100(%rsi)
	vmovss	%xmm1, 108(%rsi)
	cmpl	$0, 60(%r14)
	je	LBB151_105
LBB151_104:
	vmovsd	64(%rsi), %xmm2                 ## xmm2 = mem[0],zero
	vsubps	%xmm2, %xmm0, %xmm0
	vsubss	72(%rsi), %xmm1, %xmm1
	vmovlps	%xmm0, 100(%rsi)
	vmovss	%xmm1, 108(%rsi)
LBB151_105:
	cmpl	$0, 204(%r14)
	je	LBB151_107
## %bb.106:
	vmovsd	88(%rsi), %xmm2                 ## xmm2 = mem[0],zero
	vsubps	%xmm2, %xmm0, %xmm0
	vsubss	96(%rsi), %xmm1, %xmm1
	vmovlps	%xmm0, 100(%rsi)
	vmovss	%xmm1, 108(%rsi)
LBB151_107:
	cmpl	$0, 84(%r14)
	je	LBB151_109
## %bb.108:
	vmovsd	64(%rsi), %xmm2                 ## xmm2 = mem[0],zero
	vaddps	%xmm0, %xmm2, %xmm0
	vaddss	72(%rsi), %xmm1, %xmm1
	vmovlps	%xmm0, 100(%rsi)
	vmovss	%xmm1, 108(%rsi)
LBB151_109:
	cmpl	$0, 188(%r14)
	je	LBB151_111
## %bb.110:
	vmovsd	76(%rsi), %xmm2                 ## xmm2 = mem[0],zero
	vaddps	%xmm0, %xmm2, %xmm0
	vaddss	84(%rsi), %xmm1, %xmm1
	vmovlps	%xmm0, 100(%rsi)
	vmovss	%xmm1, 108(%rsi)
LBB151_111:
	cmpl	$0, 92(%r14)
	je	LBB151_113
## %bb.112:
	vmovsd	76(%rsi), %xmm2                 ## xmm2 = mem[0],zero
	vsubps	%xmm2, %xmm0, %xmm0
	vsubss	84(%rsi), %xmm1, %xmm1
	vmovlps	%xmm0, 100(%rsi)
	vmovss	%xmm1, 108(%rsi)
LBB151_113:
	cmpl	$0, 196(%r14)
	je	LBB151_115
## %bb.114:
	vmovss	60(%rsi), %xmm2                 ## xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm2, %xmm2
	vaddsd	LCPI151_23(%rip), %xmm2, %xmm2
	vcvtsd2ss	%xmm2, %xmm2, %xmm2
	vmovss	%xmm2, 60(%rsi)
LBB151_115:
	cmpl	$0, 100(%r14)
	je	LBB151_117
## %bb.116:
	vmovss	60(%rsi), %xmm2                 ## xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm2, %xmm2
	vaddsd	LCPI151_24(%rip), %xmm2, %xmm2
	vcvtsd2ss	%xmm2, %xmm2, %xmm2
	vmovss	%xmm2, 60(%rsi)
LBB151_117:
	vmulps	%xmm0, %xmm0, %xmm2
	vmovshdup	%xmm2, %xmm2            ## xmm2 = xmm2[1,1,3,3]
	vmulss	%xmm0, %xmm0, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vmulss	%xmm1, %xmm1, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vsqrtss	%xmm2, %xmm2, %xmm4
	vmovss	LCPI151_25(%rip), %xmm2         ## xmm2 = mem[0],zero,zero,zero
	vucomiss	%xmm4, %xmm2
	vxorps	%xmm2, %xmm2, %xmm2
	vxorps	%xmm3, %xmm3, %xmm3
	jae	LBB151_119
## %bb.118:
	vmovss	LCPI151_4(%rip), %xmm2          ## xmm2 = mem[0],zero,zero,zero
	vdivss	%xmm4, %xmm2, %xmm2
	vbroadcastss	%xmm2, %xmm3
	vmulps	%xmm3, %xmm0, %xmm0
	vmulss	%xmm2, %xmm1, %xmm1
	vmulss	LCPI151_26(%rip), %xmm1, %xmm3
	vbroadcastss	LCPI151_26(%rip), %xmm1 ## xmm1 = [8.0E+0,8.0E+0,8.0E+0,8.0E+0]
	vmulps	%xmm1, %xmm0, %xmm2
LBB151_119:
	vmovlps	%xmm2, 100(%rsi)
	vmovss	%xmm3, 108(%rsi)
	vmulss	LCPI151_27(%rip), %xmm3, %xmm0
	vmovsd	40(%rsi), %xmm1                 ## xmm1 = mem[0],zero
	vbroadcastss	LCPI151_27(%rip), %xmm3 ## xmm3 = [1.66666675E-2,1.66666675E-2,1.66666675E-2,1.66666675E-2]
	vmulps	%xmm3, %xmm2, %xmm2
	vaddss	48(%rsi), %xmm0, %xmm3
	vmovss	%xmm3, 88(%rsp)                 ## 4-byte Spill
	vaddps	%xmm1, %xmm2, %xmm0
	vmovaps	%xmm0, 48(%rsp)                 ## 16-byte Spill
	vmovlps	%xmm0, 40(%rsi)
	vmovss	%xmm3, 48(%rsi)
	vmovss	52(%rsi), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	callq	___sincosf_stret
	vmovaps	%xmm0, %xmm1
	vmovaps	%xmm0, 64(%rsp)                 ## 16-byte Spill
	vmovshdup	%xmm0, %xmm0            ## xmm0 = xmm0[1,1,3,3]
	vmovaps	%xmm0, 112(%rsp)                ## 16-byte Spill
	vbroadcastss	LCPI151_8(%rip), %xmm0  ## xmm0 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	%xmm0, 128(%rsp)                ## 16-byte Spill
	vxorps	%xmm0, %xmm1, %xmm0
	vmovaps	%xmm0, 32(%rsp)                 ## 16-byte Spill
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovss	56(%rax), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	callq	___sincosf_stret
	vmovshdup	%xmm0, %xmm11           ## xmm11 = xmm0[1,1,3,3]
	vxorps	128(%rsp), %xmm0, %xmm1         ## 16-byte Folded Reload
	vmovaps	%xmm1, 256(%rsp)                ## 16-byte Spill
	vxorps	%xmm5, %xmm5, %xmm5
	vmulss	%xmm5, %xmm11, %xmm2
	vaddss	%xmm5, %xmm2, %xmm1
	vmovaps	%xmm2, %xmm12
	vmovaps	%xmm2, 432(%rsp)                ## 16-byte Spill
	vaddss	%xmm5, %xmm1, %xmm2
	vsubss	%xmm0, %xmm2, %xmm13
	vmovaps	%xmm13, 352(%rsp)               ## 16-byte Spill
	vmulss	%xmm5, %xmm0, %xmm2
	vaddss	%xmm5, %xmm2, %xmm3
	vaddss	%xmm5, %xmm3, %xmm3
	vaddss	%xmm3, %xmm11, %xmm3
	vmovaps	%xmm3, 464(%rsp)                ## 16-byte Spill
	vaddss	%xmm5, %xmm11, %xmm3
	vaddss	%xmm3, %xmm2, %xmm8
	vmovaps	%xmm8, 368(%rsp)                ## 16-byte Spill
	vmovaps	112(%rsp), %xmm7                ## 16-byte Reload
	vmulss	%xmm5, %xmm7, %xmm2
	vaddss	%xmm1, %xmm2, %xmm3
	vmovaps	64(%rsp), %xmm6                 ## 16-byte Reload
	vmulss	%xmm6, %xmm0, %xmm4
	vaddss	%xmm3, %xmm4, %xmm10
	vmovaps	%xmm10, 240(%rsp)               ## 16-byte Spill
	vmulss	32(%rsp), %xmm5, %xmm3          ## 16-byte Folded Reload
	vaddss	%xmm1, %xmm3, %xmm1
	vmulss	%xmm7, %xmm0, %xmm4
	vmovaps	%xmm0, %xmm15
	vmovaps	%xmm0, 416(%rsp)                ## 16-byte Spill
	vaddss	%xmm1, %xmm4, %xmm9
	vmovaps	%xmm9, 192(%rsp)                ## 16-byte Spill
	vaddss	%xmm5, %xmm7, %xmm1
	vmulss	%xmm5, %xmm6, %xmm4
	vaddss	%xmm1, %xmm4, %xmm4
	vmovaps	%xmm4, 96(%rsp)                 ## 16-byte Spill
	vsubss	%xmm6, %xmm5, %xmm1
	vaddss	%xmm1, %xmm2, %xmm14
	vmovaps	%xmm14, 384(%rsp)               ## 16-byte Spill
	vmulss	256(%rsp), %xmm5, %xmm0         ## 16-byte Folded Reload
	vmovss	%xmm0, 80(%rsp)                 ## 4-byte Spill
	vaddss	%xmm5, %xmm0, %xmm0
	vaddss	%xmm0, %xmm2, %xmm1
	vmovaps	%xmm11, 320(%rsp)               ## 16-byte Spill
	vmulss	%xmm6, %xmm11, %xmm2
	vaddss	%xmm1, %xmm2, %xmm6
	vmovaps	%xmm6, 224(%rsp)                ## 16-byte Spill
	vaddss	%xmm0, %xmm3, %xmm0
	vmulss	%xmm7, %xmm11, %xmm1
	vaddss	%xmm0, %xmm1, %xmm3
	vmovaps	%xmm3, 208(%rsp)                ## 16-byte Spill
	vmulss	%xmm5, %xmm10, %xmm0
	vaddss	%xmm5, %xmm0, %xmm0
	vmulss	%xmm5, %xmm4, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmulss	%xmm5, %xmm9, %xmm1
	vaddss	%xmm5, %xmm1, %xmm1
	vmulss	%xmm5, %xmm14, %xmm2
	vaddss	%xmm1, %xmm2, %xmm1
	vsubss	%xmm15, %xmm5, %xmm2
	vaddss	%xmm5, %xmm2, %xmm2
	vaddss	%xmm2, %xmm12, %xmm4
	vmovaps	%xmm4, 448(%rsp)                ## 16-byte Spill
	vmulss	%xmm5, %xmm8, %xmm2
	vaddss	%xmm5, %xmm2, %xmm2
	vaddss	%xmm5, %xmm2, %xmm2
	vaddss	%xmm2, %xmm4, %xmm2
	vmovss	%xmm2, 160(%rsp)                ## 4-byte Spill
	vaddss	%xmm0, %xmm6, %xmm0
	vmovss	%xmm0, 168(%rsp)                ## 4-byte Spill
	vaddss	%xmm1, %xmm3, %xmm0
	vmovss	%xmm0, 256(%rsp)                ## 4-byte Spill
	movq	24(%rsp), %rax                  ## 8-byte Reload
	vmovss	60(%rax), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vaddss	%xmm5, %xmm13, %xmm1
	vmovaps	%xmm1, 336(%rsp)                ## 16-byte Spill
	callq	___sincosf_stret
	movq	24(%rsp), %rsi                  ## 8-byte Reload
	vmovshdup	%xmm0, %xmm14           ## xmm14 = xmm0[1,1,3,3]
	vmovaps	320(%rsp), %xmm3                ## 16-byte Reload
	vmulss	%xmm3, %xmm14, %xmm2
	vxorps	%xmm1, %xmm1, %xmm1
	vaddss	%xmm1, %xmm2, %xmm2
	vmulss	%xmm1, %xmm0, %xmm5
	vsubss	%xmm5, %xmm2, %xmm2
	vmovss	80(%rsp), %xmm4                 ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vaddss	%xmm2, %xmm4, %xmm9
	vmulss	%xmm0, %xmm3, %xmm2
	vaddss	%xmm1, %xmm2, %xmm2
	vmulss	%xmm1, %xmm14, %xmm7
	vaddss	%xmm2, %xmm7, %xmm2
	vaddss	%xmm2, %xmm4, %xmm6
	vbroadcastss	416(%rsp), %xmm2        ## 16-byte Folded Reload
	vpermilps	$225, %xmm0, %xmm4      ## xmm4 = xmm0[1,0,2,3]
	vmulps	%xmm4, %xmm2, %xmm2
	vxorps	128(%rsp), %xmm0, %xmm4         ## 16-byte Folded Reload
	vxorps	%xmm12, %xmm12, %xmm12
	vaddps	%xmm2, %xmm12, %xmm2
	vblendps	$2, %xmm0, %xmm4, %xmm8         ## xmm8 = xmm4[0],xmm0[1],xmm4[2,3]
	vmulps	%xmm12, %xmm8, %xmm4
	vaddps	%xmm2, %xmm4, %xmm2
	vbroadcastss	432(%rsp), %xmm4        ## 16-byte Folded Reload
	vaddps	%xmm2, %xmm4, %xmm4
	vaddss	%xmm1, %xmm7, %xmm2
	vsubss	%xmm0, %xmm2, %xmm2
	vaddss	%xmm1, %xmm2, %xmm2
	vaddss	%xmm1, %xmm9, %xmm7
	vmulss	%xmm1, %xmm2, %xmm3
	vaddss	%xmm7, %xmm3, %xmm3
	vmulss	%xmm1, %xmm4, %xmm7
	vaddss	%xmm3, %xmm7, %xmm10
	vaddss	%xmm1, %xmm5, %xmm5
	vaddss	%xmm5, %xmm14, %xmm5
	vaddss	%xmm1, %xmm5, %xmm7
	vaddss	%xmm1, %xmm6, %xmm5
	vmulss	%xmm1, %xmm7, %xmm3
	vxorps	%xmm13, %xmm13, %xmm13
	vaddss	%xmm5, %xmm3, %xmm3
	vinsertps	$16, 336(%rsp), %xmm3, %xmm11 ## 16-byte Folded Reload
                                        ## xmm11 = xmm3[0],mem[0],xmm3[2,3]
	vmovaps	112(%rsp), %xmm1                ## 16-byte Reload
	vunpcklps	32(%rsp), %xmm1, %xmm3  ## 16-byte Folded Reload
                                        ## xmm3 = xmm1[0],mem[0],xmm1[1],mem[1]
	vinsertps	$28, %xmm7, %xmm2, %xmm5 ## xmm5 = xmm2[0],xmm7[0],zero,zero
	vinsertps	$52, %xmm2, %xmm5, %xmm2 ## xmm2 = xmm5[0,1],zero,xmm2[0]
	vpermilps	$64, %xmm3, %xmm3       ## xmm3 = xmm3[0,0,0,1]
	vmulps	%xmm2, %xmm3, %xmm2
	vinsertps	$16, 352(%rsp), %xmm6, %xmm3 ## 16-byte Folded Reload
                                        ## xmm3 = xmm6[0],mem[0],xmm6[2,3]
	vblendps	$1, %xmm7, %xmm12, %xmm5        ## xmm5 = xmm7[0],xmm12[1,2,3]
	vmovaps	64(%rsp), %xmm1                 ## 16-byte Reload
	vbroadcastss	%xmm1, %xmm6
	vmulps	%xmm5, %xmm6, %xmm5
	vmulss	%xmm13, %xmm9, %xmm6
	vaddss	%xmm6, %xmm13, %xmm6
	vmulps	%xmm3, %xmm12, %xmm3
	vaddps	%xmm3, %xmm12, %xmm3
	vsubps	%xmm5, %xmm3, %xmm5
	vmovlhps	%xmm3, %xmm6, %xmm7             ## xmm7 = xmm6[0],xmm3[0]
	vshufps	$216, %xmm3, %xmm7, %xmm3       ## xmm3 = xmm7[0,2],xmm3[1,3]
	vinsertps	$48, %xmm6, %xmm3, %xmm3 ## xmm3 = xmm3[0,1,2],xmm6[0]
	vaddps	%xmm3, %xmm2, %xmm2
	vmovss	%xmm10, 112(%rsi)
	vbroadcastss	464(%rsp), %ymm3        ## 16-byte Folded Reload
	vmovshdup	%xmm4, %xmm6            ## xmm6 = xmm4[1,1,3,3]
	vunpcklps	%xmm3, %xmm6, %xmm6     ## xmm6 = xmm6[0],xmm3[0],xmm6[1],xmm3[1]
	vmovlhps	%xmm1, %xmm6, %xmm6             ## xmm6 = xmm6[0],xmm1[0]
	vmovaps	LCPI151_28(%rip), %ymm7         ## ymm7 = [0,1,2,2,2,3,3,3]
	vpermps	%ymm6, %ymm7, %ymm6
	vmovlhps	%xmm4, %xmm12, %xmm4            ## xmm4 = xmm12[0],xmm4[0]
	vblendps	$16, %ymm3, %ymm4, %ymm3        ## ymm3 = ymm4[0,1,2,3],ymm3[4],ymm4[5,6,7]
	vmovaps	LCPI151_29(%rip), %ymm4         ## ymm4 = [0,1,2,3,4,2,3,4]
	vpermps	%ymm3, %ymm4, %ymm3
	vmulps	%ymm3, %ymm6, %ymm3
	vpermpd	$208, %ymm2, %ymm2              ## ymm2 = ymm2[0,0,1,3]
	vblendps	$3, %ymm11, %ymm2, %ymm4        ## ymm4 = ymm11[0,1],ymm2[2,3,4,5,6,7]
	vinsertf128	$1, %xmm5, %ymm2, %ymm2
	vshufpd	$2, %ymm2, %ymm4, %ymm2         ## ymm2 = ymm4[0],ymm2[1],ymm4[2],ymm2[2]
	vaddps	%ymm2, %ymm3, %ymm2
	vmovups	%ymm2, 116(%rsi)
	vmovaps	240(%rsp), %xmm5                ## 16-byte Reload
	vmovaps	368(%rsp), %xmm3                ## 16-byte Reload
	vinsertps	$16, %xmm5, %xmm3, %xmm2 ## xmm2 = xmm3[0],xmm5[0],xmm3[2,3]
	vmovaps	192(%rsp), %xmm9                ## 16-byte Reload
	vinsertps	$32, %xmm9, %xmm2, %xmm2 ## xmm2 = xmm2[0,1],xmm9[0],xmm2[3]
	vinsertps	$48, %xmm3, %xmm2, %xmm2 ## xmm2 = xmm2[0,1,2],xmm3[0]
	vpermilps	$21, %xmm0, %xmm3       ## xmm3 = xmm0[1,1,1,0]
	vmulps	%xmm2, %xmm3, %xmm2
	vmovaps	384(%rsp), %xmm10               ## 16-byte Reload
	vblendps	$1, %xmm10, %xmm12, %xmm3       ## xmm3 = xmm10[0],xmm12[1,2,3]
	vmovaps	96(%rsp), %xmm6                 ## 16-byte Reload
	vblendps	$1, %xmm6, %xmm12, %xmm4        ## xmm4 = xmm6[0],xmm12[1,2,3]
	vshufps	$65, %xmm3, %xmm4, %xmm3        ## xmm3 = xmm4[1,0],xmm3[0,1]
	vpermilps	$64, %xmm8, %xmm4       ## xmm4 = xmm8[0,0,0,1]
	vmulps	%xmm3, %xmm4, %xmm3
	vaddps	%xmm2, %xmm12, %xmm2
	vaddps	%xmm2, %xmm3, %xmm2
	vmovaps	224(%rsp), %xmm1                ## 16-byte Reload
	vmovaps	448(%rsp), %xmm4                ## 16-byte Reload
	vinsertps	$16, %xmm1, %xmm4, %xmm3 ## xmm3 = xmm4[0],xmm1[0],xmm4[2,3]
	vmovaps	208(%rsp), %xmm7                ## 16-byte Reload
	vinsertps	$32, %xmm7, %xmm3, %xmm3 ## xmm3 = xmm3[0,1],xmm7[0],xmm3[3]
	vinsertps	$48, %xmm4, %xmm3, %xmm3 ## xmm3 = xmm3[0,1,2],xmm4[0]
	vmulps	%xmm3, %xmm12, %xmm3
	vaddps	%xmm2, %xmm3, %xmm2
	vmulss	%xmm5, %xmm0, %xmm3
	vaddss	%xmm3, %xmm13, %xmm3
	vmulss	%xmm6, %xmm14, %xmm4
	vaddss	%xmm3, %xmm4, %xmm3
	vmulss	%xmm1, %xmm13, %xmm4
	vaddss	%xmm3, %xmm4, %xmm6
	vmulss	%xmm0, %xmm9, %xmm0
	vaddss	%xmm0, %xmm13, %xmm0
	vmulss	%xmm10, %xmm14, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmulss	%xmm7, %xmm13, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vmovups	%xmm2, 148(%rsi)
	vmovss	%xmm6, 164(%rsi)
	vmovss	%xmm0, 168(%rsi)
	vmovss	160(%rsp), %xmm7                ## 4-byte Reload
                                        ## xmm7 = mem[0],zero,zero,zero
	vmovss	%xmm7, 172(%rsi)
	vmovss	168(%rsp), %xmm1                ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, 176(%rsi)
	vmovss	256(%rsp), %xmm3                ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovss	%xmm3, 180(%rsi)
	vpermilps	$236, %xmm2, %xmm8      ## xmm8 = xmm2[0,3,2,3]
	vmulps	%xmm12, %xmm8, %xmm4
	vaddps	%xmm4, %xmm12, %xmm10
	vmovshdup	%xmm2, %xmm5            ## xmm5 = xmm2[1,1,3,3]
	vinsertps	$16, %xmm6, %xmm5, %xmm4 ## xmm4 = xmm5[0],xmm6[0],xmm5[2,3]
	vmulps	%xmm4, %xmm12, %xmm5
	vaddps	%xmm5, %xmm10, %xmm6
	vpermilpd	$1, %xmm2, %xmm2        ## xmm2 = xmm2[1,0]
	vinsertps	$16, %xmm0, %xmm2, %xmm0 ## xmm0 = xmm2[0],xmm0[0],xmm2[2,3]
	vsubps	%xmm0, %xmm6, %xmm2
	vmulss	%xmm7, %xmm13, %xmm6
	vmovaps	%xmm7, %xmm11
	vaddss	%xmm6, %xmm13, %xmm6
	vmulss	%xmm1, %xmm13, %xmm7
	vmovaps	%xmm1, %xmm9
	vmovlps	%xmm2, 88(%rsi)
	vaddss	%xmm6, %xmm7, %xmm2
	vsubss	%xmm3, %xmm2, %xmm2
	vmovss	%xmm2, 96(%rsi)
	vaddps	%xmm12, %xmm8, %xmm1
	vaddps	%xmm1, %xmm5, %xmm1
	vmulps	%xmm0, %xmm12, %xmm0
	vaddss	%xmm13, %xmm11, %xmm2
	vaddss	%xmm2, %xmm7, %xmm2
	vmulss	%xmm3, %xmm13, %xmm5
	vaddps	%xmm1, %xmm0, %xmm1
	vmovlps	%xmm1, 64(%rsi)
	vaddss	%xmm2, %xmm5, %xmm1
	vmovss	%xmm1, 72(%rsi)
	vaddps	%xmm4, %xmm10, %xmm1
	vmovss	88(%rsp), %xmm3                 ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vaddps	%xmm1, %xmm0, %xmm0
	vaddss	%xmm6, %xmm9, %xmm1
	vaddss	%xmm1, %xmm5, %xmm1
	vmovlps	%xmm0, 76(%rsi)
	vmovss	%xmm1, 84(%rsi)
	movq	6296(%rsi), %rbx
	movl	180(%rsi), %eax
	movl	%eax, 608(%rsp)
	vmovups	148(%rsi), %ymm0
	vmovaps	%ymm0, 576(%rsp)
	vaddss	LCPI151_30(%rip), %xmm3, %xmm0
	movl	28(%rbx), %eax
	imull	24(%rbx), %eax
	testl	%eax, %eax
	jle	LBB151_122
## %bb.120:
	vbroadcastss	60(%rbx), %ymm1
	xorl	%eax, %eax
	vbroadcastss	LCPI151_31(%rip), %ymm2 ## ymm2 = [1296911616,1296911616,1296911616,1296911616,1296911616,1296911616,1296911616,1296911616]
	.p2align	4, 0x90
LBB151_121:                             ## =>This Inner Loop Header: Depth=1
	movq	48(%rbx), %rcx
	vmovaps	%ymm1, (%rcx,%rax,4)
	movq	40(%rbx), %rcx
	vmovaps	%ymm2, (%rcx,%rax,4)
	addq	$8, %rax
	movslq	24(%rbx), %rcx
	movslq	28(%rbx), %rdx
	imulq	%rcx, %rdx
	cmpq	%rdx, %rax
	jl	LBB151_121
LBB151_122:
	movq	%r14, 152(%rsp)                 ## 8-byte Spill
	movq	$0, 200(%rbx)
	vxorps	%xmm1, %xmm1, %xmm1
	vmovups	%ymm1, 1008(%rbx)
	vmovups	%ymm1, 1040(%rbx)
	vmovups	%ymm1, 1072(%rbx)
	vmovups	%ymm1, 1104(%rbx)
	vmovups	%ymm1, 1136(%rbx)
	vmovups	%ymm1, 1168(%rbx)
	vmovups	%ymm1, 1200(%rbx)
	vmovups	%ymm1, 1232(%rbx)
	vmovups	%ymm1, 1264(%rbx)
	vmovups	%ymm1, 1296(%rbx)
	vmovups	%ymm1, 1328(%rbx)
	vmovups	%ymm1, 1360(%rbx)
	vmovups	%ymm1, 1376(%rbx)
	vmovaps	48(%rsp), %xmm1                 ## 16-byte Reload
	vmovlps	%xmm1, 64(%rbx)
	vmovss	%xmm3, 72(%rbx)
	vmovaps	576(%rsp), %ymm1
	vmovups	%ymm1, 76(%rbx)
	movl	608(%rsp), %eax
	movl	%eax, 108(%rbx)
	vmovaps	LCPI151_32(%rip), %ymm1         ## ymm1 = [0,3,6,1,4,7,2,5]
	vpermps	76(%rbx), %ymm1, %ymm1
	vmovss	108(%rbx), %xmm2                ## xmm2 = mem[0],zero,zero,zero
	vmovups	%ymm1, 112(%rbx)
	vmovss	%xmm2, 144(%rbx)
	vbroadcastss	LCPI151_33(%rip), %xmm1 ## xmm1 = [3.0E+0,3.0E+0,3.0E+0,3.0E+0]
	vmovlps	%xmm1, 1664(%rbx)
	vmovss	%xmm0, 1672(%rbx)
	movq	$0, 1768(%rbx)
	movq	$0, 1784(%rbx)
	movl	$0, 395048(%rbx)
	leaq	3470176(%rsi), %r14
	movl	$-50, %eax
	xorl	%r12d, %r12d
	movabsq	$2361183241434822607, %r13      ## imm = 0x20C49BA5E353F7CF
	vmovss	LCPI151_34(%rip), %xmm1         ## xmm1 = mem[0],zero,zero,zero
	vmovss	LCPI151_35(%rip), %xmm2         ## xmm2 = mem[0],zero,zero,zero
	vmovsd	LCPI151_36(%rip), %xmm3         ## xmm3 = mem[0],zero
	vxorps	%xmm4, %xmm4, %xmm4
	vbroadcastss	LCPI151_4(%rip), %xmm5  ## xmm5 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
	vmovss	LCPI151_4(%rip), %xmm6          ## xmm6 = mem[0],zero,zero,zero
	vmovaps	%xmm5, 32(%rsp)                 ## 16-byte Spill
	.p2align	4, 0x90
LBB151_123:                             ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB151_124 Depth 2
	movl	%eax, 112(%rsp)                 ## 4-byte Spill
	vcvtsi2ss	%eax, %xmm12, %xmm0
	vmovaps	%xmm0, 128(%rsp)                ## 16-byte Spill
	movq	%r12, 48(%rsp)                  ## 8-byte Spill
	movq	%r14, 64(%rsp)                  ## 8-byte Spill
	movl	$-50, %r15d
	.p2align	4, 0x90
LBB151_124:                             ##   Parent Loop BB151_123 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	%r12, %rax
	shrq	$3, %rax
	mulq	%r13
	shrq	$4, %rdx
	imulq	$-12000, %rdx, %rax             ## imm = 0xD120
	vmovss	(%r14,%rax), %xmm0              ## xmm0 = mem[0],zero,zero,zero
	vdivss	%xmm1, %xmm0, %xmm0
	vaddss	%xmm2, %xmm0, %xmm0
	vcvtsi2ss	%r15d, %xmm12, %xmm1
	vmovsd	%xmm3, 304(%rsp)
	movl	$0, 312(%rsp)
	vmovlps	%xmm4, 288(%rsp)
	movl	$1065353216, 296(%rsp)          ## imm = 0x3F800000
	movl	296(%rsp), %eax
	movq	288(%rsp), %rcx
	movl	312(%rsp), %edx
	movq	304(%rsp), %rsi
	vmovaps	128(%rsp), %xmm2                ## 16-byte Reload
	vinsertps	$16, %xmm0, %xmm2, %xmm0 ## xmm0 = xmm2[0],xmm0[0],xmm2[2,3]
	vxorps	%xmm7, %xmm7, %xmm7
	movq	%rbx, %rdi
	vmovaps	%xmm5, %xmm2
	vmovaps	%xmm6, %xmm3
	vmovaps	%xmm5, %xmm4
	vmovaps	32(%rsp), %xmm5                 ## 16-byte Reload
	vmovss	LCPI151_4(%rip), %xmm6          ## xmm6 = mem[0],zero,zero,zero
	pushq	%rax
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	vzeroupper
	callq	__Z9push_cubeP14Render_Context2v3S1_2v4S1_S1_S1_
	vmovss	LCPI151_4(%rip), %xmm6          ## xmm6 = mem[0],zero,zero,zero
	vmovaps	64(%rsp), %xmm5                 ## 16-byte Reload
	vxorps	%xmm4, %xmm4, %xmm4
	vmovsd	LCPI151_36(%rip), %xmm3         ## xmm3 = mem[0],zero
	vmovss	LCPI151_35(%rip), %xmm2         ## xmm2 = mem[0],zero,zero,zero
	vmovss	LCPI151_34(%rip), %xmm1         ## xmm1 = mem[0],zero,zero,zero
	addq	$32, %rsp
	incl	%r15d
	addq	$12, %r14
	incq	%r12
	cmpl	$50, %r15d
	jne	LBB151_124
## %bb.125:                             ##   in Loop: Header=BB151_123 Depth=1
	movl	112(%rsp), %eax                 ## 4-byte Reload
	incl	%eax
	movq	64(%rsp), %r14                  ## 8-byte Reload
	addq	$1200, %r14                     ## imm = 0x4B0
	movq	48(%rsp), %r12                  ## 8-byte Reload
	addq	$100, %r12
	cmpl	$50, %eax
	jne	LBB151_123
## %bb.126:
	movq	24(%rsp), %r14                  ## 8-byte Reload
	movq	%r14, %rdi
	callq	__Z21update_profiler_statsP4Game
	vmovaps	LCPI151_37(%rip), %xmm0         ## xmm0 = <6.99999988E-1,u,u,u>
	vinsertps	$16, 3470124(%r14), %xmm0, %xmm1 ## xmm1 = xmm0[0],mem[0],xmm0[2,3]
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%r14, %rdi
	movq	152(%rsp), %rsi                 ## 8-byte Reload
	movq	%rbx, %rdx
	callq	__Z13draw_profilerP4GameP9GameInputP14Render_Context2v2S5_
	cmpl	$0, 204(%rbx)
	jle	LBB151_129
## %bb.127:
	xorl	%r14d, %r14d
	xorl	%r15d, %r15d
	.p2align	4, 0x90
LBB151_128:                             ## =>This Inner Loop Header: Depth=1
	movq	192(%rbx), %rsi
	addq	%r14, %rsi
	movq	%rbx, %rdi
	callq	__Z13push_triangleP14Render_ContextP8Triangle
	incq	%r15
	movslq	204(%rbx), %rax
	subq	$-128, %r14
	cmpq	%rax, %r15
	jl	LBB151_128
LBB151_129:
	mfence
	movq	1760(%rbx), %rax
	movl	$0, 6320(%rax)
	xorl	%ecx, %ecx
	xchgl	%ecx, 6316(%rax)
	movq	1760(%rbx), %rax
	movl	$1, %esi
	lock		xaddl	%esi, 6316(%rax)
	cmpl	$99, %esi
	jg	LBB151_131
	.p2align	4, 0x90
LBB151_130:                             ## =>This Inner Loop Header: Depth=1
	movq	%rbx, %rdi
	callq	__Z11render_tileP14Render_Contexti
	movq	1760(%rbx), %rax
	lock		incl	6320(%rax)
	movq	1760(%rbx), %rax
	movl	$1, %esi
	lock		xaddl	%esi, 6316(%rax)
	cmpl	$100, %esi
	jl	LBB151_130
	.p2align	4, 0x90
LBB151_131:                             ## =>This Inner Loop Header: Depth=1
	movq	1760(%rbx), %rax
	mfence
	movl	6320(%rax), %eax
	cmpl	$100, %eax
	jne	LBB151_131
## %bb.132:
	leaq	_timed_blocks1(%rip), %rcx
	cmpq	%rcx, _timed_blocks(%rip)
	leaq	_timed_blocks2(%rip), %rax
	cmovneq	%rcx, %rax
	movq	%rax, _timed_blocks(%rip)
	addq	$21544, %rax                    ## imm = 0x5428
	movq	$-7168, %rcx                    ## imm = 0xE400
	vxorps	%xmm0, %xmm0, %xmm0
	movq	24(%rsp), %rbx                  ## 8-byte Reload
	.p2align	4, 0x90
LBB151_133:                             ## =>This Inner Loop Header: Depth=1
	movl	$0, -14344(%rax,%rcx)
	vmovups	%xmm0, -14336(%rax,%rcx)
	movl	$0, -7176(%rax,%rcx)
	vmovups	%xmm0, -7168(%rax,%rcx)
	movl	$0, -8(%rax,%rcx)
	vmovups	%xmm0, (%rax,%rcx)
	movl	$0, 7160(%rax,%rcx)
	vmovups	%xmm0, 7168(%rax,%rcx)
	addq	$56, %rcx
	jne	LBB151_133
## %bb.134:
	cmpl	$0, 3470120(%rbx)
	jne	LBB151_138
## %bb.135:
	cmpl	$0, 196(%rbx)
	je	LBB151_137
## %bb.136:
	movl	3470112(%rbx), %eax
	movl	%eax, %ecx
	incl	%ecx
	movslq	%ecx, %rcx
	imulq	$-2004318071, %rcx, %rcx        ## imm = 0x88888889
	shrq	$32, %rcx
	addl	%eax, %ecx
	incl	%ecx
	movl	%ecx, %edx
	shrl	$31, %edx
	sarl	$6, %ecx
	addl	%edx, %ecx
	imull	$120, %ecx, %ecx
	negl	%ecx
	addl	%ecx, %eax
	incl	%eax
	movl	%eax, 3470112(%rbx)
LBB151_137:
	movl	3470128(%rbx), %eax
	incl	%eax
	vcvtsi2ss	%eax, %xmm8, %xmm0
	vmovss	LCPI151_38(%rip), %xmm1         ## xmm1 = mem[0],zero,zero,zero
	vminss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, 3470128(%rbx)
LBB151_138:
	leaq	576(%rsp), %rsi
	movl	$6, %edi
	callq	_clock_gettime
	movq	576(%rsp), %rax
	movq	584(%rsp), %rcx
	subq	400(%rsp), %rax
	vcvtsi2sd	%rax, %xmm8, %xmm0
	subq	408(%rsp), %rcx
	vcvtsi2sd	%rcx, %xmm8, %xmm1
	vdivsd	LCPI151_39(%rip), %xmm1, %xmm1
	vmulsd	LCPI151_40(%rip), %xmm0, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 36(%rbx)
	vmovss	188(%rbx), %xmm0                ## xmm0 = mem[0],zero,zero,zero
	vaddss	LCPI151_27(%rip), %xmm0, %xmm0
	vmovss	%xmm0, 188(%rbx)
	incl	196(%rbx)
	jmp	LBB151_3
LBB151_87:
	xorl	%eax, %eax
	cmpl	$0, 6452(%rsi)
	sete	%al
	movl	%eax, 6452(%rsi)
	cmpl	$0, 6452(%rsi)
	je	LBB151_89
LBB151_3:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	395680(%rsp), %rax
	jne	LBB151_139
## %bb.4:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB151_101:
	vxorps	%xmm1, %xmm1, %xmm1
	cmpl	$0, 60(%r14)
	jne	LBB151_104
	jmp	LBB151_105
LBB151_6:
	vzeroupper
	callq	_game_update_and_render.cold.1
	jmp	LBB151_3
LBB151_10:
	vzeroupper
	callq	_game_update_and_render.cold.2
	jmp	LBB151_3
LBB151_14:
	vzeroupper
	callq	_game_update_and_render.cold.3
	jmp	LBB151_3
LBB151_18:
	vzeroupper
	callq	_game_update_and_render.cold.4
	jmp	LBB151_3
LBB151_22:
	callq	_game_update_and_render.cold.5
	jmp	LBB151_3
LBB151_35:
	vzeroupper
	callq	_game_update_and_render.cold.6
	jmp	LBB151_3
LBB151_36:
	callq	_game_update_and_render.cold.7
	jmp	LBB151_3
LBB151_41:
	callq	_game_update_and_render.cold.8
	jmp	LBB151_3
LBB151_45:
	callq	_game_update_and_render.cold.9
	jmp	LBB151_3
LBB151_51:
	callq	_game_update_and_render.cold.10
	jmp	LBB151_3
LBB151_2:
	vzeroupper
	callq	_game_update_and_render.cold.18
	jmp	LBB151_3
LBB151_8:
	vzeroupper
	callq	_game_update_and_render.cold.17
	jmp	LBB151_3
LBB151_12:
	vzeroupper
	callq	_game_update_and_render.cold.16
	jmp	LBB151_3
LBB151_16:
	vzeroupper
	callq	_game_update_and_render.cold.15
	jmp	LBB151_3
LBB151_20:
	callq	_game_update_and_render.cold.14
	jmp	LBB151_3
LBB151_33:
	vzeroupper
	callq	_game_update_and_render.cold.13
	jmp	LBB151_3
LBB151_39:
	callq	_game_update_and_render.cold.12
	jmp	LBB151_3
LBB151_43:
	callq	_game_update_and_render.cold.11
	jmp	LBB151_3
LBB151_139:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.globl	__Z19get_last_write_timePKc     ## -- Begin function _Z19get_last_write_timePKc
	.p2align	4, 0x90
__Z19get_last_write_timePKc:            ## @_Z19get_last_write_timePKc
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	leaq	-144(%rbp), %rsi
	callq	_stat$INODE64
	testl	%eax, %eax
	jne	LBB152_1
## %bb.2:
	movq	-96(%rbp), %rax
	addq	$144, %rsp
	popq	%rbp
	retq
LBB152_1:
	xorl	%eax, %eax
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ## -- Begin function main
LCPI153_0:
	.quad	4294967296                      ## 0x100000000
	.quad	0                               ## 0x0
LCPI153_1:
	.long	0x43c80000                      ## float 400
	.long	0xc3c80000                      ## float -400
	.space	4
	.space	4
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2
LCPI153_2:
	.long	0x44480000                      ## float 800
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_main
	.p2align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	$4488, %eax                     ## imm = 0x1188
	callq	____chkstk_darwin
	subq	%rax, %rsp
	popq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$32, %edi
	vzeroupper
	callq	_SDL_Init
	testl	%eax, %eax
	je	LBB153_4
LBB153_1:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %rbx
	callq	_SDL_GetError
	leaq	L_.str.56(%rip), %rsi
	movq	%rbx, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	callq	_fprintf
	movl	$1, %ebx
LBB153_2:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB153_36
## %bb.3:
	movl	%ebx, %eax
LBB153_35:
	addq	$4488, %rsp                     ## imm = 0x1188
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB153_4:
	callq	_SDL_GetCPUCount
	leaq	L_.str.57(%rip), %rdi
	movl	%eax, %esi
	xorl	%eax, %eax
	callq	_printf
	leaq	L_.str.58(%rip), %rdi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$800, %ecx                      ## imm = 0x320
	movl	$800, %r8d                      ## imm = 0x320
	movl	$4, %r9d
	callq	_SDL_CreateWindow
	testq	%rax, %rax
	je	LBB153_1
## %bb.5:
	movq	%rax, %r14
	movq	%rax, %rdi
	movl	$-1, %esi
	movl	$6, %edx
	callq	_SDL_CreateRenderer
	testq	%rax, %rax
	je	LBB153_1
## %bb.6:
	movq	%rax, %r15
	movq	%rax, %rdi
	movl	$800, %esi                      ## imm = 0x320
	movl	$800, %edx                      ## imm = 0x320
	callq	_SDL_RenderSetLogicalSize
	movl	$1, %ebx
	movq	%r15, %rdi
	movl	$373694468, %esi                ## imm = 0x16462004
	movl	$1, %edx
	movl	$800, %ecx                      ## imm = 0x320
	movl	$800, %r8d                      ## imm = 0x320
	callq	_SDL_CreateTexture
	movq	%rax, -320(%rbp)                ## 8-byte Spill
	testq	%rax, %rax
	je	LBB153_7
## %bb.8:
	movq	%r15, -328(%rbp)                ## 8-byte Spill
	movq	%r14, -336(%rbp)                ## 8-byte Spill
	xorl	%edi, %edi
	callq	_SDL_SetRelativeMouseMode
	vmovaps	LCPI153_0(%rip), %xmm0          ## xmm0 = [4294967296,0]
	vmovups	%xmm0, -352(%rbp)
	movabsq	$4294967296, %rsi               ## imm = 0x100000000
	movl	$1, %edi
	callq	_calloc
	movq	%rax, -360(%rbp)
	leaq	-4520(%rbp), %rdi
	movl	$4156, %esi                     ## imm = 0x103C
	callq	___bzero
	movl	$1, %edi
	movl	$3498176, %esi                  ## imm = 0x3560C0
	callq	_calloc
	movq	%rax, %r12
	movabsq	$3435973837600, %rax            ## imm = 0x32000000320
	movq	%rax, (%r12)
	movl	$100, 6316(%r12)
	movq	%rax, 24(%r12)
	movl	$2560064, %edi                  ## imm = 0x271040
	callq	_malloc
	addq	$63, %rax
	andq	$-64, %rax
	movq	%rax, 16(%r12)
	movq	_g_thread_info@TLVP(%rip), %rdi
	callq	*(%rdi)
	movl	$0, (%rax)
	leaq	-72(%rbp), %rdi
	leaq	_game_thread_work(%rip), %r14
	xorl	%esi, %esi
	movq	%r14, %rdx
	movq	%r12, %rcx
	callq	_pthread_create
	leaq	-64(%rbp), %rdi
	xorl	%esi, %esi
	movq	%r14, %rdx
	movq	%r12, %rcx
	callq	_pthread_create
	leaq	-56(%rbp), %rdi
	xorl	%esi, %esi
	movq	%r14, %rdx
	movq	%r12, %rcx
	callq	_pthread_create
	cmpl	$0, 32(%r12)
	je	LBB153_9
LBB153_30:
	xorl	%ebx, %ebx
	jmp	LBB153_2
LBB153_7:
	movq	___stderrp@GOTPCREL(%rip), %rax
	movq	(%rax), %r14
	callq	_SDL_GetError
	leaq	L_.str.56(%rip), %rsi
	movq	%r14, %rdi
	movq	%rax, %rdx
	xorl	%eax, %eax
	callq	_fprintf
	jmp	LBB153_2
LBB153_9:
	xorl	%eax, %eax
	movq	%rax, -312(%rbp)                ## 8-byte Spill
	leaq	-136(%rbp), %r14
	movl	$0, -276(%rbp)                  ## 4-byte Folded Spill
	xorl	%ebx, %ebx
	xorl	%r13d, %r13d
	movl	$0, -280(%rbp)                  ## 4-byte Folded Spill
	jmp	LBB153_10
	.p2align	4, 0x90
LBB153_29:                              ##   in Loop: Header=BB153_10 Depth=1
	vmovss	36(%r12), %xmm0                 ## xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movl	$128, %esi
	movq	%r15, %rdi
	leaq	L_.str.61(%rip), %rdx
	movb	$1, %al
	callq	_snprintf
	movq	-336(%rbp), %rdi                ## 8-byte Reload
	movq	%r15, %rsi
	callq	_SDL_SetWindowTitle
	movq	-320(%rbp), %r13                ## 8-byte Reload
	movq	%r13, %rdi
	callq	_SDL_UnlockTexture
	movq	-328(%rbp), %r15                ## 8-byte Reload
	movq	%r15, %rdi
	movq	%r13, %rsi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	_SDL_RenderCopy
	movq	%r15, %rdi
	callq	_SDL_RenderPresent
	cmpl	$0, 32(%r12)
	movl	-304(%rbp), %r13d               ## 4-byte Reload
	jne	LBB153_30
LBB153_10:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB153_13 Depth 2
                                        ##     Child Loop BB153_32 Depth 2
                                        ##     Child Loop BB153_22 Depth 2
	movq	%r14, %rdi
	callq	_SDL_PollEvent
	vxorps	%xmm0, %xmm0, %xmm0
	testl	%eax, %eax
	je	LBB153_11
## %bb.12:                              ##   in Loop: Header=BB153_10 Depth=1
	vmovaps	%xmm0, -304(%rbp)               ## 16-byte Spill
	leaq	-272(%rbp), %r15
	jmp	LBB153_13
	.p2align	4, 0x90
LBB153_16:                              ##   in Loop: Header=BB153_13 Depth=2
	vmovsd	-108(%rbp), %xmm0               ## xmm0 = mem[0],zero
	vcvtdq2ps	%xmm0, %xmm0
	vdivps	LCPI153_1(%rip), %xmm0, %xmm0
	vmovaps	%xmm0, -304(%rbp)               ## 16-byte Spill
LBB153_17:                              ##   in Loop: Header=BB153_13 Depth=2
	movq	%r14, %rdi
	callq	_SDL_PollEvent
	testl	%eax, %eax
	je	LBB153_18
LBB153_13:                              ##   Parent Loop BB153_10 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-136(%rbp), %eax
	cmpl	$1024, %eax                     ## imm = 0x400
	je	LBB153_16
## %bb.14:                              ##   in Loop: Header=BB153_13 Depth=2
	cmpl	$256, %eax                      ## imm = 0x100
	jne	LBB153_17
## %bb.15:                              ##   in Loop: Header=BB153_13 Depth=2
	movl	$1, 32(%r12)
	jmp	LBB153_17
	.p2align	4, 0x90
LBB153_11:                              ##   in Loop: Header=BB153_10 Depth=1
	vmovaps	%xmm0, -304(%rbp)               ## 16-byte Spill
	leaq	-272(%rbp), %r15
LBB153_18:                              ##   in Loop: Header=BB153_10 Depth=1
	vmovdqa	-304(%rbp), %xmm0               ## 16-byte Reload
	vmovd	%xmm0, -380(%rbp)
	vpextrd	$1, %xmm0, -376(%rbp)
	movq	%r15, %rdi
	callq	_SDL_GetKeyboardState
	movl	-272(%rbp), %ecx
	cmpl	$512, %ecx                      ## imm = 0x200
	jg	LBB153_33
## %bb.19:                              ##   in Loop: Header=BB153_10 Depth=1
	testl	%ecx, %ecx
	jle	LBB153_24
## %bb.20:                              ##   in Loop: Header=BB153_10 Depth=1
	cmpl	$16, %ecx
	ja	LBB153_31
## %bb.21:                              ##   in Loop: Header=BB153_10 Depth=1
	xorl	%edx, %edx
	jmp	LBB153_22
	.p2align	4, 0x90
LBB153_31:                              ##   in Loop: Header=BB153_10 Depth=1
	movl	%ecx, %esi
	andl	$15, %esi
	testq	%rsi, %rsi
	movl	$16, %edx
	cmoveq	%rdx, %rsi
	movq	%rcx, %rdx
	subq	%rsi, %rdx
	xorl	%esi, %esi
	.p2align	4, 0x90
LBB153_32:                              ##   Parent Loop BB153_10 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vpmovzxbd	(%rax,%rsi), %ymm0      ## ymm0 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	8(%rax,%rsi), %ymm1     ## ymm1 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vextracti128	$1, %ymm0, %xmm2
	vpmovzxdq	%xmm2, %ymm2            ## ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero
	vpshufd	$160, -4460(%rbp,%rsi,8), %ymm3 ## ymm3 = mem[0,0,2,2,4,4,6,6]
	vpblendd	$170, %ymm3, %ymm2, %ymm2       ## ymm2 = ymm2[0],ymm3[1],ymm2[2],ymm3[3],ymm2[4],ymm3[5],ymm2[6],ymm3[7]
	vpmovzxdq	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero
	vpshufd	$160, -4492(%rbp,%rsi,8), %ymm3 ## ymm3 = mem[0,0,2,2,4,4,6,6]
	vpblendd	$170, %ymm3, %ymm0, %ymm0       ## ymm0 = ymm0[0],ymm3[1],ymm0[2],ymm3[3],ymm0[4],ymm3[5],ymm0[6],ymm3[7]
	vmovdqu	%ymm0, -4492(%rbp,%rsi,8)
	vmovdqu	%ymm2, -4460(%rbp,%rsi,8)
	vextracti128	$1, %ymm1, %xmm0
	vpmovzxdq	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero
	vpshufd	$160, -4396(%rbp,%rsi,8), %ymm2 ## ymm2 = mem[0,0,2,2,4,4,6,6]
	vpblendd	$170, %ymm2, %ymm0, %ymm0       ## ymm0 = ymm0[0],ymm2[1],ymm0[2],ymm2[3],ymm0[4],ymm2[5],ymm0[6],ymm2[7]
	vpmovzxdq	%xmm1, %ymm1            ## ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero
	vpshufd	$160, -4428(%rbp,%rsi,8), %ymm2 ## ymm2 = mem[0,0,2,2,4,4,6,6]
	vpblendd	$170, %ymm2, %ymm1, %ymm1       ## ymm1 = ymm1[0],ymm2[1],ymm1[2],ymm2[3],ymm1[4],ymm2[5],ymm1[6],ymm2[7]
	vmovdqu	%ymm1, -4428(%rbp,%rsi,8)
	vmovdqu	%ymm0, -4396(%rbp,%rsi,8)
	addq	$16, %rsi
	cmpq	%rsi, %rdx
	jne	LBB153_32
	.p2align	4, 0x90
LBB153_22:                              ##   Parent Loop BB153_10 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-4492(%rbp,%rdx,8), %esi
	movl	%esi, -4488(%rbp,%rdx,8)
	movzbl	(%rax,%rdx), %esi
	movl	%esi, -4492(%rbp,%rdx,8)
	incq	%rdx
	cmpq	%rdx, %rcx
	jne	LBB153_22
## %bb.23:                              ##   in Loop: Header=BB153_10 Depth=1
	movl	-4140(%rbp), %eax
	movl	%eax, -276(%rbp)                ## 4-byte Spill
	movl	-4136(%rbp), %eax
	movq	%rax, -312(%rbp)                ## 8-byte Spill
LBB153_24:                              ##   in Loop: Header=BB153_10 Depth=1
	movq	%r15, %rdi
	leaq	-284(%rbp), %rsi
	vzeroupper
	callq	_SDL_GetMouseState
	movl	-280(%rbp), %ecx                ## 4-byte Reload
	movl	%ecx, -4512(%rbp)
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -280(%rbp)                ## 4-byte Spill
	movl	%ecx, -4516(%rbp)
	movl	%r13d, -4504(%rbp)
	movl	%eax, %r13d
	shrl	%r13d
	andl	$1, %r13d
	movl	%r13d, -4508(%rbp)
	movl	%ebx, -4496(%rbp)
	shrl	$2, %eax
	movl	%eax, %ebx
	andl	$1, %ebx
	movl	%ebx, -4500(%rbp)
	movq	-388(%rbp), %rax
	vcvtsi2ssl	-272(%rbp), %xmm4, %xmm0
	movq	%rax, -396(%rbp)
	vcvtsi2ssl	-284(%rbp), %xmm4, %xmm1
	vmovss	LCPI153_2(%rip), %xmm2          ## xmm2 = mem[0],zero,zero,zero
	vdivss	%xmm2, %xmm0, %xmm0
	vmovss	%xmm0, -388(%rbp)
	vdivss	%xmm2, %xmm1, %xmm0
	vmovss	%xmm0, -384(%rbp)
	callq	_SDL_GetRelativeMouseMode
	xorl	%ecx, %ecx
	testl	%eax, %eax
	setne	%cl
	movl	%ecx, -372(%rbp)
	cmpl	$0, -276(%rbp)                  ## 4-byte Folded Reload
	je	LBB153_27
## %bb.25:                              ##   in Loop: Header=BB153_10 Depth=1
	cmpl	$0, -312(%rbp)                  ## 4-byte Folded Reload
	jne	LBB153_27
## %bb.26:                              ##   in Loop: Header=BB153_10 Depth=1
	callq	_SDL_GetRelativeMouseMode
	xorl	%edi, %edi
	testl	%eax, %eax
	sete	%dil
	callq	_SDL_SetRelativeMouseMode
LBB153_27:                              ##   in Loop: Header=BB153_10 Depth=1
	movl	%r13d, -304(%rbp)               ## 4-byte Spill
	movq	16(%r12), %rdx
	movl	(%r12), %ecx
	shll	$2, %ecx
	movq	-320(%rbp), %rdi                ## 8-byte Reload
	xorl	%esi, %esi
	callq	_SDL_UpdateTexture
	movq	%r12, %rdi
	leaq	-360(%rbp), %rsi
	leaq	-4520(%rbp), %rdx
	callq	_game_update_and_render
	cmpl	$0, -4164(%rbp)
	je	LBB153_29
## %bb.28:                              ##   in Loop: Header=BB153_10 Depth=1
	movl	$1, 32(%r12)
	jmp	LBB153_29
LBB153_33:
	callq	_main.cold.1
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB153_36
## %bb.34:
	xorl	%eax, %eax
	jmp	LBB153_35
LBB153_36:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx
LCPI154_0:
	.long	0x7fffffff                      ## float NaN
LCPI154_1:
	.long	0x80000000                      ## float -0
LCPI154_2:
	.long	0x37800000                      ## float 1.52587891E-5
LCPI154_3:
	.long	0x00000000                      ## float 0
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx: ## @_ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$584, %rsp                      ## imm = 0x248
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r15
	movl	%esi, %edx
	movq	%rdi, %rcx
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	112(%rdi), %rax
	movq	%rax, -560(%rbp)
	movq	120(%rdi), %rax
	movq	%rax, -552(%rbp)
	movq	80(%rdi), %rdi
	movq	%rcx, -456(%rbp)                ## 8-byte Spill
	movq	88(%rcx), %rsi
	movq	%rdx, -536(%rbp)                ## 8-byte Spill
                                        ## kill: def $edx killed $edx killed $rdx
	callq	__ZL20stbtt__cff_index_get10stbtt__bufi
	movq	%rax, -432(%rbp)
	movq	%rdx, -424(%rbp)
	movq	%rdx, %rcx
	shrq	$32, %rcx
	xorl	%r13d, %r13d
	cmpl	%ecx, %edx
	jge	LBB154_229
## %bb.1:
	movq	-536(%rbp), %rsi                ## 8-byte Reload
	incl	%esi
	movq	%rsi, -544(%rbp)                ## 8-byte Spill
	movq	-456(%rbp), %rsi                ## 8-byte Reload
	leaq	96(%rsi), %rdi
	movq	%rdi, -576(%rbp)                ## 8-byte Spill
	addq	$104, %rsi
	movq	%rsi, -568(%rbp)                ## 8-byte Spill
	leaq	4(%r15), %r10
	xorl	%esi, %esi
	movq	%rsi, -464(%rbp)                ## 8-byte Spill
	movl	$1, -412(%rbp)                  ## 4-byte Folded Spill
	leaq	LJTI154_0(%rip), %r13
	vbroadcastss	LCPI154_1(%rip), %xmm0  ## xmm0 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	%xmm0, -608(%rbp)               ## 16-byte Spill
	vbroadcastss	LCPI154_0(%rip), %xmm0  ## xmm0 = [NaN,NaN,NaN,NaN]
	vmovaps	%xmm0, -624(%rbp)               ## 16-byte Spill
	vbroadcastss	LCPI154_1(%rip), %xmm0  ## xmm0 = [-0.0E+0,-0.0E+0,-0.0E+0,-0.0E+0]
	vmovaps	%xmm0, -592(%rbp)               ## 16-byte Spill
	xorl	%esi, %esi
	movq	%rsi, -448(%rbp)                ## 8-byte Spill
	xorl	%r14d, %r14d
	movl	$0, -416(%rbp)                  ## 4-byte Folded Spill
	movq	%r10, -408(%rbp)                ## 8-byte Spill
	.p2align	4, 0x90
LBB154_2:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB154_140 Depth 2
                                        ##     Child Loop BB154_14 Depth 2
                                        ##     Child Loop BB154_106 Depth 2
                                        ##     Child Loop BB154_86 Depth 2
                                        ##     Child Loop BB154_181 Depth 2
                                        ##     Child Loop BB154_61 Depth 2
                                        ##     Child Loop BB154_27 Depth 2
	movslq	%edx, %rsi
	leaq	1(%rsi), %rdi
	movl	%edi, -424(%rbp)
	movb	(%rax,%rsi), %r12b
	leal	-1(%r12), %ebx
	cmpb	$30, %bl
	ja	LBB154_15
## %bb.3:                               ##   in Loop: Header=BB154_2 Depth=1
	movzbl	%bl, %ebx
	movslq	(%r13,%rbx,4), %rbx
	addq	%r13, %rbx
	jmpq	*%rbx
LBB154_4:                               ##   in Loop: Header=BB154_2 Depth=1
	movl	%r14d, %eax
	shrl	$31, %eax
	addl	%r14d, %eax
	sarl	%eax
	movq	-464(%rbp), %rcx                ## 8-byte Reload
	addl	%eax, %ecx
	movq	%rcx, -464(%rbp)                ## 8-byte Spill
	xorl	%r14d, %r14d
	jmp	LBB154_226
LBB154_5:                               ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, -412(%rbp)                  ## 4-byte Folded Reload
	je	LBB154_133
## %bb.6:                               ##   in Loop: Header=BB154_2 Depth=1
	movl	%r14d, %eax
	shrl	$31, %eax
	addl	%r14d, %eax
	sarl	%eax
	movq	-464(%rbp), %rsi                ## 8-byte Reload
	addl	%eax, %esi
	jmp	LBB154_134
LBB154_7:                               ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$4, %r14d
	jl	LBB154_228
## %bb.8:                               ##   in Loop: Header=BB154_2 Depth=1
	movl	%r14d, %ebx
	andl	$1, %ebx
	leal	3(%rbx), %eax
	cmpl	%r14d, %eax
	jae	LBB154_132
## %bb.9:                               ##   in Loop: Header=BB154_2 Depth=1
	vxorps	%xmm1, %xmm1, %xmm1
	testl	%ebx, %ebx
	je	LBB154_11
## %bb.10:                              ##   in Loop: Header=BB154_2 Depth=1
	vmovss	-240(%rbp), %xmm1               ## xmm1 = mem[0],zero,zero,zero
LBB154_11:                              ##   in Loop: Header=BB154_2 Depth=1
	vmovss	-240(%rbp,%rbx,4), %xmm6        ## xmm6 = mem[0],zero,zero,zero
	vmovss	-236(%rbp,%rbx,4), %xmm2        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-232(%rbp,%rbx,4), %xmm3        ## xmm3 = mem[0],zero,zero,zero
	movl	%eax, %eax
	vmovss	-240(%rbp,%rax,4), %xmm7        ## xmm7 = mem[0],zero,zero,zero
	cmpb	$27, %r12b
	jne	LBB154_138
## %bb.12:                              ##   in Loop: Header=BB154_2 Depth=1
	vxorps	%xmm5, %xmm5, %xmm5
	movq	%r15, %rdi
	vmovaps	%xmm6, %xmm0
	vmovaps	%xmm7, %xmm4
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	leal	7(%rbx), %eax
	cmpl	%r14d, %eax
	jae	LBB154_62
## %bb.13:                              ##   in Loop: Header=BB154_2 Depth=1
	orq	$4, %rbx
	.p2align	4, 0x90
LBB154_14:                              ##   Parent Loop BB154_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovss	-240(%rbp,%rbx,4), %xmm0        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-236(%rbp,%rbx,4), %xmm2        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-232(%rbp,%rbx,4), %xmm3        ## xmm3 = mem[0],zero,zero,zero
	movl	%eax, %eax
	vmovss	-240(%rbp,%rax,4), %xmm4        ## xmm4 = mem[0],zero,zero,zero
	vxorps	%xmm1, %xmm1, %xmm1
	vxorps	%xmm5, %xmm5, %xmm5
	movq	%r15, %rdi
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	movl	%ebx, %eax
	addq	$4, %rbx
	addl	$7, %eax
	leal	3(%rbx), %ecx
	cmpl	%r14d, %ecx
	jl	LBB154_14
	jmp	LBB154_62
LBB154_15:                              ##   in Loop: Header=BB154_2 Depth=1
	xorl	%r13d, %r13d
	cmpb	$31, %r12b
	ja	LBB154_17
## %bb.16:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpb	$28, %r12b
	jne	LBB154_229
LBB154_17:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpb	$-1, %r12b
	je	LBB154_141
## %bb.18:                              ##   in Loop: Header=BB154_2 Depth=1
	testl	%edx, %edx
	js	LBB154_253
## %bb.19:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%edx, %ecx
	jl	LBB154_253
## %bb.20:                              ##   in Loop: Header=BB154_2 Depth=1
	movl	%edx, -424(%rbp)
	leaq	-432(%rbp), %rdi
	callq	__ZL14stbtt__cff_intP10stbtt__buf
	cwtl
	vcvtsi2ss	%eax, %xmm8, %xmm0
	movq	-408(%rbp), %r10                ## 8-byte Reload
	cmpl	$47, %r14d
	jle	LBB154_172
	jmp	LBB154_229
LBB154_21:                              ##   in Loop: Header=BB154_2 Depth=1
	testl	%r14d, %r14d
	jle	LBB154_228
## %bb.22:                              ##   in Loop: Header=BB154_2 Depth=1
	decl	%r14d
	vmovss	-240(%rbp,%r14,4), %xmm1        ## xmm1 = mem[0],zero,zero,zero
	vxorps	%xmm0, %xmm0, %xmm0
	jmp	LBB154_83
LBB154_23:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$2, %r14d
	jl	LBB154_228
## %bb.24:                              ##   in Loop: Header=BB154_2 Depth=1
	movl	%r14d, %r8d
	movl	$1, %ecx
	jmp	LBB154_27
	.p2align	4, 0x90
LBB154_25:                              ##   in Loop: Header=BB154_27 Depth=2
	movq	40(%r15), %rbx
	movslq	48(%r15), %rax
	movq	%rax, %rdi
	shlq	$4, %rdi
	subq	%rax, %rdi
	subq	%rax, %rdi
	movb	$2, 12(%rbx,%rdi)
	movw	%si, (%rbx,%rdi)
	movw	%dx, 2(%rbx,%rdi)
	movq	$0, 4(%rbx,%rdi)
LBB154_26:                              ##   in Loop: Header=BB154_27 Depth=2
	incl	%eax
	movl	%eax, 48(%r15)
	addq	$2, %rcx
	cmpq	%r8, %rcx
	jae	LBB154_132
LBB154_27:                              ##   Parent Loop BB154_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovss	-244(%rbp,%rcx,4), %xmm0        ## xmm0 = mem[0],zero,zero,zero
	vaddss	16(%r15), %xmm0, %xmm0
	vmovss	-240(%rbp,%rcx,4), %xmm1        ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm0, 16(%r15)
	vaddss	20(%r15), %xmm1, %xmm1
	vmovss	%xmm1, 20(%r15)
	vcvttss2si	%xmm0, %esi
	vcvttss2si	%xmm1, %edx
	cmpl	$0, (%r15)
	je	LBB154_25
## %bb.28:                              ##   in Loop: Header=BB154_27 Depth=2
	cmpl	%esi, 28(%r15)
	jl	LBB154_33
## %bb.29:                              ##   in Loop: Header=BB154_27 Depth=2
	cmpl	$0, (%r10)
	je	LBB154_33
## %bb.30:                              ##   in Loop: Header=BB154_27 Depth=2
	cmpl	%edx, 36(%r15)
	jge	LBB154_34
	jmp	LBB154_31
	.p2align	4, 0x90
LBB154_33:                              ##   in Loop: Header=BB154_27 Depth=2
	movl	%esi, 28(%r15)
	cmpl	%edx, 36(%r15)
	jl	LBB154_31
LBB154_34:                              ##   in Loop: Header=BB154_27 Depth=2
	cmpl	$0, (%r10)
	je	LBB154_31
## %bb.35:                              ##   in Loop: Header=BB154_27 Depth=2
	cmpl	%esi, 24(%r15)
	jg	LBB154_32
	jmp	LBB154_36
	.p2align	4, 0x90
LBB154_31:                              ##   in Loop: Header=BB154_27 Depth=2
	movl	%edx, 36(%r15)
	cmpl	%esi, 24(%r15)
	jg	LBB154_32
LBB154_36:                              ##   in Loop: Header=BB154_27 Depth=2
	cmpl	$0, (%r10)
	je	LBB154_32
## %bb.37:                              ##   in Loop: Header=BB154_27 Depth=2
	cmpl	%edx, 32(%r15)
	jg	LBB154_39
	jmp	LBB154_38
	.p2align	4, 0x90
LBB154_32:                              ##   in Loop: Header=BB154_27 Depth=2
	movl	%esi, 24(%r15)
	cmpl	%edx, 32(%r15)
	jg	LBB154_39
LBB154_38:                              ##   in Loop: Header=BB154_27 Depth=2
	cmpl	$0, (%r10)
	jne	LBB154_40
LBB154_39:                              ##   in Loop: Header=BB154_27 Depth=2
	movl	%edx, 32(%r15)
LBB154_40:                              ##   in Loop: Header=BB154_27 Depth=2
	movl	$1, 4(%r15)
	movl	48(%r15), %eax
	jmp	LBB154_26
LBB154_132:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%r14d, %r14d
	jmp	LBB154_226
LBB154_41:                              ##   in Loop: Header=BB154_2 Depth=1
	xorl	%r13d, %r13d
	testl	%r14d, %r14d
	jle	LBB154_229
## %bb.42:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%r14d, %r13d
	jge	LBB154_224
	jmp	LBB154_43
LBB154_57:                              ##   in Loop: Header=BB154_2 Depth=1
	xorl	%r13d, %r13d
	testl	%r14d, %r14d
	jle	LBB154_229
## %bb.58:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%r14d, %r13d
	jl	LBB154_208
	jmp	LBB154_224
LBB154_59:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$6, %r14d
	jl	LBB154_228
## %bb.60:                              ##   in Loop: Header=BB154_2 Depth=1
	movl	$5, %ebx
	.p2align	4, 0x90
LBB154_61:                              ##   Parent Loop BB154_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovss	-260(%rbp,%rbx,4), %xmm0        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-256(%rbp,%rbx,4), %xmm1        ## xmm1 = mem[0],zero,zero,zero
	vmovss	-252(%rbp,%rbx,4), %xmm2        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-248(%rbp,%rbx,4), %xmm3        ## xmm3 = mem[0],zero,zero,zero
	vmovss	-244(%rbp,%rbx,4), %xmm4        ## xmm4 = mem[0],zero,zero,zero
	vmovss	-240(%rbp,%rbx,4), %xmm5        ## xmm5 = mem[0],zero,zero,zero
	movq	%r15, %rdi
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	addq	$6, %rbx
	cmpl	%r14d, %ebx
	jl	LBB154_61
LBB154_62:                              ##   in Loop: Header=BB154_2 Depth=1
	xorl	%r14d, %r14d
	movq	-408(%rbp), %r10                ## 8-byte Reload
	jmp	LBB154_226
LBB154_63:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, -416(%rbp)                  ## 4-byte Folded Reload
	jne	LBB154_191
## %bb.64:                              ##   in Loop: Header=BB154_2 Depth=1
	movq	-456(%rbp), %rax                ## 8-byte Reload
	movl	156(%rax), %r9d
	testl	%r9d, %r9d
	je	LBB154_191
## %bb.65:                              ##   in Loop: Header=BB154_2 Depth=1
	js	LBB154_254
## %bb.66:                              ##   in Loop: Header=BB154_2 Depth=1
	movq	-456(%rbp), %rax                ## 8-byte Reload
	movq	144(%rax), %r8
	movb	(%r8), %al
	cmpb	$3, %al
	movq	-536(%rbp), %rbx                ## 8-byte Reload
	je	LBB154_156
## %bb.67:                              ##   in Loop: Header=BB154_2 Depth=1
	testb	%al, %al
	jne	LBB154_159
## %bb.68:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$-1, %ebx
	jl	LBB154_255
## %bb.69:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%ebx, %r9d
	jle	LBB154_255
## %bb.70:                              ##   in Loop: Header=BB154_2 Depth=1
	xorl	%edx, %edx
	cmpl	%r9d, -544(%rbp)                ## 4-byte Folded Reload
	jae	LBB154_190
## %bb.71:                              ##   in Loop: Header=BB154_2 Depth=1
	movq	-544(%rbp), %rax                ## 8-byte Reload
	movzbl	(%r8,%rax), %edx
	jmp	LBB154_190
LBB154_72:                              ##   in Loop: Header=BB154_2 Depth=1
	movq	-448(%rbp), %rax                ## 8-byte Reload
	testl	%eax, %eax
	jle	LBB154_228
## %bb.73:                              ##   in Loop: Header=BB154_2 Depth=1
	decl	%eax
	movq	%rax, -448(%rbp)                ## 8-byte Spill
	shlq	$4, %rax
	vmovups	-400(%rbp,%rax), %xmm0
	vmovaps	%xmm0, -432(%rbp)
	jmp	LBB154_226
LBB154_74:                              ##   in Loop: Header=BB154_2 Depth=1
	xorl	%r13d, %r13d
	cmpl	%ecx, %edi
	jge	LBB154_229
## %bb.75:                              ##   in Loop: Header=BB154_2 Depth=1
	addl	$2, %edx
	movl	%edx, -424(%rbp)
	movb	(%rax,%rdi), %al
	addb	$-34, %al
	cmpb	$3, %al
	ja	LBB154_229
## %bb.76:                              ##   in Loop: Header=BB154_2 Depth=1
	movzbl	%al, %eax
	leaq	LJTI154_1(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
LBB154_77:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$7, %r14d
	jl	LBB154_229
## %bb.78:                              ##   in Loop: Header=BB154_2 Depth=1
	vmovss	-240(%rbp), %xmm0               ## xmm0 = mem[0],zero,zero,zero
	vmovss	-236(%rbp), %xmm2               ## xmm2 = mem[0],zero,zero,zero
	vmovss	-232(%rbp), %xmm3               ## xmm3 = mem[0],zero,zero,zero
	vmovaps	%xmm3, -480(%rbp)               ## 16-byte Spill
	vmovss	-228(%rbp), %xmm4               ## xmm4 = mem[0],zero,zero,zero
	vmovss	-224(%rbp), %xmm1               ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, -528(%rbp)               ## 4-byte Spill
	vmovss	-220(%rbp), %xmm1               ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, -512(%rbp)               ## 4-byte Spill
	vmovss	-216(%rbp), %xmm1               ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, -496(%rbp)               ## 4-byte Spill
	vxorps	%xmm1, %xmm1, %xmm1
	vxorps	%xmm5, %xmm5, %xmm5
	movq	%r15, %rdi
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	vmovaps	-480(%rbp), %xmm0               ## 16-byte Reload
	vxorps	-608(%rbp), %xmm0, %xmm3        ## 16-byte Folded Reload
	vxorps	%xmm1, %xmm1, %xmm1
	vxorps	%xmm5, %xmm5, %xmm5
	jmp	LBB154_150
LBB154_79:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$2, %r14d
	jl	LBB154_228
## %bb.80:                              ##   in Loop: Header=BB154_2 Depth=1
	leal	-2(%r14), %eax
	vmovss	-240(%rbp,%rax,4), %xmm0        ## xmm0 = mem[0],zero,zero,zero
	decl	%r14d
	vmovss	-240(%rbp,%r14,4), %xmm1        ## xmm1 = mem[0],zero,zero,zero
	jmp	LBB154_83
LBB154_81:                              ##   in Loop: Header=BB154_2 Depth=1
	testl	%r14d, %r14d
	jle	LBB154_228
## %bb.82:                              ##   in Loop: Header=BB154_2 Depth=1
	decl	%r14d
	vmovss	-240(%rbp,%r14,4), %xmm0        ## xmm0 = mem[0],zero,zero,zero
	vxorps	%xmm1, %xmm1, %xmm1
LBB154_83:                              ##   in Loop: Header=BB154_2 Depth=1
	movq	%r15, %rdi
	callq	__ZL21stbtt__csctx_rmove_toP12stbtt__csctxff
	movq	-408(%rbp), %r10                ## 8-byte Reload
	jmp	LBB154_137
LBB154_84:                              ##   in Loop: Header=BB154_2 Depth=1
	xorl	%r13d, %r13d
	cmpl	$8, %r14d
	jl	LBB154_229
## %bb.85:                              ##   in Loop: Header=BB154_2 Depth=1
	leal	-2(%r14), %r12d
	xorl	%ebx, %ebx
	.p2align	4, 0x90
LBB154_86:                              ##   Parent Loop BB154_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovss	-240(%rbp,%rbx,4), %xmm0        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-236(%rbp,%rbx,4), %xmm1        ## xmm1 = mem[0],zero,zero,zero
	vmovss	-232(%rbp,%rbx,4), %xmm2        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-228(%rbp,%rbx,4), %xmm3        ## xmm3 = mem[0],zero,zero,zero
	vmovss	-224(%rbp,%rbx,4), %xmm4        ## xmm4 = mem[0],zero,zero,zero
	vmovss	-220(%rbp,%rbx,4), %xmm5        ## xmm5 = mem[0],zero,zero,zero
	movq	%r15, %rdi
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	addq	$6, %rbx
	leal	5(%rbx), %eax
	cmpl	%r12d, %eax
	jl	LBB154_86
## %bb.87:                              ##   in Loop: Header=BB154_2 Depth=1
	leaq	1(%rbx), %rax
	cmpl	%r14d, %eax
	movq	-408(%rbp), %r10                ## 8-byte Reload
	jge	LBB154_229
## %bb.88:                              ##   in Loop: Header=BB154_2 Depth=1
	andl	$-2, %ebx
	vmovss	-240(%rbp,%rbx,4), %xmm0        ## xmm0 = mem[0],zero,zero,zero
	movl	%eax, %eax
	vaddss	16(%r15), %xmm0, %xmm0
	vmovss	-240(%rbp,%rax,4), %xmm1        ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm0, 16(%r15)
	vaddss	20(%r15), %xmm1, %xmm1
	vmovss	%xmm1, 20(%r15)
	vcvttss2si	%xmm0, %ecx
	vcvttss2si	%xmm1, %eax
	cmpl	$0, (%r15)
	je	LBB154_144
## %bb.89:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%ecx, 28(%r15)
	leaq	LJTI154_0(%rip), %r13
	jl	LBB154_91
## %bb.90:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, (%r10)
	jne	LBB154_92
LBB154_91:                              ##   in Loop: Header=BB154_2 Depth=1
	movl	%ecx, 28(%r15)
LBB154_92:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%eax, 36(%r15)
	jl	LBB154_94
## %bb.93:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, (%r10)
	jne	LBB154_95
LBB154_94:                              ##   in Loop: Header=BB154_2 Depth=1
	movl	%eax, 36(%r15)
LBB154_95:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%ecx, 24(%r15)
	jg	LBB154_97
## %bb.96:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, (%r10)
	jne	LBB154_98
LBB154_97:                              ##   in Loop: Header=BB154_2 Depth=1
	movl	%ecx, 24(%r15)
LBB154_98:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%eax, 32(%r15)
	jg	LBB154_100
## %bb.99:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, (%r10)
	jne	LBB154_101
LBB154_100:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	%eax, 32(%r15)
LBB154_101:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	$1, 4(%r15)
	movl	48(%r15), %edx
	jmp	LBB154_145
LBB154_102:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%r13d, %r13d
	cmpl	$8, %r14d
	jl	LBB154_229
## %bb.103:                             ##   in Loop: Header=BB154_2 Depth=1
	leal	-6(%r14), %r8d
	movl	$2, %ecx
	jmp	LBB154_106
	.p2align	4, 0x90
LBB154_104:                             ##   in Loop: Header=BB154_106 Depth=2
	movq	40(%r15), %rbx
	movslq	48(%r15), %rax
	movq	%rax, %rdi
	shlq	$4, %rdi
	subq	%rax, %rdi
	subq	%rax, %rdi
	movb	$2, 12(%rbx,%rdi)
	movw	%si, (%rbx,%rdi)
	movw	%dx, 2(%rbx,%rdi)
	movq	$0, 4(%rbx,%rdi)
LBB154_105:                             ##   in Loop: Header=BB154_106 Depth=2
	incl	%eax
	movl	%eax, 48(%r15)
	leaq	2(%rcx), %rdx
	incq	%rcx
	cmpq	%r8, %rcx
	movq	%rdx, %rcx
	jae	LBB154_130
LBB154_106:                             ##   Parent Loop BB154_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovss	-248(%rbp,%rcx,4), %xmm0        ## xmm0 = mem[0],zero,zero,zero
	vaddss	16(%r15), %xmm0, %xmm0
	vmovss	-244(%rbp,%rcx,4), %xmm1        ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm0, 16(%r15)
	vaddss	20(%r15), %xmm1, %xmm1
	vmovss	%xmm1, 20(%r15)
	vcvttss2si	%xmm0, %esi
	vcvttss2si	%xmm1, %edx
	cmpl	$0, (%r15)
	je	LBB154_104
## %bb.107:                             ##   in Loop: Header=BB154_106 Depth=2
	cmpl	%esi, 28(%r15)
	jl	LBB154_112
## %bb.108:                             ##   in Loop: Header=BB154_106 Depth=2
	cmpl	$0, (%r10)
	je	LBB154_112
## %bb.109:                             ##   in Loop: Header=BB154_106 Depth=2
	cmpl	%edx, 36(%r15)
	jge	LBB154_113
	jmp	LBB154_110
	.p2align	4, 0x90
LBB154_112:                             ##   in Loop: Header=BB154_106 Depth=2
	movl	%esi, 28(%r15)
	cmpl	%edx, 36(%r15)
	jl	LBB154_110
LBB154_113:                             ##   in Loop: Header=BB154_106 Depth=2
	cmpl	$0, (%r10)
	je	LBB154_110
## %bb.114:                             ##   in Loop: Header=BB154_106 Depth=2
	cmpl	%esi, 24(%r15)
	jg	LBB154_111
	jmp	LBB154_115
	.p2align	4, 0x90
LBB154_110:                             ##   in Loop: Header=BB154_106 Depth=2
	movl	%edx, 36(%r15)
	cmpl	%esi, 24(%r15)
	jg	LBB154_111
LBB154_115:                             ##   in Loop: Header=BB154_106 Depth=2
	cmpl	$0, (%r10)
	je	LBB154_111
## %bb.116:                             ##   in Loop: Header=BB154_106 Depth=2
	cmpl	%edx, 32(%r15)
	jg	LBB154_118
	jmp	LBB154_117
	.p2align	4, 0x90
LBB154_111:                             ##   in Loop: Header=BB154_106 Depth=2
	movl	%esi, 24(%r15)
	cmpl	%edx, 32(%r15)
	jg	LBB154_118
LBB154_117:                             ##   in Loop: Header=BB154_106 Depth=2
	cmpl	$0, (%r10)
	jne	LBB154_119
LBB154_118:                             ##   in Loop: Header=BB154_106 Depth=2
	movl	%edx, 32(%r15)
LBB154_119:                             ##   in Loop: Header=BB154_106 Depth=2
	movl	$1, 4(%r15)
	movl	48(%r15), %eax
	jmp	LBB154_105
LBB154_120:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%ebx, %ebx
	movl	$0, %r13d
	cmpl	$4, %r14d
	jl	LBB154_229
## %bb.121:                             ##   in Loop: Header=BB154_2 Depth=1
	leal	3(%rbx), %eax
	cmpl	%r14d, %eax
	jge	LBB154_224
	jmp	LBB154_122
LBB154_125:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%ebx, %ebx
	movl	$0, %r13d
	cmpl	$4, %r14d
	jl	LBB154_229
## %bb.126:                             ##   in Loop: Header=BB154_2 Depth=1
	leal	3(%rbx), %eax
	cmpl	%r14d, %eax
	jge	LBB154_224
	jmp	LBB154_127
LBB154_130:                             ##   in Loop: Header=BB154_2 Depth=1
	leaq	3(%rdx), %rax
	cmpl	%r14d, %eax
	jge	LBB154_229
## %bb.131:                             ##   in Loop: Header=BB154_2 Depth=1
	vmovss	-248(%rbp,%rdx,4), %xmm0        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-244(%rbp,%rdx,4), %xmm1        ## xmm1 = mem[0],zero,zero,zero
	movl	%edx, %ecx
	andl	$-2, %ecx
	vmovss	-240(%rbp,%rcx,4), %xmm2        ## xmm2 = mem[0],zero,zero,zero
	leal	1(%rdx), %ecx
	vmovss	-240(%rbp,%rcx,4), %xmm3        ## xmm3 = mem[0],zero,zero,zero
	addl	$2, %edx
	andl	$-2, %edx
	vmovss	-240(%rbp,%rdx,4), %xmm4        ## xmm4 = mem[0],zero,zero,zero
	movl	%eax, %eax
	vmovss	-240(%rbp,%rax,4), %xmm5        ## xmm5 = mem[0],zero,zero,zero
	movq	%r15, %rdi
	jmp	LBB154_151
LBB154_133:                             ##   in Loop: Header=BB154_2 Depth=1
	movq	-464(%rbp), %rsi                ## 8-byte Reload
LBB154_134:                             ##   in Loop: Header=BB154_2 Depth=1
	leal	7(%rsi), %edx
	leal	14(%rsi), %eax
	testl	%edx, %edx
	cmovnsl	%edx, %eax
	sarl	$3, %eax
	addl	%edi, %eax
	js	LBB154_251
## %bb.135:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%eax, %ecx
	jl	LBB154_251
## %bb.136:                             ##   in Loop: Header=BB154_2 Depth=1
	movq	%rsi, -464(%rbp)                ## 8-byte Spill
	movl	%eax, -424(%rbp)
LBB154_137:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	$0, -412(%rbp)                  ## 4-byte Folded Spill
	xorl	%r14d, %r14d
	jmp	LBB154_226
LBB154_138:                             ##   in Loop: Header=BB154_2 Depth=1
	vxorps	%xmm4, %xmm4, %xmm4
	movq	%r15, %rdi
	vmovaps	%xmm1, %xmm0
	vmovaps	%xmm6, %xmm1
	vmovaps	%xmm7, %xmm5
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	leal	7(%rbx), %eax
	cmpl	%r14d, %eax
	jae	LBB154_62
## %bb.139:                             ##   in Loop: Header=BB154_2 Depth=1
	orq	$4, %rbx
	.p2align	4, 0x90
LBB154_140:                             ##   Parent Loop BB154_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovss	-240(%rbp,%rbx,4), %xmm1        ## xmm1 = mem[0],zero,zero,zero
	vmovss	-236(%rbp,%rbx,4), %xmm2        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-232(%rbp,%rbx,4), %xmm3        ## xmm3 = mem[0],zero,zero,zero
	movl	%eax, %eax
	vmovss	-240(%rbp,%rax,4), %xmm5        ## xmm5 = mem[0],zero,zero,zero
	vxorps	%xmm0, %xmm0, %xmm0
	vxorps	%xmm4, %xmm4, %xmm4
	movq	%r15, %rdi
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	movl	%ebx, %eax
	addq	$4, %rbx
	addl	$7, %eax
	leal	3(%rbx), %ecx
	cmpl	%r14d, %ecx
	jl	LBB154_140
	jmp	LBB154_62
LBB154_141:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%ebx, %ebx
	cmpl	%ecx, %edi
	jge	LBB154_171
## %bb.142:                             ##   in Loop: Header=BB154_2 Depth=1
	addq	$2, %rsi
	cmpl	%ecx, %esi
	jge	LBB154_163
## %bb.143:                             ##   in Loop: Header=BB154_2 Depth=1
	addl	$3, %edx
	movb	(%rax,%rsi), %bl
	movl	%edx, %esi
	jmp	LBB154_164
LBB154_144:                             ##   in Loop: Header=BB154_2 Depth=1
	movq	40(%r15), %rsi
	movslq	48(%r15), %rdx
	movq	%rdx, %rdi
	shlq	$4, %rdi
	subq	%rdx, %rdi
	subq	%rdx, %rdi
	movb	$2, 12(%rsi,%rdi)
	movw	%cx, (%rsi,%rdi)
	movw	%ax, 2(%rsi,%rdi)
	movq	$0, 4(%rsi,%rdi)
	leaq	LJTI154_0(%rip), %r13
LBB154_145:                             ##   in Loop: Header=BB154_2 Depth=1
	incl	%edx
	movl	%edx, 48(%r15)
	xorl	%r14d, %r14d
	jmp	LBB154_226
LBB154_146:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$13, %r14d
	jl	LBB154_229
## %bb.147:                             ##   in Loop: Header=BB154_2 Depth=1
	vmovss	-240(%rbp), %xmm0               ## xmm0 = mem[0],zero,zero,zero
	vmovss	-236(%rbp), %xmm1               ## xmm1 = mem[0],zero,zero,zero
	vmovss	-232(%rbp), %xmm2               ## xmm2 = mem[0],zero,zero,zero
	vmovss	-228(%rbp), %xmm3               ## xmm3 = mem[0],zero,zero,zero
	vmovss	-224(%rbp), %xmm4               ## xmm4 = mem[0],zero,zero,zero
	vmovss	-220(%rbp), %xmm5               ## xmm5 = mem[0],zero,zero,zero
	vmovss	-216(%rbp), %xmm6               ## xmm6 = mem[0],zero,zero,zero
	vmovss	%xmm6, -528(%rbp)               ## 4-byte Spill
	vmovss	-212(%rbp), %xmm6               ## xmm6 = mem[0],zero,zero,zero
	vmovss	%xmm6, -512(%rbp)               ## 4-byte Spill
	vmovss	-208(%rbp), %xmm6               ## xmm6 = mem[0],zero,zero,zero
	vmovss	%xmm6, -496(%rbp)               ## 4-byte Spill
	vmovss	-204(%rbp), %xmm6               ## xmm6 = mem[0],zero,zero,zero
	vmovss	%xmm6, -480(%rbp)               ## 4-byte Spill
	vmovss	-200(%rbp), %xmm6               ## xmm6 = mem[0],zero,zero,zero
	vmovss	%xmm6, -440(%rbp)               ## 4-byte Spill
	vmovss	-196(%rbp), %xmm6               ## xmm6 = mem[0],zero,zero,zero
	vmovss	%xmm6, -436(%rbp)               ## 4-byte Spill
	movq	%r15, %rdi
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	movq	%r15, %rdi
	vmovss	-528(%rbp), %xmm0               ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-512(%rbp), %xmm1               ## 4-byte Reload
                                        ## xmm1 = mem[0],zero,zero,zero
	vmovss	-496(%rbp), %xmm2               ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-480(%rbp), %xmm3               ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vmovss	-440(%rbp), %xmm4               ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
	vmovss	-436(%rbp), %xmm5               ## 4-byte Reload
                                        ## xmm5 = mem[0],zero,zero,zero
	jmp	LBB154_151
LBB154_148:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$9, %r14d
	jl	LBB154_229
## %bb.149:                             ##   in Loop: Header=BB154_2 Depth=1
	vmovss	-240(%rbp), %xmm0               ## xmm0 = mem[0],zero,zero,zero
	vmovss	-236(%rbp), %xmm6               ## xmm6 = mem[0],zero,zero,zero
	vmovss	%xmm6, -440(%rbp)               ## 4-byte Spill
	vmovss	-232(%rbp), %xmm2               ## xmm2 = mem[0],zero,zero,zero
	vmovss	-228(%rbp), %xmm3               ## xmm3 = mem[0],zero,zero,zero
	vmovss	%xmm3, -436(%rbp)               ## 4-byte Spill
	vmovss	-224(%rbp), %xmm4               ## xmm4 = mem[0],zero,zero,zero
	vmovss	-220(%rbp), %xmm1               ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, -528(%rbp)               ## 4-byte Spill
	vmovss	-216(%rbp), %xmm1               ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, -512(%rbp)               ## 4-byte Spill
	vmovss	-212(%rbp), %xmm1               ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, -480(%rbp)               ## 4-byte Spill
	vmovss	-208(%rbp), %xmm1               ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm1, -496(%rbp)               ## 4-byte Spill
	vxorps	%xmm5, %xmm5, %xmm5
	movq	%r15, %rdi
	vmovaps	%xmm6, %xmm1
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	vmovss	-436(%rbp), %xmm0               ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vaddss	-440(%rbp), %xmm0, %xmm0        ## 4-byte Folded Reload
	vmovss	-480(%rbp), %xmm3               ## 4-byte Reload
                                        ## xmm3 = mem[0],zero,zero,zero
	vaddss	%xmm3, %xmm0, %xmm0
	vxorps	-608(%rbp), %xmm0, %xmm5        ## 16-byte Folded Reload
	vxorps	%xmm1, %xmm1, %xmm1
LBB154_150:                             ##   in Loop: Header=BB154_2 Depth=1
	movq	%r15, %rdi
	vmovss	-528(%rbp), %xmm0               ## 4-byte Reload
                                        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-512(%rbp), %xmm2               ## 4-byte Reload
                                        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-496(%rbp), %xmm4               ## 4-byte Reload
                                        ## xmm4 = mem[0],zero,zero,zero
LBB154_151:                             ##   in Loop: Header=BB154_2 Depth=1
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	movq	-408(%rbp), %r10                ## 8-byte Reload
	jmp	LBB154_224
LBB154_152:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$11, %r14d
	jl	LBB154_229
## %bb.153:                             ##   in Loop: Header=BB154_2 Depth=1
	vmovss	-200(%rbp), %xmm1               ## xmm1 = mem[0],zero,zero,zero
	vmovsd	-240(%rbp), %xmm0               ## xmm0 = mem[0],zero
	vmovsd	-232(%rbp), %xmm2               ## xmm2 = mem[0],zero
	vmovsd	-224(%rbp), %xmm4               ## xmm4 = mem[0],zero
	vmovsd	-216(%rbp), %xmm6               ## xmm6 = mem[0],zero
	vmovsd	-208(%rbp), %xmm5               ## xmm5 = mem[0],zero
	vaddps	%xmm2, %xmm0, %xmm3
	vaddps	%xmm4, %xmm3, %xmm3
	vmovaps	%xmm6, -512(%rbp)               ## 16-byte Spill
	vaddps	%xmm6, %xmm3, %xmm3
	vmovaps	%xmm5, -528(%rbp)               ## 16-byte Spill
	vaddps	%xmm5, %xmm3, %xmm5
	vandps	-624(%rbp), %xmm5, %xmm3        ## 16-byte Folded Reload
	vpermilps	$245, %xmm3, %xmm6      ## xmm6 = xmm3[1,1,3,3]
	vucomiss	%xmm6, %xmm3
	vmovaps	%xmm1, %xmm7
	ja	LBB154_155
## %bb.154:                             ##   in Loop: Header=BB154_2 Depth=1
	vxorps	-592(%rbp), %xmm5, %xmm7        ## 16-byte Folded Reload
LBB154_155:                             ##   in Loop: Header=BB154_2 Depth=1
	vmovaps	%xmm7, -480(%rbp)               ## 16-byte Spill
	vmovshdup	%xmm5, %xmm5            ## xmm5 = xmm5[1,1,3,3]
	vxorps	-592(%rbp), %xmm5, %xmm5        ## 16-byte Folded Reload
	vcmpltss	%xmm3, %xmm6, %xmm3
	vblendvps	%xmm3, %xmm5, %xmm1, %xmm1
	vmovaps	%xmm1, -496(%rbp)               ## 16-byte Spill
	vmovshdup	%xmm0, %xmm1            ## xmm1 = xmm0[1,1,3,3]
	vmovshdup	%xmm2, %xmm3            ## xmm3 = xmm2[1,1,3,3]
	vmovshdup	%xmm4, %xmm5            ## xmm5 = xmm4[1,1,3,3]
	movq	%r15, %rdi
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	vmovaps	-512(%rbp), %xmm0               ## 16-byte Reload
	vmovshdup	%xmm0, %xmm1            ## xmm1 = xmm0[1,1,3,3]
	vmovaps	-528(%rbp), %xmm2               ## 16-byte Reload
	vmovshdup	%xmm2, %xmm3            ## xmm3 = xmm2[1,1,3,3]
	movq	%r15, %rdi
	vmovaps	-480(%rbp), %xmm4               ## 16-byte Reload
	vmovaps	-496(%rbp), %xmm5               ## 16-byte Reload
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	xorl	%r14d, %r14d
	movq	-408(%rbp), %r10                ## 8-byte Reload
	jmp	LBB154_225
LBB154_156:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%edi, %edi
	movl	$1, %ecx
	movl	$0, %esi
	cmpl	$2, %r9d
	jb	LBB154_157
## %bb.173:                             ##   in Loop: Header=BB154_2 Depth=1
	movzbl	1(%r8), %eax
	shll	$8, %eax
	cmpl	$2, %r9d
	jne	LBB154_175
## %bb.174:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%esi, %esi
	movl	$2, %ecx
	jmp	LBB154_176
LBB154_157:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%r9d, %ecx
	jae	LBB154_158
LBB154_177:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	%ecx, %eax
	movzbl	(%r8,%rax), %edx
	incq	%rax
	shll	$8, %edx
	xorl	%edi, %edi
	cmpl	%r9d, %eax
	jae	LBB154_179
## %bb.178:                             ##   in Loop: Header=BB154_2 Depth=1
	addl	$2, %ecx
	movzbl	(%r8,%rax), %edi
	movl	%ecx, %eax
LBB154_179:                             ##   in Loop: Header=BB154_2 Depth=1
	orl	%edx, %edi
	movl	%eax, %ecx
	testl	%esi, %esi
	jg	LBB154_181
	jmp	LBB154_159
LBB154_163:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%ebx, %ebx
LBB154_164:                             ##   in Loop: Header=BB154_2 Depth=1
	movzbl	(%rax,%rdi), %edx
	movzbl	%bl, %ebx
	shll	$16, %edx
	shll	$8, %ebx
	orl	%edx, %ebx
	cmpl	%ecx, %esi
	jge	LBB154_166
## %bb.165:                             ##   in Loop: Header=BB154_2 Depth=1
	movslq	%esi, %rdx
	incl	%esi
	movb	(%rax,%rdx), %dl
	jmp	LBB154_167
LBB154_166:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%edx, %edx
LBB154_167:                             ##   in Loop: Header=BB154_2 Depth=1
	movzbl	%dl, %edx
	orl	%edx, %ebx
	shll	$8, %ebx
	cmpl	%ecx, %esi
	jge	LBB154_169
## %bb.168:                             ##   in Loop: Header=BB154_2 Depth=1
	movslq	%esi, %rcx
	incl	%esi
	movb	(%rax,%rcx), %al
	jmp	LBB154_170
LBB154_169:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%eax, %eax
LBB154_170:                             ##   in Loop: Header=BB154_2 Depth=1
	movzbl	%al, %eax
	orl	%eax, %ebx
	movl	%esi, -424(%rbp)
LBB154_171:                             ##   in Loop: Header=BB154_2 Depth=1
	vcvtsi2ss	%ebx, %xmm8, %xmm0
	vmulss	LCPI154_2(%rip), %xmm0, %xmm0
	cmpl	$47, %r14d
	jg	LBB154_229
LBB154_172:                             ##   in Loop: Header=BB154_2 Depth=1
	movslq	%r14d, %rax
	incl	%r14d
	vmovss	%xmm0, -240(%rbp,%rax,4)
	jmp	LBB154_225
LBB154_175:                             ##   in Loop: Header=BB154_2 Depth=1
	movzbl	2(%r8), %esi
	movl	$3, %ecx
LBB154_176:                             ##   in Loop: Header=BB154_2 Depth=1
	orl	%eax, %esi
	cmpl	%r9d, %ecx
	jb	LBB154_177
LBB154_158:                             ##   in Loop: Header=BB154_2 Depth=1
	testl	%esi, %esi
	jg	LBB154_181
	jmp	LBB154_159
	.p2align	4, 0x90
LBB154_180:                             ##   in Loop: Header=BB154_181 Depth=2
	decl	%esi
	je	LBB154_159
LBB154_181:                             ##   Parent Loop BB154_2 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%edi, %r10d
	xorl	%edi, %edi
	cmpl	%r9d, %ecx
	jge	LBB154_183
## %bb.182:                             ##   in Loop: Header=BB154_181 Depth=2
	movslq	%ecx, %rax
	incl	%ecx
	movzbl	(%r8,%rax), %edx
	cmpl	%r9d, %ecx
	jl	LBB154_184
	jmp	LBB154_188
	.p2align	4, 0x90
LBB154_183:                             ##   in Loop: Header=BB154_181 Depth=2
	xorl	%edx, %edx
	cmpl	%r9d, %ecx
	jge	LBB154_188
LBB154_184:                             ##   in Loop: Header=BB154_181 Depth=2
	movslq	%ecx, %rax
	movzbl	(%r8,%rax), %edi
	incq	%rax
	shll	$8, %edi
	cmpl	%r9d, %eax
	jge	LBB154_186
## %bb.185:                             ##   in Loop: Header=BB154_181 Depth=2
	addl	$2, %ecx
	movzbl	(%r8,%rax), %ebx
	movl	%ecx, %eax
	jmp	LBB154_187
	.p2align	4, 0x90
LBB154_186:                             ##   in Loop: Header=BB154_181 Depth=2
	xorl	%ebx, %ebx
LBB154_187:                             ##   in Loop: Header=BB154_181 Depth=2
	movzbl	%bl, %ecx
	orl	%ecx, %edi
	movl	%eax, %ecx
	movq	-536(%rbp), %rbx                ## 8-byte Reload
LBB154_188:                             ##   in Loop: Header=BB154_181 Depth=2
	cmpl	%ebx, %r10d
	jg	LBB154_180
## %bb.189:                             ##   in Loop: Header=BB154_181 Depth=2
	cmpl	%ebx, %edi
	jle	LBB154_180
LBB154_190:                             ##   in Loop: Header=BB154_2 Depth=1
	movq	-456(%rbp), %rax                ## 8-byte Reload
	movq	64(%rax), %r13
	movq	72(%rax), %rbx
	movq	128(%rax), %rdi
	movq	136(%rax), %rsi
	callq	__ZL20stbtt__cff_index_get10stbtt__bufi
	movq	%rdx, %rcx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	movq	%rax, %rdx
	callq	__ZL16stbtt__get_subrs10stbtt__bufS_
	movq	-408(%rbp), %r10                ## 8-byte Reload
	movq	%rax, -560(%rbp)
	movq	%rdx, -552(%rbp)
LBB154_191:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	$1, -416(%rbp)                  ## 4-byte Folded Spill
LBB154_192:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%r13d, %r13d
	testl	%r14d, %r14d
	jle	LBB154_229
## %bb.193:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$9, -448(%rbp)                  ## 4-byte Folded Reload
	jg	LBB154_229
## %bb.194:                             ##   in Loop: Header=BB154_2 Depth=1
	decl	%r14d
	movl	%r14d, %eax
	vcvttss2si	-240(%rbp,%rax,4), %eax
	movslq	-448(%rbp), %rcx                ## 4-byte Folded Reload
	shlq	$4, %rcx
	vmovaps	-432(%rbp), %xmm0
	vmovups	%xmm0, -400(%rbp,%rcx)
	cmpb	$10, %r12b
	movq	-576(%rbp), %rcx                ## 8-byte Reload
	leaq	-560(%rbp), %rdx
	cmoveq	%rdx, %rcx
	movq	-568(%rbp), %rdx                ## 8-byte Reload
	leaq	-552(%rbp), %rsi
	cmoveq	%rsi, %rdx
	movq	(%rdx), %rbx
	testq	%rbx, %rbx
	js	LBB154_252
## %bb.195:                             ##   in Loop: Header=BB154_2 Depth=1
	movq	(%rcx), %rdi
	movq	%rbx, %rdx
	shrq	$32, %rdx
	testl	%edx, %edx
	je	LBB154_198
## %bb.196:                             ##   in Loop: Header=BB154_2 Depth=1
	movzbl	(%rdi), %ecx
	shll	$8, %ecx
	cmpl	$1, %edx
	leaq	LJTI154_0(%rip), %r13
	jne	LBB154_200
## %bb.197:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%r8d, %r8d
	movl	$1, %esi
	jmp	LBB154_201
LBB154_198:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	$107, %edx
	xorl	%esi, %esi
	xorl	%r8d, %r8d
	leaq	LJTI154_0(%rip), %r13
	addl	%eax, %edx
	jns	LBB154_202
LBB154_199:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	jmp	LBB154_204
LBB154_200:                             ##   in Loop: Header=BB154_2 Depth=1
	movzbl	1(%rdi), %r8d
	movl	$2, %esi
LBB154_201:                             ##   in Loop: Header=BB154_2 Depth=1
	orl	%ecx, %r8d
	xorl	%edx, %edx
	cmpl	$1240, %r8d                     ## imm = 0x4D8
	setae	%dl
	shll	$10, %edx
	orl	$107, %edx
	cmpl	$33900, %r8d                    ## imm = 0x846C
	movl	$32768, %ecx                    ## imm = 0x8000
	cmovael	%ecx, %edx
	addl	%eax, %edx
	js	LBB154_199
LBB154_202:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	$0, %eax
	movl	$0, %ecx
	cmpl	%r8d, %edx
	jge	LBB154_204
## %bb.203:                             ##   in Loop: Header=BB154_2 Depth=1
	movabsq	$-4294967296, %rax              ## imm = 0xFFFFFFFF00000000
	andq	%rax, %rbx
	orq	%rbx, %rsi
	callq	__ZL20stbtt__cff_index_get10stbtt__bufi
	movq	-408(%rbp), %r10                ## 8-byte Reload
	movq	%rdx, %rcx
LBB154_204:                             ##   in Loop: Header=BB154_2 Depth=1
	movq	%rax, -432(%rbp)
	movq	%rcx, -424(%rbp)
	shrq	$32, %rcx
	je	LBB154_228
## %bb.205:                             ##   in Loop: Header=BB154_2 Depth=1
	movq	-448(%rbp), %rax                ## 8-byte Reload
	incl	%eax
	movq	%rax, -448(%rbp)                ## 8-byte Spill
	movl	$0, -424(%rbp)
	jmp	LBB154_226
LBB154_43:                              ##   in Loop: Header=BB154_2 Depth=1
	movslq	%r13d, %rax
	vmovss	-240(%rbp,%rax,4), %xmm0        ## xmm0 = mem[0],zero,zero,zero
	vaddss	16(%r15), %xmm0, %xmm0
	vmovss	%xmm0, 16(%r15)
	vxorps	%xmm1, %xmm1, %xmm1
	vaddss	20(%r15), %xmm1, %xmm1
	vmovss	%xmm1, 20(%r15)
	vcvttss2si	%xmm0, %ecx
	vcvttss2si	%xmm1, %eax
	cmpl	$0, (%r15)
	je	LBB154_206
## %bb.44:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%ecx, 28(%r15)
	jl	LBB154_46
## %bb.45:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, (%r10)
	jne	LBB154_47
LBB154_46:                              ##   in Loop: Header=BB154_2 Depth=1
	movl	%ecx, 28(%r15)
LBB154_47:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%eax, 36(%r15)
	jl	LBB154_49
## %bb.48:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, (%r10)
	jne	LBB154_50
LBB154_49:                              ##   in Loop: Header=BB154_2 Depth=1
	movl	%eax, 36(%r15)
LBB154_50:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%ecx, 24(%r15)
	jg	LBB154_52
## %bb.51:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, (%r10)
	jne	LBB154_53
LBB154_52:                              ##   in Loop: Header=BB154_2 Depth=1
	movl	%ecx, 24(%r15)
LBB154_53:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%eax, 32(%r15)
	jg	LBB154_55
## %bb.54:                              ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, (%r10)
	jne	LBB154_56
LBB154_55:                              ##   in Loop: Header=BB154_2 Depth=1
	movl	%eax, 32(%r15)
LBB154_56:                              ##   in Loop: Header=BB154_2 Depth=1
	movl	$1, 4(%r15)
	movl	48(%r15), %edx
	jmp	LBB154_207
LBB154_206:                             ##   in Loop: Header=BB154_2 Depth=1
	movq	40(%r15), %rsi
	movslq	48(%r15), %rdx
	movq	%rdx, %rdi
	shlq	$4, %rdi
	subq	%rdx, %rdi
	subq	%rdx, %rdi
	movb	$2, 12(%rsi,%rdi)
	movw	%cx, (%rsi,%rdi)
	movw	%ax, 2(%rsi,%rdi)
	movq	$0, 4(%rsi,%rdi)
LBB154_207:                             ##   in Loop: Header=BB154_2 Depth=1
	incl	%edx
	movl	%edx, 48(%r15)
	incl	%r13d
	cmpl	%r14d, %r13d
	jge	LBB154_224
LBB154_208:                             ##   in Loop: Header=BB154_2 Depth=1
	movslq	%r13d, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vaddss	16(%r15), %xmm0, %xmm0
	vmovss	-240(%rbp,%rax,4), %xmm1        ## xmm1 = mem[0],zero,zero,zero
	vmovss	%xmm0, 16(%r15)
	vaddss	20(%r15), %xmm1, %xmm1
	vmovss	%xmm1, 20(%r15)
	vcvttss2si	%xmm0, %ecx
	vcvttss2si	%xmm1, %eax
	cmpl	$0, (%r15)
	je	LBB154_222
## %bb.209:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%ecx, 28(%r15)
	jl	LBB154_211
## %bb.210:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, (%r10)
	jne	LBB154_212
LBB154_211:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	%ecx, 28(%r15)
LBB154_212:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%eax, 36(%r15)
	jl	LBB154_214
## %bb.213:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, (%r10)
	jne	LBB154_215
LBB154_214:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	%eax, 36(%r15)
LBB154_215:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%ecx, 24(%r15)
	jg	LBB154_217
## %bb.216:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, (%r10)
	jne	LBB154_218
LBB154_217:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	%ecx, 24(%r15)
LBB154_218:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	%eax, 32(%r15)
	jg	LBB154_220
## %bb.219:                             ##   in Loop: Header=BB154_2 Depth=1
	cmpl	$0, (%r10)
	jne	LBB154_221
LBB154_220:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	%eax, 32(%r15)
LBB154_221:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	$1, 4(%r15)
	movl	48(%r15), %edx
	jmp	LBB154_223
LBB154_222:                             ##   in Loop: Header=BB154_2 Depth=1
	movq	40(%r15), %rsi
	movslq	48(%r15), %rdx
	movq	%rdx, %rdi
	shlq	$4, %rdi
	subq	%rdx, %rdi
	subq	%rdx, %rdi
	movb	$2, 12(%rsi,%rdi)
	movw	%cx, (%rsi,%rdi)
	movw	%ax, 2(%rsi,%rdi)
	movq	$0, 4(%rsi,%rdi)
LBB154_223:                             ##   in Loop: Header=BB154_2 Depth=1
	incl	%edx
	movl	%edx, 48(%r15)
	incl	%r13d
	cmpl	%r14d, %r13d
	jl	LBB154_43
	jmp	LBB154_224
LBB154_122:                             ##   in Loop: Header=BB154_2 Depth=1
	movslq	%ebx, %rcx
	vmovss	-240(%rbp,%rcx,4), %xmm1        ## xmm1 = mem[0],zero,zero,zero
	vmovss	-236(%rbp,%rcx,4), %xmm2        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-232(%rbp,%rcx,4), %xmm3        ## xmm3 = mem[0],zero,zero,zero
	cltq
	vmovss	-240(%rbp,%rax,4), %xmm4        ## xmm4 = mem[0],zero,zero,zero
	movl	%r14d, %eax
	subl	%ebx, %eax
	addl	$4, %ebx
	vxorps	%xmm5, %xmm5, %xmm5
	cmpl	$5, %eax
	jne	LBB154_124
## %bb.123:                             ##   in Loop: Header=BB154_2 Depth=1
	movslq	%ebx, %rax
	vmovss	-240(%rbp,%rax,4), %xmm5        ## xmm5 = mem[0],zero,zero,zero
LBB154_124:                             ##   in Loop: Header=BB154_2 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%r15, %rdi
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	movq	-408(%rbp), %r10                ## 8-byte Reload
	leal	3(%rbx), %eax
	cmpl	%r14d, %eax
	jge	LBB154_224
LBB154_127:                             ##   in Loop: Header=BB154_2 Depth=1
	movslq	%ebx, %rcx
	vmovss	-240(%rbp,%rcx,4), %xmm0        ## xmm0 = mem[0],zero,zero,zero
	vmovss	-236(%rbp,%rcx,4), %xmm2        ## xmm2 = mem[0],zero,zero,zero
	vmovss	-232(%rbp,%rcx,4), %xmm3        ## xmm3 = mem[0],zero,zero,zero
	movl	%r14d, %ecx
	subl	%ebx, %ecx
	addl	$4, %ebx
	vxorps	%xmm4, %xmm4, %xmm4
	cmpl	$5, %ecx
	jne	LBB154_129
## %bb.128:                             ##   in Loop: Header=BB154_2 Depth=1
	movslq	%ebx, %rcx
	vmovss	-240(%rbp,%rcx,4), %xmm4        ## xmm4 = mem[0],zero,zero,zero
LBB154_129:                             ##   in Loop: Header=BB154_2 Depth=1
	cltq
	vmovss	-240(%rbp,%rax,4), %xmm5        ## xmm5 = mem[0],zero,zero,zero
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%r15, %rdi
	callq	__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	movq	-408(%rbp), %r10                ## 8-byte Reload
	leal	3(%rbx), %eax
	cmpl	%r14d, %eax
	jl	LBB154_122
	.p2align	4, 0x90
LBB154_224:                             ##   in Loop: Header=BB154_2 Depth=1
	xorl	%r14d, %r14d
LBB154_225:                             ##   in Loop: Header=BB154_2 Depth=1
	leaq	LJTI154_0(%rip), %r13
LBB154_226:                             ##   in Loop: Header=BB154_2 Depth=1
	movl	-424(%rbp), %edx
	movl	-420(%rbp), %ecx
	cmpl	%ecx, %edx
	jge	LBB154_228
## %bb.227:                             ##   in Loop: Header=BB154_2 Depth=1
	movq	-432(%rbp), %rax
	jmp	LBB154_2
LBB154_228:
	xorl	%r13d, %r13d
LBB154_229:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB154_257
LBB154_230:
	movl	%r13d, %eax
LBB154_231:
	addq	$584, %rsp                      ## imm = 0x248
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB154_232:
	vmovss	8(%r15), %xmm0                  ## xmm0 = mem[0],zero,zero,zero
	vmovss	12(%r15), %xmm1                 ## xmm1 = mem[0],zero,zero,zero
	vucomiss	16(%r15), %xmm0
	jne	LBB154_234
	jp	LBB154_234
## %bb.233:
	vucomiss	20(%r15), %xmm1
	jne	LBB154_234
	jnp	LBB154_250
LBB154_234:
	vcvttss2si	%xmm0, %ecx
	vcvttss2si	%xmm1, %eax
	cmpl	$0, (%r15)
	je	LBB154_248
## %bb.235:
	cmpl	%ecx, 28(%r15)
	jl	LBB154_237
## %bb.236:
	cmpl	$0, (%r10)
	jne	LBB154_238
LBB154_237:
	movl	%ecx, 28(%r15)
LBB154_238:
	cmpl	%eax, 36(%r15)
	jl	LBB154_240
## %bb.239:
	cmpl	$0, (%r10)
	jne	LBB154_241
LBB154_240:
	movl	%eax, 36(%r15)
LBB154_241:
	cmpl	%ecx, 24(%r15)
	jg	LBB154_243
## %bb.242:
	cmpl	$0, (%r10)
	jne	LBB154_244
LBB154_243:
	movl	%ecx, 24(%r15)
LBB154_244:
	cmpl	%eax, 32(%r15)
	jg	LBB154_246
## %bb.245:
	cmpl	$0, (%r10)
	jne	LBB154_247
LBB154_246:
	movl	%eax, 32(%r15)
LBB154_247:
	movl	$1, 4(%r15)
	movl	48(%r15), %edx
	jmp	LBB154_249
LBB154_248:
	movq	40(%r15), %rsi
	movslq	48(%r15), %rdx
	movq	%rdx, %rdi
	shlq	$4, %rdi
	subq	%rdx, %rdi
	subq	%rdx, %rdi
	movb	$2, 12(%rsi,%rdi)
	movw	%cx, (%rsi,%rdi)
	movw	%ax, 2(%rsi,%rdi)
	movq	$0, 4(%rsi,%rdi)
LBB154_249:
	incl	%edx
	movl	%edx, 48(%r15)
LBB154_250:
	movl	$1, %r13d
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	je	LBB154_230
	jmp	LBB154_257
LBB154_159:
	movq	-456(%rbp), %rax                ## 8-byte Reload
	cmpq	$0, 136(%rax)
	js	LBB154_256
## %bb.160:
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.6
LBB154_161:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB154_257
## %bb.162:
	xorl	%eax, %eax
	jmp	LBB154_231
LBB154_251:
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.2
	jmp	LBB154_161
LBB154_252:
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.3
	jmp	LBB154_161
LBB154_253:
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.1
	jmp	LBB154_161
LBB154_254:
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.4
	jmp	LBB154_161
LBB154_255:
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.7
	jmp	LBB154_161
LBB154_256:
	callq	__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.5
	jmp	LBB154_161
LBB154_257:
	callq	___stack_chk_fail
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L154_0_set_4, LBB154_4-LJTI154_0
.set L154_0_set_15, LBB154_15-LJTI154_0
.set L154_0_set_21, LBB154_21-LJTI154_0
.set L154_0_set_23, LBB154_23-LJTI154_0
.set L154_0_set_41, LBB154_41-LJTI154_0
.set L154_0_set_57, LBB154_57-LJTI154_0
.set L154_0_set_59, LBB154_59-LJTI154_0
.set L154_0_set_63, LBB154_63-LJTI154_0
.set L154_0_set_72, LBB154_72-LJTI154_0
.set L154_0_set_74, LBB154_74-LJTI154_0
.set L154_0_set_232, LBB154_232-LJTI154_0
.set L154_0_set_5, LBB154_5-LJTI154_0
.set L154_0_set_79, LBB154_79-LJTI154_0
.set L154_0_set_81, LBB154_81-LJTI154_0
.set L154_0_set_84, LBB154_84-LJTI154_0
.set L154_0_set_102, LBB154_102-LJTI154_0
.set L154_0_set_7, LBB154_7-LJTI154_0
.set L154_0_set_192, LBB154_192-LJTI154_0
.set L154_0_set_120, LBB154_120-LJTI154_0
.set L154_0_set_125, LBB154_125-LJTI154_0
LJTI154_0:
	.long	L154_0_set_4
	.long	L154_0_set_15
	.long	L154_0_set_4
	.long	L154_0_set_21
	.long	L154_0_set_23
	.long	L154_0_set_41
	.long	L154_0_set_57
	.long	L154_0_set_59
	.long	L154_0_set_15
	.long	L154_0_set_63
	.long	L154_0_set_72
	.long	L154_0_set_74
	.long	L154_0_set_15
	.long	L154_0_set_232
	.long	L154_0_set_15
	.long	L154_0_set_15
	.long	L154_0_set_15
	.long	L154_0_set_4
	.long	L154_0_set_5
	.long	L154_0_set_5
	.long	L154_0_set_79
	.long	L154_0_set_81
	.long	L154_0_set_4
	.long	L154_0_set_84
	.long	L154_0_set_102
	.long	L154_0_set_7
	.long	L154_0_set_7
	.long	L154_0_set_15
	.long	L154_0_set_192
	.long	L154_0_set_120
	.long	L154_0_set_125
.set L154_1_set_77, LBB154_77-LJTI154_1
.set L154_1_set_146, LBB154_146-LJTI154_1
.set L154_1_set_148, LBB154_148-LJTI154_1
.set L154_1_set_152, LBB154_152-LJTI154_1
LJTI154_1:
	.long	L154_1_set_77
	.long	L154_1_set_146
	.long	L154_1_set_148
	.long	L154_1_set_152
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__cff_index_get10stbtt__bufi
__ZL20stbtt__cff_index_get10stbtt__bufi: ## @_ZL20stbtt__cff_index_get10stbtt__bufi
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
                                        ## kill: def $edx killed $edx def $rdx
	testq	%rsi, %rsi
	js	LBB155_47
## %bb.1:
	shrq	$32, %rsi
	testl	%esi, %esi
	je	LBB155_8
## %bb.2:
	xorl	%eax, %eax
	movl	$0, %ecx
	movl	$0, %r11d
	testl	%esi, %esi
	jle	LBB155_4
## %bb.3:
	movzbl	(%rdi), %r11d
	shll	$8, %r11d
	movl	$1, %ecx
LBB155_4:
	cmpl	%esi, %ecx
	jge	LBB155_6
## %bb.5:
	movl	%ecx, %eax
	incl	%ecx
	movzbl	(%rdi,%rax), %eax
LBB155_6:
	orl	%eax, %r11d
	cmpl	%esi, %ecx
	jge	LBB155_9
LBB155_7:
	movl	%ecx, %eax
	incl	%ecx
	movb	(%rdi,%rax), %r9b
	jmp	LBB155_10
LBB155_8:
	xorl	%ecx, %ecx
	xorl	%r11d, %r11d
	cmpl	%esi, %ecx
	jl	LBB155_7
LBB155_9:
	xorl	%r9d, %r9d
LBB155_10:
	testl	%edx, %edx
	js	LBB155_48
## %bb.11:
	cmpl	%edx, %r11d
	jle	LBB155_48
## %bb.12:
	leal	-5(%r9), %eax
	cmpb	$-5, %al
	jbe	LBB155_49
## %bb.13:
	movzbl	%r9b, %r8d
	imull	%r8d, %edx
	addl	%ecx, %edx
	js	LBB155_50
## %bb.14:
	cmpl	%esi, %edx
	jg	LBB155_50
## %bb.15:
	xorl	%r14d, %r14d
	cmpl	%esi, %edx
	jge	LBB155_26
## %bb.16:
	movslq	%edx, %rdx
	movzbl	(%rdi,%rdx), %r10d
	incq	%rdx
	cmpb	$1, %r9b
	je	LBB155_27
## %bb.17:
	shll	$8, %r10d
	xorl	%eax, %eax
	cmpl	%esi, %edx
	jge	LBB155_19
## %bb.18:
	movzbl	(%rdi,%rdx), %eax
	incl	%edx
                                        ## kill: def $edx killed $edx def $rdx
LBB155_19:
	orl	%eax, %r10d
	cmpb	$2, %r9b
	je	LBB155_27
## %bb.20:
	shll	$8, %r10d
	xorl	%eax, %eax
	cmpl	%esi, %edx
	jge	LBB155_22
## %bb.21:
	movslq	%edx, %rax
	incl	%edx
	movzbl	(%rdi,%rax), %eax
LBB155_22:
	orl	%eax, %r10d
	cmpb	$3, %r9b
	je	LBB155_27
## %bb.23:
	shll	$8, %r10d
	xorl	%eax, %eax
	cmpl	%esi, %edx
	jge	LBB155_25
## %bb.24:
	movslq	%edx, %rax
	incl	%edx
	movzbl	(%rdi,%rax), %eax
LBB155_25:
	orl	%eax, %r10d
	jmp	LBB155_27
LBB155_26:
	xorl	%r10d, %r10d
LBB155_27:
	cmpl	%esi, %edx
	jge	LBB155_41
## %bb.28:
	cmpb	$1, %r9b
	jne	LBB155_30
## %bb.29:
	xorl	%eax, %eax
                                        ## implicit-def: $r14d
	testb	$1, %r9b
	jne	LBB155_38
	jmp	LBB155_41
LBB155_30:
	movl	%r8d, %eax
	andl	$-2, %eax
	xorl	%r14d, %r14d
	jmp	LBB155_32
	.p2align	4, 0x90
LBB155_31:                              ##   in Loop: Header=BB155_32 Depth=1
	movslq	%edx, %rcx
	incl	%edx
	movzbl	(%rdi,%rcx), %ebx
	movzbl	%bl, %ecx
	orl	%ecx, %r14d
	addl	$-2, %eax
	je	LBB155_37
LBB155_32:                              ## =>This Inner Loop Header: Depth=1
	cmpl	%esi, %edx
	jge	LBB155_34
## %bb.33:                              ##   in Loop: Header=BB155_32 Depth=1
	movslq	%edx, %rbx
	incl	%edx
	movzbl	(%rdi,%rbx), %ebx
	jmp	LBB155_35
	.p2align	4, 0x90
LBB155_34:                              ##   in Loop: Header=BB155_32 Depth=1
	xorl	%ebx, %ebx
LBB155_35:                              ##   in Loop: Header=BB155_32 Depth=1
	movl	%r14d, %ecx
	movzbl	%bl, %ebx
	shll	$16, %ecx
	shll	$8, %ebx
	movl	%ebx, %r14d
	orl	%ecx, %r14d
	cmpl	%esi, %edx
	jl	LBB155_31
## %bb.36:                              ##   in Loop: Header=BB155_32 Depth=1
	xorl	%ebx, %ebx
	movzbl	%bl, %ecx
	orl	%ecx, %r14d
	addl	$-2, %eax
	jne	LBB155_32
LBB155_37:
	movl	%r14d, %eax
	shll	$8, %eax
	testb	$1, %r9b
	je	LBB155_41
LBB155_38:
	xorl	%ecx, %ecx
	cmpl	%esi, %edx
	jge	LBB155_40
## %bb.39:
	movslq	%edx, %rcx
	movzbl	(%rdi,%rcx), %ecx
LBB155_40:
	orl	%ecx, %eax
	movl	%eax, %r14d
LBB155_41:
	incl	%r11d
	imull	%r8d, %r11d
	leal	(%r11,%r10), %r8d
	addl	$2, %r8d
	subl	%r10d, %r14d
	movl	%r14d, %eax
	orl	%r8d, %eax
	js	LBB155_51
## %bb.42:
	xorl	%eax, %eax
	subl	%r8d, %esi
	jl	LBB155_46
## %bb.43:
	movl	$0, %edx
	cmpl	%r14d, %esi
	jl	LBB155_45
## %bb.44:
	movslq	%r8d, %rax
	addq	%rax, %rdi
	shlq	$32, %r14
	movq	%rdi, %rax
	movq	%r14, %rdx
LBB155_45:
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
LBB155_47:
	callq	__ZL20stbtt__cff_index_get10stbtt__bufi.cold.1
	jmp	LBB155_51
LBB155_48:
	callq	__ZL20stbtt__cff_index_get10stbtt__bufi.cold.2
	jmp	LBB155_51
LBB155_49:
	callq	__ZL20stbtt__cff_index_get10stbtt__bufi.cold.3
	jmp	LBB155_51
LBB155_50:
	callq	__ZL20stbtt__cff_index_get10stbtt__bufi.cold.4
LBB155_51:
	xorl	%eax, %eax
LBB155_46:
	xorl	%edx, %edx
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL21stbtt__csctx_rmove_toP12stbtt__csctxff
__ZL21stbtt__csctx_rmove_toP12stbtt__csctxff: ## @_ZL21stbtt__csctx_rmove_toP12stbtt__csctxff
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	vmovss	8(%rdi), %xmm3                  ## xmm3 = mem[0],zero,zero,zero
	vmovss	12(%rdi), %xmm4                 ## xmm4 = mem[0],zero,zero,zero
	vmovss	16(%rdi), %xmm2                 ## xmm2 = mem[0],zero,zero,zero
	vucomiss	%xmm2, %xmm3
	jne	LBB156_3
	jp	LBB156_3
## %bb.1:
	vmovss	20(%rdi), %xmm5                 ## xmm5 = mem[0],zero,zero,zero
	vucomiss	%xmm5, %xmm4
	jne	LBB156_3
	jnp	LBB156_2
LBB156_3:
	vcvttss2si	%xmm3, %ecx
	vcvttss2si	%xmm4, %r8d
	cmpl	$0, (%rdi)
	je	LBB156_17
## %bb.4:
	cmpl	%ecx, 28(%rdi)
	jl	LBB156_6
## %bb.5:
	cmpl	$0, 4(%rdi)
	je	LBB156_6
## %bb.7:
	cmpl	%r8d, 36(%rdi)
	jge	LBB156_8
	jmp	LBB156_9
LBB156_6:
	movl	%ecx, 28(%rdi)
	cmpl	%r8d, 36(%rdi)
	jl	LBB156_9
LBB156_8:
	cmpl	$0, 4(%rdi)
	je	LBB156_9
## %bb.10:
	cmpl	%ecx, 24(%rdi)
	jle	LBB156_11
	jmp	LBB156_12
LBB156_9:
	movl	%r8d, 36(%rdi)
	cmpl	%ecx, 24(%rdi)
	jg	LBB156_12
LBB156_11:
	cmpl	$0, 4(%rdi)
	je	LBB156_12
## %bb.13:
	cmpl	%r8d, 32(%rdi)
	jle	LBB156_14
	jmp	LBB156_15
LBB156_12:
	movl	%ecx, 24(%rdi)
	cmpl	%r8d, 32(%rdi)
	jg	LBB156_15
LBB156_14:
	cmpl	$0, 4(%rdi)
	jne	LBB156_16
LBB156_15:
	movl	%r8d, 32(%rdi)
LBB156_16:
	movl	$1, 4(%rdi)
	movl	48(%rdi), %eax
	jmp	LBB156_18
LBB156_17:
	movq	40(%rdi), %rsi
	movslq	48(%rdi), %rax
	movq	%rax, %rdx
	shlq	$4, %rdx
	subq	%rax, %rdx
	subq	%rax, %rdx
	movb	$2, 12(%rsi,%rdx)
	movw	%cx, (%rsi,%rdx)
	movw	%r8w, 2(%rsi,%rdx)
	movq	$0, 4(%rsi,%rdx)
	vmovss	16(%rdi), %xmm2                 ## xmm2 = mem[0],zero,zero,zero
LBB156_18:
	incl	%eax
	movl	%eax, 48(%rdi)
	vinsertps	$16, 20(%rdi), %xmm2, %xmm2 ## xmm2 = xmm2[0],mem[0],xmm2[2,3]
LBB156_19:
	vinsertps	$16, %xmm1, %xmm0, %xmm0 ## xmm0 = xmm0[0],xmm1[0],xmm0[2,3]
	vaddps	%xmm0, %xmm2, %xmm0
	vmovshdup	%xmm0, %xmm1            ## xmm1 = xmm0[1,1,3,3]
	vmovddup	%xmm0, %xmm2                    ## xmm2 = xmm0[0,0]
	vmovups	%xmm2, 8(%rdi)
	vcvttss2si	%xmm0, %ecx
	vcvttss2si	%xmm1, %r8d
	cmpl	$0, (%rdi)
	je	LBB156_33
## %bb.20:
	cmpl	%ecx, 28(%rdi)
	jl	LBB156_22
## %bb.21:
	cmpl	$0, 4(%rdi)
	je	LBB156_22
## %bb.23:
	cmpl	%r8d, 36(%rdi)
	jge	LBB156_24
	jmp	LBB156_25
LBB156_22:
	movl	%ecx, 28(%rdi)
	cmpl	%r8d, 36(%rdi)
	jl	LBB156_25
LBB156_24:
	cmpl	$0, 4(%rdi)
	je	LBB156_25
## %bb.26:
	cmpl	%ecx, 24(%rdi)
	jle	LBB156_27
	jmp	LBB156_28
LBB156_25:
	movl	%r8d, 36(%rdi)
	cmpl	%ecx, 24(%rdi)
	jg	LBB156_28
LBB156_27:
	cmpl	$0, 4(%rdi)
	je	LBB156_28
## %bb.29:
	cmpl	%r8d, 32(%rdi)
	jle	LBB156_30
	jmp	LBB156_31
LBB156_28:
	movl	%ecx, 24(%rdi)
	cmpl	%r8d, 32(%rdi)
	jg	LBB156_31
LBB156_30:
	cmpl	$0, 4(%rdi)
	jne	LBB156_32
LBB156_31:
	movl	%r8d, 32(%rdi)
LBB156_32:
	movl	$1, 4(%rdi)
	movl	48(%rdi), %eax
	incl	%eax
	movl	%eax, 48(%rdi)
	popq	%rbp
	retq
LBB156_33:
	movq	40(%rdi), %rsi
	movslq	48(%rdi), %rax
	movq	%rax, %rdx
	shlq	$4, %rdx
	subq	%rax, %rdx
	subq	%rax, %rdx
	movb	$1, 12(%rsi,%rdx)
	movw	%cx, (%rsi,%rdx)
	movw	%r8w, 2(%rsi,%rdx)
	movq	$0, 4(%rsi,%rdx)
	incl	%eax
	movl	%eax, 48(%rdi)
	popq	%rbp
	retq
LBB156_2:
	vinsertps	$16, %xmm5, %xmm2, %xmm2 ## xmm2 = xmm2[0],xmm5[0],xmm2[2,3]
	jmp	LBB156_19
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
__ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff: ## @_ZL23stbtt__csctx_rccurve_toP12stbtt__csctxffffff
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vaddss	16(%rdi), %xmm0, %xmm0
	vaddss	20(%rdi), %xmm1, %xmm1
	vaddss	%xmm2, %xmm0, %xmm2
	vaddss	%xmm3, %xmm1, %xmm3
	vaddss	%xmm4, %xmm2, %xmm4
	vmovss	%xmm4, 16(%rdi)
	vaddss	%xmm5, %xmm3, %xmm5
	vmovss	%xmm5, 20(%rdi)
	vcvttss2si	%xmm4, %ebx
	vcvttss2si	%xmm5, %edx
	vcvttss2si	%xmm0, %r14d
	vcvttss2si	%xmm1, %r10d
	vcvttss2si	%xmm2, %r9d
	vcvttss2si	%xmm3, %r8d
	cmpl	$0, (%rdi)
	je	LBB157_30
## %bb.1:
	movl	28(%rdi), %r11d
	cmpl	%ebx, %r11d
	jl	LBB157_3
## %bb.2:
	cmpl	$0, 4(%rdi)
	je	LBB157_3
## %bb.4:
	movl	36(%rdi), %ecx
	cmpl	%edx, %ecx
	jge	LBB157_5
	jmp	LBB157_6
LBB157_3:
	movl	%ebx, 28(%rdi)
	movl	%ebx, %r11d
	movl	36(%rdi), %ecx
	cmpl	%edx, %ecx
	jl	LBB157_6
LBB157_5:
	cmpl	$0, 4(%rdi)
	je	LBB157_6
## %bb.7:
	movl	24(%rdi), %esi
	cmpl	%ebx, %esi
	jle	LBB157_8
	jmp	LBB157_9
LBB157_6:
	movl	%edx, 36(%rdi)
	movl	%edx, %ecx
	movl	24(%rdi), %esi
	cmpl	%ebx, %esi
	jg	LBB157_9
LBB157_8:
	cmpl	$0, 4(%rdi)
	je	LBB157_9
## %bb.10:
	movl	32(%rdi), %ebx
	cmpl	%edx, %ebx
	jle	LBB157_11
	jmp	LBB157_12
LBB157_9:
	movl	%ebx, 24(%rdi)
	movl	%ebx, %esi
	movl	32(%rdi), %ebx
	cmpl	%edx, %ebx
	jg	LBB157_12
LBB157_11:
	cmpl	$0, 4(%rdi)
	je	LBB157_12
## %bb.13:
	movl	$1, 4(%rdi)
	cmpl	%r14d, %r11d
	jl	LBB157_14
LBB157_15:
	cmpl	%r10d, %ecx
	jl	LBB157_16
LBB157_17:
	cmpl	%r14d, %esi
	jg	LBB157_18
LBB157_19:
	cmpl	%r10d, %ebx
	jg	LBB157_20
LBB157_21:
	cmpl	%r9d, %r11d
	jl	LBB157_22
LBB157_23:
	cmpl	%r8d, %ecx
	jl	LBB157_24
LBB157_25:
	cmpl	%r9d, %esi
	jg	LBB157_26
LBB157_27:
	cmpl	%r8d, %ebx
	jle	LBB157_29
LBB157_28:
	movl	%r8d, 32(%rdi)
LBB157_29:
	movl	$1, 4(%rdi)
	movl	48(%rdi), %eax
	jmp	LBB157_31
LBB157_12:
	movl	%edx, 32(%rdi)
	movl	%edx, %ebx
	movl	$1, 4(%rdi)
	cmpl	%r14d, %r11d
	jge	LBB157_15
LBB157_14:
	movl	%r14d, 28(%rdi)
	movl	%r14d, %r11d
	cmpl	%r10d, %ecx
	jge	LBB157_17
LBB157_16:
	movl	%r10d, 36(%rdi)
	movl	%r10d, %ecx
	cmpl	%r14d, %esi
	jle	LBB157_19
LBB157_18:
	movl	%r14d, 24(%rdi)
	movl	%r14d, %esi
	cmpl	%r10d, %ebx
	jle	LBB157_21
LBB157_20:
	movl	%r10d, 32(%rdi)
	movl	%r10d, %ebx
	cmpl	%r9d, %r11d
	jge	LBB157_23
LBB157_22:
	movl	%r9d, 28(%rdi)
	cmpl	%r8d, %ecx
	jge	LBB157_25
LBB157_24:
	movl	%r8d, 36(%rdi)
	cmpl	%r9d, %esi
	jle	LBB157_27
LBB157_26:
	movl	%r9d, 24(%rdi)
	cmpl	%r8d, %ebx
	jg	LBB157_28
	jmp	LBB157_29
LBB157_30:
	movq	40(%rdi), %rsi
	movslq	48(%rdi), %rax
	movq	%rax, %rcx
	shlq	$4, %rcx
	subq	%rax, %rcx
	subq	%rax, %rcx
	movb	$4, 12(%rsi,%rcx)
	movw	%bx, (%rsi,%rcx)
	movw	%dx, 2(%rsi,%rcx)
	movw	%r14w, 4(%rsi,%rcx)
	movw	%r10w, 6(%rsi,%rcx)
	movw	%r9w, 8(%rsi,%rcx)
	movw	%r8w, 10(%rsi,%rcx)
LBB157_31:
	incl	%eax
	movl	%eax, 48(%rdi)
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL14stbtt__cff_intP10stbtt__buf
__ZL14stbtt__cff_intP10stbtt__buf:      ## @_ZL14stbtt__cff_intP10stbtt__buf
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movslq	8(%rdi), %rsi
	movl	12(%rdi), %r11d
	cmpl	%r11d, %esi
	jge	LBB158_25
## %bb.1:
	movq	(%rdi), %r8
	leaq	1(%rsi), %rcx
	movl	%ecx, 8(%rdi)
	movzbl	(%r8,%rsi), %eax
	leal	-32(%rax), %edx
	cmpb	$-42, %dl
	ja	LBB158_3
## %bb.2:
	addl	$-139, %eax
                                        ## kill: def $eax killed $eax killed $rax
	popq	%rbp
	retq
LBB158_3:
	leal	9(%rax), %edx
	cmpb	$3, %dl
	ja	LBB158_7
## %bb.4:
	shll	$8, %eax
	xorl	%r9d, %r9d
	cmpl	%r11d, %ecx
	jge	LBB158_6
## %bb.5:
	addl	$2, %esi
	movl	%esi, 8(%rdi)
	movzbl	(%r8,%rcx), %r9d
LBB158_6:
	addl	%r9d, %eax
	addl	$-63124, %eax                   ## imm = 0xFFFF096C
                                        ## kill: def $eax killed $eax killed $rax
	popq	%rbp
	retq
LBB158_7:
	leal	5(%rax), %edx
	cmpb	$3, %dl
	ja	LBB158_11
## %bb.8:
	shll	$8, %eax
	negl	%eax
	xorl	%r9d, %r9d
	cmpl	%r11d, %ecx
	jge	LBB158_10
## %bb.9:
	addl	$2, %esi
	movl	%esi, 8(%rdi)
	movzbl	(%r8,%rcx), %r9d
LBB158_10:
	subl	%r9d, %eax
	addl	$64148, %eax                    ## imm = 0xFA94
                                        ## kill: def $eax killed $eax killed $rax
	popq	%rbp
	retq
LBB158_11:
	cmpb	$29, %al
	je	LBB158_16
## %bb.12:
	cmpb	$28, %al
	jne	LBB158_25
## %bb.13:
	xorl	%eax, %eax
	cmpl	%r11d, %ecx
	jge	LBB158_24
## %bb.14:
	movq	%rsi, %r9
	addq	$2, %r9
	movl	%r9d, 8(%rdi)
	movzbl	(%r8,%rcx), %eax
	shll	$8, %eax
	xorl	%ecx, %ecx
	cmpl	%r11d, %r9d
	jge	LBB158_23
## %bb.15:
	leal	3(%rsi), %ecx
	movl	%ecx, 8(%rdi)
	movzbl	(%r8,%r9), %ecx
	jmp	LBB158_23
LBB158_25:
	callq	__ZL14stbtt__cff_intP10stbtt__buf.cold.1
	xorl	%eax, %eax
	popq	%rbp
	retq
LBB158_16:
	xorl	%eax, %eax
	cmpl	%r11d, %ecx
	jge	LBB158_24
## %bb.17:
	leaq	2(%rsi), %r9
	movl	%r9d, 8(%rdi)
	movzbl	(%r8,%rcx), %eax
	xorl	%r10d, %r10d
	movl	$0, %ecx
	cmpl	%r11d, %r9d
	jge	LBB158_19
## %bb.18:
	addl	$3, %esi
	movl	%esi, 8(%rdi)
	movzbl	(%r8,%r9), %ecx
	shll	$16, %ecx
	movl	%esi, %r9d
LBB158_19:
	cmpl	%r11d, %r9d
	jge	LBB158_21
## %bb.20:
	movslq	%r9d, %rdx
	leal	1(%r9), %esi
	movl	%esi, 8(%rdi)
	movzbl	(%r8,%rdx), %r10d
	shll	$8, %r10d
	movl	%esi, %r9d
LBB158_21:
	shll	$24, %eax
	orl	%ecx, %eax
	orl	%r10d, %eax
	xorl	%ecx, %ecx
	cmpl	%r11d, %r9d
	jge	LBB158_23
## %bb.22:
	leal	1(%r9), %ecx
	movl	%ecx, 8(%rdi)
	movslq	%r9d, %rcx
	movzbl	(%r8,%rcx), %ecx
LBB158_23:
	orl	%ecx, %eax
LBB158_24:
                                        ## kill: def $eax killed $eax killed $rax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL16stbtt__get_subrs10stbtt__bufS_
__ZL16stbtt__get_subrs10stbtt__bufS_:   ## @_ZL16stbtt__get_subrs10stbtt__bufS_
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rsi, %r15
	movq	%rdi, %r14
	movq	%rdi, -56(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -80(%rbp)
	movl	$0, -28(%rbp)
	movq	$0, -40(%rbp)
	leaq	-88(%rbp), %rdi
	leaq	-40(%rbp), %rcx
	movl	$18, %esi
	movl	$2, %edx
	callq	__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj
	movslq	-36(%rbp), %rbx
	xorl	%eax, %eax
	movl	$0, %edx
	testq	%rbx, %rbx
	je	LBB159_14
## %bb.1:
	movl	-40(%rbp), %ecx
	testl	%ecx, %ecx
	je	LBB159_14
## %bb.2:
	shrq	$32, %r15
	movl	%ecx, %eax
	orl	%ebx, %eax
	js	LBB159_6
## %bb.3:
	xorl	%eax, %eax
	movl	%r15d, %esi
	subl	%ebx, %esi
	jl	LBB159_7
## %bb.4:
	movl	$0, %edx
	cmpl	%ecx, %esi
	jl	LBB159_8
## %bb.5:
	addq	%rbx, %r14
	shlq	$32, %rcx
	movq	%r14, %rax
	movq	%rcx, %rdx
	jmp	LBB159_8
LBB159_6:
	xorl	%eax, %eax
LBB159_7:
	xorl	%edx, %edx
LBB159_8:
	movq	%rax, -72(%rbp)
	movq	%rdx, -64(%rbp)
	leaq	-72(%rbp), %rdi
	leaq	-28(%rbp), %rcx
	movl	$19, %esi
	movl	$1, %edx
	callq	__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj
	movl	-28(%rbp), %eax
	testl	%eax, %eax
	je	LBB159_13
## %bb.9:
	addl	%ebx, %eax
	js	LBB159_12
## %bb.10:
	cmpl	%r15d, %eax
	jg	LBB159_12
## %bb.11:
	movl	%eax, -48(%rbp)
	leaq	-56(%rbp), %rdi
	callq	__ZL20stbtt__cff_get_indexP10stbtt__buf
	jmp	LBB159_14
LBB159_12:
	callq	__ZL16stbtt__get_subrs10stbtt__bufS_.cold.1
LBB159_13:
	xorl	%eax, %eax
	xorl	%edx, %edx
LBB159_14:
	addq	$72, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__dict_get_intsP10stbtt__bufiiPj
__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj: ## @_ZL20stbtt__dict_get_intsP10stbtt__bufiiPj
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	12(%rdi), %r10d
	testl	%r10d, %r10d
	js	LBB160_1
## %bb.2:
	movq	%rcx, %r14
	movl	$0, 8(%rdi)
	movq	(%rdi), %r9
	xorl	%r11d, %r11d
	jmp	LBB160_3
	.p2align	4, 0x90
LBB160_35:                              ##   in Loop: Header=BB160_3 Depth=1
	xorl	%eax, %eax
	movl	%r10d, %r11d
	movl	%r10d, %ebx
LBB160_36:                              ##   in Loop: Header=BB160_3 Depth=1
	cmpl	%esi, %eax
	je	LBB160_37
LBB160_3:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB160_5 Depth 2
                                        ##       Child Loop BB160_12 Depth 3
	cmpl	%r11d, %r10d
	jle	LBB160_45
## %bb.4:                               ##   in Loop: Header=BB160_3 Depth=1
	movl	%r11d, %r8d
	jmp	LBB160_5
LBB160_27:                              ##   in Loop: Header=BB160_5 Depth=2
	movl	%r11d, 8(%rdi)
	.p2align	4, 0x90
LBB160_28:                              ##   in Loop: Header=BB160_5 Depth=2
	cmpl	%r10d, %r11d
	jge	LBB160_29
LBB160_5:                               ##   Parent Loop BB160_3 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB160_12 Depth 3
	movl	%r11d, %ebx
	movslq	%r11d, %rax
	movb	(%r9,%rax), %cl
	cmpb	$28, %cl
	jb	LBB160_30
## %bb.6:                               ##   in Loop: Header=BB160_5 Depth=2
	cmpb	$30, %cl
	jne	LBB160_14
## %bb.7:                               ##   in Loop: Header=BB160_5 Depth=2
	cmpl	$-2, %ebx
	jle	LBB160_8
## %bb.9:                               ##   in Loop: Header=BB160_5 Depth=2
	leal	1(%rbx), %r11d
	movl	%r11d, 8(%rdi)
	cmpl	%r10d, %r11d
	jae	LBB160_28
## %bb.10:                              ##   in Loop: Header=BB160_5 Depth=2
	movl	%r11d, %eax
	addl	$2, %ebx
	movl	%ebx, %r11d
	.p2align	4, 0x90
LBB160_12:                              ##   Parent Loop BB160_3 Depth=1
                                        ##     Parent Loop BB160_5 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movl	%r11d, 8(%rdi)
	movzbl	(%r9,%rax), %ecx
	movl	%ecx, %ebx
	notl	%ebx
	testb	$15, %bl
	je	LBB160_28
## %bb.13:                              ##   in Loop: Header=BB160_12 Depth=3
	andl	$-16, %ecx
	cmpl	$240, %ecx
	je	LBB160_28
## %bb.11:                              ##   in Loop: Header=BB160_12 Depth=3
	incq	%rax
	incl	%r11d
	cmpq	%rax, %r10
	jne	LBB160_12
	jmp	LBB160_35
	.p2align	4, 0x90
LBB160_14:                              ##   in Loop: Header=BB160_5 Depth=2
	leal	1(%rbx), %r11d
	movl	%r11d, 8(%rdi)
	movb	(%r9,%rax), %al
	leal	-32(%rax), %ecx
	cmpb	$-41, %cl
	jb	LBB160_28
## %bb.15:                              ##   in Loop: Header=BB160_5 Depth=2
	leal	9(%rax), %ecx
	cmpb	$3, %cl
	jbe	LBB160_16
## %bb.18:                              ##   in Loop: Header=BB160_5 Depth=2
	leal	5(%rax), %ecx
	cmpb	$3, %cl
	ja	LBB160_19
LBB160_16:                              ##   in Loop: Header=BB160_5 Depth=2
	cmpl	%r10d, %r11d
	jge	LBB160_28
## %bb.17:                              ##   in Loop: Header=BB160_5 Depth=2
	addl	$2, %ebx
	movl	%ebx, %r11d
	jmp	LBB160_27
LBB160_19:                              ##   in Loop: Header=BB160_5 Depth=2
	cmpb	$29, %al
	je	LBB160_24
## %bb.20:                              ##   in Loop: Header=BB160_5 Depth=2
	cmpb	$28, %al
	jne	LBB160_46
## %bb.21:                              ##   in Loop: Header=BB160_5 Depth=2
	cmpl	%r10d, %r11d
	jge	LBB160_28
## %bb.22:                              ##   in Loop: Header=BB160_5 Depth=2
	leal	2(%rbx), %r11d
	movl	%r11d, 8(%rdi)
	cmpl	%r10d, %r11d
	jge	LBB160_28
## %bb.23:                              ##   in Loop: Header=BB160_5 Depth=2
	addl	$3, %ebx
	movl	%ebx, %r11d
	jmp	LBB160_27
LBB160_24:                              ##   in Loop: Header=BB160_5 Depth=2
	cmpl	%r10d, %r11d
	jge	LBB160_28
## %bb.25:                              ##   in Loop: Header=BB160_5 Depth=2
	leal	2(%rbx), %eax
	addl	$3, %ebx
	cmpl	%r10d, %eax
	cmovgel	%eax, %ebx
	xorl	%r11d, %r11d
	cmpl	%r10d, %ebx
	setl	%r11b
	addl	%ebx, %r11d
	movl	%r11d, 8(%rdi)
	cmpl	%r10d, %r11d
	jge	LBB160_28
## %bb.26:                              ##   in Loop: Header=BB160_5 Depth=2
	incl	%r11d
	jmp	LBB160_27
LBB160_30:                              ##   in Loop: Header=BB160_3 Depth=1
	leaq	1(%rax), %r11
	movl	%r11d, 8(%rdi)
	movzbl	(%r9,%rax), %eax
	cmpl	$12, %eax
	jne	LBB160_36
## %bb.31:                              ##   in Loop: Header=BB160_3 Depth=1
	cmpl	%r10d, %r11d
	jge	LBB160_32
## %bb.33:                              ##   in Loop: Header=BB160_3 Depth=1
	leal	2(%rbx), %ecx
	movl	%ecx, 8(%rdi)
	movb	(%r9,%r11), %al
	movl	%ecx, %r11d
	jmp	LBB160_34
LBB160_29:                              ##   in Loop: Header=BB160_3 Depth=1
	xorl	%eax, %eax
	movl	%r11d, %ebx
	jmp	LBB160_36
LBB160_32:                              ##   in Loop: Header=BB160_3 Depth=1
	xorl	%eax, %eax
LBB160_34:                              ##   in Loop: Header=BB160_3 Depth=1
	movzbl	%al, %eax
	orl	$256, %eax                      ## imm = 0x100
	jmp	LBB160_36
LBB160_37:
	movl	%ebx, %eax
	subl	%r8d, %eax
	movl	%eax, %ecx
	orl	%r8d, %ecx
	js	LBB160_45
## %bb.38:
	cmpl	%r8d, %r10d
	jl	LBB160_45
## %bb.39:
	cmpl	%ebx, %r10d
	jl	LBB160_45
## %bb.40:
	movslq	%r8d, %rcx
	addq	%rcx, %r9
	movq	%rax, %rcx
	shlq	$32, %rcx
	movq	%r9, -48(%rbp)
	movq	%rcx, -40(%rbp)
	testl	%edx, %edx
	jle	LBB160_45
## %bb.41:
	testl	%eax, %eax
	jle	LBB160_45
## %bb.42:
	movl	%edx, %r12d
	movl	$1, %ebx
	leaq	-48(%rbp), %r15
	.p2align	4, 0x90
LBB160_43:                              ## =>This Inner Loop Header: Depth=1
	movq	%r15, %rdi
	callq	__ZL14stbtt__cff_intP10stbtt__buf
	movl	%eax, -4(%r14,%rbx,4)
	cmpq	%r12, %rbx
	jae	LBB160_45
## %bb.44:                              ##   in Loop: Header=BB160_43 Depth=1
	incq	%rbx
	movl	-36(%rbp), %eax
	cmpl	%eax, -40(%rbp)
	jl	LBB160_43
	jmp	LBB160_45
LBB160_8:
	callq	__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj.cold.2
	jmp	LBB160_45
LBB160_46:
	callq	__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj.cold.3
LBB160_45:
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB160_1:
	callq	__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj.cold.1
	jmp	LBB160_45
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__cff_get_indexP10stbtt__buf
__ZL20stbtt__cff_get_indexP10stbtt__buf: ## @_ZL20stbtt__cff_get_indexP10stbtt__buf
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	8(%rdi), %edx
	movl	12(%rdi), %r14d
	movslq	%edx, %r11
	movl	%edx, %ebx
	cmpl	%r11d, %r14d
	jle	LBB161_23
## %bb.1:
	movq	(%rdi), %rax
	leaq	1(%r11), %rbx
	movl	%ebx, 8(%rdi)
	movzbl	(%rax,%r11), %eax
	shll	$8, %eax
	xorl	%ecx, %ecx
	cmpl	%r14d, %ebx
	jge	LBB161_3
## %bb.2:
	movq	(%rdi), %rcx
	leal	2(%rdx), %esi
	movl	%esi, 8(%rdi)
	movzbl	(%rcx,%rbx), %ecx
	movl	%esi, %ebx
LBB161_3:
	orl	%ecx, %eax
	je	LBB161_23
## %bb.4:
	cmpl	%r14d, %ebx
	jge	LBB161_29
## %bb.5:
	movq	(%rdi), %r9
	leal	1(%rbx), %ecx
	movl	%ecx, 8(%rdi)
	movslq	%ebx, %rsi
	movzbl	(%r9,%rsi), %r10d
	leal	-5(%r10), %esi
	cmpb	$-5, %sil
	jbe	LBB161_29
## %bb.6:
	imull	%r10d, %eax
	addl	%eax, %ecx
	js	LBB161_31
## %bb.7:
	cmpl	%ecx, %r14d
	jl	LBB161_31
## %bb.8:
	movl	%ecx, 8(%rdi)
	movl	$-1, %r8d
	jle	LBB161_20
## %bb.9:
	movslq	%ecx, %rax
	leaq	1(%rax), %rcx
	movl	%ecx, 8(%rdi)
	movzbl	(%r9,%rax), %r8d
	cmpb	$1, %r10b
	je	LBB161_19
## %bb.10:
	shll	$8, %r8d
	xorl	%eax, %eax
	cmpl	%r14d, %ecx
	jge	LBB161_12
## %bb.11:
	leal	1(%rcx), %esi
	movl	%esi, 8(%rdi)
	movzbl	(%r9,%rcx), %eax
	movl	%esi, %ecx
LBB161_12:
	orl	%eax, %r8d
	cmpb	$2, %r10b
	je	LBB161_19
## %bb.13:
	shll	$8, %r8d
	xorl	%eax, %eax
	cmpl	%r14d, %ecx
	jge	LBB161_15
## %bb.14:
	movslq	%ecx, %rax
	incl	%ecx
	movl	%ecx, 8(%rdi)
	movzbl	(%r9,%rax), %eax
                                        ## kill: def $ecx killed $ecx def $rcx
LBB161_15:
	orl	%eax, %r8d
	cmpb	$3, %r10b
	je	LBB161_19
## %bb.16:
	shll	$8, %r8d
	xorl	%eax, %eax
	cmpl	%r14d, %ecx
	jge	LBB161_18
## %bb.17:
	movslq	%ecx, %rax
	incl	%ecx
	movl	%ecx, 8(%rdi)
	movzbl	(%r9,%rax), %eax
                                        ## kill: def $ecx killed $ecx def $rcx
LBB161_18:
	orl	%eax, %r8d
LBB161_19:
	decl	%r8d
LBB161_20:
	movl	%ecx, %ebx
	addl	%r8d, %ebx
	js	LBB161_32
## %bb.21:
	cmpl	%ebx, %r14d
	jl	LBB161_32
## %bb.22:
	movl	%ebx, 8(%rdi)
LBB161_23:
	movl	%ebx, %ecx
	subl	%edx, %ecx
	movl	%ecx, %eax
	orl	%edx, %eax
	js	LBB161_30
## %bb.24:
	xorl	%eax, %eax
	cmpl	%edx, %r14d
	jl	LBB161_28
## %bb.25:
	movl	$0, %edx
	cmpl	%ebx, %r14d
	jl	LBB161_27
## %bb.26:
	addq	(%rdi), %r11
	shlq	$32, %rcx
	movq	%r11, %rax
	movq	%rcx, %rdx
LBB161_27:
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
LBB161_29:
	callq	__ZL20stbtt__cff_get_indexP10stbtt__buf.cold.1
LBB161_30:
	xorl	%eax, %eax
LBB161_28:
	xorl	%edx, %edx
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
LBB161_31:
	callq	__ZL20stbtt__cff_get_indexP10stbtt__buf.cold.2
	jmp	LBB161_30
LBB161_32:
	callq	__ZL20stbtt__cff_get_indexP10stbtt__buf.cold.3
	jmp	LBB161_30
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _ZL22stbtt__tesselate_curveP12stbtt__pointPifffffffi
LCPI162_0:
	.long	0x3e800000                      ## float 0.25
LCPI162_1:
	.long	0x3f000000                      ## float 0.5
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
__ZL22stbtt__tesselate_curveP12stbtt__pointPifffffffi: ## @_ZL22stbtt__tesselate_curveP12stbtt__pointPifffffffi
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovaps	%xmm5, -64(%rbp)                ## 16-byte Spill
	vmovaps	%xmm4, -48(%rbp)                ## 16-byte Spill
	cmpl	$16, %edx
	jg	LBB162_7
## %bb.1:
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r15
	vinsertps	$16, %xmm2, %xmm3, %xmm9 ## xmm9 = xmm3[0],xmm2[0],xmm3[2,3]
	vinsertps	$16, %xmm0, %xmm1, %xmm2 ## xmm2 = xmm1[0],xmm0[0],xmm1[2,3]
	vaddps	%xmm9, %xmm9, %xmm3
	vaddps	%xmm2, %xmm3, %xmm2
	vmovaps	-64(%rbp), %xmm3                ## 16-byte Reload
	vinsertps	$16, -48(%rbp), %xmm3, %xmm8 ## 16-byte Folded Reload
                                        ## xmm8 = xmm3[0],mem[0],xmm3[2,3]
	incl	%ebx
	vbroadcastss	LCPI162_0(%rip), %xmm3  ## xmm3 = [2.5E-1,2.5E-1,2.5E-1,2.5E-1]
	vmovaps	%xmm3, -96(%rbp)                ## 16-byte Spill
	vmovss	LCPI162_1(%rip), %xmm7          ## xmm7 = mem[0],zero,zero,zero
	vmovss	%xmm6, -28(%rbp)                ## 4-byte Spill
	vmovaps	%xmm8, -80(%rbp)                ## 16-byte Spill
	.p2align	4, 0x90
LBB162_2:                               ## =>This Inner Loop Header: Depth=1
	vaddps	%xmm2, %xmm8, %xmm2
	vmulps	-96(%rbp), %xmm2, %xmm5         ## 16-byte Folded Reload
	vmovshdup	%xmm5, %xmm4            ## xmm4 = xmm5[1,1,3,3]
	vaddss	-64(%rbp), %xmm1, %xmm2         ## 16-byte Folded Reload
	vmulss	%xmm7, %xmm2, %xmm2
	vsubss	%xmm5, %xmm2, %xmm2
	vaddss	-48(%rbp), %xmm0, %xmm3         ## 16-byte Folded Reload
	vmulss	%xmm7, %xmm3, %xmm3
	vsubss	%xmm4, %xmm3, %xmm3
	vmulss	%xmm2, %xmm2, %xmm2
	vmulss	%xmm3, %xmm3, %xmm3
	vaddss	%xmm2, %xmm3, %xmm2
	vucomiss	%xmm6, %xmm2
	jbe	LBB162_4
## %bb.3:                               ##   in Loop: Header=BB162_2 Depth=1
	vmovshdup	%xmm9, %xmm2            ## xmm2 = xmm9[1,1,3,3]
	vaddss	%xmm2, %xmm0, %xmm2
	vmulss	%xmm7, %xmm2, %xmm2
	vaddss	%xmm1, %xmm9, %xmm3
	vmulss	%xmm7, %xmm3, %xmm3
	movq	%r15, %rdi
	movq	%r14, %rsi
	vmovaps	%xmm9, -128(%rbp)               ## 16-byte Spill
	vmovss	-28(%rbp), %xmm6                ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	movl	%ebx, %edx
	vmovaps	%xmm5, -112(%rbp)               ## 16-byte Spill
	vmovaps	%xmm4, -144(%rbp)               ## 16-byte Spill
	callq	__ZL22stbtt__tesselate_curveP12stbtt__pointPifffffffi
	vmovss	LCPI162_1(%rip), %xmm7          ## xmm7 = mem[0],zero,zero,zero
	vmovaps	-80(%rbp), %xmm8                ## 16-byte Reload
	vmovss	-28(%rbp), %xmm6                ## 4-byte Reload
                                        ## xmm6 = mem[0],zero,zero,zero
	vaddps	-128(%rbp), %xmm8, %xmm0        ## 16-byte Folded Reload
	vbroadcastss	LCPI162_1(%rip), %xmm1  ## xmm1 = [5.0E-1,5.0E-1,5.0E-1,5.0E-1]
	vmulps	%xmm1, %xmm0, %xmm9
	vaddps	%xmm9, %xmm9, %xmm0
	vmovaps	-112(%rbp), %xmm1               ## 16-byte Reload
	vaddps	%xmm1, %xmm0, %xmm2
	incl	%ebx
	vmovaps	-144(%rbp), %xmm0               ## 16-byte Reload
	cmpl	$18, %ebx
	jne	LBB162_2
	jmp	LBB162_7
LBB162_4:
	movslq	(%r14), %rax
	testq	%r15, %r15
	je	LBB162_6
## %bb.5:
	vmovaps	-48(%rbp), %xmm0                ## 16-byte Reload
	vmovss	%xmm0, (%r15,%rax,8)
	vmovaps	-64(%rbp), %xmm0                ## 16-byte Reload
	vmovss	%xmm0, 4(%r15,%rax,8)
LBB162_6:
	incl	%eax
	movl	%eax, (%r14)
LBB162_7:
	addq	$120, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _ZL22stbtt__tesselate_cubicP12stbtt__pointPifffffffffi
LCPI163_0:
	.long	0x3f000000                      ## float 0.5
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
__ZL22stbtt__tesselate_cubicP12stbtt__pointPifffffffffi: ## @_ZL22stbtt__tesselate_cubicP12stbtt__pointPifffffffffi
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovaps	%xmm7, -64(%rbp)                ## 16-byte Spill
	vmovaps	%xmm6, -48(%rbp)                ## 16-byte Spill
	cmpl	$16, %edx
	jg	LBB163_7
## %bb.1:
	movl	%edx, %ebx
	vmovaps	%xmm5, %xmm8
	movq	%rsi, %r14
	movq	%rdi, %r15
	vmovss	16(%rbp), %xmm9                 ## xmm9 = mem[0],zero,zero,zero
	vinsertps	$16, %xmm0, %xmm1, %xmm1 ## xmm1 = xmm1[0],xmm0[0],xmm1[2,3]
	vinsertps	$16, %xmm2, %xmm3, %xmm10 ## xmm10 = xmm3[0],xmm2[0],xmm3[2,3]
	vmovaps	-64(%rbp), %xmm0                ## 16-byte Reload
	vinsertps	$16, -48(%rbp), %xmm0, %xmm0 ## 16-byte Folded Reload
                                        ## xmm0 = xmm0[0],mem[0],xmm0[2,3]
	vmovaps	%xmm0, -80(%rbp)                ## 16-byte Spill
	incl	%ebx
	.p2align	4, 0x90
LBB163_2:                               ## =>This Inner Loop Header: Depth=1
	vmovshdup	%xmm1, %xmm0            ## xmm0 = xmm1[1,1,3,3]
	vmovaps	-48(%rbp), %xmm6                ## 16-byte Reload
	vsubss	%xmm0, %xmm6, %xmm2
	vmovaps	-64(%rbp), %xmm5                ## 16-byte Reload
	vsubss	%xmm1, %xmm5, %xmm3
	vmulss	%xmm3, %xmm3, %xmm3
	vmulss	%xmm2, %xmm2, %xmm2
	vaddss	%xmm3, %xmm2, %xmm2
	vsqrtss	%xmm2, %xmm2, %xmm2
	vsubss	%xmm4, %xmm6, %xmm3
	vsubss	%xmm8, %xmm5, %xmm5
	vmulss	%xmm5, %xmm5, %xmm5
	vmulss	%xmm3, %xmm3, %xmm3
	vaddss	%xmm5, %xmm3, %xmm3
	vsqrtss	%xmm3, %xmm3, %xmm3
	vmovshdup	%xmm10, %xmm5           ## xmm5 = xmm10[1,1,3,3]
	vinsertps	$16, %xmm4, %xmm5, %xmm5 ## xmm5 = xmm5[0],xmm4[0],xmm5[2,3]
	vinsertps	$76, %xmm1, %xmm10, %xmm6 ## xmm6 = xmm1[1],xmm10[1],zero,zero
	vsubps	%xmm6, %xmm5, %xmm5
	vinsertps	$16, %xmm8, %xmm10, %xmm6 ## xmm6 = xmm10[0],xmm8[0],xmm10[2,3]
	vinsertps	$28, %xmm10, %xmm1, %xmm7 ## xmm7 = xmm1[0],xmm10[0],zero,zero
	vsubps	%xmm7, %xmm6, %xmm6
	vmulps	%xmm6, %xmm6, %xmm6
	vmulps	%xmm5, %xmm5, %xmm5
	vaddps	%xmm6, %xmm5, %xmm5
	vsqrtps	%xmm5, %xmm5
	vmovshdup	%xmm5, %xmm6            ## xmm6 = xmm5[1,1,3,3]
	vaddss	%xmm6, %xmm5, %xmm5
	vaddss	%xmm5, %xmm3, %xmm3
	vmulss	%xmm2, %xmm2, %xmm2
	vmulss	%xmm3, %xmm3, %xmm3
	vsubss	%xmm2, %xmm3, %xmm2
	vucomiss	%xmm9, %xmm2
	jbe	LBB163_4
## %bb.3:                               ##   in Loop: Header=BB163_2 Depth=1
	vaddps	%xmm1, %xmm10, %xmm2
	vinsertps	$16, %xmm4, %xmm8, %xmm3 ## xmm3 = xmm8[0],xmm4[0],xmm8[2,3]
	vaddps	%xmm3, %xmm10, %xmm4
	vaddps	-80(%rbp), %xmm3, %xmm5         ## 16-byte Folded Reload
	vbroadcastss	LCPI163_0(%rip), %xmm6  ## xmm6 = [5.0E-1,5.0E-1,5.0E-1,5.0E-1]
	vmulps	%xmm6, %xmm2, %xmm3
	vmulps	%xmm6, %xmm4, %xmm2
	vmulps	%xmm6, %xmm5, %xmm7
	vmovaps	%xmm7, -128(%rbp)               ## 16-byte Spill
	vaddps	%xmm2, %xmm3, %xmm4
	vmulps	%xmm6, %xmm4, %xmm5
	vaddps	%xmm7, %xmm2, %xmm2
	vmulps	%xmm6, %xmm2, %xmm2
	vmovaps	%xmm2, -112(%rbp)               ## 16-byte Spill
	vaddps	%xmm2, %xmm5, %xmm2
	vmulps	%xmm6, %xmm2, %xmm2
	vmovshdup	%xmm2, %xmm6            ## xmm6 = xmm2[1,1,3,3]
	vmovaps	%xmm2, %xmm7
	vmovaps	%xmm2, -96(%rbp)                ## 16-byte Spill
	vmovshdup	%xmm5, %xmm4            ## xmm4 = xmm5[1,1,3,3]
	vmovshdup	%xmm3, %xmm2            ## xmm2 = xmm3[1,1,3,3]
	vmovss	%xmm9, (%rsp)
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	callq	__ZL22stbtt__tesselate_cubicP12stbtt__pointPifffffffffi
	vmovaps	-112(%rbp), %xmm10              ## 16-byte Reload
	vmovss	16(%rbp), %xmm9                 ## xmm9 = mem[0],zero,zero,zero
	vmovaps	-128(%rbp), %xmm8               ## 16-byte Reload
	vmovshdup	%xmm8, %xmm4            ## xmm4 = xmm8[1,1,3,3]
	incl	%ebx
	vmovaps	-96(%rbp), %xmm1                ## 16-byte Reload
	cmpl	$18, %ebx
	jne	LBB163_2
	jmp	LBB163_7
LBB163_4:
	movslq	(%r14), %rax
	testq	%r15, %r15
	je	LBB163_6
## %bb.5:
	vmovaps	-48(%rbp), %xmm0                ## 16-byte Reload
	vmovss	%xmm0, (%r15,%rax,8)
	vmovaps	-64(%rbp), %xmm0                ## 16-byte Reload
	vmovss	%xmm0, 4(%r15,%rax,8)
LBB163_6:
	incl	%eax
	movl	%eax, (%r14)
LBB163_7:
	addq	$120, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL27stbtt__sort_edges_quicksortP11stbtt__edgei
__ZL27stbtt__sort_edges_quicksortP11stbtt__edgei: ## @_ZL27stbtt__sort_edges_quicksortP11stbtt__edgei
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	cmpl	$13, %esi
	jl	LBB164_15
## %bb.1:
	movl	%esi, %r14d
	movq	%rdi, %r15
	xorl	%r13d, %r13d
	jmp	LBB164_2
	.p2align	4, 0x90
LBB164_13:                              ##   in Loop: Header=BB164_2 Depth=1
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	__ZL27stbtt__sort_edges_quicksortP11stbtt__edgei
	movl	%r12d, %r14d
	cmpl	$12, %r14d
	jle	LBB164_15
LBB164_2:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB164_5 Depth 2
                                        ##       Child Loop BB164_6 Depth 3
                                        ##       Child Loop BB164_8 Depth 3
	movl	%r14d, %eax
	shrl	%eax
	vmovss	4(%r15), %xmm0                  ## xmm0 = mem[0],zero,zero,zero
	leaq	(%rax,%rax,4), %rax
	leaq	(%r15,%rax,4), %rcx
	vmovss	4(%r15,%rax,4), %xmm3           ## xmm3 = mem[0],zero,zero,zero
	leal	-1(%r14), %eax
	leaq	(%rax,%rax,4), %rdx
	vmovss	4(%r15,%rdx,4), %xmm1           ## xmm1 = mem[0],zero,zero,zero
	vcmpltps	%xmm1, %xmm3, %xmm2
	vcmpnltps	%xmm3, %xmm0, %xmm3
	vxorps	%xmm2, %xmm3, %xmm3
	vmovd	%xmm3, %edx
	testb	$1, %dl
	jne	LBB164_4
## %bb.3:                               ##   in Loop: Header=BB164_2 Depth=1
	vcmpnltps	%xmm1, %xmm0, %xmm0
	vxorps	%xmm2, %xmm0, %xmm0
	vmovd	%xmm0, %edx
	testb	$1, %dl
	movq	%rax, %rdx
	cmovneq	%r13, %rdx
	leaq	(%rdx,%rdx,4), %rdx
	movl	16(%r15,%rdx,4), %esi
	movl	%esi, -48(%rbp)
	vmovups	(%r15,%rdx,4), %xmm0
	vmovaps	%xmm0, -64(%rbp)
	movl	16(%rcx), %esi
	movl	%esi, 16(%r15,%rdx,4)
	vmovups	(%rcx), %xmm0
	vmovups	%xmm0, (%r15,%rdx,4)
	movl	-48(%rbp), %edx
	movl	%edx, 16(%rcx)
	vmovaps	-64(%rbp), %xmm0
	vmovups	%xmm0, (%rcx)
LBB164_4:                               ##   in Loop: Header=BB164_2 Depth=1
	movl	16(%r15), %edx
	movl	%edx, -48(%rbp)
	vmovups	(%r15), %xmm0
	vmovaps	%xmm0, -64(%rbp)
	movl	16(%rcx), %edx
	movl	%edx, 16(%r15)
	vmovups	(%rcx), %xmm0
	vmovups	%xmm0, (%r15)
	movl	-48(%rbp), %edx
	movl	%edx, 16(%rcx)
	vmovaps	-64(%rbp), %xmm0
	vmovups	%xmm0, (%rcx)
	leaq	20(%r15), %rcx
	movl	$1, %edx
	.p2align	4, 0x90
LBB164_5:                               ##   Parent Loop BB164_2 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB164_6 Depth 3
                                        ##       Child Loop BB164_8 Depth 3
	vmovss	4(%r15), %xmm0                  ## xmm0 = mem[0],zero,zero,zero
	movslq	%edx, %rdx
	leal	-1(%rdx), %esi
	leaq	(%rdx,%rdx,4), %rdi
	leaq	-20(,%rdi,4), %rbx
	.p2align	4, 0x90
LBB164_6:                               ##   Parent Loop BB164_2 Depth=1
                                        ##     Parent Loop BB164_5 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	incq	%rdx
	incl	%esi
	vucomiss	24(%r15,%rbx), %xmm0
	leaq	20(%rbx), %rbx
	ja	LBB164_6
## %bb.7:                               ##   in Loop: Header=BB164_5 Depth=2
	movslq	%eax, %rdi
	leaq	(%rdi,%rdi,4), %rdi
	leaq	(%rcx,%rdi,4), %rdi
	.p2align	4, 0x90
LBB164_8:                               ##   Parent Loop BB164_2 Depth=1
                                        ##     Parent Loop BB164_5 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovss	-16(%rdi), %xmm1                ## xmm1 = mem[0],zero,zero,zero
	decl	%eax
	addq	$-20, %rdi
	vucomiss	%xmm0, %xmm1
	ja	LBB164_8
## %bb.9:                               ##   in Loop: Header=BB164_5 Depth=2
	leal	1(%rax), %r12d
	cmpl	%r12d, %esi
	jge	LBB164_11
## %bb.10:                              ##   in Loop: Header=BB164_5 Depth=2
	movl	16(%r15,%rbx), %esi
	movl	%esi, -48(%rbp)
	vmovups	(%r15,%rbx), %xmm0
	vmovaps	%xmm0, -64(%rbp)
	movl	16(%rdi), %esi
	movl	%esi, 16(%r15,%rbx)
	vmovups	(%rdi), %xmm0
	vmovups	%xmm0, (%r15,%rbx)
	movl	-48(%rbp), %esi
	movl	%esi, 16(%rdi)
	vmovaps	-64(%rbp), %xmm0
	vmovups	%xmm0, (%rdi)
	jmp	LBB164_5
	.p2align	4, 0x90
LBB164_11:                              ##   in Loop: Header=BB164_2 Depth=1
	subl	%esi, %r14d
	addq	%r15, %rbx
	cmpl	%r12d, %r14d
	jle	LBB164_13
## %bb.12:                              ##   in Loop: Header=BB164_2 Depth=1
	movq	%r15, %rdi
	movl	%r12d, %esi
	callq	__ZL27stbtt__sort_edges_quicksortP11stbtt__edgei
	movq	%rbx, %r15
	cmpl	$12, %r14d
	jg	LBB164_2
LBB164_15:
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff
LCPI165_0:
	.long	0xbf000000                      ## float -0.5
LCPI165_1:
	.long	0x3f800000                      ## float 1
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff: ## @_ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
                                        ## kill: def $esi killed $esi def $rsi
	vucomiss	%xmm3, %xmm1
	jne	LBB165_1
	jp	LBB165_1
LBB165_37:
	popq	%rbp
	retq
LBB165_1:
	vucomiss	%xmm1, %xmm3
	jbe	LBB165_38
## %bb.2:
	vmovss	24(%rdx), %xmm4                 ## xmm4 = mem[0],zero,zero,zero
	vmovss	28(%rdx), %xmm5                 ## xmm5 = mem[0],zero,zero,zero
	vucomiss	%xmm4, %xmm5
	jb	LBB165_39
## %bb.3:
	vucomiss	%xmm5, %xmm1
	ja	LBB165_37
## %bb.4:
	vucomiss	%xmm3, %xmm4
	ja	LBB165_37
## %bb.5:
	vucomiss	%xmm1, %xmm4
	jbe	LBB165_6
## %bb.7:
	vsubss	%xmm0, %xmm2, %xmm6
	vsubss	%xmm1, %xmm4, %xmm7
	vmulss	%xmm7, %xmm6, %xmm6
	vsubss	%xmm1, %xmm3, %xmm1
	vdivss	%xmm1, %xmm6, %xmm1
	vaddss	%xmm0, %xmm1, %xmm0
	vucomiss	%xmm5, %xmm3
	ja	LBB165_10
LBB165_9:
	vmovaps	%xmm3, %xmm5
	jmp	LBB165_11
LBB165_6:
	vmovaps	%xmm1, %xmm4
	vucomiss	%xmm5, %xmm3
	jbe	LBB165_9
LBB165_10:
	vsubss	%xmm0, %xmm2, %xmm1
	vsubss	%xmm3, %xmm5, %xmm6
	vmulss	%xmm1, %xmm6, %xmm1
	vsubss	%xmm4, %xmm3, %xmm3
	vdivss	%xmm3, %xmm1, %xmm1
	vaddss	%xmm2, %xmm1, %xmm2
LBB165_11:
	vcvtsi2ss	%esi, %xmm8, %xmm1
	vucomiss	%xmm1, %xmm0
	leal	1(%rsi), %eax
	vcvtsi2ss	%eax, %xmm8, %xmm3
	jne	LBB165_14
	jp	LBB165_14
## %bb.12:
	vucomiss	%xmm2, %xmm3
	jae	LBB165_26
## %bb.13:
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.3
	popq	%rbp
	retq
LBB165_14:
	vucomiss	%xmm3, %xmm0
	jne	LBB165_17
	jp	LBB165_17
## %bb.15:
	vucomiss	%xmm1, %xmm2
	jae	LBB165_26
## %bb.16:
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.5
	popq	%rbp
	retq
LBB165_17:
	vucomiss	%xmm0, %xmm1
	jae	LBB165_18
## %bb.20:
	vucomiss	%xmm3, %xmm0
	jae	LBB165_21
## %bb.23:
	vucomiss	%xmm2, %xmm3
	setb	%al
	vucomiss	%xmm1, %xmm2
	jb	LBB165_24
## %bb.25:
	testb	%al, %al
	je	LBB165_26
LBB165_40:
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.6
	popq	%rbp
	retq
LBB165_18:
	vucomiss	%xmm2, %xmm1
	jae	LBB165_26
## %bb.19:
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.8
	popq	%rbp
	retq
LBB165_21:
	vucomiss	%xmm3, %xmm2
	jb	LBB165_22
LBB165_26:
	vucomiss	%xmm0, %xmm1
	jb	LBB165_29
## %bb.27:
	vucomiss	%xmm2, %xmm1
	jb	LBB165_29
## %bb.28:
	vsubss	%xmm4, %xmm5, %xmm0
	vmulss	20(%rdx), %xmm0, %xmm0
	jmp	LBB165_36
LBB165_29:
	vucomiss	%xmm3, %xmm0
	jb	LBB165_31
## %bb.30:
	vucomiss	%xmm3, %xmm2
	jae	LBB165_37
LBB165_31:
	vucomiss	%xmm1, %xmm0
	jb	LBB165_41
## %bb.32:
	vucomiss	%xmm0, %xmm3
	jb	LBB165_41
## %bb.33:
	vucomiss	%xmm1, %xmm2
	jb	LBB165_41
## %bb.34:
	vucomiss	%xmm2, %xmm3
	jb	LBB165_41
## %bb.35:
	vsubss	%xmm4, %xmm5, %xmm3
	vmulss	20(%rdx), %xmm3, %xmm3
	vsubss	%xmm1, %xmm0, %xmm0
	vsubss	%xmm1, %xmm2, %xmm1
	vaddss	%xmm1, %xmm0, %xmm0
	vmulss	LCPI165_0(%rip), %xmm0, %xmm0
	vaddss	LCPI165_1(%rip), %xmm0, %xmm0
	vmulss	%xmm0, %xmm3, %xmm0
LBB165_36:
	movslq	%esi, %rax
	vaddss	(%rdi,%rax,4), %xmm0, %xmm0
	vmovss	%xmm0, (%rdi,%rax,4)
	popq	%rbp
	retq
LBB165_38:
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.1
	popq	%rbp
	retq
LBB165_39:
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.2
	popq	%rbp
	retq
LBB165_41:
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.4
	popq	%rbp
	retq
LBB165_24:
	movb	$1, %al
	testb	%al, %al
	je	LBB165_26
	jmp	LBB165_40
LBB165_22:
	callq	__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.7
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL13stbtt__isfontPh
__ZL13stbtt__isfontPh:                  ## @_ZL13stbtt__isfontPh
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movb	(%rdi), %al
	cmpb	$78, %al
	jg	LBB166_7
## %bb.1:
	testb	%al, %al
	je	LBB166_16
## %bb.2:
	cmpb	$49, %al
	jne	LBB166_22
## %bb.3:
	cmpb	$0, 1(%rdi)
	jne	LBB166_22
## %bb.4:
	cmpb	$0, 2(%rdi)
	jne	LBB166_22
## %bb.5:
	cmpb	$0, 3(%rdi)
	jne	LBB166_22
## %bb.6:
	movl	$1, %eax
	popq	%rbp
	retq
LBB166_7:
	cmpb	$79, %al
	je	LBB166_13
## %bb.8:
	cmpb	$116, %al
	jne	LBB166_22
## %bb.9:
	movb	1(%rdi), %al
	cmpb	$114, %al
	je	LBB166_20
## %bb.10:
	cmpb	$121, %al
	jne	LBB166_22
## %bb.11:
	cmpb	$112, 2(%rdi)
	jne	LBB166_22
## %bb.12:
	movl	$1, %eax
	cmpb	$49, 3(%rdi)
	je	LBB166_23
	jmp	LBB166_22
LBB166_16:
	cmpb	$1, 1(%rdi)
	jne	LBB166_22
## %bb.17:
	cmpb	$0, 2(%rdi)
	jne	LBB166_22
## %bb.18:
	cmpb	$0, 3(%rdi)
	jne	LBB166_22
## %bb.19:
	movl	$1, %eax
	popq	%rbp
	retq
LBB166_13:
	cmpb	$84, 1(%rdi)
	jne	LBB166_22
## %bb.14:
	cmpb	$84, 2(%rdi)
	jne	LBB166_22
## %bb.15:
	movl	$1, %eax
	cmpb	$79, 3(%rdi)
	jne	LBB166_22
LBB166_23:
	popq	%rbp
	retq
LBB166_20:
	cmpb	$117, 2(%rdi)
	jne	LBB166_22
## %bb.21:
	movl	$1, %eax
	cmpb	$101, 3(%rdi)
	je	LBB166_23
LBB166_22:
	xorl	%eax, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL16stbtt__matchpairPhjS_iii
__ZL16stbtt__matchpairPhjS_iii:         ## @_ZL16stbtt__matchpairPhjS_iii
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -68(%rbp)                 ## 4-byte Spill
	movl	%ecx, -44(%rbp)                 ## 4-byte Spill
	movq	%rdx, -64(%rbp)                 ## 8-byte Spill
	movl	%esi, %ecx
	movzwl	2(%rdi,%rcx), %edx
	rolw	$8, %dx
	xorl	%eax, %eax
	testw	%dx, %dx
	je	LBB167_21
## %bb.1:
	movl	%esi, %r14d
	movq	%rdi, %r15
	movzwl	4(%rdi,%rcx), %ecx
	rolw	$8, %cx
	movzwl	%dx, %edx
	movzwl	%cx, %eax
	addl	%esi, %eax
	addl	$6, %r14d
	cltq
	addq	%rdi, %rax
	movq	%rax, -88(%rbp)                 ## 8-byte Spill
	movq	%rdx, -96(%rbp)                 ## 8-byte Spill
	movq	%rdx, %rdi
	negq	%rdi
	movl	$1, %ebx
	movl	%r8d, -52(%rbp)                 ## 4-byte Spill
	movq	%rdi, -80(%rbp)                 ## 8-byte Spill
	jmp	LBB167_4
	.p2align	4, 0x90
LBB167_2:                               ##   in Loop: Header=BB167_4 Depth=1
	cmpl	-44(%rbp), %esi                 ## 4-byte Folded Reload
	je	LBB167_19
LBB167_3:                               ##   in Loop: Header=BB167_4 Depth=1
	addl	$12, %r14d
	leaq	(%rdi,%rbx), %rax
	incq	%rax
	incq	%rbx
	cmpq	$1, %rax
	je	LBB167_20
LBB167_4:                               ## =>This Inner Loop Header: Depth=1
	movl	%r14d, %r14d
	movzwl	6(%r15,%r14), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	cmpl	%r8d, %eax
	jne	LBB167_3
## %bb.5:                               ##   in Loop: Header=BB167_4 Depth=1
	movzwl	(%r15,%r14), %r13d
	movzwl	2(%r15,%r14), %r12d
	rolw	$8, %r13w
	rolw	$8, %r12w
	movzwl	4(%r15,%r14), %eax
	movw	%ax, -46(%rbp)                  ## 2-byte Spill
	testw	%r13w, %r13w
	je	LBB167_8
## %bb.6:                               ##   in Loop: Header=BB167_4 Depth=1
	cmpw	$3, %r13w
	sete	%al
	cmpw	$1, %r12w
	sete	%dl
	cmpw	$10, %r12w
	sete	%cl
	testb	%dl, %al
	jne	LBB167_8
## %bb.7:                               ##   in Loop: Header=BB167_4 Depth=1
	andb	%cl, %al
	je	LBB167_3
LBB167_8:                               ##   in Loop: Header=BB167_4 Depth=1
	movzwl	8(%r15,%r14), %eax
	movzwl	10(%r15,%r14), %edx
	rolw	$8, %ax
	movzwl	%ax, %ecx
	rolw	$8, %dx
	movzwl	%dx, %edx
	addq	-88(%rbp), %rdx                 ## 8-byte Folded Reload
	movq	-64(%rbp), %rdi                 ## 8-byte Reload
	movl	-44(%rbp), %esi                 ## 4-byte Reload
	callq	__ZL42stbtt__CompareUTF8toUTF16_bigendian_prefixPhiS_i
	movq	-80(%rbp), %rdi                 ## 8-byte Reload
	movl	-52(%rbp), %r8d                 ## 4-byte Reload
	testl	%eax, %eax
	js	LBB167_3
## %bb.9:                               ##   in Loop: Header=BB167_4 Depth=1
	movl	%eax, %esi
	cmpq	-96(%rbp), %rbx                 ## 8-byte Folded Reload
	jae	LBB167_2
## %bb.10:                              ##   in Loop: Header=BB167_4 Depth=1
	movzwl	18(%r15,%r14), %eax
	rolw	$8, %ax
	movzwl	%ax, %eax
	cmpl	-68(%rbp), %eax                 ## 4-byte Folded Reload
	jne	LBB167_2
## %bb.11:                              ##   in Loop: Header=BB167_4 Depth=1
	movzwl	12(%r15,%r14), %eax
	rolw	$8, %ax
	cmpw	%r13w, %ax
	jne	LBB167_2
## %bb.12:                              ##   in Loop: Header=BB167_4 Depth=1
	movzwl	14(%r15,%r14), %eax
	rolw	$8, %ax
	cmpw	%r12w, %ax
	jne	LBB167_2
## %bb.13:                              ##   in Loop: Header=BB167_4 Depth=1
	movzwl	-46(%rbp), %ecx                 ## 2-byte Folded Reload
	rolw	$8, %cx
	movzwl	16(%r15,%r14), %eax
	rolw	$8, %ax
	cmpw	%cx, %ax
	jne	LBB167_2
## %bb.14:                              ##   in Loop: Header=BB167_4 Depth=1
	movzwl	20(%r15,%r14), %eax
	rolw	$8, %ax
	testw	%ax, %ax
	je	LBB167_2
## %bb.15:                              ##   in Loop: Header=BB167_4 Depth=1
	cmpl	-44(%rbp), %esi                 ## 4-byte Folded Reload
	jge	LBB167_3
## %bb.16:                              ##   in Loop: Header=BB167_4 Depth=1
	movl	%esi, %r9d
	movq	-64(%rbp), %rcx                 ## 8-byte Reload
	cmpb	$32, (%rcx,%r9)
	jne	LBB167_3
## %bb.17:                              ##   in Loop: Header=BB167_4 Depth=1
	movzwl	22(%r15,%r14), %edx
	movzwl	%ax, %ecx
	rolw	$8, %dx
	movzwl	%dx, %edx
	movq	-64(%rbp), %rax                 ## 8-byte Reload
	leaq	(%r9,%rax), %rdi
	incq	%rdi
	notl	%esi
	addl	-44(%rbp), %esi                 ## 4-byte Folded Reload
	addq	-88(%rbp), %rdx                 ## 8-byte Folded Reload
	movl	%esi, %r12d
	callq	__ZL42stbtt__CompareUTF8toUTF16_bigendian_prefixPhiS_i
	movq	-80(%rbp), %rdi                 ## 8-byte Reload
	movl	-52(%rbp), %r8d                 ## 4-byte Reload
	cmpl	%r12d, %eax
	jne	LBB167_3
LBB167_19:
	movl	$1, %eax
	jmp	LBB167_21
LBB167_20:
	xorl	%eax, %eax
LBB167_21:
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL42stbtt__CompareUTF8toUTF16_bigendian_prefixPhiS_i
__ZL42stbtt__CompareUTF8toUTF16_bigendian_prefixPhiS_i: ## @_ZL42stbtt__CompareUTF8toUTF16_bigendian_prefixPhiS_i
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	testl	%ecx, %ecx
	je	LBB168_1
## %bb.2:
	xorl	%r8d, %r8d
	jmp	LBB168_3
LBB168_18:                              ##   in Loop: Header=BB168_3 Depth=1
	addq	$2, %rdx
	addl	$4, %r8d
	addl	$-2, %ecx
	.p2align	4, 0x90
LBB168_25:                              ##   in Loop: Header=BB168_3 Depth=1
	addq	$2, %rdx
	movl	%r8d, %eax
	addl	$-2, %ecx
	je	LBB168_26
LBB168_3:                               ## =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %ebx
	movl	%ebx, %r9d
	shll	$8, %r9d
	movzbl	1(%rdx), %r10d
	orl	%r10d, %r9d
	cmpl	$127, %r9d
	ja	LBB168_7
## %bb.4:                               ##   in Loop: Header=BB168_3 Depth=1
	movl	$-1, %eax
	cmpl	%esi, %r8d
	jge	LBB168_26
## %bb.5:                               ##   in Loop: Header=BB168_3 Depth=1
	movslq	%r8d, %rbx
	movzbl	(%rdi,%rbx), %ebx
	cmpl	%ebx, %r9d
	jne	LBB168_26
## %bb.6:                               ##   in Loop: Header=BB168_3 Depth=1
	incl	%r8d
	jmp	LBB168_25
	.p2align	4, 0x90
LBB168_7:                               ##   in Loop: Header=BB168_3 Depth=1
	cmpl	$2047, %r9d                     ## imm = 0x7FF
	ja	LBB168_12
## %bb.8:                               ##   in Loop: Header=BB168_3 Depth=1
	movslq	%r8d, %rbx
	leaq	1(%rbx), %r11
	movl	$-1, %eax
	cmpl	%esi, %r11d
	jge	LBB168_26
## %bb.9:                               ##   in Loop: Header=BB168_3 Depth=1
	movzbl	(%rdi,%rbx), %ebx
	shrl	$6, %r9d
	addl	$192, %r9d
	cmpl	%ebx, %r9d
	jne	LBB168_26
## %bb.10:                              ##   in Loop: Header=BB168_3 Depth=1
	movzbl	(%rdi,%r11), %ebx
	andl	$63, %r10d
	orl	$128, %r10d
	cmpl	%ebx, %r10d
	jne	LBB168_26
## %bb.11:                              ##   in Loop: Header=BB168_3 Depth=1
	addl	$2, %r8d
	jmp	LBB168_25
	.p2align	4, 0x90
LBB168_12:                              ##   in Loop: Header=BB168_3 Depth=1
	movl	%ebx, %r14d
	andl	$-4, %r14d
	movslq	%r8d, %r11
	cmpl	$216, %r14d
	jne	LBB168_19
## %bb.13:                              ##   in Loop: Header=BB168_3 Depth=1
	leaq	3(%r11), %r10
	movl	$-1, %eax
	cmpl	%esi, %r10d
	jge	LBB168_26
## %bb.14:                              ##   in Loop: Header=BB168_3 Depth=1
	movzwl	2(%rdx), %ebx
	rolw	$8, %bx
	movzwl	%bx, %r14d
	shll	$10, %r9d
	leal	(%r14,%r9), %r12d
	addl	$-56613888, %r12d               ## imm = 0xFCA02400
	movzbl	(%rdi,%r11), %r15d
	movl	%r12d, %ebx
	shrl	$18, %ebx
	addl	$240, %ebx
	cmpl	%r15d, %ebx
	jne	LBB168_26
## %bb.15:                              ##   in Loop: Header=BB168_3 Depth=1
	movzbl	1(%r11,%rdi), %r15d
	movl	%r12d, %ebx
	shrl	$12, %ebx
	andl	$63, %ebx
	orl	$128, %ebx
	cmpl	%r15d, %ebx
	jne	LBB168_26
## %bb.16:                              ##   in Loop: Header=BB168_3 Depth=1
	movzbl	2(%r11,%rdi), %ebx
	shrl	$6, %r12d
	andl	$63, %r12d
	orl	$128, %r12d
	cmpl	%ebx, %r12d
	jne	LBB168_26
## %bb.17:                              ##   in Loop: Header=BB168_3 Depth=1
	addl	%r9d, %r14d
	movzbl	(%rdi,%r10), %ebx
	andl	$63, %r14d
	orl	$128, %r14d
	cmpl	%ebx, %r14d
	je	LBB168_18
	jmp	LBB168_26
LBB168_19:                              ##   in Loop: Header=BB168_3 Depth=1
	movl	$-1, %eax
	cmpl	$220, %r14d
	je	LBB168_26
## %bb.20:                              ##   in Loop: Header=BB168_3 Depth=1
	leaq	2(%r11), %r14
	cmpl	%esi, %r14d
	jge	LBB168_26
## %bb.21:                              ##   in Loop: Header=BB168_3 Depth=1
	movzbl	(%rdi,%r11), %r15d
	shrl	$4, %ebx
	orl	$224, %ebx
	cmpl	%r15d, %ebx
	jne	LBB168_26
## %bb.22:                              ##   in Loop: Header=BB168_3 Depth=1
	movzbl	1(%r11,%rdi), %ebx
	shrl	$6, %r9d
	andl	$63, %r9d
	orl	$128, %r9d
	cmpl	%ebx, %r9d
	jne	LBB168_26
## %bb.23:                              ##   in Loop: Header=BB168_3 Depth=1
	movzbl	(%rdi,%r14), %ebx
	andl	$63, %r10d
	orl	$128, %r10d
	cmpl	%ebx, %r10d
	jne	LBB168_26
## %bb.24:                              ##   in Loop: Header=BB168_3 Depth=1
	addl	$3, %r8d
	jmp	LBB168_25
LBB168_1:
	xorl	%eax, %eax
LBB168_26:
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL16stbi__stdio_readPvPci
__ZL16stbi__stdio_readPvPci:            ## @_ZL16stbi__stdio_readPvPci
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movslq	%edx, %rdx
	movl	$1, %esi
	movq	%rax, %rdi
	popq	%rbp
	jmp	_fread                          ## TAILCALL
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL16stbi__stdio_skipPvi
__ZL16stbi__stdio_skipPvi:              ## @_ZL16stbi__stdio_skipPvi
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	movslq	%esi, %rsi
	movl	$1, %edx
	callq	_fseek
	movq	%rbx, %rdi
	callq	_fgetc
	cmpl	$-1, %eax
	je	LBB170_1
## %bb.2:
	movl	%eax, %edi
	movq	%rbx, %rsi
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	jmp	_ungetc                         ## TAILCALL
LBB170_1:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL15stbi__stdio_eofPv
__ZL15stbi__stdio_eofPv:                ## @_ZL15stbi__stdio_eofPv
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	_feof
	movl	%eax, %ecx
	movl	$1, %eax
	testl	%ecx, %ecx
	je	LBB171_1
## %bb.2:
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
LBB171_1:
	movq	%rbx, %rdi
	callq	_ferror
	movl	%eax, %ecx
	xorl	%eax, %eax
	testl	%ecx, %ecx
	setne	%al
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal4,4byte_literals
	.p2align	2                               ## -- Begin function _ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi
LCPI172_0:
	.long	77                              ## 0x4d
LCPI172_1:
	.long	150                             ## 0x96
LCPI172_2:
	.long	29                              ## 0x1d
	.section	__TEXT,__const
	.p2align	5
LCPI172_3:
	.byte	1                               ## 0x1
	.byte	2                               ## 0x2
	.byte	5                               ## 0x5
	.byte	6                               ## 0x6
	.byte	9                               ## 0x9
	.byte	10                              ## 0xa
	.byte	13                              ## 0xd
	.byte	14                              ## 0xe
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	17                              ## 0x11
	.byte	18                              ## 0x12
	.byte	21                              ## 0x15
	.byte	22                              ## 0x16
	.byte	25                              ## 0x19
	.byte	26                              ## 0x1a
	.byte	29                              ## 0x1d
	.byte	30                              ## 0x1e
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_7:
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
	.byte	16                              ## 0x10
	.byte	17                              ## 0x11
	.byte	20                              ## 0x14
	.byte	21                              ## 0x15
	.byte	24                              ## 0x18
	.byte	25                              ## 0x19
	.byte	28                              ## 0x1c
	.byte	29                              ## 0x1d
	.byte	18                              ## 0x12
	.byte	19                              ## 0x13
	.byte	22                              ## 0x16
	.byte	23                              ## 0x17
	.byte	26                              ## 0x1a
	.byte	27                              ## 0x1b
	.byte	30                              ## 0x1e
	.byte	31                              ## 0x1f
LCPI172_8:
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
LCPI172_9:
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_10:
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_11:
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	16                              ## 0x10
	.byte	17                              ## 0x11
	.byte	20                              ## 0x14
	.byte	21                              ## 0x15
	.byte	24                              ## 0x18
	.byte	25                              ## 0x19
	.byte	28                              ## 0x1c
	.byte	29                              ## 0x1d
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_12:
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
LCPI172_13:
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
LCPI172_14:
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
LCPI172_15:
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	16                              ## 0x10
	.byte	17                              ## 0x11
	.byte	20                              ## 0x14
	.byte	21                              ## 0x15
	.byte	24                              ## 0x18
	.byte	25                              ## 0x19
	.byte	28                              ## 0x1c
	.byte	29                              ## 0x1d
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_17:
	.space	4
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.space	4
	.long	1                               ## 0x1
	.long	1                               ## 0x1
	.space	4
	.long	2                               ## 0x2
LCPI172_18:
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.space	1
	.space	1
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.space	1
	.space	1
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.space	1
	.space	1
	.byte	16                              ## 0x10
	.byte	17                              ## 0x11
	.space	1
	.space	1
	.byte	22                              ## 0x16
	.byte	23                              ## 0x17
	.byte	18                              ## 0x12
	.byte	19                              ## 0x13
	.space	1
	.space	1
	.byte	24                              ## 0x18
	.byte	25                              ## 0x19
	.byte	20                              ## 0x14
	.byte	21                              ## 0x15
	.space	1
	.space	1
LCPI172_19:
	.space	1
	.space	1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.space	1
	.space	1
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
LCPI172_20:
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
LCPI172_21:
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
LCPI172_22:
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
LCPI172_23:
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
LCPI172_24:
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	22                              ## 0x16
	.byte	23                              ## 0x17
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	24                              ## 0x18
	.byte	25                              ## 0x19
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
LCPI172_25:
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	20                              ## 0x14
	.byte	21                              ## 0x15
	.byte	22                              ## 0x16
	.byte	23                              ## 0x17
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	22                              ## 0x16
	.byte	23                              ## 0x17
	.byte	24                              ## 0x18
	.byte	25                              ## 0x19
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	24                              ## 0x18
	.byte	25                              ## 0x19
	.byte	26                              ## 0x1a
	.byte	27                              ## 0x1b
LCPI172_27:
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_36:
	.short	77                              ## 0x4d
	.space	2
	.short	77                              ## 0x4d
	.space	2
	.short	77                              ## 0x4d
	.space	2
	.short	77                              ## 0x4d
	.space	2
	.short	77                              ## 0x4d
	.space	2
	.short	77                              ## 0x4d
	.space	2
	.short	77                              ## 0x4d
	.space	2
	.short	77                              ## 0x4d
	.space	2
LCPI172_37:
	.short	150                             ## 0x96
	.space	2
	.short	150                             ## 0x96
	.space	2
	.short	150                             ## 0x96
	.space	2
	.short	150                             ## 0x96
	.space	2
	.short	150                             ## 0x96
	.space	2
	.short	150                             ## 0x96
	.space	2
	.short	150                             ## 0x96
	.space	2
	.short	150                             ## 0x96
	.space	2
LCPI172_38:
	.short	29                              ## 0x1d
	.space	2
	.short	29                              ## 0x1d
	.space	2
	.short	29                              ## 0x1d
	.space	2
	.short	29                              ## 0x1d
	.space	2
	.short	29                              ## 0x1d
	.space	2
	.short	29                              ## 0x1d
	.space	2
	.short	29                              ## 0x1d
	.space	2
	.short	29                              ## 0x1d
	.space	2
LCPI172_39:
	.byte	1                               ## 0x1
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	5                               ## 0x5
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	9                               ## 0x9
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	13                              ## 0xd
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	17                              ## 0x11
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	21                              ## 0x15
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	25                              ## 0x19
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	29                              ## 0x1d
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
LCPI172_42:
	.short	77                              ## 0x4d
	.short	0                               ## 0x0
	.short	77                              ## 0x4d
	.short	0                               ## 0x0
	.short	77                              ## 0x4d
	.short	0                               ## 0x0
	.short	77                              ## 0x4d
	.short	0                               ## 0x0
	.short	77                              ## 0x4d
	.short	0                               ## 0x0
	.short	77                              ## 0x4d
	.short	0                               ## 0x0
	.short	77                              ## 0x4d
	.short	0                               ## 0x0
	.short	77                              ## 0x4d
	.short	0                               ## 0x0
LCPI172_43:
	.short	150                             ## 0x96
	.short	0                               ## 0x0
	.short	150                             ## 0x96
	.short	0                               ## 0x0
	.short	150                             ## 0x96
	.short	0                               ## 0x0
	.short	150                             ## 0x96
	.short	0                               ## 0x0
	.short	150                             ## 0x96
	.short	0                               ## 0x0
	.short	150                             ## 0x96
	.short	0                               ## 0x0
	.short	150                             ## 0x96
	.short	0                               ## 0x0
	.short	150                             ## 0x96
	.short	0                               ## 0x0
LCPI172_44:
	.short	29                              ## 0x1d
	.short	0                               ## 0x0
	.short	29                              ## 0x1d
	.short	0                               ## 0x0
	.short	29                              ## 0x1d
	.short	0                               ## 0x0
	.short	29                              ## 0x1d
	.short	0                               ## 0x0
	.short	29                              ## 0x1d
	.short	0                               ## 0x0
	.short	29                              ## 0x1d
	.short	0                               ## 0x0
	.short	29                              ## 0x1d
	.short	0                               ## 0x0
	.short	29                              ## 0x1d
	.short	0                               ## 0x0
LCPI172_45:
	.byte	0                               ## 0x0
	.byte	3                               ## 0x3
	.byte	6                               ## 0x6
	.byte	9                               ## 0x9
	.byte	12                              ## 0xc
	.byte	15                              ## 0xf
	.byte	2                               ## 0x2
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	11                              ## 0xb
	.byte	14                              ## 0xe
	.byte	1                               ## 0x1
	.byte	4                               ## 0x4
	.byte	7                               ## 0x7
	.byte	10                              ## 0xa
	.byte	13                              ## 0xd
	.byte	0                               ## 0x0
	.byte	3                               ## 0x3
	.byte	6                               ## 0x6
	.byte	9                               ## 0x9
	.byte	12                              ## 0xc
	.byte	15                              ## 0xf
	.byte	2                               ## 0x2
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	11                              ## 0xb
	.byte	14                              ## 0xe
	.byte	1                               ## 0x1
	.byte	4                               ## 0x4
	.byte	7                               ## 0x7
	.byte	10                              ## 0xa
	.byte	13                              ## 0xd
LCPI172_46:
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
LCPI172_50:
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	0                               ## 0x0
	.byte	2                               ## 0x2
	.byte	4                               ## 0x4
	.byte	6                               ## 0x6
	.byte	8                               ## 0x8
	.byte	10                              ## 0xa
	.byte	12                              ## 0xc
	.byte	14                              ## 0xe
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	0                               ## 0x0
	.byte	2                               ## 0x2
	.byte	4                               ## 0x4
	.byte	6                               ## 0x6
	.byte	8                               ## 0x8
	.byte	10                              ## 0xa
	.byte	12                              ## 0xc
	.byte	14                              ## 0xe
LCPI172_51:
	.byte	0                               ## 0x0
	.byte	2                               ## 0x2
	.byte	4                               ## 0x4
	.byte	6                               ## 0x6
	.byte	8                               ## 0x8
	.byte	10                              ## 0xa
	.byte	12                              ## 0xc
	.byte	14                              ## 0xe
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	0                               ## 0x0
	.byte	2                               ## 0x2
	.byte	4                               ## 0x4
	.byte	6                               ## 0x6
	.byte	8                               ## 0x8
	.byte	10                              ## 0xa
	.byte	12                              ## 0xc
	.byte	14                              ## 0xe
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_52:
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	1                               ## 0x1
	.byte	3                               ## 0x3
	.byte	5                               ## 0x5
	.byte	7                               ## 0x7
	.byte	9                               ## 0x9
	.byte	11                              ## 0xb
	.byte	13                              ## 0xd
	.byte	15                              ## 0xf
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	1                               ## 0x1
	.byte	3                               ## 0x3
	.byte	5                               ## 0x5
	.byte	7                               ## 0x7
	.byte	9                               ## 0x9
	.byte	11                              ## 0xb
	.byte	13                              ## 0xd
	.byte	15                              ## 0xf
LCPI172_53:
	.byte	1                               ## 0x1
	.byte	3                               ## 0x3
	.byte	5                               ## 0x5
	.byte	7                               ## 0x7
	.byte	9                               ## 0x9
	.byte	11                              ## 0xb
	.byte	13                              ## 0xd
	.byte	15                              ## 0xf
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	1                               ## 0x1
	.byte	3                               ## 0x3
	.byte	5                               ## 0x5
	.byte	7                               ## 0x7
	.byte	9                               ## 0x9
	.byte	11                              ## 0xb
	.byte	13                              ## 0xd
	.byte	15                              ## 0xf
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_55:
	.byte	0                               ## 0x0
	.byte	11                              ## 0xb
	.byte	6                               ## 0x6
	.byte	1                               ## 0x1
	.byte	12                              ## 0xc
	.byte	7                               ## 0x7
	.byte	2                               ## 0x2
	.byte	13                              ## 0xd
	.byte	8                               ## 0x8
	.byte	3                               ## 0x3
	.byte	14                              ## 0xe
	.byte	9                               ## 0x9
	.byte	4                               ## 0x4
	.byte	15                              ## 0xf
	.byte	10                              ## 0xa
	.byte	5                               ## 0x5
	.byte	0                               ## 0x0
	.byte	11                              ## 0xb
	.byte	6                               ## 0x6
	.byte	1                               ## 0x1
	.byte	12                              ## 0xc
	.byte	7                               ## 0x7
	.byte	2                               ## 0x2
	.byte	13                              ## 0xd
	.byte	8                               ## 0x8
	.byte	3                               ## 0x3
	.byte	14                              ## 0xe
	.byte	9                               ## 0x9
	.byte	4                               ## 0x4
	.byte	15                              ## 0xf
	.byte	10                              ## 0xa
	.byte	5                               ## 0x5
LCPI172_67:
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4
LCPI172_4:
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
LCPI172_5:
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
LCPI172_6:
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	6                               ## 0x6
	.byte	7                               ## 0x7
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
LCPI172_16:
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.space	1
	.space	1
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.space	1
	.space	1
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.space	1
	.space	1
LCPI172_26:
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
	.byte	14                              ## 0xe
	.byte	15                              ## 0xf
LCPI172_28:
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
LCPI172_29:
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	2                               ## 0x2
	.byte	3                               ## 0x3
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	10                              ## 0xa
	.byte	11                              ## 0xb
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
LCPI172_30:
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	0                               ## 0x0
	.byte	4                               ## 0x4
	.byte	8                               ## 0x8
	.byte	12                              ## 0xc
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_31:
	.byte	0                               ## 0x0
	.byte	4                               ## 0x4
	.byte	8                               ## 0x8
	.byte	12                              ## 0xc
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_32:
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	1                               ## 0x1
	.byte	5                               ## 0x5
	.byte	9                               ## 0x9
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_33:
	.byte	1                               ## 0x1
	.byte	5                               ## 0x5
	.byte	9                               ## 0x9
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_34:
	.byte	2                               ## 0x2
	.byte	6                               ## 0x6
	.byte	10                              ## 0xa
	.byte	14                              ## 0xe
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_35:
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	2                               ## 0x2
	.byte	6                               ## 0x6
	.byte	10                              ## 0xa
	.byte	14                              ## 0xe
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_40:
	.byte	3                               ## 0x3
	.byte	7                               ## 0x7
	.byte	11                              ## 0xb
	.byte	15                              ## 0xf
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_41:
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	3                               ## 0x3
	.byte	7                               ## 0x7
	.byte	11                              ## 0xb
	.byte	15                              ## 0xf
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_47:
	.byte	0                               ## 0x0
	.byte	3                               ## 0x3
	.byte	6                               ## 0x6
	.byte	9                               ## 0x9
	.byte	12                              ## 0xc
	.byte	15                              ## 0xf
	.byte	2                               ## 0x2
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	11                              ## 0xb
	.byte	14                              ## 0xe
	.byte	1                               ## 0x1
	.byte	4                               ## 0x4
	.byte	7                               ## 0x7
	.byte	10                              ## 0xa
	.byte	13                              ## 0xd
LCPI172_48:
	.byte	1                               ## 0x1
	.byte	3                               ## 0x3
	.byte	5                               ## 0x5
	.byte	6                               ## 0x6
	.byte	8                               ## 0x8
	.byte	10                              ## 0xa
	.byte	12                              ## 0xc
	.byte	14                              ## 0xe
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_49:
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
LCPI172_54:
	.short	255                             ## 0xff
	.short	255                             ## 0xff
	.short	255                             ## 0xff
	.short	255                             ## 0xff
	.short	255                             ## 0xff
	.short	255                             ## 0xff
	.short	255                             ## 0xff
	.short	255                             ## 0xff
LCPI172_56:
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	0                               ## 0x0
	.byte	2                               ## 0x2
	.byte	4                               ## 0x4
	.byte	6                               ## 0x6
	.byte	8                               ## 0x8
	.byte	10                              ## 0xa
	.byte	12                              ## 0xc
	.byte	14                              ## 0xe
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
LCPI172_57:
	.byte	6                               ## 0x6
	.byte	8                               ## 0x8
	.byte	10                              ## 0xa
	.byte	12                              ## 0xc
	.byte	14                              ## 0xe
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	0                               ## 0x0
	.byte	2                               ## 0x2
	.byte	4                               ## 0x4
LCPI172_58:
	.byte	0                               ## 0x0
	.byte	11                              ## 0xb
	.byte	6                               ## 0x6
	.byte	1                               ## 0x1
	.byte	12                              ## 0xc
	.byte	7                               ## 0x7
	.byte	2                               ## 0x2
	.byte	13                              ## 0xd
	.byte	8                               ## 0x8
	.byte	3                               ## 0x3
	.byte	14                              ## 0xe
	.byte	9                               ## 0x9
	.byte	4                               ## 0x4
	.byte	15                              ## 0xf
	.byte	10                              ## 0xa
	.byte	5                               ## 0x5
LCPI172_59:
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	0                               ## 0x0
	.byte	4                               ## 0x4
	.byte	8                               ## 0x8
	.byte	12                              ## 0xc
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
LCPI172_60:
	.byte	8                               ## 0x8
	.byte	12                              ## 0xc
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	0                               ## 0x0
	.byte	4                               ## 0x4
LCPI172_61:
	.space	1
	.space	1
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	0                               ## 0x0
	.byte	4                               ## 0x4
	.byte	8                               ## 0x8
	.byte	12                              ## 0xc
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_62:
	.space	1
	.space	1
	.byte	0                               ## 0x0
	.byte	4                               ## 0x4
	.byte	8                               ## 0x8
	.byte	12                              ## 0xc
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
LCPI172_63:
	.byte	13                              ## 0xd
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	1                               ## 0x1
	.byte	5                               ## 0x5
	.byte	9                               ## 0x9
LCPI172_64:
	.byte	128                             ## 0x80
	.byte	1                               ## 0x1
	.byte	5                               ## 0x5
	.byte	9                               ## 0x9
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
LCPI172_65:
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	1                               ## 0x1
	.byte	5                               ## 0x5
	.byte	9                               ## 0x9
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
LCPI172_66:
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	1                               ## 0x1
	.byte	5                               ## 0x5
	.byte	9                               ## 0x9
	.byte	13                              ## 0xd
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.byte	128                             ## 0x80
	.space	1
	.space	1
	.space	1
LCPI172_68:
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	0                               ## 0x0
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.byte	255                             ## 0xff
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
__ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi: ## @_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$768, %rsp                      ## imm = 0x300
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, %rbx
                                        ## kill: def $r8d killed $r8d def $r8
	movq	%r8, 144(%rsp)                  ## 8-byte Spill
	movq	%rcx, 696(%rsp)                 ## 8-byte Spill
	movq	%rdx, 688(%rsp)                 ## 8-byte Spill
	movq	%rdi, %r14
	movq	$8, (%r9)
	movl	$0, 8(%r9)
	leaq	56(%rdi), %r12
	leaq	57(%rdi), %r15
	movq	192(%rdi), %rcx
	movq	200(%rdi), %rax
	cmpq	%rax, %rcx
	jae	LBB172_2
## %bb.1:
	movq	%rsi, %r13
	leaq	1(%rcx), %rdx
	movq	%rdx, 192(%r14)
	movb	(%rcx), %cl
	cmpb	$-119, %cl
	je	LBB172_7
	jmp	LBB172_77
LBB172_2:
	cmpl	$0, 48(%r14)
	je	LBB172_77
## %bb.3:
	movq	%rsi, %r13
	movq	40(%r14), %rdi
	movl	52(%r14), %edx
	movq	%r12, %rsi
	callq	*16(%r14)
	movl	192(%r14), %ecx
	subl	208(%r14), %ecx
	addl	%ecx, 184(%r14)
	testl	%eax, %eax
	je	LBB172_5
## %bb.4:
	cltq
	addq	%r14, %rax
	addq	$56, %rax
	movb	56(%r14), %cl
	jmp	LBB172_6
LBB172_5:
	movl	$0, 48(%r14)
	movb	$0, 56(%r14)
	xorl	%ecx, %ecx
	movq	%r15, %rax
LBB172_6:
	movq	%rax, 200(%r14)
	movq	%r15, 192(%r14)
	movq	%r15, %rdx
	cmpb	$-119, %cl
	jne	LBB172_77
LBB172_7:
	cmpq	%rax, %rdx
	jae	LBB172_9
## %bb.8:
	leaq	1(%rdx), %rsi
	movq	%rsi, 192(%r14)
	movb	(%rdx), %cl
	cmpb	$80, %cl
	je	LBB172_14
	jmp	LBB172_77
LBB172_9:
	cmpl	$0, 48(%r14)
	je	LBB172_77
## %bb.10:
	movq	40(%r14), %rdi
	movl	52(%r14), %edx
	movq	%r12, %rsi
	callq	*16(%r14)
	movl	192(%r14), %ecx
	subl	208(%r14), %ecx
	addl	%ecx, 184(%r14)
	testl	%eax, %eax
	je	LBB172_12
## %bb.11:
	cltq
	addq	%r14, %rax
	addq	$56, %rax
	movb	56(%r14), %cl
	jmp	LBB172_13
LBB172_12:
	movl	$0, 48(%r14)
	movb	$0, 56(%r14)
	xorl	%ecx, %ecx
	movq	%r15, %rax
LBB172_13:
	movq	%rax, 200(%r14)
	movq	%r15, 192(%r14)
	movq	%r15, %rsi
	cmpb	$80, %cl
	jne	LBB172_77
LBB172_14:
	cmpq	%rax, %rsi
	jae	LBB172_16
## %bb.15:
	leaq	1(%rsi), %rdx
	movq	%rdx, 192(%r14)
	movb	(%rsi), %cl
	cmpb	$78, %cl
	je	LBB172_21
	jmp	LBB172_77
LBB172_16:
	cmpl	$0, 48(%r14)
	je	LBB172_77
## %bb.17:
	movq	40(%r14), %rdi
	movl	52(%r14), %edx
	movq	%r12, %rsi
	callq	*16(%r14)
	movl	192(%r14), %ecx
	subl	208(%r14), %ecx
	addl	%ecx, 184(%r14)
	testl	%eax, %eax
	je	LBB172_19
## %bb.18:
	cltq
	addq	%r14, %rax
	addq	$56, %rax
	movb	56(%r14), %cl
	jmp	LBB172_20
LBB172_19:
	movl	$0, 48(%r14)
	movb	$0, 56(%r14)
	xorl	%ecx, %ecx
	movq	%r15, %rax
LBB172_20:
	movq	%rax, 200(%r14)
	movq	%r15, 192(%r14)
	movq	%r15, %rdx
	cmpb	$78, %cl
	jne	LBB172_77
LBB172_21:
	cmpq	%rax, %rdx
	jae	LBB172_23
## %bb.22:
	leaq	1(%rdx), %rsi
	movq	%rsi, 192(%r14)
	movb	(%rdx), %cl
	cmpb	$71, %cl
	je	LBB172_28
	jmp	LBB172_77
LBB172_23:
	cmpl	$0, 48(%r14)
	je	LBB172_77
## %bb.24:
	movq	40(%r14), %rdi
	movl	52(%r14), %edx
	movq	%r12, %rsi
	callq	*16(%r14)
	movl	192(%r14), %ecx
	subl	208(%r14), %ecx
	addl	%ecx, 184(%r14)
	testl	%eax, %eax
	je	LBB172_26
## %bb.25:
	cltq
	addq	%r14, %rax
	addq	$56, %rax
	movb	56(%r14), %cl
	jmp	LBB172_27
LBB172_26:
	movl	$0, 48(%r14)
	movb	$0, 56(%r14)
	xorl	%ecx, %ecx
	movq	%r15, %rax
LBB172_27:
	movq	%rax, 200(%r14)
	movq	%r15, 192(%r14)
	movq	%r15, %rsi
	cmpb	$71, %cl
	jne	LBB172_77
LBB172_28:
	cmpq	%rax, %rsi
	jae	LBB172_30
## %bb.29:
	leaq	1(%rsi), %rdx
	movq	%rdx, 192(%r14)
	movb	(%rsi), %cl
	jmp	LBB172_35
LBB172_30:
	cmpl	$0, 48(%r14)
	je	LBB172_77
## %bb.31:
	movq	40(%r14), %rdi
	movl	52(%r14), %edx
	movq	%r12, %rsi
	callq	*16(%r14)
	movl	192(%r14), %ecx
	subl	208(%r14), %ecx
	addl	%ecx, 184(%r14)
	testl	%eax, %eax
	je	LBB172_33
## %bb.32:
	cltq
	addq	%r14, %rax
	addq	$56, %rax
	movb	56(%r14), %cl
	jmp	LBB172_34
LBB172_33:
	movl	$0, 48(%r14)
	movb	$0, 56(%r14)
	xorl	%ecx, %ecx
	movq	%r15, %rax
LBB172_34:
	movq	%rax, 200(%r14)
	movq	%r15, 192(%r14)
	movq	%r15, %rdx
LBB172_35:
	cmpb	$13, %cl
	jne	LBB172_77
## %bb.36:
	cmpq	%rax, %rdx
	jae	LBB172_38
## %bb.37:
	leaq	1(%rdx), %rsi
	movq	%rsi, 192(%r14)
	movb	(%rdx), %cl
	jmp	LBB172_43
LBB172_38:
	cmpl	$0, 48(%r14)
	je	LBB172_77
## %bb.39:
	movq	40(%r14), %rdi
	movl	52(%r14), %edx
	movq	%r12, %rsi
	callq	*16(%r14)
	movl	192(%r14), %ecx
	subl	208(%r14), %ecx
	addl	%ecx, 184(%r14)
	testl	%eax, %eax
	je	LBB172_41
## %bb.40:
	cltq
	addq	%r14, %rax
	addq	$56, %rax
	movb	56(%r14), %cl
	jmp	LBB172_42
LBB172_41:
	movl	$0, 48(%r14)
	movb	$0, 56(%r14)
	xorl	%ecx, %ecx
	movq	%r15, %rax
LBB172_42:
	movq	%rax, 200(%r14)
	movq	%r15, 192(%r14)
	movq	%r15, %rsi
LBB172_43:
	cmpb	$10, %cl
	jne	LBB172_77
## %bb.44:
	cmpq	%rax, %rsi
	jae	LBB172_46
## %bb.45:
	leaq	1(%rsi), %r15
	movq	%r15, 192(%r14)
	movb	(%rsi), %cl
	jmp	LBB172_51
LBB172_46:
	cmpl	$0, 48(%r14)
	je	LBB172_77
## %bb.47:
	movq	40(%r14), %rdi
	movl	52(%r14), %edx
	movq	%r12, %rsi
	callq	*16(%r14)
	movl	192(%r14), %ecx
	subl	208(%r14), %ecx
	addl	%ecx, 184(%r14)
	testl	%eax, %eax
	je	LBB172_49
## %bb.48:
	cltq
	addq	%r14, %rax
	addq	$56, %rax
	movb	56(%r14), %cl
	jmp	LBB172_50
LBB172_49:
	movl	$0, 48(%r14)
	movb	$0, 56(%r14)
	xorl	%ecx, %ecx
	movq	%r15, %rax
LBB172_50:
	movq	%rax, 200(%r14)
	movq	%r15, 192(%r14)
LBB172_51:
	cmpb	$26, %cl
	jne	LBB172_77
## %bb.52:
	cmpq	%rax, %r15
	jae	LBB172_54
## %bb.53:
	leaq	1(%r15), %rax
	movq	%rax, 192(%r14)
	movq	%r15, %r12
	jmp	LBB172_56
LBB172_54:
	cmpl	$0, 48(%r14)
	je	LBB172_77
## %bb.55:
	movq	40(%r14), %rdi
	movl	52(%r14), %edx
	movq	%r12, %rsi
	callq	*16(%r14)
	movl	192(%r14), %ecx
	subl	208(%r14), %ecx
	addl	%ecx, 184(%r14)
	testl	%eax, %eax
	je	LBB172_76
LBB172_56:
	cmpb	$10, (%r12)
	jne	LBB172_77
## %bb.57:
	vmovdqu	208(%r14), %xmm0
	vmovdqu	%xmm0, 192(%r14)
	movq	%r14, 704(%rsp)
	movq	144(%rsp), %r14                 ## 8-byte Reload
	cmpl	$5, %r14d
	jb	LBB172_59
## %bb.58:
	leaq	L_.str.113(%rip), %rcx
	jmp	LBB172_78
LBB172_59:
	leaq	704(%rsp), %rdi
	xorl	%esi, %esi
	movl	%r14d, %edx
	callq	__ZL20stbi__parse_png_fileP9stbi__pngii
	testl	%eax, %eax
	je	LBB172_82
## %bb.60:
	movl	736(%rsp), %eax
	movl	$8, %ecx
	cmpl	$9, %eax
	jl	LBB172_62
## %bb.61:
	movl	$16, %ecx
	cmpl	$16, %eax
	jne	LBB172_354
LBB172_62:
	movl	%ecx, (%rbx)
	movq	704(%rsp), %rdx
	movq	728(%rsp), %rbx
	testl	%r14d, %r14d
	je	LBB172_578
## %bb.63:
	movl	12(%rdx), %esi
	movq	%rsi, %rcx
	movq	%rsi, 280(%rsp)                 ## 8-byte Spill
	cmpl	%r14d, %esi
	je	LBB172_578
## %bb.64:
	movq	%rdx, 256(%rsp)                 ## 8-byte Spill
	cmpl	$8, %eax
	jg	LBB172_355
## %bb.65:
	movq	256(%rsp), %rax                 ## 8-byte Reload
	movl	(%rax), %eax
	movq	%rax, 192(%rsp)                 ## 8-byte Spill
                                        ## kill: def $eax killed $eax killed $rax
	orl	144(%rsp), %eax                 ## 4-byte Folded Reload
	js	LBB172_576
## %bb.66:
	movq	256(%rsp), %rax                 ## 8-byte Reload
	movl	4(%rax), %eax
	movq	%rax, 64(%rsp)                  ## 8-byte Spill
	cmpl	$0, 192(%rsp)                   ## 4-byte Folded Reload
	je	LBB172_68
## %bb.67:
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	xorl	%edx, %edx
	idivl	192(%rsp)                       ## 4-byte Folded Reload
	cmpl	144(%rsp), %eax                 ## 4-byte Folded Reload
	jl	LBB172_576
LBB172_68:
	movq	192(%rsp), %rax                 ## 8-byte Reload
                                        ## kill: def $eax killed $eax killed $rax
	imull	144(%rsp), %eax                 ## 4-byte Folded Reload
	movl	%eax, 80(%rsp)                  ## 4-byte Spill
	orl	64(%rsp), %eax                  ## 4-byte Folded Reload
	js	LBB172_576
## %bb.69:
	cmpq	$0, 64(%rsp)                    ## 8-byte Folded Reload
	je	LBB172_71
## %bb.70:
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	xorl	%edx, %edx
	idivl	64(%rsp)                        ## 4-byte Folded Reload
	cmpl	80(%rsp), %eax                  ## 4-byte Folded Reload
	jl	LBB172_576
LBB172_71:
	movl	80(%rsp), %eax                  ## 4-byte Reload
	imull	64(%rsp), %eax                  ## 4-byte Folded Reload
	movslq	%eax, %rdi
	callq	_malloc
	movq	%rax, 120(%rsp)                 ## 8-byte Spill
	testq	%rax, %rax
	je	LBB172_576
## %bb.72:
	cmpl	$0, 64(%rsp)                    ## 4-byte Folded Reload
	jle	LBB172_577
## %bb.73:
	movq	144(%rsp), %rax                 ## 8-byte Reload
	movq	280(%rsp), %rcx                 ## 8-byte Reload
	leal	(%rax,%rcx,8), %eax
	movq	%rax, 336(%rsp)                 ## 8-byte Spill
	cmpl	$35, %eax
	ja	LBB172_584
## %bb.74:
	movabsq	$60500352000, %rax              ## imm = 0xE161A1C00
	movq	336(%rsp), %rcx                 ## 8-byte Reload
	btq	%rcx, %rax
	jae	LBB172_584
## %bb.75:
	movq	192(%rsp), %rcx                 ## 8-byte Reload
	leal	-1(%rcx), %r8d
	movl	%r8d, %eax
	leaq	1(%rax), %rdi
                                        ## kill: def $ecx killed $ecx killed $rcx
	imull	280(%rsp), %ecx                 ## 4-byte Folded Reload
	movl	%ecx, 272(%rsp)                 ## 4-byte Spill
	movabsq	$8589934560, %r9                ## imm = 0x1FFFFFFE0
	leaq	16(%r9), %r10
	andq	%rdi, %r10
	movl	%r8d, %ecx
	subl	%r10d, %ecx
	movl	%ecx, 44(%rsp)                  ## 4-byte Spill
	leaq	24(%r9), %rdx
	andq	%rdi, %rdx
	movq	%rdx, 160(%rsp)                 ## 8-byte Spill
	movl	%r8d, %ecx
	subl	%edx, %ecx
	movl	%ecx, 520(%rsp)                 ## 4-byte Spill
	movl	%edi, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	movl	$16, %edx
	cmovneq	%rcx, %rdx
	movq	%rdi, %r11
	movq	%rdx, %rcx
	movq	%rdx, 496(%rsp)                 ## 8-byte Spill
	subq	%rdx, %r11
	movl	%r8d, %ecx
	subl	%r11d, %ecx
	movl	%ecx, 224(%rsp)                 ## 4-byte Spill
	movl	%edi, %ecx
	andl	$7, %ecx
	testq	%rcx, %rcx
	movl	$8, %edx
	cmovneq	%rcx, %rdx
	negq	%rdx
	addq	%rax, %rdx
	incq	%rdx
	movq	%rdx, 72(%rsp)                  ## 8-byte Spill
	movl	%r8d, %ecx
	subl	%edx, %ecx
	movl	%ecx, 528(%rsp)                 ## 4-byte Spill
	movq	%rdi, %r15
	andq	$-32, %r15
	movl	%r8d, %ecx
	subl	%r15d, %ecx
	movl	%ecx, 240(%rsp)                 ## 4-byte Spill
	movl	%edi, %ecx
	andl	$31, %ecx
	testq	%rcx, %rcx
	movl	$32, %edx
	cmovneq	%rcx, %rdx
	movq	%rdi, %r12
	movq	%rdx, %rcx
	movq	%rdx, 312(%rsp)                 ## 8-byte Spill
	subq	%rdx, %r12
	movl	%r8d, %ecx
	subl	%r12d, %ecx
	movl	%ecx, 248(%rsp)                 ## 4-byte Spill
	movl	%edi, %ecx
	andl	$127, %ecx
	testq	%rcx, %rcx
	movl	$128, %edx
	cmovneq	%rcx, %rdx
	leaq	(%rax,%rax,2), %rcx
	movq	120(%rsp), %rsi                 ## 8-byte Reload
	leaq	3(%rsi,%rcx), %r14
	movq	%r14, 408(%rsp)                 ## 8-byte Spill
	leaq	3(%rbx,%rcx), %rcx
	movq	%rcx, 400(%rsp)                 ## 8-byte Spill
	leaq	2(%rsi,%rax,2), %rcx
	movq	%rcx, 584(%rsp)                 ## 8-byte Spill
	leaq	1(%rbx,%rax), %rcx
	movq	%rcx, 576(%rsp)                 ## 8-byte Spill
	leaq	4(%rsi,%rax,4), %rcx
	movq	%rcx, 568(%rsp)                 ## 8-byte Spill
	leaq	1(%rsi,%rax), %rcx
	movq	%rcx, 560(%rsp)                 ## 8-byte Spill
	leaq	1(%rbx,%rax,2), %rcx
	movq	%rcx, 552(%rsp)                 ## 8-byte Spill
	leaq	2(%rbx,%rax,2), %rcx
	movq	%rcx, 392(%rsp)                 ## 8-byte Spill
	leaq	3(%rbx,%rax,4), %rcx
	movq	%rcx, 384(%rsp)                 ## 8-byte Spill
	leaq	4(%rbx,%rax,4), %rax
	movq	%rax, 328(%rsp)                 ## 8-byte Spill
	movq	%rdi, %rcx
	movq	%rdx, %rax
	movq	%rdx, 488(%rsp)                 ## 8-byte Spill
	subq	%rdx, %rcx
	movl	%r8d, %eax
	subl	%ecx, %eax
	movl	%eax, 432(%rsp)                 ## 4-byte Spill
	addq	$-96, %r9
	movq	%rdi, %rax
	movq	%rdi, 32(%rsp)                  ## 8-byte Spill
	andq	%rdi, %r9
	movl	%r8d, 16(%rsp)                  ## 4-byte Spill
	subl	%r9d, %r8d
	movl	%r8d, 172(%rsp)                 ## 4-byte Spill
	leaq	-32(%r15), %rax
	movq	%rax, 368(%rsp)                 ## 8-byte Spill
	movq	%rax, %rdx
	shrq	$5, %rdx
	incq	%rdx
	movq	%rdx, %rax
	movq	%rdx, 360(%rsp)                 ## 8-byte Spill
	andq	$-2, %rdx
	movq	%rdx, 352(%rsp)                 ## 8-byte Spill
	leaq	(,%r10,4), %rax
	movq	%rax, 208(%rsp)                 ## 8-byte Spill
	leaq	(%r10,%r10), %rax
	movq	%rax, 200(%rsp)                 ## 8-byte Spill
	movq	160(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rdx,%rdx), %rax
	movq	%rax, 512(%rsp)                 ## 8-byte Spill
	leaq	(,%rdx,4), %rax
	movq	%rax, 504(%rsp)                 ## 8-byte Spill
	leaq	(,%r11,4), %rax
	movq	%rax, 320(%rsp)                 ## 8-byte Spill
	movq	72(%rsp), %rax                  ## 8-byte Reload
	leaq	(,%rax,4), %rax
	movq	%rax, 304(%rsp)                 ## 8-byte Spill
	leaq	(%r15,%r15,2), %rax
	movq	%rax, 288(%rsp)                 ## 8-byte Spill
	leaq	(%r15,%r15), %rax
	movq	%rax, 600(%rsp)                 ## 8-byte Spill
	movq	%r10, 24(%rsp)                  ## 8-byte Spill
	leaq	(%r10,%r10,2), %rax
	movq	%rax, 184(%rsp)                 ## 8-byte Spill
	movq	%r15, 112(%rsp)                 ## 8-byte Spill
	leaq	(,%r15,4), %rax
	movq	%rax, 592(%rsp)                 ## 8-byte Spill
	leaq	(%r12,%r12), %rax
	movq	%rax, 424(%rsp)                 ## 8-byte Spill
	leaq	(%r12,%r12,2), %rax
	movq	%rax, 296(%rsp)                 ## 8-byte Spill
	leaq	(%r11,%r11,2), %rax
	movq	%rax, 216(%rsp)                 ## 8-byte Spill
	movq	%r11, 176(%rsp)                 ## 8-byte Spill
	leaq	(%r11,%r11), %rax
	movq	%rax, 376(%rsp)                 ## 8-byte Spill
	movq	%rcx, 152(%rsp)                 ## 8-byte Spill
	leaq	(%rcx,%rcx), %rax
	movq	%rax, 416(%rsp)                 ## 8-byte Spill
	leaq	(,%r9,4), %rax
	movq	%rax, 680(%rsp)                 ## 8-byte Spill
	leaq	(%r9,%r9,2), %rax
	movq	%rax, 672(%rsp)                 ## 8-byte Spill
	movq	%r9, 88(%rsp)                   ## 8-byte Spill
	leaq	(%r9,%r9), %rax
	movq	%rax, 664(%rsp)                 ## 8-byte Spill
	movq	%r12, 264(%rsp)                 ## 8-byte Spill
	leaq	(,%r12,4), %rax
	movq	%rax, 480(%rsp)                 ## 8-byte Spill
	leaq	128(%rsi), %rax
	movq	%rax, 544(%rsp)                 ## 8-byte Spill
	leaq	64(%rbx), %rax
	movq	%rax, 440(%rsp)                 ## 8-byte Spill
	leaq	192(%rbx), %rax
	movq	%rax, 472(%rsp)                 ## 8-byte Spill
	leaq	96(%rsi), %rax
	movq	%rax, 464(%rsp)                 ## 8-byte Spill
	leaq	96(%rbx), %rax
	movq	%rax, 536(%rsp)                 ## 8-byte Spill
	leaq	384(%rsi), %rax
	movq	%rax, 456(%rsp)                 ## 8-byte Spill
	leaq	192(%rsi), %rax
	movq	%rax, 448(%rsp)                 ## 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 128(%rsp)                 ## 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 136(%rsp)                 ## 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 232(%rsp)                 ## 8-byte Spill
	vmovdqa	LCPI172_60(%rip), %xmm12        ## xmm12 = <8,12,u,u,u,u,u,u,u,u,128,128,128,128,0,4>
	jmp	LBB172_84
LBB172_76:
	movl	$0, 48(%r14)
	movb	$0, 56(%r14)
LBB172_77:
	vmovdqu	208(%r14), %xmm0
	vmovdqu	%xmm0, 192(%r14)
	leaq	L_.str.111(%rip), %rcx
LBB172_78:
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
LBB172_79:
	xorl	%ebx, %ebx
LBB172_80:
	movq	%rbx, %rax
LBB172_81:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB172_82:
	movq	728(%rsp), %rdi
	xorl	%ebx, %ebx
	jmp	LBB172_581
LBB172_83:                              ##   in Loop: Header=BB172_84 Depth=1
	movq	232(%rsp), %rcx                 ## 8-byte Reload
	incq	%rcx
	movq	136(%rsp), %rax                 ## 8-byte Reload
	addl	272(%rsp), %eax                 ## 4-byte Folded Reload
	movq	%rax, 136(%rsp)                 ## 8-byte Spill
	movq	128(%rsp), %rax                 ## 8-byte Reload
	addl	80(%rsp), %eax                  ## 4-byte Folded Reload
	movq	%rax, 128(%rsp)                 ## 8-byte Spill
	movq	%rcx, %rax
	movq	%rcx, 232(%rsp)                 ## 8-byte Spill
	cmpq	64(%rsp), %rcx                  ## 8-byte Folded Reload
	je	LBB172_577
LBB172_84:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB172_335 Depth 2
                                        ##     Child Loop BB172_265 Depth 2
                                        ##     Child Loop BB172_209 Depth 2
                                        ##     Child Loop BB172_328 Depth 2
                                        ##     Child Loop BB172_332 Depth 2
                                        ##     Child Loop BB172_189 Depth 2
                                        ##     Child Loop BB172_326 Depth 2
                                        ##     Child Loop BB172_258 Depth 2
                                        ##     Child Loop BB172_205 Depth 2
                                        ##     Child Loop BB172_320 Depth 2
                                        ##     Child Loop BB172_253 Depth 2
                                        ##     Child Loop BB172_201 Depth 2
                                        ##     Child Loop BB172_315 Depth 2
                                        ##     Child Loop BB172_248 Depth 2
                                        ##     Child Loop BB172_197 Depth 2
                                        ##     Child Loop BB172_313 Depth 2
                                        ##     Child Loop BB172_243 Depth 2
                                        ##     Child Loop BB172_193 Depth 2
                                        ##     Child Loop BB172_305 Depth 2
                                        ##     Child Loop BB172_309 Depth 2
                                        ##     Child Loop BB172_135 Depth 2
                                        ##     Child Loop BB172_217 Depth 2
                                        ##     Child Loop BB172_298 Depth 2
                                        ##     Child Loop BB172_302 Depth 2
                                        ##     Child Loop BB172_126 Depth 2
                                        ##     Child Loop BB172_213 Depth 2
                                        ##     Child Loop BB172_291 Depth 2
                                        ##     Child Loop BB172_295 Depth 2
                                        ##     Child Loop BB172_114 Depth 2
                                        ##     Child Loop BB172_229 Depth 2
                                        ##     Child Loop BB172_284 Depth 2
                                        ##     Child Loop BB172_288 Depth 2
                                        ##     Child Loop BB172_104 Depth 2
                                        ##     Child Loop BB172_225 Depth 2
                                        ##     Child Loop BB172_277 Depth 2
                                        ##     Child Loop BB172_281 Depth 2
                                        ##     Child Loop BB172_94 Depth 2
                                        ##     Child Loop BB172_221 Depth 2
                                        ##     Child Loop BB172_268 Depth 2
                                        ##     Child Loop BB172_272 Depth 2
                                        ##     Child Loop BB172_275 Depth 2
	movq	136(%rsp), %rax                 ## 8-byte Reload
	movl	%eax, %eax
	movq	%rax, 136(%rsp)                 ## 8-byte Spill
	addq	%rbx, %rax
	movq	%rax, 48(%rsp)                  ## 8-byte Spill
	movq	128(%rsp), %rcx                 ## 8-byte Reload
	movl	%ecx, %ecx
	movq	120(%rsp), %rax                 ## 8-byte Reload
	movq	%rcx, 128(%rsp)                 ## 8-byte Spill
	addq	%rax, %rcx
	movq	%rcx, 56(%rsp)                  ## 8-byte Spill
	movq	192(%rsp), %rcx                 ## 8-byte Reload
                                        ## kill: def $ecx killed $ecx killed $rcx def $rcx
	imull	232(%rsp), %ecx                 ## 4-byte Folded Reload
	movl	%ecx, %r10d
	imull	280(%rsp), %r10d                ## 4-byte Folded Reload
	addq	%rbx, %r10
	imull	144(%rsp), %ecx                 ## 4-byte Folded Reload
	addq	%rax, %rcx
	movq	%rcx, 8(%rsp)                   ## 8-byte Spill
	movq	336(%rsp), %rax                 ## 8-byte Reload
	leal	-10(%rax), %r8d
	cmpl	$24, %r8d
	ja	LBB172_116
## %bb.85:                              ##   in Loop: Header=BB172_84 Depth=1
	movq	536(%rsp), %rax                 ## 8-byte Reload
	movq	136(%rsp), %rcx                 ## 8-byte Reload
	addq	%rcx, %rax
	movq	%rax, 608(%rsp)                 ## 8-byte Spill
	movq	544(%rsp), %rax                 ## 8-byte Reload
	movq	128(%rsp), %rcx                 ## 8-byte Reload
	addq	%rcx, %rax
	movq	%rax, 344(%rsp)                 ## 8-byte Spill
	movl	80(%rsp), %eax                  ## 4-byte Reload
	movl	%eax, %r14d
	movq	232(%rsp), %rcx                 ## 8-byte Reload
	imull	%ecx, %r14d
	movq	120(%rsp), %rax                 ## 8-byte Reload
	addq	%r14, %rax
	movq	%rax, 104(%rsp)                 ## 8-byte Spill
	movq	584(%rsp), %rax                 ## 8-byte Reload
	leaq	(%rax,%r14), %rsi
	movl	272(%rsp), %eax                 ## 4-byte Reload
	movl	%eax, %r9d
	imull	%ecx, %r9d
	leaq	(%rbx,%r9), %rax
	movq	%rax, 96(%rsp)                  ## 8-byte Spill
	movq	560(%rsp), %rax                 ## 8-byte Reload
	leaq	(%rax,%r14), %rdi
	movq	400(%rsp), %rax                 ## 8-byte Reload
	leaq	(%rax,%r9), %r15
	movq	568(%rsp), %rax                 ## 8-byte Reload
	leaq	(%rax,%r14), %r11
	addq	408(%rsp), %r14                 ## 8-byte Folded Reload
	movq	552(%rsp), %rax                 ## 8-byte Reload
	leaq	(%rax,%r9), %rcx
	movq	576(%rsp), %rax                 ## 8-byte Reload
	leaq	(%rax,%r9), %r12
	leaq	LJTI172_1(%rip), %rax
	movslq	(%rax,%r8,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB172_86:                              ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB172_83
## %bb.87:                              ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$15, 16(%rsp)                   ## 4-byte Folded Reload
	jb	LBB172_90
## %bb.88:                              ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%r12, 104(%rsp)                 ## 8-byte Folded Reload
	jae	LBB172_230
## %bb.89:                              ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%rsi, 96(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_230
LBB172_90:                              ##   in Loop: Header=BB172_84 Depth=1
	movl	16(%rsp), %eax                  ## 4-byte Reload
LBB172_91:                              ##   in Loop: Header=BB172_84 Depth=1
	movl	%eax, %r8d
LBB172_92:                              ##   in Loop: Header=BB172_84 Depth=1
	leal	1(%r8), %edx
	testb	$3, %dl
	je	LBB172_218
## %bb.93:                              ##   in Loop: Header=BB172_84 Depth=1
	leal	1(%r8), %edx
	movzbl	%dl, %edx
	andl	$3, %edx
	xorl	%esi, %esi
LBB172_94:                              ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10,%rsi), %ecx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%cl, (%rax)
	movb	$-1, 1(%rax)
	addq	$2, %rax
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	incq	%rsi
	cmpl	%esi, %edx
	jne	LBB172_94
## %bb.95:                              ##   in Loop: Header=BB172_84 Depth=1
	movl	%r8d, %edi
	subl	%esi, %edi
	addq	%rsi, %r10
	jmp	LBB172_219
LBB172_96:                              ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB172_83
## %bb.97:                              ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$15, 16(%rsp)                   ## 4-byte Folded Reload
	jb	LBB172_100
## %bb.98:                              ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%r12, 104(%rsp)                 ## 8-byte Folded Reload
	jae	LBB172_232
## %bb.99:                              ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%r14, 96(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_232
LBB172_100:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	16(%rsp), %eax                  ## 4-byte Reload
LBB172_101:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%eax, %r8d
LBB172_102:                             ##   in Loop: Header=BB172_84 Depth=1
	leal	1(%r8), %edx
	testb	$3, %dl
	je	LBB172_222
## %bb.103:                             ##   in Loop: Header=BB172_84 Depth=1
	leal	1(%r8), %edx
	movzbl	%dl, %edx
	andl	$3, %edx
	xorl	%esi, %esi
LBB172_104:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10,%rsi), %ecx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%cl, 2(%rax)
	movb	%cl, 1(%rax)
	movb	%cl, (%rax)
	addq	$3, %rax
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	incq	%rsi
	cmpl	%esi, %edx
	jne	LBB172_104
## %bb.105:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%r8d, %edi
	subl	%esi, %edi
	addq	%rsi, %r10
	jmp	LBB172_223
LBB172_106:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB172_83
## %bb.107:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$15, 16(%rsp)                   ## 4-byte Folded Reload
	jb	LBB172_110
## %bb.108:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%r12, 104(%rsp)                 ## 8-byte Folded Reload
	jae	LBB172_234
## %bb.109:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%r11, 96(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_234
LBB172_110:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	16(%rsp), %eax                  ## 4-byte Reload
LBB172_111:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%eax, %r8d
LBB172_112:                             ##   in Loop: Header=BB172_84 Depth=1
	leal	1(%r8), %edx
	testb	$3, %dl
	je	LBB172_226
## %bb.113:                             ##   in Loop: Header=BB172_84 Depth=1
	leal	1(%r8), %edx
	movzbl	%dl, %edx
	andl	$3, %edx
	xorl	%esi, %esi
LBB172_114:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10,%rsi), %ecx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%cl, 2(%rax)
	movb	%cl, 1(%rax)
	movb	%cl, (%rax)
	movb	$-1, 3(%rax)
	addq	$4, %rax
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	incq	%rsi
	cmpl	%esi, %edx
	jne	LBB172_114
## %bb.115:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%r8d, %edi
	subl	%esi, %edi
	addq	%rsi, %r10
	jmp	LBB172_227
LBB172_116:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB172_83
## %bb.117:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$16, 16(%rsp)                   ## 4-byte Folded Reload
	jae	LBB172_184
## %bb.118:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	16(%rsp), %eax                  ## 4-byte Reload
	jmp	LBB172_274
LBB172_119:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB172_83
## %bb.120:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$16, 16(%rsp)                   ## 4-byte Folded Reload
	jb	LBB172_123
## %bb.121:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%rcx, 104(%rsp)                 ## 8-byte Folded Reload
	jae	LBB172_236
## %bb.122:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%rdi, 96(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_236
LBB172_123:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	16(%rsp), %eax                  ## 4-byte Reload
LBB172_124:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%eax, %r8d
	leal	1(%r8), %edx
	testb	$7, %dl
	je	LBB172_210
## %bb.125:                             ##   in Loop: Header=BB172_84 Depth=1
	leal	1(%r8), %edx
	movzbl	%dl, %edx
	andl	$7, %edx
	xorl	%esi, %esi
LBB172_126:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10), %ecx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%cl, (%rax,%rsi)
	addq	$2, %r10
	incq	%rsi
	cmpl	%esi, %edx
	jne	LBB172_126
## %bb.127:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%r8d, %edi
	subl	%esi, %edi
	addq	%rsi, 8(%rsp)                   ## 8-byte Folded Spill
	jmp	LBB172_211
LBB172_128:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB172_83
## %bb.129:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$16, 16(%rsp)                   ## 4-byte Folded Reload
	jb	LBB172_132
## %bb.130:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%rcx, 104(%rsp)                 ## 8-byte Folded Reload
	jae	LBB172_238
## %bb.131:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%r14, 96(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_238
LBB172_132:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	16(%rsp), %eax                  ## 4-byte Reload
LBB172_133:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%eax, %r8d
	leal	1(%r8), %edx
	testb	$3, %dl
	je	LBB172_214
## %bb.134:                             ##   in Loop: Header=BB172_84 Depth=1
	leal	1(%r8), %edx
	movzbl	%dl, %edx
	andl	$3, %edx
	xorl	%esi, %esi
LBB172_135:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10), %ecx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%cl, 2(%rax)
	movb	%cl, 1(%rax)
	movb	%cl, (%rax)
	addq	$2, %r10
	addq	$3, %rax
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	incq	%rsi
	cmpl	%esi, %edx
	jne	LBB172_135
## %bb.136:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%r8d, %edi
	subl	%esi, %edi
	jmp	LBB172_215
LBB172_137:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB172_83
## %bb.138:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$15, 16(%rsp)                   ## 4-byte Folded Reload
	jb	LBB172_141
## %bb.139:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	392(%rsp), %r9                  ## 8-byte Folded Reload
	cmpq	%r9, 104(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_240
## %bb.140:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%r11, 96(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_240
LBB172_141:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	16(%rsp), %eax                  ## 4-byte Reload
LBB172_142:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%eax, %ecx
LBB172_143:                             ##   in Loop: Header=BB172_84 Depth=1
	testb	$1, %cl
	jne	LBB172_190
## %bb.144:                             ##   in Loop: Header=BB172_84 Depth=1
	movb	(%r10), %dl
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%dl, 2(%rax)
	movb	%dl, 1(%rax)
	movb	%dl, (%rax)
	movb	1(%r10), %dl
	movb	%dl, 3(%rax)
	addq	$2, %r10
	addq	$4, %rax
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	leal	-1(%rcx), %esi
	jmp	LBB172_191
LBB172_145:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB172_83
## %bb.146:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$15, 16(%rsp)                   ## 4-byte Folded Reload
	jb	LBB172_149
## %bb.147:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%r15, 104(%rsp)                 ## 8-byte Folded Reload
	jae	LBB172_245
## %bb.148:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%rdi, 96(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_245
LBB172_149:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	16(%rsp), %eax                  ## 4-byte Reload
LBB172_150:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%eax, %edx
LBB172_151:                             ##   in Loop: Header=BB172_84 Depth=1
	testb	$1, %dl
	jne	LBB172_194
## %bb.152:                             ##   in Loop: Header=BB172_84 Depth=1
	movzbl	(%r10), %ecx
	movzbl	1(%r10), %esi
	movzbl	2(%r10), %edi
	imull	$77, %ecx, %ecx
	imull	$150, %esi, %esi
	addl	%ecx, %esi
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	addl	%edi, %ecx
	addl	%esi, %ecx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%ch, (%rax)
	addq	$3, %r10
	incq	%rax
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	leal	-1(%rdx), %r8d
	jmp	LBB172_195
LBB172_153:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB172_83
## %bb.154:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$15, 16(%rsp)                   ## 4-byte Folded Reload
	jb	LBB172_157
## %bb.155:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%r15, 104(%rsp)                 ## 8-byte Folded Reload
	jae	LBB172_250
## %bb.156:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%rsi, 96(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_250
LBB172_157:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	16(%rsp), %eax                  ## 4-byte Reload
LBB172_158:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%eax, %edx
LBB172_159:                             ##   in Loop: Header=BB172_84 Depth=1
	testb	$1, %dl
	jne	LBB172_198
## %bb.160:                             ##   in Loop: Header=BB172_84 Depth=1
	movzbl	(%r10), %ecx
	movzbl	1(%r10), %esi
	movzbl	2(%r10), %edi
	imull	$77, %ecx, %ecx
	imull	$150, %esi, %esi
	addl	%ecx, %esi
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	addl	%edi, %ecx
	addl	%esi, %ecx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%ch, (%rax)
	movb	$-1, 1(%rax)
	addq	$3, %r10
	addq	$2, %rax
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	leal	-1(%rdx), %r8d
	jmp	LBB172_199
LBB172_161:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB172_83
## %bb.162:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$15, 16(%rsp)                   ## 4-byte Folded Reload
	jb	LBB172_165
## %bb.163:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%r15, 104(%rsp)                 ## 8-byte Folded Reload
	jae	LBB172_255
## %bb.164:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%r11, 96(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_255
LBB172_165:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	16(%rsp), %eax                  ## 4-byte Reload
LBB172_166:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%eax, %edx
LBB172_167:                             ##   in Loop: Header=BB172_84 Depth=1
	testb	$1, %dl
	jne	LBB172_202
## %bb.168:                             ##   in Loop: Header=BB172_84 Depth=1
	movb	(%r10), %cl
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%cl, (%rax)
	movb	1(%r10), %cl
	movb	%cl, 1(%rax)
	movb	2(%r10), %cl
	movb	%cl, 2(%rax)
	movb	$-1, 3(%rax)
	addq	$3, %r10
	addq	$4, %rax
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	leal	-1(%rdx), %esi
	jmp	LBB172_203
LBB172_169:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB172_83
## %bb.170:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$8, 16(%rsp)                    ## 4-byte Folded Reload
	jb	LBB172_173
## %bb.171:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	384(%rsp), %r9                  ## 8-byte Folded Reload
	cmpq	%r9, 104(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_260
## %bb.172:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%rdi, 96(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_260
LBB172_173:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	16(%rsp), %eax                  ## 4-byte Reload
LBB172_174:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%eax, %edx
	testb	$1, %dl
	jne	LBB172_186
## %bb.175:                             ##   in Loop: Header=BB172_84 Depth=1
	movzbl	(%r10), %ecx
	movzbl	1(%r10), %esi
	movzbl	2(%r10), %edi
	imull	$77, %ecx, %ecx
	imull	$150, %esi, %esi
	addl	%ecx, %esi
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	addl	%edi, %ecx
	addl	%esi, %ecx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%ch, (%rax)
	addq	$4, %r10
	incq	%rax
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	leal	-1(%rdx), %r8d
	jmp	LBB172_187
LBB172_176:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$0, 16(%rsp)                    ## 4-byte Folded Reload
	js	LBB172_83
## %bb.177:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$7, 16(%rsp)                    ## 4-byte Folded Reload
	jb	LBB172_180
## %bb.178:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	328(%rsp), %r9                  ## 8-byte Folded Reload
	cmpq	%r9, 104(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_262
## %bb.179:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	%rsi, 96(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_262
LBB172_180:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	16(%rsp), %eax                  ## 4-byte Reload
LBB172_181:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%eax, %edx
LBB172_182:                             ##   in Loop: Header=BB172_84 Depth=1
	testb	$1, %dl
	jne	LBB172_206
## %bb.183:                             ##   in Loop: Header=BB172_84 Depth=1
	movzbl	(%r10), %ecx
	movzbl	1(%r10), %esi
	movzbl	2(%r10), %edi
	imull	$77, %ecx, %ecx
	imull	$150, %esi, %esi
	addl	%ecx, %esi
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	addl	%edi, %ecx
	addl	%esi, %ecx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%ch, (%rax)
	movb	3(%r10), %cl
	movb	%cl, 1(%rax)
	addq	$4, %r10
	addq	$2, %rax
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	leal	-1(%rdx), %r8d
	jmp	LBB172_207
LBB172_184:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$32, 16(%rsp)                   ## 4-byte Folded Reload
	jae	LBB172_267
## %bb.185:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB172_271
LBB172_186:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%edx, %r8d
LBB172_187:                             ##   in Loop: Header=BB172_84 Depth=1
	testl	%edx, %edx
	je	LBB172_83
## %bb.188:                             ##   in Loop: Header=BB172_84 Depth=1
	incl	%r8d
	xorl	%edx, %edx
LBB172_189:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10,%rdx,4), %eax
	movzbl	1(%r10,%rdx,4), %esi
	movzbl	2(%r10,%rdx,4), %edi
	imull	$77, %eax, %eax
	imull	$150, %esi, %esi
	addl	%eax, %esi
	leal	(%rdi,%rdi,8), %eax
	leal	(%rax,%rax,2), %eax
	addl	%edi, %eax
	addl	%edi, %eax
	addl	%esi, %eax
	movq	8(%rsp), %rcx                   ## 8-byte Reload
	movb	%ah, (%rcx,%rdx)
	movzbl	4(%r10,%rdx,4), %eax
	movzbl	5(%r10,%rdx,4), %esi
	movzbl	6(%r10,%rdx,4), %edi
	imull	$77, %eax, %eax
	imull	$150, %esi, %esi
	addl	%eax, %esi
	leal	(%rdi,%rdi,8), %eax
	leal	(%rax,%rax,2), %eax
	addl	%edi, %eax
	addl	%edi, %eax
	addl	%esi, %eax
	movb	%ah, 1(%rcx,%rdx)
	addq	$2, %rdx
	cmpl	%edx, %r8d
	jne	LBB172_189
	jmp	LBB172_83
LBB172_190:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%ecx, %esi
LBB172_191:                             ##   in Loop: Header=BB172_84 Depth=1
	testl	%ecx, %ecx
	je	LBB172_83
## %bb.192:                             ##   in Loop: Header=BB172_84 Depth=1
	incl	%esi
	xorl	%ecx, %ecx
LBB172_193:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10,%rcx,2), %edx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%dl, 2(%rax,%rcx,4)
	movb	%dl, 1(%rax,%rcx,4)
	movb	%dl, (%rax,%rcx,4)
	movzbl	1(%r10,%rcx,2), %edx
	movb	%dl, 3(%rax,%rcx,4)
	movzbl	2(%r10,%rcx,2), %edx
	movb	%dl, 6(%rax,%rcx,4)
	movb	%dl, 5(%rax,%rcx,4)
	movb	%dl, 4(%rax,%rcx,4)
	movzbl	3(%r10,%rcx,2), %edx
	movb	%dl, 7(%rax,%rcx,4)
	addq	$2, %rcx
	cmpl	%ecx, %esi
	jne	LBB172_193
	jmp	LBB172_83
LBB172_194:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%edx, %r8d
LBB172_195:                             ##   in Loop: Header=BB172_84 Depth=1
	testl	%edx, %edx
	je	LBB172_83
## %bb.196:                             ##   in Loop: Header=BB172_84 Depth=1
	incl	%r8d
	xorl	%edx, %edx
LBB172_197:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10), %esi
	movzbl	1(%r10), %edi
	movzbl	2(%r10), %ecx
	imull	$77, %esi, %esi
	imull	$150, %edi, %edi
	addl	%esi, %edi
	leal	(%rcx,%rcx,8), %esi
	leal	(%rsi,%rsi,2), %eax
	addl	%ecx, %eax
	addl	%ecx, %eax
	addl	%edi, %eax
	movq	8(%rsp), %rdi                   ## 8-byte Reload
	movb	%ah, (%rdi,%rdx)
	movzbl	3(%r10), %eax
	movzbl	4(%r10), %ecx
	movzbl	5(%r10), %esi
	imull	$77, %eax, %eax
	imull	$150, %ecx, %ecx
	addl	%eax, %ecx
	leal	(%rsi,%rsi,8), %eax
	leal	(%rax,%rax,2), %eax
	addl	%esi, %eax
	addl	%esi, %eax
	addl	%ecx, %eax
	movb	%ah, 1(%rdi,%rdx)
	addq	$2, %rdx
	addq	$6, %r10
	cmpl	%edx, %r8d
	jne	LBB172_197
	jmp	LBB172_83
LBB172_198:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%edx, %r8d
LBB172_199:                             ##   in Loop: Header=BB172_84 Depth=1
	testl	%edx, %edx
	je	LBB172_83
## %bb.200:                             ##   in Loop: Header=BB172_84 Depth=1
	incl	%r8d
	xorl	%edx, %edx
LBB172_201:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10), %eax
	movzbl	1(%r10), %esi
	movzbl	2(%r10), %edi
	imull	$77, %eax, %eax
	imull	$150, %esi, %esi
	addl	%eax, %esi
	leal	(%rdi,%rdi,8), %eax
	leal	(%rax,%rax,2), %eax
	addl	%edi, %eax
	addl	%edi, %eax
	addl	%esi, %eax
	movq	8(%rsp), %rcx                   ## 8-byte Reload
	movb	%ah, (%rcx,%rdx,2)
	movb	$-1, 1(%rcx,%rdx,2)
	movzbl	3(%r10), %eax
	movzbl	4(%r10), %esi
	movzbl	5(%r10), %edi
	imull	$77, %eax, %eax
	imull	$150, %esi, %esi
	addl	%eax, %esi
	leal	(%rdi,%rdi,8), %eax
	leal	(%rax,%rax,2), %eax
	addl	%edi, %eax
	addl	%edi, %eax
	addl	%esi, %eax
	movb	%ah, 2(%rcx,%rdx,2)
	movb	$-1, 3(%rcx,%rdx,2)
	addq	$2, %rdx
	addq	$6, %r10
	cmpl	%edx, %r8d
	jne	LBB172_201
	jmp	LBB172_83
LBB172_202:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%edx, %esi
LBB172_203:                             ##   in Loop: Header=BB172_84 Depth=1
	testl	%edx, %edx
	je	LBB172_83
## %bb.204:                             ##   in Loop: Header=BB172_84 Depth=1
	incl	%esi
	xorl	%edx, %edx
LBB172_205:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10), %ecx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%cl, (%rax,%rdx,4)
	movzbl	1(%r10), %ecx
	movb	%cl, 1(%rax,%rdx,4)
	movzbl	2(%r10), %ecx
	movb	%cl, 2(%rax,%rdx,4)
	movb	$-1, 3(%rax,%rdx,4)
	movzbl	3(%r10), %ecx
	movb	%cl, 4(%rax,%rdx,4)
	movzbl	4(%r10), %ecx
	movb	%cl, 5(%rax,%rdx,4)
	movzbl	5(%r10), %ecx
	movb	%cl, 6(%rax,%rdx,4)
	movb	$-1, 7(%rax,%rdx,4)
	addq	$2, %rdx
	addq	$6, %r10
	cmpl	%edx, %esi
	jne	LBB172_205
	jmp	LBB172_83
LBB172_206:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%edx, %r8d
LBB172_207:                             ##   in Loop: Header=BB172_84 Depth=1
	testl	%edx, %edx
	je	LBB172_83
## %bb.208:                             ##   in Loop: Header=BB172_84 Depth=1
	incl	%r8d
	xorl	%edx, %edx
LBB172_209:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10,%rdx,4), %eax
	movzbl	1(%r10,%rdx,4), %esi
	movzbl	2(%r10,%rdx,4), %edi
	imull	$77, %eax, %eax
	imull	$150, %esi, %esi
	addl	%eax, %esi
	leal	(%rdi,%rdi,8), %eax
	leal	(%rax,%rax,2), %eax
	addl	%edi, %eax
	addl	%edi, %eax
	addl	%esi, %eax
	movq	8(%rsp), %rcx                   ## 8-byte Reload
	movb	%ah, (%rcx,%rdx,2)
	movzbl	3(%r10,%rdx,4), %eax
	movb	%al, 1(%rcx,%rdx,2)
	movzbl	4(%r10,%rdx,4), %eax
	movzbl	5(%r10,%rdx,4), %esi
	movzbl	6(%r10,%rdx,4), %edi
	imull	$77, %eax, %eax
	imull	$150, %esi, %esi
	addl	%eax, %esi
	leal	(%rdi,%rdi,8), %eax
	leal	(%rax,%rax,2), %eax
	addl	%edi, %eax
	addl	%edi, %eax
	addl	%esi, %eax
	movb	%ah, 2(%rcx,%rdx,2)
	movzbl	7(%r10,%rdx,4), %eax
	movb	%al, 3(%rcx,%rdx,2)
	addq	$2, %rdx
	cmpl	%edx, %r8d
	jne	LBB172_209
	jmp	LBB172_83
LBB172_210:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%r8d, %edi
LBB172_211:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$7, %r8d
	jb	LBB172_83
## %bb.212:                             ##   in Loop: Header=BB172_84 Depth=1
	incl	%edi
	xorl	%ecx, %ecx
LBB172_213:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10,%rcx,2), %edx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%dl, (%rax,%rcx)
	movzbl	2(%r10,%rcx,2), %edx
	movb	%dl, 1(%rax,%rcx)
	movzbl	4(%r10,%rcx,2), %edx
	movb	%dl, 2(%rax,%rcx)
	movzbl	6(%r10,%rcx,2), %edx
	movb	%dl, 3(%rax,%rcx)
	movzbl	8(%r10,%rcx,2), %edx
	movb	%dl, 4(%rax,%rcx)
	movzbl	10(%r10,%rcx,2), %edx
	movb	%dl, 5(%rax,%rcx)
	movzbl	12(%r10,%rcx,2), %edx
	movb	%dl, 6(%rax,%rcx)
	movzbl	14(%r10,%rcx,2), %edx
	movb	%dl, 7(%rax,%rcx)
	addq	$8, %rcx
	cmpl	%ecx, %edi
	jne	LBB172_213
	jmp	LBB172_83
LBB172_214:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%r8d, %edi
LBB172_215:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$3, %r8d
	jb	LBB172_83
## %bb.216:                             ##   in Loop: Header=BB172_84 Depth=1
	incl	%edi
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	$11, %rax
	xorl	%ecx, %ecx
LBB172_217:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10,%rcx,2), %edx
	movb	%dl, -9(%rax)
	movb	%dl, -10(%rax)
	movb	%dl, -11(%rax)
	movzbl	2(%r10,%rcx,2), %edx
	movb	%dl, -6(%rax)
	movb	%dl, -7(%rax)
	movb	%dl, -8(%rax)
	movzbl	4(%r10,%rcx,2), %edx
	movb	%dl, -3(%rax)
	movb	%dl, -4(%rax)
	movb	%dl, -5(%rax)
	movzbl	6(%r10,%rcx,2), %edx
	movb	%dl, (%rax)
	movb	%dl, -1(%rax)
	movb	%dl, -2(%rax)
	addq	$4, %rcx
	addq	$12, %rax
	cmpl	%ecx, %edi
	jne	LBB172_217
	jmp	LBB172_83
LBB172_218:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%r8d, %edi
LBB172_219:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$3, %r8d
	jb	LBB172_83
## %bb.220:                             ##   in Loop: Header=BB172_84 Depth=1
	incl	%edi
	xorl	%ecx, %ecx
LBB172_221:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10,%rcx), %edx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%dl, (%rax,%rcx,2)
	movb	$-1, 1(%rax,%rcx,2)
	movzbl	1(%r10,%rcx), %edx
	movb	%dl, 2(%rax,%rcx,2)
	movb	$-1, 3(%rax,%rcx,2)
	movzbl	2(%r10,%rcx), %edx
	movb	%dl, 4(%rax,%rcx,2)
	movb	$-1, 5(%rax,%rcx,2)
	movzbl	3(%r10,%rcx), %edx
	movb	%dl, 6(%rax,%rcx,2)
	movb	$-1, 7(%rax,%rcx,2)
	addq	$4, %rcx
	cmpl	%ecx, %edi
	jne	LBB172_221
	jmp	LBB172_83
LBB172_222:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%r8d, %edi
LBB172_223:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$3, %r8d
	jb	LBB172_83
## %bb.224:                             ##   in Loop: Header=BB172_84 Depth=1
	incl	%edi
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	$11, %rax
	xorl	%ecx, %ecx
LBB172_225:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10,%rcx), %edx
	movb	%dl, -9(%rax)
	movb	%dl, -10(%rax)
	movb	%dl, -11(%rax)
	movzbl	1(%r10,%rcx), %edx
	movb	%dl, -6(%rax)
	movb	%dl, -7(%rax)
	movb	%dl, -8(%rax)
	movzbl	2(%r10,%rcx), %edx
	movb	%dl, -3(%rax)
	movb	%dl, -4(%rax)
	movb	%dl, -5(%rax)
	movzbl	3(%r10,%rcx), %edx
	movb	%dl, (%rax)
	movb	%dl, -1(%rax)
	movb	%dl, -2(%rax)
	addq	$4, %rcx
	addq	$12, %rax
	cmpl	%ecx, %edi
	jne	LBB172_225
	jmp	LBB172_83
LBB172_226:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%r8d, %edi
LBB172_227:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$3, %r8d
	jb	LBB172_83
## %bb.228:                             ##   in Loop: Header=BB172_84 Depth=1
	incl	%edi
	xorl	%ecx, %ecx
LBB172_229:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10,%rcx), %edx
	movq	8(%rsp), %rax                   ## 8-byte Reload
	movb	%dl, 2(%rax,%rcx,4)
	movb	%dl, 1(%rax,%rcx,4)
	movb	%dl, (%rax,%rcx,4)
	movb	$-1, 3(%rax,%rcx,4)
	movzbl	1(%r10,%rcx), %edx
	movb	%dl, 6(%rax,%rcx,4)
	movb	%dl, 5(%rax,%rcx,4)
	movb	%dl, 4(%rax,%rcx,4)
	movb	$-1, 7(%rax,%rcx,4)
	movzbl	2(%r10,%rcx), %edx
	movb	%dl, 10(%rax,%rcx,4)
	movb	%dl, 9(%rax,%rcx,4)
	movb	%dl, 8(%rax,%rcx,4)
	movb	$-1, 11(%rax,%rcx,4)
	movzbl	3(%r10,%rcx), %edx
	movb	%dl, 14(%rax,%rcx,4)
	movb	%dl, 13(%rax,%rcx,4)
	movb	%dl, 12(%rax,%rcx,4)
	movb	$-1, 15(%rax,%rcx,4)
	addq	$4, %rcx
	cmpl	%ecx, %edi
	jne	LBB172_229
	jmp	LBB172_83
LBB172_230:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$127, 16(%rsp)                  ## 4-byte Folded Reload
	jae	LBB172_276
## %bb.231:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB172_280
LBB172_232:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$127, 16(%rsp)                  ## 4-byte Folded Reload
	jae	LBB172_283
## %bb.233:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB172_287
LBB172_234:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$127, 16(%rsp)                  ## 4-byte Folded Reload
	jae	LBB172_290
## %bb.235:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB172_294
LBB172_236:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$128, 16(%rsp)                  ## 4-byte Folded Reload
	jae	LBB172_297
## %bb.237:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB172_301
LBB172_238:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$32, 16(%rsp)                   ## 4-byte Folded Reload
	jae	LBB172_304
## %bb.239:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB172_308
LBB172_240:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$31, 16(%rsp)                   ## 4-byte Folded Reload
	jae	LBB172_311
## %bb.241:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_242:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	208(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	addq	200(%rsp), %r10                 ## 8-byte Folded Reload
LBB172_243:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	(%rax,%rcx,2), %xmm0
	vmovdqu	16(%rax,%rcx,2), %xmm1
	vmovdqa	LCPI172_54(%rip), %xmm3         ## xmm3 = [255,255,255,255,255,255,255,255]
	vpand	%xmm3, %xmm1, %xmm2
	vpand	%xmm3, %xmm0, %xmm3
	vpackuswb	%xmm2, %xmm3, %xmm2
	vpunpcklbw	%xmm2, %xmm2, %xmm3     ## xmm3 = xmm2[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
	vpunpckhbw	%xmm2, %xmm2, %xmm2     ## xmm2 = xmm2[8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]
	vpunpcklwd	%xmm0, %xmm3, %xmm4     ## xmm4 = xmm3[0],xmm0[0],xmm3[1],xmm0[1],xmm3[2],xmm0[2],xmm3[3],xmm0[3]
	vpunpckhwd	%xmm0, %xmm3, %xmm0     ## xmm0 = xmm3[4],xmm0[4],xmm3[5],xmm0[5],xmm3[6],xmm0[6],xmm3[7],xmm0[7]
	vpunpcklwd	%xmm1, %xmm2, %xmm3     ## xmm3 = xmm2[0],xmm1[0],xmm2[1],xmm1[1],xmm2[2],xmm1[2],xmm2[3],xmm1[3]
	vpunpckhwd	%xmm1, %xmm2, %xmm1     ## xmm1 = xmm2[4],xmm1[4],xmm2[5],xmm1[5],xmm2[6],xmm1[6],xmm2[7],xmm1[7]
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%xmm3, 32(%rax,%rcx,4)
	vmovdqu	%xmm1, 48(%rax,%rcx,4)
	vmovdqu	%xmm4, (%rax,%rcx,4)
	vmovdqu	%xmm0, 16(%rax,%rcx,4)
	addq	$16, %rcx
	cmpq	%rcx, 24(%rsp)                  ## 8-byte Folded Reload
	jne	LBB172_243
## %bb.244:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	44(%rsp), %eax                  ## 4-byte Reload
	movl	%eax, %ecx
	movq	24(%rsp), %rax                  ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
	jmp	LBB172_143
LBB172_245:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$31, 16(%rsp)                   ## 4-byte Folded Reload
	jae	LBB172_314
## %bb.246:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_247:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	24(%rsp), %rax                  ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	addq	184(%rsp), %r10                 ## 8-byte Folded Reload
	leaq	(%rcx,%rcx,2), %rdx
	addq	136(%rsp), %rdx                 ## 8-byte Folded Reload
	addq	%rbx, %rdx
LBB172_248:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rdx), %xmm0
	vmovdqu	16(%rdx), %xmm1
	vmovdqu	32(%rdx), %xmm2
	vmovdqa	LCPI172_47(%rip), %xmm3         ## xmm3 = [0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13]
	vpshufb	%xmm3, %xmm0, %xmm0
	vpshufb	%xmm3, %xmm1, %xmm1
	vpshufb	%xmm3, %xmm2, %xmm2
	vpalignr	$11, %xmm2, %xmm0, %xmm3        ## xmm3 = xmm2[11,12,13,14,15],xmm0[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$11, %xmm0, %xmm1, %xmm0        ## xmm0 = xmm0[11,12,13,14,15],xmm1[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$11, %xmm1, %xmm2, %xmm1        ## xmm1 = xmm1[11,12,13,14,15],xmm2[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$11, %xmm3, %xmm1, %xmm2        ## xmm2 = xmm3[11,12,13,14,15],xmm1[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$11, %xmm0, %xmm3, %xmm3        ## xmm3 = xmm0[11,12,13,14,15],xmm3[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$10, %xmm3, %xmm3, %xmm3        ## xmm3 = xmm3[10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9]
	vpshufd	$238, %xmm3, %xmm4              ## xmm4 = xmm3[2,3,2,3]
	vpmovzxbd	%xmm4, %ymm4            ## ymm4 = xmm4[0],zero,zero,zero,xmm4[1],zero,zero,zero,xmm4[2],zero,zero,zero,xmm4[3],zero,zero,zero,xmm4[4],zero,zero,zero,xmm4[5],zero,zero,zero,xmm4[6],zero,zero,zero,xmm4[7],zero,zero,zero
	vpmovzxbd	%xmm3, %ymm3            ## ymm3 = xmm3[0],zero,zero,zero,xmm3[1],zero,zero,zero,xmm3[2],zero,zero,zero,xmm3[3],zero,zero,zero,xmm3[4],zero,zero,zero,xmm3[5],zero,zero,zero,xmm3[6],zero,zero,zero,xmm3[7],zero,zero,zero
	vpunpckhbw	%xmm0, %xmm1, %xmm1     ## xmm1 = xmm1[8],xmm0[8],xmm1[9],xmm0[9],xmm1[10],xmm0[10],xmm1[11],xmm0[11],xmm1[12],xmm0[12],xmm1[13],xmm0[13],xmm1[14],xmm0[14],xmm1[15],xmm0[15]
	vpshufb	LCPI172_48(%rip), %xmm1, %xmm1  ## xmm1 = xmm1[1,3,5,6,8,10,12,14,u,u,u,u,u,u,u,u]
	vpmovzxbd	%xmm1, %ymm1            ## ymm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpmovzxbd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero,xmm0[4],zero,zero,zero,xmm0[5],zero,zero,zero,xmm0[6],zero,zero,zero,xmm0[7],zero,zero,zero
	vpshufd	$238, %xmm2, %xmm5              ## xmm5 = xmm2[2,3,2,3]
	vpmovzxbd	%xmm5, %ymm5            ## ymm5 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpmovzxbd	%xmm2, %ymm2            ## ymm2 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vmovdqa	LCPI172_36(%rip), %ymm6         ## ymm6 = <77,u,77,u,77,u,77,u,77,u,77,u,77,u,77,u>
	vpmaddwd	%ymm6, %ymm3, %ymm3
	vpmaddwd	%ymm6, %ymm4, %ymm4
	vmovdqa	LCPI172_37(%rip), %ymm6         ## ymm6 = <150,u,150,u,150,u,150,u,150,u,150,u,150,u,150,u>
	vpmaddwd	%ymm6, %ymm1, %ymm1
	vpmaddwd	%ymm6, %ymm0, %ymm0
	vmovdqa	LCPI172_38(%rip), %ymm6         ## ymm6 = <29,u,29,u,29,u,29,u,29,u,29,u,29,u,29,u>
	vpmaddwd	%ymm6, %ymm2, %ymm2
	vpaddd	%ymm2, %ymm0, %ymm0
	vpaddd	%ymm0, %ymm3, %ymm0
	vpmaddwd	%ymm6, %ymm5, %ymm2
	vpaddd	%ymm2, %ymm4, %ymm2
	vpaddd	%ymm2, %ymm1, %ymm1
	vmovdqa	LCPI172_39(%rip), %ymm2         ## ymm2 = [1,128,128,128,5,128,128,128,9,128,128,128,13,128,128,128,17,128,128,128,21,128,128,128,25,128,128,128,29,128,128,128]
	vpshufb	%ymm2, %ymm0, %ymm0
	vpshufb	%ymm2, %ymm1, %ymm1
	vpackusdw	%ymm1, %ymm0, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpackuswb	%xmm1, %xmm0, %xmm0
	vpshufd	$216, %xmm0, %xmm0              ## xmm0 = xmm0[0,2,1,3]
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%xmm0, (%rax,%rcx)
	addq	$16, %rcx
	addq	$48, %rdx
	cmpq	%rcx, 24(%rsp)                  ## 8-byte Folded Reload
	jne	LBB172_248
## %bb.249:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	44(%rsp), %eax                  ## 4-byte Reload
	movl	%eax, %edx
	movq	24(%rsp), %rax                  ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
	jmp	LBB172_151
LBB172_250:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$31, 16(%rsp)                   ## 4-byte Folded Reload
	jae	LBB172_319
## %bb.251:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_252:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	200(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	addq	184(%rsp), %r10                 ## 8-byte Folded Reload
	leaq	(%rcx,%rcx,2), %rdx
	addq	136(%rsp), %rdx                 ## 8-byte Folded Reload
	addq	%rbx, %rdx
LBB172_253:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rdx), %xmm0
	vmovdqu	16(%rdx), %xmm1
	vmovdqu	32(%rdx), %xmm2
	vmovdqa	LCPI172_47(%rip), %xmm3         ## xmm3 = [0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13]
	vpshufb	%xmm3, %xmm0, %xmm0
	vpshufb	%xmm3, %xmm1, %xmm1
	vpshufb	%xmm3, %xmm2, %xmm2
	vpalignr	$11, %xmm2, %xmm0, %xmm3        ## xmm3 = xmm2[11,12,13,14,15],xmm0[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$11, %xmm0, %xmm1, %xmm0        ## xmm0 = xmm0[11,12,13,14,15],xmm1[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$11, %xmm1, %xmm2, %xmm1        ## xmm1 = xmm1[11,12,13,14,15],xmm2[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$11, %xmm3, %xmm1, %xmm2        ## xmm2 = xmm3[11,12,13,14,15],xmm1[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$11, %xmm0, %xmm3, %xmm3        ## xmm3 = xmm0[11,12,13,14,15],xmm3[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$10, %xmm3, %xmm3, %xmm3        ## xmm3 = xmm3[10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9]
	vpshufd	$238, %xmm3, %xmm4              ## xmm4 = xmm3[2,3,2,3]
	vpmovzxbd	%xmm4, %ymm4            ## ymm4 = xmm4[0],zero,zero,zero,xmm4[1],zero,zero,zero,xmm4[2],zero,zero,zero,xmm4[3],zero,zero,zero,xmm4[4],zero,zero,zero,xmm4[5],zero,zero,zero,xmm4[6],zero,zero,zero,xmm4[7],zero,zero,zero
	vpmovzxbd	%xmm3, %ymm3            ## ymm3 = xmm3[0],zero,zero,zero,xmm3[1],zero,zero,zero,xmm3[2],zero,zero,zero,xmm3[3],zero,zero,zero,xmm3[4],zero,zero,zero,xmm3[5],zero,zero,zero,xmm3[6],zero,zero,zero,xmm3[7],zero,zero,zero
	vpunpckhbw	%xmm0, %xmm1, %xmm1     ## xmm1 = xmm1[8],xmm0[8],xmm1[9],xmm0[9],xmm1[10],xmm0[10],xmm1[11],xmm0[11],xmm1[12],xmm0[12],xmm1[13],xmm0[13],xmm1[14],xmm0[14],xmm1[15],xmm0[15]
	vpshufb	LCPI172_48(%rip), %xmm1, %xmm1  ## xmm1 = xmm1[1,3,5,6,8,10,12,14,u,u,u,u,u,u,u,u]
	vpmovzxbd	%xmm1, %ymm1            ## ymm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpmovzxbd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero,xmm0[4],zero,zero,zero,xmm0[5],zero,zero,zero,xmm0[6],zero,zero,zero,xmm0[7],zero,zero,zero
	vpshufd	$238, %xmm2, %xmm5              ## xmm5 = xmm2[2,3,2,3]
	vpmovzxbd	%xmm5, %ymm5            ## ymm5 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpmovzxbd	%xmm2, %ymm2            ## ymm2 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vmovdqa	LCPI172_36(%rip), %ymm6         ## ymm6 = <77,u,77,u,77,u,77,u,77,u,77,u,77,u,77,u>
	vpmaddwd	%ymm6, %ymm3, %ymm3
	vpmaddwd	%ymm6, %ymm4, %ymm4
	vmovdqa	LCPI172_37(%rip), %ymm6         ## ymm6 = <150,u,150,u,150,u,150,u,150,u,150,u,150,u,150,u>
	vpmaddwd	%ymm6, %ymm1, %ymm1
	vpmaddwd	%ymm6, %ymm0, %ymm0
	vmovdqa	LCPI172_38(%rip), %ymm6         ## ymm6 = <29,u,29,u,29,u,29,u,29,u,29,u,29,u,29,u>
	vpmaddwd	%ymm6, %ymm2, %ymm2
	vpaddd	%ymm2, %ymm0, %ymm0
	vpaddd	%ymm0, %ymm3, %ymm0
	vpmaddwd	%ymm6, %ymm5, %ymm2
	vpaddd	%ymm2, %ymm4, %ymm2
	vpaddd	%ymm2, %ymm1, %ymm1
	vmovdqa	LCPI172_39(%rip), %ymm2         ## ymm2 = [1,128,128,128,5,128,128,128,9,128,128,128,13,128,128,128,17,128,128,128,21,128,128,128,25,128,128,128,29,128,128,128]
	vpshufb	%ymm2, %ymm0, %ymm0
	vpshufb	%ymm2, %ymm1, %ymm1
	vpackusdw	%ymm1, %ymm0, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpackuswb	%xmm1, %xmm0, %xmm0
	vpshufd	$216, %xmm0, %xmm0              ## xmm0 = xmm0[0,2,1,3]
	vpcmpeqd	%xmm2, %xmm2, %xmm2
	vpunpcklbw	%xmm2, %xmm0, %xmm1     ## xmm1 = xmm0[0],xmm2[0],xmm0[1],xmm2[1],xmm0[2],xmm2[2],xmm0[3],xmm2[3],xmm0[4],xmm2[4],xmm0[5],xmm2[5],xmm0[6],xmm2[6],xmm0[7],xmm2[7]
	vpunpckhbw	%xmm2, %xmm0, %xmm0     ## xmm0 = xmm0[8],xmm2[8],xmm0[9],xmm2[9],xmm0[10],xmm2[10],xmm0[11],xmm2[11],xmm0[12],xmm2[12],xmm0[13],xmm2[13],xmm0[14],xmm2[14],xmm0[15],xmm2[15]
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%xmm0, 16(%rax,%rcx,2)
	vmovdqu	%xmm1, (%rax,%rcx,2)
	addq	$16, %rcx
	addq	$48, %rdx
	cmpq	%rcx, 24(%rsp)                  ## 8-byte Folded Reload
	jne	LBB172_253
## %bb.254:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	44(%rsp), %eax                  ## 4-byte Reload
	movl	%eax, %edx
	movq	24(%rsp), %rax                  ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
	jmp	LBB172_159
LBB172_255:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$31, 16(%rsp)                   ## 4-byte Folded Reload
	jae	LBB172_324
## %bb.256:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_257:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	208(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	addq	184(%rsp), %r10                 ## 8-byte Folded Reload
	leaq	(%rcx,%rcx,2), %rdx
	addq	136(%rsp), %rdx                 ## 8-byte Folded Reload
	addq	%rbx, %rdx
LBB172_258:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rdx), %xmm0
	vmovdqu	16(%rdx), %xmm1
	vmovdqu	32(%rdx), %xmm2
	vmovdqa	LCPI172_47(%rip), %xmm3         ## xmm3 = [0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13]
	vpshufb	%xmm3, %xmm0, %xmm0
	vpshufb	%xmm3, %xmm1, %xmm1
	vpshufb	%xmm3, %xmm2, %xmm2
	vpalignr	$11, %xmm2, %xmm0, %xmm3        ## xmm3 = xmm2[11,12,13,14,15],xmm0[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$11, %xmm0, %xmm1, %xmm0        ## xmm0 = xmm0[11,12,13,14,15],xmm1[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$11, %xmm1, %xmm2, %xmm1        ## xmm1 = xmm1[11,12,13,14,15],xmm2[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$11, %xmm3, %xmm1, %xmm2        ## xmm2 = xmm3[11,12,13,14,15],xmm1[0,1,2,3,4,5,6,7,8,9,10]
	vmovdqa	LCPI172_49(%rip), %xmm4         ## xmm4 = [255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0]
	vpblendvb	%xmm4, %xmm0, %xmm1, %xmm1
	vpalignr	$11, %xmm0, %xmm3, %xmm0        ## xmm0 = xmm0[11,12,13,14,15],xmm3[0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$10, %xmm0, %xmm0, %xmm0        ## xmm0 = xmm0[10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9]
	vpunpcklbw	%xmm1, %xmm0, %xmm3     ## xmm3 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	vpunpckhbw	%xmm1, %xmm0, %xmm0     ## xmm0 = xmm0[8],xmm1[8],xmm0[9],xmm1[9],xmm0[10],xmm1[10],xmm0[11],xmm1[11],xmm0[12],xmm1[12],xmm0[13],xmm1[13],xmm0[14],xmm1[14],xmm0[15],xmm1[15]
	vpcmpeqd	%xmm4, %xmm4, %xmm4
	vpunpcklbw	%xmm4, %xmm2, %xmm1     ## xmm1 = xmm2[0],xmm4[0],xmm2[1],xmm4[1],xmm2[2],xmm4[2],xmm2[3],xmm4[3],xmm2[4],xmm4[4],xmm2[5],xmm4[5],xmm2[6],xmm4[6],xmm2[7],xmm4[7]
	vpunpckhbw	%xmm4, %xmm2, %xmm2     ## xmm2 = xmm2[8],xmm4[8],xmm2[9],xmm4[9],xmm2[10],xmm4[10],xmm2[11],xmm4[11],xmm2[12],xmm4[12],xmm2[13],xmm4[13],xmm2[14],xmm4[14],xmm2[15],xmm4[15]
	vpunpcklwd	%xmm1, %xmm3, %xmm4     ## xmm4 = xmm3[0],xmm1[0],xmm3[1],xmm1[1],xmm3[2],xmm1[2],xmm3[3],xmm1[3]
	vpunpckhwd	%xmm1, %xmm3, %xmm1     ## xmm1 = xmm3[4],xmm1[4],xmm3[5],xmm1[5],xmm3[6],xmm1[6],xmm3[7],xmm1[7]
	vpunpcklwd	%xmm2, %xmm0, %xmm3     ## xmm3 = xmm0[0],xmm2[0],xmm0[1],xmm2[1],xmm0[2],xmm2[2],xmm0[3],xmm2[3]
	vpunpckhwd	%xmm2, %xmm0, %xmm0     ## xmm0 = xmm0[4],xmm2[4],xmm0[5],xmm2[5],xmm0[6],xmm2[6],xmm0[7],xmm2[7]
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%xmm0, 48(%rax,%rcx,4)
	vmovdqu	%xmm3, 32(%rax,%rcx,4)
	vmovdqu	%xmm1, 16(%rax,%rcx,4)
	vmovdqu	%xmm4, (%rax,%rcx,4)
	addq	$16, %rcx
	addq	$48, %rdx
	cmpq	%rcx, 24(%rsp)                  ## 8-byte Folded Reload
	jne	LBB172_258
## %bb.259:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	44(%rsp), %eax                  ## 4-byte Reload
	movl	%eax, %edx
	movq	24(%rsp), %rax                  ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
	jmp	LBB172_167
LBB172_260:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$16, 16(%rsp)                   ## 4-byte Folded Reload
	jae	LBB172_327
## %bb.261:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB172_331
LBB172_262:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpl	$15, 16(%rsp)                   ## 4-byte Folded Reload
	jae	LBB172_334
## %bb.263:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_264:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	512(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	addq	504(%rsp), %r10                 ## 8-byte Folded Reload
LBB172_265:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	(%rax,%rcx,4), %xmm0
	vmovdqu	16(%rax,%rcx,4), %xmm1
	vmovdqa	LCPI172_31(%rip), %xmm6         ## xmm6 = <0,4,8,12,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm6, %xmm1, %xmm2
	vpshufb	%xmm6, %xmm0, %xmm3
	vpunpckldq	%xmm2, %xmm3, %xmm2     ## xmm2 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
	vmovdqa	LCPI172_33(%rip), %xmm4         ## xmm4 = <1,5,9,13,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm4, %xmm1, %xmm3
	vpshufb	%xmm4, %xmm0, %xmm4
	vpunpckldq	%xmm3, %xmm4, %xmm3     ## xmm3 = xmm4[0],xmm3[0],xmm4[1],xmm3[1]
	vmovdqa	LCPI172_34(%rip), %xmm5         ## xmm5 = <2,6,10,14,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm5, %xmm1, %xmm4
	vpshufb	%xmm5, %xmm0, %xmm5
	vpunpckldq	%xmm4, %xmm5, %xmm4     ## xmm4 = xmm5[0],xmm4[0],xmm5[1],xmm4[1]
	vpmovzxbd	%xmm2, %ymm2            ## ymm2 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpmovzxbd	%xmm3, %ymm3            ## ymm3 = xmm3[0],zero,zero,zero,xmm3[1],zero,zero,zero,xmm3[2],zero,zero,zero,xmm3[3],zero,zero,zero,xmm3[4],zero,zero,zero,xmm3[5],zero,zero,zero,xmm3[6],zero,zero,zero,xmm3[7],zero,zero,zero
	vpmovzxbd	%xmm4, %ymm4            ## ymm4 = xmm4[0],zero,zero,zero,xmm4[1],zero,zero,zero,xmm4[2],zero,zero,zero,xmm4[3],zero,zero,zero,xmm4[4],zero,zero,zero,xmm4[5],zero,zero,zero,xmm4[6],zero,zero,zero,xmm4[7],zero,zero,zero
	vpmaddwd	LCPI172_42(%rip), %ymm2, %ymm2
	vpmaddwd	LCPI172_43(%rip), %ymm3, %ymm3
	vpaddd	%ymm2, %ymm3, %ymm2
	vpmaddwd	LCPI172_44(%rip), %ymm4, %ymm3
	vpaddd	%ymm3, %ymm2, %ymm2
	vpsrld	$8, %ymm2, %ymm2
	vextracti128	$1, %ymm2, %xmm3
	vpshufb	%xmm6, %xmm3, %xmm3
	vpshufb	%xmm6, %xmm2, %xmm2
	vpunpckldq	%xmm3, %xmm2, %xmm2     ## xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovdqa	LCPI172_40(%rip), %xmm3         ## xmm3 = <3,7,11,15,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm3, %xmm1, %xmm1
	vpshufb	%xmm3, %xmm0, %xmm0
	vpunpckldq	%xmm1, %xmm0, %xmm0     ## xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	vpunpcklbw	%xmm0, %xmm2, %xmm0     ## xmm0 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3],xmm2[4],xmm0[4],xmm2[5],xmm0[5],xmm2[6],xmm0[6],xmm2[7],xmm0[7]
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%xmm0, (%rax,%rcx,2)
	addq	$8, %rcx
	cmpq	%rcx, 160(%rsp)                 ## 8-byte Folded Reload
	jne	LBB172_265
## %bb.266:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	520(%rsp), %eax                 ## 4-byte Reload
	movl	%eax, %edx
	movq	160(%rsp), %rax                 ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
	jmp	LBB172_182
LBB172_267:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_268:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	112(%rax,%rcx,4), %xmm15
	vmovdqa	LCPI172_35(%rip), %xmm2         ## xmm2 = <u,u,u,u,2,6,10,14,u,u,u,u,u,u,u,u>
	vpshufb	%xmm2, %xmm15, %xmm0
	vmovdqu	96(%rax,%rcx,4), %xmm3
	vpshufb	%xmm2, %xmm3, %xmm1
	vpunpckldq	%xmm0, %xmm1, %xmm0     ## xmm0 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
	vinserti128	$1, %xmm0, %ymm0, %ymm0
	vmovdqu	80(%rax,%rcx,4), %xmm14
	vmovdqa	LCPI172_34(%rip), %xmm7         ## xmm7 = <2,6,10,14,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm7, %xmm14, %xmm1
	vmovdqu	64(%rax,%rcx,4), %xmm5
	vpshufb	%xmm7, %xmm5, %xmm4
	vpunpckldq	%xmm1, %xmm4, %xmm1     ## xmm1 = xmm4[0],xmm1[0],xmm4[1],xmm1[1]
	vinserti128	$1, %xmm1, %ymm0, %ymm1
	vpblendd	$192, %ymm0, %ymm1, %ymm11      ## ymm11 = ymm1[0,1,2,3,4,5],ymm0[6,7]
	vmovdqu	(%rax,%rcx,4), %xmm13
	vmovdqu	16(%rax,%rcx,4), %xmm4
	vmovdqu	32(%rax,%rcx,4), %xmm0
	vmovdqu	48(%rax,%rcx,4), %xmm1
	vpshufb	%xmm2, %xmm1, %xmm6
	vpshufb	%xmm2, %xmm0, %xmm10
	vpunpckldq	%xmm6, %xmm10, %xmm10   ## xmm10 = xmm10[0],xmm6[0],xmm10[1],xmm6[1]
	vpshufb	%xmm7, %xmm4, %xmm6
	vpshufb	%xmm7, %xmm13, %xmm9
	vpunpckldq	%xmm6, %xmm9, %xmm6     ## xmm6 = xmm9[0],xmm6[0],xmm9[1],xmm6[1]
	vpblendd	$12, %xmm10, %xmm6, %xmm6       ## xmm6 = xmm6[0,1],xmm10[2,3]
	vpblendd	$240, %ymm11, %ymm6, %ymm11     ## ymm11 = ymm6[0,1,2,3],ymm11[4,5,6,7]
	vmovdqa	LCPI172_59(%rip), %xmm10        ## xmm10 = <128,128,u,u,u,u,u,u,u,u,0,4,8,12,128,128>
	vpshufb	%xmm10, %xmm5, %xmm6
	vpshufb	%xmm12, %xmm14, %xmm7
	vpor	%xmm6, %xmm7, %xmm6
	vinserti128	$1, %xmm6, %ymm0, %ymm6
	vmovdqa	LCPI172_61(%rip), %xmm8         ## xmm8 = <u,u,128,128,128,128,0,4,8,12,u,u,u,u,u,u>
	vpshufb	%xmm8, %xmm15, %xmm7
	vmovdqa	LCPI172_62(%rip), %xmm9         ## xmm9 = <u,u,0,4,8,12,128,128,128,128,u,u,u,u,u,u>
	vpshufb	%xmm9, %xmm3, %xmm2
	vpor	%xmm7, %xmm2, %xmm2
	vinserti128	$1, %xmm2, %ymm0, %ymm2
	vpblendw	$225, %ymm6, %ymm2, %ymm2       ## ymm2 = ymm6[0],ymm2[1,2,3,4],ymm6[5,6,7,8],ymm2[9,10,11,12],ymm6[13,14,15]
	vmovdqa	%ymm2, 608(%rsp)                ## 32-byte Spill
	vpshufb	%xmm10, %xmm13, %xmm6
	vpshufb	%xmm8, %xmm1, %xmm7
	vpblendw	$225, %xmm6, %xmm7, %xmm6       ## xmm6 = xmm6[0],xmm7[1,2,3,4],xmm6[5,6,7]
	vpshufb	%xmm12, %xmm4, %xmm7
	vpshufb	%xmm9, %xmm0, %xmm2
	vpblendw	$225, %xmm7, %xmm2, %xmm2       ## xmm2 = xmm7[0],xmm2[1,2,3,4],xmm7[5,6,7]
	vpor	%xmm6, %xmm2, %xmm2
	vmovdqa	LCPI172_63(%rip), %xmm9         ## xmm9 = <13,128,128,128,128,u,u,u,u,u,u,u,u,1,5,9>
	vpshufb	%xmm9, %xmm3, %xmm3
	vmovdqa	LCPI172_64(%rip), %xmm8         ## xmm8 = <128,1,5,9,13,u,u,u,u,u,u,u,u,128,128,128>
	vpshufb	%xmm8, %xmm15, %xmm6
	vpor	%xmm3, %xmm6, %xmm3
	vmovdqa	LCPI172_65(%rip), %xmm10        ## xmm10 = <u,u,u,u,u,128,128,128,128,1,5,9,13,u,u,u>
	vpshufb	%xmm10, %xmm14, %xmm6
	vmovdqa	LCPI172_66(%rip), %xmm7         ## xmm7 = <u,u,u,u,u,1,5,9,13,128,128,128,128,u,u,u>
	vpshufb	%xmm7, %xmm5, %xmm5
	vpor	%xmm6, %xmm5, %xmm5
	vinserti128	$1, %xmm3, %ymm0, %ymm3
	vinserti128	$1, %xmm5, %ymm0, %ymm5
	vmovdqa	LCPI172_67(%rip), %ymm6         ## ymm6 = <u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255>
	vpblendvb	%ymm6, %ymm3, %ymm5, %ymm3
	vpshufb	%xmm9, %xmm0, %xmm0
	vpshufb	%xmm8, %xmm1, %xmm1
	vpor	%xmm0, %xmm1, %xmm0
	vpshufb	%xmm10, %xmm4, %xmm1
	vpshufb	%xmm7, %xmm13, %xmm4
	vpor	%xmm1, %xmm4, %xmm1
	vmovdqa	LCPI172_68(%rip), %xmm4         ## xmm4 = [255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255]
	vpblendvb	%xmm4, %xmm0, %xmm1, %xmm0
	vpblendd	$240, 608(%rsp), %ymm2, %ymm1   ## 32-byte Folded Reload
                                        ## ymm1 = ymm2[0,1,2,3],mem[4,5,6,7]
	vpblendd	$240, %ymm3, %ymm0, %ymm0       ## ymm0 = ymm0[0,1,2,3],ymm3[4,5,6,7]
	vpalignr	$5, %ymm1, %ymm11, %ymm2        ## ymm2 = ymm1[5,6,7,8,9,10,11,12,13,14,15],ymm11[0,1,2,3,4],ymm1[21,22,23,24,25,26,27,28,29,30,31],ymm11[16,17,18,19,20]
	vpalignr	$5, %ymm0, %ymm1, %ymm1         ## ymm1 = ymm0[5,6,7,8,9,10,11,12,13,14,15],ymm1[0,1,2,3,4],ymm0[21,22,23,24,25,26,27,28,29,30,31],ymm1[16,17,18,19,20]
	vpalignr	$5, %ymm11, %ymm0, %ymm0        ## ymm0 = ymm11[5,6,7,8,9,10,11,12,13,14,15],ymm0[0,1,2,3,4],ymm11[21,22,23,24,25,26,27,28,29,30,31],ymm0[16,17,18,19,20]
	vpalignr	$5, %ymm2, %ymm1, %ymm3         ## ymm3 = ymm2[5,6,7,8,9,10,11,12,13,14,15],ymm1[0,1,2,3,4],ymm2[21,22,23,24,25,26,27,28,29,30,31],ymm1[16,17,18,19,20]
	vpalignr	$5, %ymm1, %ymm0, %ymm1         ## ymm1 = ymm1[5,6,7,8,9,10,11,12,13,14,15],ymm0[0,1,2,3,4],ymm1[21,22,23,24,25,26,27,28,29,30,31],ymm0[16,17,18,19,20]
	vpalignr	$5, %ymm0, %ymm2, %ymm0         ## ymm0 = ymm0[5,6,7,8,9,10,11,12,13,14,15],ymm2[0,1,2,3,4],ymm0[21,22,23,24,25,26,27,28,29,30,31],ymm2[16,17,18,19,20]
	vinserti128	$1, %xmm1, %ymm3, %ymm2
	vpblendd	$240, %ymm3, %ymm0, %ymm3       ## ymm3 = ymm0[0,1,2,3],ymm3[4,5,6,7]
	vperm2i128	$49, %ymm0, %ymm1, %ymm0 ## ymm0 = ymm1[2,3],ymm0[2,3]
	vmovdqa	LCPI172_55(%rip), %ymm4         ## ymm4 = [0,11,6,1,12,7,2,13,8,3,14,9,4,15,10,5,0,11,6,1,12,7,2,13,8,3,14,9,4,15,10,5]
	vpshufb	%ymm4, %ymm3, %ymm1
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%ymm1, 32(%rax)
	vpshufb	%ymm4, %ymm0, %ymm0
	vmovdqu	%ymm0, 64(%rax)
	vpshufb	%ymm4, %ymm2, %ymm0
	vmovdqu	%ymm0, (%rax)
	addq	$32, %rcx
	addq	$96, %rax
	movq	%rax, 56(%rsp)                  ## 8-byte Spill
	cmpq	%rcx, 264(%rsp)                 ## 8-byte Folded Reload
	jne	LBB172_268
## %bb.269:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	264(%rsp), %rcx                 ## 8-byte Reload
	cmpl	$16, 312(%rsp)                  ## 4-byte Folded Reload
	ja	LBB172_271
## %bb.270:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	480(%rsp), %r10                 ## 8-byte Folded Reload
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	296(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	movl	248(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_274
LBB172_271:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	216(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	addq	320(%rsp), %r10                 ## 8-byte Folded Reload
	leaq	(%rcx,%rcx,2), %rsi
	addq	128(%rsp), %rsi                 ## 8-byte Folded Reload
	addq	120(%rsp), %rsi                 ## 8-byte Folded Reload
LBB172_272:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	(%rax,%rcx,4), %xmm0
	vmovdqu	16(%rax,%rcx,4), %xmm1
	vmovdqu	32(%rax,%rcx,4), %xmm2
	vmovdqu	48(%rax,%rcx,4), %xmm3
	vmovdqa	LCPI172_35(%rip), %xmm5         ## xmm5 = <u,u,u,u,2,6,10,14,u,u,u,u,u,u,u,u>
	vpshufb	%xmm5, %xmm3, %xmm4
	vpshufb	%xmm5, %xmm2, %xmm5
	vpunpckldq	%xmm4, %xmm5, %xmm9     ## xmm9 = xmm5[0],xmm4[0],xmm5[1],xmm4[1]
	vmovdqa	LCPI172_34(%rip), %xmm4         ## xmm4 = <2,6,10,14,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm4, %xmm1, %xmm5
	vpshufb	%xmm4, %xmm0, %xmm6
	vpunpckldq	%xmm5, %xmm6, %xmm5     ## xmm5 = xmm6[0],xmm5[0],xmm6[1],xmm5[1]
	vpshufb	LCPI172_59(%rip), %xmm0, %xmm6  ## xmm6 = zero,zero,xmm0[u,u,u,u,u,u,u,u,0,4,8,12],zero,zero
	vpshufb	LCPI172_61(%rip), %xmm3, %xmm7  ## xmm7 = xmm3[u,u],zero,zero,zero,zero,xmm3[0,4,8,12,u,u,u,u,u,u]
	vpblendw	$225, %xmm6, %xmm7, %xmm6       ## xmm6 = xmm6[0],xmm7[1,2,3,4],xmm6[5,6,7]
	vpshufb	LCPI172_60(%rip), %xmm1, %xmm7  ## xmm7 = xmm1[8,12,u,u,u,u,u,u,u,u],zero,zero,zero,zero,xmm1[0,4]
	vpshufb	LCPI172_62(%rip), %xmm2, %xmm4  ## xmm4 = xmm2[u,u,0,4,8,12],zero,zero,zero,zero,xmm2[u,u,u,u,u,u]
	vpblendw	$225, %xmm7, %xmm4, %xmm4       ## xmm4 = xmm7[0],xmm4[1,2,3,4],xmm7[5,6,7]
	vpor	%xmm6, %xmm4, %xmm4
	vpshufb	LCPI172_63(%rip), %xmm2, %xmm2  ## xmm2 = xmm2[13],zero,zero,zero,zero,xmm2[u,u,u,u,u,u,u,u,1,5,9]
	vpshufb	LCPI172_64(%rip), %xmm3, %xmm3  ## xmm3 = zero,xmm3[1,5,9,13,u,u,u,u,u,u,u,u],zero,zero,zero
	vpor	%xmm2, %xmm3, %xmm2
	vpshufb	LCPI172_65(%rip), %xmm1, %xmm1  ## xmm1 = xmm1[u,u,u,u,u],zero,zero,zero,zero,xmm1[1,5,9,13,u,u,u]
	vpshufb	LCPI172_66(%rip), %xmm0, %xmm0  ## xmm0 = xmm0[u,u,u,u,u,1,5,9,13],zero,zero,zero,zero,xmm0[u,u,u]
	vpor	%xmm1, %xmm0, %xmm0
	vmovdqa	LCPI172_68(%rip), %xmm1         ## xmm1 = [255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255]
	vpblendvb	%xmm1, %xmm2, %xmm0, %xmm0
	vpblendd	$12, %xmm9, %xmm5, %xmm1        ## xmm1 = xmm5[0,1],xmm9[2,3]
	vpalignr	$5, %xmm4, %xmm5, %xmm2         ## xmm2 = xmm4[5,6,7,8,9,10,11,12,13,14,15],xmm5[0,1,2,3,4]
	vpalignr	$5, %xmm0, %xmm4, %xmm3         ## xmm3 = xmm0[5,6,7,8,9,10,11,12,13,14,15],xmm4[0,1,2,3,4]
	vpalignr	$5, %xmm1, %xmm0, %xmm0         ## xmm0 = xmm1[5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4]
	vpalignr	$5, %xmm2, %xmm3, %xmm1         ## xmm1 = xmm2[5,6,7,8,9,10,11,12,13,14,15],xmm3[0,1,2,3,4]
	vpalignr	$5, %xmm3, %xmm0, %xmm3         ## xmm3 = xmm3[5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4]
	vpalignr	$5, %xmm0, %xmm2, %xmm0         ## xmm0 = xmm0[5,6,7,8,9,10,11,12,13,14,15],xmm2[0,1,2,3,4]
	vmovdqa	LCPI172_58(%rip), %xmm2         ## xmm2 = [0,11,6,1,12,7,2,13,8,3,14,9,4,15,10,5]
	vpshufb	%xmm2, %xmm1, %xmm1
	vmovdqu	%xmm1, (%rsi)
	vpshufb	%xmm2, %xmm3, %xmm1
	vmovdqu	%xmm1, 16(%rsi)
	vpshufb	%xmm2, %xmm0, %xmm0
	vmovdqu	%xmm0, 32(%rsi)
	addq	$16, %rcx
	addq	$48, %rsi
	cmpq	%rcx, 176(%rsp)                 ## 8-byte Folded Reload
	jne	LBB172_272
## %bb.273:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	224(%rsp), %eax                 ## 4-byte Reload
LBB172_274:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	%eax, %ecx
	incl	%ecx
	xorl	%edx, %edx
LBB172_275:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r10,%rdx,4), %eax
	movq	8(%rsp), %rsi                   ## 8-byte Reload
	movb	%al, (%rsi)
	movzbl	1(%r10,%rdx,4), %eax
	movb	%al, 1(%rsi)
	movzbl	2(%r10,%rdx,4), %eax
	movb	%al, 2(%rsi)
	incq	%rdx
	addq	$3, %rsi
	movq	%rsi, 8(%rsp)                   ## 8-byte Spill
	cmpl	%edx, %ecx
	jne	LBB172_275
	jmp	LBB172_83
LBB172_276:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	448(%rsp), %rax                 ## 8-byte Reload
	movq	128(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rax,%rcx), %rsi
	xorl	%edi, %edi
LBB172_277:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	608(%rsp), %rax                 ## 8-byte Reload
	vmovdqu	-96(%rax,%rdi), %ymm0
	vmovdqu	-64(%rax,%rdi), %ymm1
	vmovdqu	-32(%rax,%rdi), %ymm2
	vmovdqu	(%rax,%rdi), %ymm3
	vpermq	$212, %ymm0, %ymm4              ## ymm4 = ymm0[0,1,1,3]
	vpcmpeqd	%ymm5, %ymm5, %ymm5
	vpunpcklbw	%ymm5, %ymm4, %ymm4     ## ymm4 = ymm4[0],ymm5[0],ymm4[1],ymm5[1],ymm4[2],ymm5[2],ymm4[3],ymm5[3],ymm4[4],ymm5[4],ymm4[5],ymm5[5],ymm4[6],ymm5[6],ymm4[7],ymm5[7],ymm4[16],ymm5[16],ymm4[17],ymm5[17],ymm4[18],ymm5[18],ymm4[19],ymm5[19],ymm4[20],ymm5[20],ymm4[21],ymm5[21],ymm4[22],ymm5[22],ymm4[23],ymm5[23]
	vpermq	$246, %ymm0, %ymm0              ## ymm0 = ymm0[2,1,3,3]
	vpunpcklbw	%ymm5, %ymm0, %ymm0     ## ymm0 = ymm0[0],ymm5[0],ymm0[1],ymm5[1],ymm0[2],ymm5[2],ymm0[3],ymm5[3],ymm0[4],ymm5[4],ymm0[5],ymm5[5],ymm0[6],ymm5[6],ymm0[7],ymm5[7],ymm0[16],ymm5[16],ymm0[17],ymm5[17],ymm0[18],ymm5[18],ymm0[19],ymm5[19],ymm0[20],ymm5[20],ymm0[21],ymm5[21],ymm0[22],ymm5[22],ymm0[23],ymm5[23]
	vmovdqu	%ymm0, -160(%rsi,%rdi,2)
	vmovdqu	%ymm4, -192(%rsi,%rdi,2)
	vpermq	$212, %ymm1, %ymm0              ## ymm0 = ymm1[0,1,1,3]
	vpunpcklbw	%ymm5, %ymm0, %ymm0     ## ymm0 = ymm0[0],ymm5[0],ymm0[1],ymm5[1],ymm0[2],ymm5[2],ymm0[3],ymm5[3],ymm0[4],ymm5[4],ymm0[5],ymm5[5],ymm0[6],ymm5[6],ymm0[7],ymm5[7],ymm0[16],ymm5[16],ymm0[17],ymm5[17],ymm0[18],ymm5[18],ymm0[19],ymm5[19],ymm0[20],ymm5[20],ymm0[21],ymm5[21],ymm0[22],ymm5[22],ymm0[23],ymm5[23]
	vpermq	$246, %ymm1, %ymm1              ## ymm1 = ymm1[2,1,3,3]
	vpunpcklbw	%ymm5, %ymm1, %ymm1     ## ymm1 = ymm1[0],ymm5[0],ymm1[1],ymm5[1],ymm1[2],ymm5[2],ymm1[3],ymm5[3],ymm1[4],ymm5[4],ymm1[5],ymm5[5],ymm1[6],ymm5[6],ymm1[7],ymm5[7],ymm1[16],ymm5[16],ymm1[17],ymm5[17],ymm1[18],ymm5[18],ymm1[19],ymm5[19],ymm1[20],ymm5[20],ymm1[21],ymm5[21],ymm1[22],ymm5[22],ymm1[23],ymm5[23]
	vmovdqu	%ymm1, -96(%rsi,%rdi,2)
	vmovdqu	%ymm0, -128(%rsi,%rdi,2)
	vpermq	$212, %ymm2, %ymm0              ## ymm0 = ymm2[0,1,1,3]
	vpunpcklbw	%ymm5, %ymm0, %ymm0     ## ymm0 = ymm0[0],ymm5[0],ymm0[1],ymm5[1],ymm0[2],ymm5[2],ymm0[3],ymm5[3],ymm0[4],ymm5[4],ymm0[5],ymm5[5],ymm0[6],ymm5[6],ymm0[7],ymm5[7],ymm0[16],ymm5[16],ymm0[17],ymm5[17],ymm0[18],ymm5[18],ymm0[19],ymm5[19],ymm0[20],ymm5[20],ymm0[21],ymm5[21],ymm0[22],ymm5[22],ymm0[23],ymm5[23]
	vpermq	$246, %ymm2, %ymm1              ## ymm1 = ymm2[2,1,3,3]
	vpunpcklbw	%ymm5, %ymm1, %ymm1     ## ymm1 = ymm1[0],ymm5[0],ymm1[1],ymm5[1],ymm1[2],ymm5[2],ymm1[3],ymm5[3],ymm1[4],ymm5[4],ymm1[5],ymm5[5],ymm1[6],ymm5[6],ymm1[7],ymm5[7],ymm1[16],ymm5[16],ymm1[17],ymm5[17],ymm1[18],ymm5[18],ymm1[19],ymm5[19],ymm1[20],ymm5[20],ymm1[21],ymm5[21],ymm1[22],ymm5[22],ymm1[23],ymm5[23]
	vmovdqu	%ymm1, -32(%rsi,%rdi,2)
	vmovdqu	%ymm0, -64(%rsi,%rdi,2)
	vpermq	$212, %ymm3, %ymm0              ## ymm0 = ymm3[0,1,1,3]
	vpunpcklbw	%ymm5, %ymm0, %ymm0     ## ymm0 = ymm0[0],ymm5[0],ymm0[1],ymm5[1],ymm0[2],ymm5[2],ymm0[3],ymm5[3],ymm0[4],ymm5[4],ymm0[5],ymm5[5],ymm0[6],ymm5[6],ymm0[7],ymm5[7],ymm0[16],ymm5[16],ymm0[17],ymm5[17],ymm0[18],ymm5[18],ymm0[19],ymm5[19],ymm0[20],ymm5[20],ymm0[21],ymm5[21],ymm0[22],ymm5[22],ymm0[23],ymm5[23]
	vpermq	$246, %ymm3, %ymm1              ## ymm1 = ymm3[2,1,3,3]
	vpunpcklbw	%ymm5, %ymm1, %ymm1     ## ymm1 = ymm1[0],ymm5[0],ymm1[1],ymm5[1],ymm1[2],ymm5[2],ymm1[3],ymm5[3],ymm1[4],ymm5[4],ymm1[5],ymm5[5],ymm1[6],ymm5[6],ymm1[7],ymm5[7],ymm1[16],ymm5[16],ymm1[17],ymm5[17],ymm1[18],ymm5[18],ymm1[19],ymm5[19],ymm1[20],ymm5[20],ymm1[21],ymm5[21],ymm1[22],ymm5[22],ymm1[23],ymm5[23]
	vmovdqu	%ymm1, 32(%rsi,%rdi,2)
	vmovdqu	%ymm0, (%rsi,%rdi,2)
	subq	$-128, %rdi
	cmpq	%rdi, 88(%rsp)                  ## 8-byte Folded Reload
	jne	LBB172_277
## %bb.278:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	88(%rsp), %rax                  ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
## %bb.279:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	88(%rsp), %rcx                  ## 8-byte Reload
	testb	$112, 32(%rsp)                  ## 1-byte Folded Reload
	je	LBB172_351
LBB172_280:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	200(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	addq	24(%rsp), %r10                  ## 8-byte Folded Reload
LBB172_281:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	(%rax,%rcx), %xmm0
	vpcmpeqd	%xmm2, %xmm2, %xmm2
	vpunpcklbw	%xmm2, %xmm0, %xmm1     ## xmm1 = xmm0[0],xmm2[0],xmm0[1],xmm2[1],xmm0[2],xmm2[2],xmm0[3],xmm2[3],xmm0[4],xmm2[4],xmm0[5],xmm2[5],xmm0[6],xmm2[6],xmm0[7],xmm2[7]
	vpunpckhbw	%xmm2, %xmm0, %xmm0     ## xmm0 = xmm0[8],xmm2[8],xmm0[9],xmm2[9],xmm0[10],xmm2[10],xmm0[11],xmm2[11],xmm0[12],xmm2[12],xmm0[13],xmm2[13],xmm0[14],xmm2[14],xmm0[15],xmm2[15]
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%xmm0, 16(%rax,%rcx,2)
	vmovdqu	%xmm1, (%rax,%rcx,2)
	addq	$16, %rcx
	cmpq	%rcx, 24(%rsp)                  ## 8-byte Folded Reload
	jne	LBB172_281
## %bb.282:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	44(%rsp), %eax                  ## 4-byte Reload
	movl	%eax, %r8d
	movq	24(%rsp), %rax                  ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
	jmp	LBB172_92
LBB172_283:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%edi, %edi
LBB172_284:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	608(%rsp), %rax                 ## 8-byte Reload
	vmovdqu	-96(%rax,%rdi), %ymm0
	vmovdqu	-64(%rax,%rdi), %ymm1
	vmovdqu	-32(%rax,%rdi), %ymm6
	vmovdqu	(%rax,%rdi), %ymm7
	vpalignr	$6, %ymm0, %ymm0, %ymm2         ## ymm2 = ymm0[6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,22,23,24,25,26,27,28,29,30,31,16,17,18,19,20,21]
	vpalignr	$11, %ymm0, %ymm0, %ymm3        ## ymm3 = ymm0[11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,27,28,29,30,31,16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$5, %ymm2, %ymm0, %ymm4         ## ymm4 = ymm2[5,6,7,8,9,10,11,12,13,14,15],ymm0[0,1,2,3,4],ymm2[21,22,23,24,25,26,27,28,29,30,31],ymm0[16,17,18,19,20]
	vpalignr	$5, %ymm3, %ymm2, %ymm2         ## ymm2 = ymm3[5,6,7,8,9,10,11,12,13,14,15],ymm2[0,1,2,3,4],ymm3[21,22,23,24,25,26,27,28,29,30,31],ymm2[16,17,18,19,20]
	vpalignr	$5, %ymm0, %ymm3, %ymm3         ## ymm3 = ymm0[5,6,7,8,9,10,11,12,13,14,15],ymm3[0,1,2,3,4],ymm0[21,22,23,24,25,26,27,28,29,30,31],ymm3[16,17,18,19,20]
	vpalignr	$5, %ymm4, %ymm0, %ymm0         ## ymm0 = ymm4[5,6,7,8,9,10,11,12,13,14,15],ymm0[0,1,2,3,4],ymm4[21,22,23,24,25,26,27,28,29,30,31],ymm0[16,17,18,19,20]
	vpalignr	$5, %ymm2, %ymm3, %ymm2         ## ymm2 = ymm2[5,6,7,8,9,10,11,12,13,14,15],ymm3[0,1,2,3,4],ymm2[21,22,23,24,25,26,27,28,29,30,31],ymm3[16,17,18,19,20]
	vpalignr	$5, %ymm3, %ymm4, %ymm3         ## ymm3 = ymm3[5,6,7,8,9,10,11,12,13,14,15],ymm4[0,1,2,3,4],ymm3[21,22,23,24,25,26,27,28,29,30,31],ymm4[16,17,18,19,20]
	vinserti128	$1, %xmm2, %ymm0, %ymm4
	vmovdqa	LCPI172_55(%rip), %ymm5         ## ymm5 = [0,11,6,1,12,7,2,13,8,3,14,9,4,15,10,5,0,11,6,1,12,7,2,13,8,3,14,9,4,15,10,5]
	vpshufb	%ymm5, %ymm4, %ymm4
	vpblendd	$240, %ymm0, %ymm3, %ymm0       ## ymm0 = ymm3[0,1,2,3],ymm0[4,5,6,7]
	vpshufb	%ymm5, %ymm0, %ymm0
	vperm2i128	$49, %ymm3, %ymm2, %ymm2 ## ymm2 = ymm2[2,3],ymm3[2,3]
	vpshufb	%ymm5, %ymm2, %ymm2
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%ymm2, 64(%rax)
	vmovdqu	%ymm0, 32(%rax)
	vmovdqu	%ymm4, (%rax)
	vpalignr	$6, %ymm1, %ymm1, %ymm0         ## ymm0 = ymm1[6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,22,23,24,25,26,27,28,29,30,31,16,17,18,19,20,21]
	vpalignr	$11, %ymm1, %ymm1, %ymm2        ## ymm2 = ymm1[11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,27,28,29,30,31,16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$5, %ymm0, %ymm1, %ymm3         ## ymm3 = ymm0[5,6,7,8,9,10,11,12,13,14,15],ymm1[0,1,2,3,4],ymm0[21,22,23,24,25,26,27,28,29,30,31],ymm1[16,17,18,19,20]
	vpalignr	$5, %ymm2, %ymm0, %ymm0         ## ymm0 = ymm2[5,6,7,8,9,10,11,12,13,14,15],ymm0[0,1,2,3,4],ymm2[21,22,23,24,25,26,27,28,29,30,31],ymm0[16,17,18,19,20]
	vpalignr	$5, %ymm1, %ymm2, %ymm2         ## ymm2 = ymm1[5,6,7,8,9,10,11,12,13,14,15],ymm2[0,1,2,3,4],ymm1[21,22,23,24,25,26,27,28,29,30,31],ymm2[16,17,18,19,20]
	vpalignr	$5, %ymm3, %ymm1, %ymm1         ## ymm1 = ymm3[5,6,7,8,9,10,11,12,13,14,15],ymm1[0,1,2,3,4],ymm3[21,22,23,24,25,26,27,28,29,30,31],ymm1[16,17,18,19,20]
	vpalignr	$5, %ymm0, %ymm2, %ymm0         ## ymm0 = ymm0[5,6,7,8,9,10,11,12,13,14,15],ymm2[0,1,2,3,4],ymm0[21,22,23,24,25,26,27,28,29,30,31],ymm2[16,17,18,19,20]
	vpalignr	$5, %ymm2, %ymm3, %ymm2         ## ymm2 = ymm2[5,6,7,8,9,10,11,12,13,14,15],ymm3[0,1,2,3,4],ymm2[21,22,23,24,25,26,27,28,29,30,31],ymm3[16,17,18,19,20]
	vinserti128	$1, %xmm0, %ymm1, %ymm3
	vpshufb	%ymm5, %ymm3, %ymm3
	vpblendd	$240, %ymm1, %ymm2, %ymm1       ## ymm1 = ymm2[0,1,2,3],ymm1[4,5,6,7]
	vpshufb	%ymm5, %ymm1, %ymm1
	vperm2i128	$49, %ymm2, %ymm0, %ymm0 ## ymm0 = ymm0[2,3],ymm2[2,3]
	vpshufb	%ymm5, %ymm0, %ymm0
	vmovdqu	%ymm0, 160(%rax)
	vmovdqu	%ymm1, 128(%rax)
	vmovdqu	%ymm3, 96(%rax)
	vpalignr	$6, %ymm6, %ymm6, %ymm0         ## ymm0 = ymm6[6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,22,23,24,25,26,27,28,29,30,31,16,17,18,19,20,21]
	vpalignr	$11, %ymm6, %ymm6, %ymm1        ## ymm1 = ymm6[11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,27,28,29,30,31,16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$5, %ymm0, %ymm6, %ymm2         ## ymm2 = ymm0[5,6,7,8,9,10,11,12,13,14,15],ymm6[0,1,2,3,4],ymm0[21,22,23,24,25,26,27,28,29,30,31],ymm6[16,17,18,19,20]
	vpalignr	$5, %ymm1, %ymm0, %ymm0         ## ymm0 = ymm1[5,6,7,8,9,10,11,12,13,14,15],ymm0[0,1,2,3,4],ymm1[21,22,23,24,25,26,27,28,29,30,31],ymm0[16,17,18,19,20]
	vpalignr	$5, %ymm6, %ymm1, %ymm1         ## ymm1 = ymm6[5,6,7,8,9,10,11,12,13,14,15],ymm1[0,1,2,3,4],ymm6[21,22,23,24,25,26,27,28,29,30,31],ymm1[16,17,18,19,20]
	vpalignr	$5, %ymm2, %ymm6, %ymm3         ## ymm3 = ymm2[5,6,7,8,9,10,11,12,13,14,15],ymm6[0,1,2,3,4],ymm2[21,22,23,24,25,26,27,28,29,30,31],ymm6[16,17,18,19,20]
	vpalignr	$5, %ymm0, %ymm1, %ymm0         ## ymm0 = ymm0[5,6,7,8,9,10,11,12,13,14,15],ymm1[0,1,2,3,4],ymm0[21,22,23,24,25,26,27,28,29,30,31],ymm1[16,17,18,19,20]
	vpalignr	$5, %ymm1, %ymm2, %ymm1         ## ymm1 = ymm1[5,6,7,8,9,10,11,12,13,14,15],ymm2[0,1,2,3,4],ymm1[21,22,23,24,25,26,27,28,29,30,31],ymm2[16,17,18,19,20]
	vinserti128	$1, %xmm0, %ymm3, %ymm2
	vpshufb	%ymm5, %ymm2, %ymm2
	vpblendd	$240, %ymm3, %ymm1, %ymm3       ## ymm3 = ymm1[0,1,2,3],ymm3[4,5,6,7]
	vpshufb	%ymm5, %ymm3, %ymm3
	vperm2i128	$49, %ymm1, %ymm0, %ymm0 ## ymm0 = ymm0[2,3],ymm1[2,3]
	vpshufb	%ymm5, %ymm0, %ymm0
	vmovdqu	%ymm0, 256(%rax)
	vmovdqu	%ymm3, 224(%rax)
	vmovdqu	%ymm2, 192(%rax)
	vpalignr	$6, %ymm7, %ymm7, %ymm0         ## ymm0 = ymm7[6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,22,23,24,25,26,27,28,29,30,31,16,17,18,19,20,21]
	vpalignr	$11, %ymm7, %ymm7, %ymm1        ## ymm1 = ymm7[11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,27,28,29,30,31,16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$5, %ymm0, %ymm7, %ymm2         ## ymm2 = ymm0[5,6,7,8,9,10,11,12,13,14,15],ymm7[0,1,2,3,4],ymm0[21,22,23,24,25,26,27,28,29,30,31],ymm7[16,17,18,19,20]
	vpalignr	$5, %ymm1, %ymm0, %ymm0         ## ymm0 = ymm1[5,6,7,8,9,10,11,12,13,14,15],ymm0[0,1,2,3,4],ymm1[21,22,23,24,25,26,27,28,29,30,31],ymm0[16,17,18,19,20]
	vpalignr	$5, %ymm7, %ymm1, %ymm1         ## ymm1 = ymm7[5,6,7,8,9,10,11,12,13,14,15],ymm1[0,1,2,3,4],ymm7[21,22,23,24,25,26,27,28,29,30,31],ymm1[16,17,18,19,20]
	vpalignr	$5, %ymm2, %ymm7, %ymm3         ## ymm3 = ymm2[5,6,7,8,9,10,11,12,13,14,15],ymm7[0,1,2,3,4],ymm2[21,22,23,24,25,26,27,28,29,30,31],ymm7[16,17,18,19,20]
	vpalignr	$5, %ymm0, %ymm1, %ymm0         ## ymm0 = ymm0[5,6,7,8,9,10,11,12,13,14,15],ymm1[0,1,2,3,4],ymm0[21,22,23,24,25,26,27,28,29,30,31],ymm1[16,17,18,19,20]
	vpalignr	$5, %ymm1, %ymm2, %ymm1         ## ymm1 = ymm1[5,6,7,8,9,10,11,12,13,14,15],ymm2[0,1,2,3,4],ymm1[21,22,23,24,25,26,27,28,29,30,31],ymm2[16,17,18,19,20]
	vinserti128	$1, %xmm0, %ymm3, %ymm2
	vpshufb	%ymm5, %ymm2, %ymm2
	vpblendd	$240, %ymm3, %ymm1, %ymm3       ## ymm3 = ymm1[0,1,2,3],ymm3[4,5,6,7]
	vpshufb	%ymm5, %ymm3, %ymm3
	vperm2i128	$49, %ymm1, %ymm0, %ymm0 ## ymm0 = ymm0[2,3],ymm1[2,3]
	vpshufb	%ymm5, %ymm0, %ymm0
	vmovdqu	%ymm0, 352(%rax)
	vmovdqu	%ymm3, 320(%rax)
	vmovdqu	%ymm2, 288(%rax)
	subq	$-128, %rdi
	addq	$384, %rax                      ## imm = 0x180
	movq	%rax, 56(%rsp)                  ## 8-byte Spill
	cmpq	%rdi, 88(%rsp)                  ## 8-byte Folded Reload
	jne	LBB172_284
## %bb.285:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	88(%rsp), %rax                  ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
## %bb.286:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	88(%rsp), %rcx                  ## 8-byte Reload
	testb	$112, 32(%rsp)                  ## 1-byte Folded Reload
	je	LBB172_352
LBB172_287:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	184(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	addq	24(%rsp), %r10                  ## 8-byte Folded Reload
	leaq	(%rcx,%rcx,2), %rsi
	addq	128(%rsp), %rsi                 ## 8-byte Folded Reload
	addq	120(%rsp), %rsi                 ## 8-byte Folded Reload
LBB172_288:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	(%rax,%rcx), %xmm0
	vpalignr	$6, %xmm0, %xmm0, %xmm1         ## xmm1 = xmm0[6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5]
	vpalignr	$11, %xmm0, %xmm0, %xmm2        ## xmm2 = xmm0[11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10]
	vpalignr	$5, %xmm1, %xmm0, %xmm3         ## xmm3 = xmm1[5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4]
	vpalignr	$5, %xmm2, %xmm1, %xmm1         ## xmm1 = xmm2[5,6,7,8,9,10,11,12,13,14,15],xmm1[0,1,2,3,4]
	vpalignr	$5, %xmm0, %xmm2, %xmm2         ## xmm2 = xmm0[5,6,7,8,9,10,11,12,13,14,15],xmm2[0,1,2,3,4]
	vpalignr	$5, %xmm3, %xmm0, %xmm0         ## xmm0 = xmm3[5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4]
	vmovdqa	LCPI172_58(%rip), %xmm4         ## xmm4 = [0,11,6,1,12,7,2,13,8,3,14,9,4,15,10,5]
	vpshufb	%xmm4, %xmm0, %xmm0
	vpalignr	$5, %xmm1, %xmm2, %xmm1         ## xmm1 = xmm1[5,6,7,8,9,10,11,12,13,14,15],xmm2[0,1,2,3,4]
	vpshufb	%xmm4, %xmm1, %xmm1
	vpalignr	$5, %xmm2, %xmm3, %xmm2         ## xmm2 = xmm2[5,6,7,8,9,10,11,12,13,14,15],xmm3[0,1,2,3,4]
	vpshufb	%xmm4, %xmm2, %xmm2
	vmovdqu	%xmm1, 16(%rsi)
	vmovdqu	%xmm0, (%rsi)
	vmovdqu	%xmm2, 32(%rsi)
	addq	$16, %rcx
	addq	$48, %rsi
	cmpq	%rcx, 24(%rsp)                  ## 8-byte Folded Reload
	jne	LBB172_288
## %bb.289:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	44(%rsp), %eax                  ## 4-byte Reload
	movl	%eax, %r8d
	movq	24(%rsp), %rax                  ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
	jmp	LBB172_102
LBB172_290:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	456(%rsp), %rax                 ## 8-byte Reload
	movq	128(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rax,%rcx), %rdi
	xorl	%esi, %esi
LBB172_291:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	608(%rsp), %rax                 ## 8-byte Reload
	vmovdqu	-96(%rax,%rsi), %ymm0
	vmovdqu	-64(%rax,%rsi), %ymm1
	vmovdqu	-32(%rax,%rsi), %ymm2
	vmovdqu	(%rax,%rsi), %ymm7
	vpunpcklbw	%ymm0, %ymm0, %ymm3     ## ymm3 = ymm0[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23]
	vpunpckhbw	%ymm0, %ymm0, %ymm4     ## ymm4 = ymm0[8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31]
	vpcmpeqd	%ymm8, %ymm8, %ymm8
	vpunpcklbw	%ymm8, %ymm0, %ymm5     ## ymm5 = ymm0[0],ymm8[0],ymm0[1],ymm8[1],ymm0[2],ymm8[2],ymm0[3],ymm8[3],ymm0[4],ymm8[4],ymm0[5],ymm8[5],ymm0[6],ymm8[6],ymm0[7],ymm8[7],ymm0[16],ymm8[16],ymm0[17],ymm8[17],ymm0[18],ymm8[18],ymm0[19],ymm8[19],ymm0[20],ymm8[20],ymm0[21],ymm8[21],ymm0[22],ymm8[22],ymm0[23],ymm8[23]
	vpunpckhbw	%ymm8, %ymm0, %ymm0     ## ymm0 = ymm0[8],ymm8[8],ymm0[9],ymm8[9],ymm0[10],ymm8[10],ymm0[11],ymm8[11],ymm0[12],ymm8[12],ymm0[13],ymm8[13],ymm0[14],ymm8[14],ymm0[15],ymm8[15],ymm0[24],ymm8[24],ymm0[25],ymm8[25],ymm0[26],ymm8[26],ymm0[27],ymm8[27],ymm0[28],ymm8[28],ymm0[29],ymm8[29],ymm0[30],ymm8[30],ymm0[31],ymm8[31]
	vpunpcklwd	%ymm5, %ymm3, %ymm6     ## ymm6 = ymm3[0],ymm5[0],ymm3[1],ymm5[1],ymm3[2],ymm5[2],ymm3[3],ymm5[3],ymm3[8],ymm5[8],ymm3[9],ymm5[9],ymm3[10],ymm5[10],ymm3[11],ymm5[11]
	vpunpckhwd	%ymm5, %ymm3, %ymm3     ## ymm3 = ymm3[4],ymm5[4],ymm3[5],ymm5[5],ymm3[6],ymm5[6],ymm3[7],ymm5[7],ymm3[12],ymm5[12],ymm3[13],ymm5[13],ymm3[14],ymm5[14],ymm3[15],ymm5[15]
	vpunpcklwd	%ymm0, %ymm4, %ymm5     ## ymm5 = ymm4[0],ymm0[0],ymm4[1],ymm0[1],ymm4[2],ymm0[2],ymm4[3],ymm0[3],ymm4[8],ymm0[8],ymm4[9],ymm0[9],ymm4[10],ymm0[10],ymm4[11],ymm0[11]
	vpunpckhwd	%ymm0, %ymm4, %ymm0     ## ymm0 = ymm4[4],ymm0[4],ymm4[5],ymm0[5],ymm4[6],ymm0[6],ymm4[7],ymm0[7],ymm4[12],ymm0[12],ymm4[13],ymm0[13],ymm4[14],ymm0[14],ymm4[15],ymm0[15]
	vinserti128	$1, %xmm3, %ymm6, %ymm4
	vinserti128	$1, %xmm0, %ymm5, %ymm9
	vperm2i128	$49, %ymm3, %ymm6, %ymm3 ## ymm3 = ymm6[2,3],ymm3[2,3]
	vperm2i128	$49, %ymm0, %ymm5, %ymm0 ## ymm0 = ymm5[2,3],ymm0[2,3]
	vmovdqu	%ymm0, -288(%rdi,%rsi,4)
	vmovdqu	%ymm3, -320(%rdi,%rsi,4)
	vmovdqu	%ymm9, -352(%rdi,%rsi,4)
	vmovdqu	%ymm4, -384(%rdi,%rsi,4)
	vpunpcklbw	%ymm1, %ymm1, %ymm0     ## ymm0 = ymm1[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23]
	vpunpckhbw	%ymm1, %ymm1, %ymm3     ## ymm3 = ymm1[8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31]
	vpunpcklbw	%ymm8, %ymm1, %ymm4     ## ymm4 = ymm1[0],ymm8[0],ymm1[1],ymm8[1],ymm1[2],ymm8[2],ymm1[3],ymm8[3],ymm1[4],ymm8[4],ymm1[5],ymm8[5],ymm1[6],ymm8[6],ymm1[7],ymm8[7],ymm1[16],ymm8[16],ymm1[17],ymm8[17],ymm1[18],ymm8[18],ymm1[19],ymm8[19],ymm1[20],ymm8[20],ymm1[21],ymm8[21],ymm1[22],ymm8[22],ymm1[23],ymm8[23]
	vpunpckhbw	%ymm8, %ymm1, %ymm1     ## ymm1 = ymm1[8],ymm8[8],ymm1[9],ymm8[9],ymm1[10],ymm8[10],ymm1[11],ymm8[11],ymm1[12],ymm8[12],ymm1[13],ymm8[13],ymm1[14],ymm8[14],ymm1[15],ymm8[15],ymm1[24],ymm8[24],ymm1[25],ymm8[25],ymm1[26],ymm8[26],ymm1[27],ymm8[27],ymm1[28],ymm8[28],ymm1[29],ymm8[29],ymm1[30],ymm8[30],ymm1[31],ymm8[31]
	vpunpcklwd	%ymm4, %ymm0, %ymm5     ## ymm5 = ymm0[0],ymm4[0],ymm0[1],ymm4[1],ymm0[2],ymm4[2],ymm0[3],ymm4[3],ymm0[8],ymm4[8],ymm0[9],ymm4[9],ymm0[10],ymm4[10],ymm0[11],ymm4[11]
	vpunpckhwd	%ymm4, %ymm0, %ymm0     ## ymm0 = ymm0[4],ymm4[4],ymm0[5],ymm4[5],ymm0[6],ymm4[6],ymm0[7],ymm4[7],ymm0[12],ymm4[12],ymm0[13],ymm4[13],ymm0[14],ymm4[14],ymm0[15],ymm4[15]
	vpunpcklwd	%ymm1, %ymm3, %ymm4     ## ymm4 = ymm3[0],ymm1[0],ymm3[1],ymm1[1],ymm3[2],ymm1[2],ymm3[3],ymm1[3],ymm3[8],ymm1[8],ymm3[9],ymm1[9],ymm3[10],ymm1[10],ymm3[11],ymm1[11]
	vpunpckhwd	%ymm1, %ymm3, %ymm1     ## ymm1 = ymm3[4],ymm1[4],ymm3[5],ymm1[5],ymm3[6],ymm1[6],ymm3[7],ymm1[7],ymm3[12],ymm1[12],ymm3[13],ymm1[13],ymm3[14],ymm1[14],ymm3[15],ymm1[15]
	vinserti128	$1, %xmm0, %ymm5, %ymm3
	vinserti128	$1, %xmm1, %ymm4, %ymm6
	vperm2i128	$49, %ymm0, %ymm5, %ymm0 ## ymm0 = ymm5[2,3],ymm0[2,3]
	vperm2i128	$49, %ymm1, %ymm4, %ymm1 ## ymm1 = ymm4[2,3],ymm1[2,3]
	vmovdqu	%ymm1, -160(%rdi,%rsi,4)
	vmovdqu	%ymm0, -192(%rdi,%rsi,4)
	vmovdqu	%ymm6, -224(%rdi,%rsi,4)
	vmovdqu	%ymm3, -256(%rdi,%rsi,4)
	vpunpcklbw	%ymm2, %ymm2, %ymm0     ## ymm0 = ymm2[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23]
	vpunpckhbw	%ymm2, %ymm2, %ymm1     ## ymm1 = ymm2[8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31]
	vpunpcklbw	%ymm8, %ymm2, %ymm3     ## ymm3 = ymm2[0],ymm8[0],ymm2[1],ymm8[1],ymm2[2],ymm8[2],ymm2[3],ymm8[3],ymm2[4],ymm8[4],ymm2[5],ymm8[5],ymm2[6],ymm8[6],ymm2[7],ymm8[7],ymm2[16],ymm8[16],ymm2[17],ymm8[17],ymm2[18],ymm8[18],ymm2[19],ymm8[19],ymm2[20],ymm8[20],ymm2[21],ymm8[21],ymm2[22],ymm8[22],ymm2[23],ymm8[23]
	vpunpckhbw	%ymm8, %ymm2, %ymm2     ## ymm2 = ymm2[8],ymm8[8],ymm2[9],ymm8[9],ymm2[10],ymm8[10],ymm2[11],ymm8[11],ymm2[12],ymm8[12],ymm2[13],ymm8[13],ymm2[14],ymm8[14],ymm2[15],ymm8[15],ymm2[24],ymm8[24],ymm2[25],ymm8[25],ymm2[26],ymm8[26],ymm2[27],ymm8[27],ymm2[28],ymm8[28],ymm2[29],ymm8[29],ymm2[30],ymm8[30],ymm2[31],ymm8[31]
	vpunpcklwd	%ymm3, %ymm0, %ymm4     ## ymm4 = ymm0[0],ymm3[0],ymm0[1],ymm3[1],ymm0[2],ymm3[2],ymm0[3],ymm3[3],ymm0[8],ymm3[8],ymm0[9],ymm3[9],ymm0[10],ymm3[10],ymm0[11],ymm3[11]
	vpunpckhwd	%ymm3, %ymm0, %ymm0     ## ymm0 = ymm0[4],ymm3[4],ymm0[5],ymm3[5],ymm0[6],ymm3[6],ymm0[7],ymm3[7],ymm0[12],ymm3[12],ymm0[13],ymm3[13],ymm0[14],ymm3[14],ymm0[15],ymm3[15]
	vpunpcklwd	%ymm2, %ymm1, %ymm3     ## ymm3 = ymm1[0],ymm2[0],ymm1[1],ymm2[1],ymm1[2],ymm2[2],ymm1[3],ymm2[3],ymm1[8],ymm2[8],ymm1[9],ymm2[9],ymm1[10],ymm2[10],ymm1[11],ymm2[11]
	vpunpckhwd	%ymm2, %ymm1, %ymm1     ## ymm1 = ymm1[4],ymm2[4],ymm1[5],ymm2[5],ymm1[6],ymm2[6],ymm1[7],ymm2[7],ymm1[12],ymm2[12],ymm1[13],ymm2[13],ymm1[14],ymm2[14],ymm1[15],ymm2[15]
	vinserti128	$1, %xmm0, %ymm4, %ymm2
	vinserti128	$1, %xmm1, %ymm3, %ymm5
	vperm2i128	$49, %ymm0, %ymm4, %ymm0 ## ymm0 = ymm4[2,3],ymm0[2,3]
	vperm2i128	$49, %ymm1, %ymm3, %ymm1 ## ymm1 = ymm3[2,3],ymm1[2,3]
	vmovdqu	%ymm1, -32(%rdi,%rsi,4)
	vmovdqu	%ymm0, -64(%rdi,%rsi,4)
	vmovdqu	%ymm5, -96(%rdi,%rsi,4)
	vmovdqu	%ymm2, -128(%rdi,%rsi,4)
	vpunpcklbw	%ymm7, %ymm7, %ymm0     ## ymm0 = ymm7[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23]
	vpunpckhbw	%ymm7, %ymm7, %ymm1     ## ymm1 = ymm7[8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31]
	vpunpcklbw	%ymm8, %ymm7, %ymm2     ## ymm2 = ymm7[0],ymm8[0],ymm7[1],ymm8[1],ymm7[2],ymm8[2],ymm7[3],ymm8[3],ymm7[4],ymm8[4],ymm7[5],ymm8[5],ymm7[6],ymm8[6],ymm7[7],ymm8[7],ymm7[16],ymm8[16],ymm7[17],ymm8[17],ymm7[18],ymm8[18],ymm7[19],ymm8[19],ymm7[20],ymm8[20],ymm7[21],ymm8[21],ymm7[22],ymm8[22],ymm7[23],ymm8[23]
	vpunpckhbw	%ymm8, %ymm7, %ymm3     ## ymm3 = ymm7[8],ymm8[8],ymm7[9],ymm8[9],ymm7[10],ymm8[10],ymm7[11],ymm8[11],ymm7[12],ymm8[12],ymm7[13],ymm8[13],ymm7[14],ymm8[14],ymm7[15],ymm8[15],ymm7[24],ymm8[24],ymm7[25],ymm8[25],ymm7[26],ymm8[26],ymm7[27],ymm8[27],ymm7[28],ymm8[28],ymm7[29],ymm8[29],ymm7[30],ymm8[30],ymm7[31],ymm8[31]
	vpunpcklwd	%ymm2, %ymm0, %ymm4     ## ymm4 = ymm0[0],ymm2[0],ymm0[1],ymm2[1],ymm0[2],ymm2[2],ymm0[3],ymm2[3],ymm0[8],ymm2[8],ymm0[9],ymm2[9],ymm0[10],ymm2[10],ymm0[11],ymm2[11]
	vpunpckhwd	%ymm2, %ymm0, %ymm0     ## ymm0 = ymm0[4],ymm2[4],ymm0[5],ymm2[5],ymm0[6],ymm2[6],ymm0[7],ymm2[7],ymm0[12],ymm2[12],ymm0[13],ymm2[13],ymm0[14],ymm2[14],ymm0[15],ymm2[15]
	vpunpcklwd	%ymm3, %ymm1, %ymm2     ## ymm2 = ymm1[0],ymm3[0],ymm1[1],ymm3[1],ymm1[2],ymm3[2],ymm1[3],ymm3[3],ymm1[8],ymm3[8],ymm1[9],ymm3[9],ymm1[10],ymm3[10],ymm1[11],ymm3[11]
	vpunpckhwd	%ymm3, %ymm1, %ymm1     ## ymm1 = ymm1[4],ymm3[4],ymm1[5],ymm3[5],ymm1[6],ymm3[6],ymm1[7],ymm3[7],ymm1[12],ymm3[12],ymm1[13],ymm3[13],ymm1[14],ymm3[14],ymm1[15],ymm3[15]
	vinserti128	$1, %xmm0, %ymm4, %ymm3
	vinserti128	$1, %xmm1, %ymm2, %ymm5
	vperm2i128	$49, %ymm0, %ymm4, %ymm0 ## ymm0 = ymm4[2,3],ymm0[2,3]
	vperm2i128	$49, %ymm1, %ymm2, %ymm1 ## ymm1 = ymm2[2,3],ymm1[2,3]
	vmovdqu	%ymm1, 96(%rdi,%rsi,4)
	vmovdqu	%ymm0, 64(%rdi,%rsi,4)
	vmovdqu	%ymm5, 32(%rdi,%rsi,4)
	vmovdqu	%ymm3, (%rdi,%rsi,4)
	subq	$-128, %rsi
	cmpq	%rsi, 88(%rsp)                  ## 8-byte Folded Reload
	jne	LBB172_291
## %bb.292:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	88(%rsp), %rax                  ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
## %bb.293:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	88(%rsp), %rcx                  ## 8-byte Reload
	testb	$112, 32(%rsp)                  ## 1-byte Folded Reload
	je	LBB172_353
LBB172_294:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	208(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	addq	24(%rsp), %r10                  ## 8-byte Folded Reload
LBB172_295:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	(%rax,%rcx), %xmm0
	vpunpcklbw	%xmm0, %xmm0, %xmm1     ## xmm1 = xmm0[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
	vpunpckhbw	%xmm0, %xmm0, %xmm2     ## xmm2 = xmm0[8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15]
	vpcmpeqd	%xmm4, %xmm4, %xmm4
	vpunpcklbw	%xmm4, %xmm0, %xmm3     ## xmm3 = xmm0[0],xmm4[0],xmm0[1],xmm4[1],xmm0[2],xmm4[2],xmm0[3],xmm4[3],xmm0[4],xmm4[4],xmm0[5],xmm4[5],xmm0[6],xmm4[6],xmm0[7],xmm4[7]
	vpunpckhbw	%xmm4, %xmm0, %xmm0     ## xmm0 = xmm0[8],xmm4[8],xmm0[9],xmm4[9],xmm0[10],xmm4[10],xmm0[11],xmm4[11],xmm0[12],xmm4[12],xmm0[13],xmm4[13],xmm0[14],xmm4[14],xmm0[15],xmm4[15]
	vpunpcklwd	%xmm3, %xmm1, %xmm4     ## xmm4 = xmm1[0],xmm3[0],xmm1[1],xmm3[1],xmm1[2],xmm3[2],xmm1[3],xmm3[3]
	vpunpckhwd	%xmm3, %xmm1, %xmm1     ## xmm1 = xmm1[4],xmm3[4],xmm1[5],xmm3[5],xmm1[6],xmm3[6],xmm1[7],xmm3[7]
	vpunpcklwd	%xmm0, %xmm2, %xmm3     ## xmm3 = xmm2[0],xmm0[0],xmm2[1],xmm0[1],xmm2[2],xmm0[2],xmm2[3],xmm0[3]
	vpunpckhwd	%xmm0, %xmm2, %xmm0     ## xmm0 = xmm2[4],xmm0[4],xmm2[5],xmm0[5],xmm2[6],xmm0[6],xmm2[7],xmm0[7]
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%xmm0, 48(%rax,%rcx,4)
	vmovdqu	%xmm3, 32(%rax,%rcx,4)
	vmovdqu	%xmm1, 16(%rax,%rcx,4)
	vmovdqu	%xmm4, (%rax,%rcx,4)
	addq	$16, %rcx
	cmpq	%rcx, 24(%rsp)                  ## 8-byte Folded Reload
	jne	LBB172_295
## %bb.296:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	44(%rsp), %eax                  ## 4-byte Reload
	movl	%eax, %r8d
	movq	24(%rsp), %rax                  ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
	jmp	LBB172_112
LBB172_297:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	472(%rsp), %rax                 ## 8-byte Reload
	movq	136(%rsp), %rcx                 ## 8-byte Reload
	addq	%rax, %rcx
	movq	464(%rsp), %rax                 ## 8-byte Reload
	movq	128(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rax,%rdx), %rsi
	xorl	%edi, %edi
LBB172_298:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	-192(%rcx,%rdi,2), %ymm0
	vmovdqu	-160(%rcx,%rdi,2), %ymm1
	vmovdqu	-128(%rcx,%rdi,2), %ymm2
	vmovdqu	-96(%rcx,%rdi,2), %ymm3
	vmovdqu	-64(%rcx,%rdi,2), %ymm4
	vmovdqu	-32(%rcx,%rdi,2), %ymm5
	vmovdqu	(%rcx,%rdi,2), %ymm6
	vmovdqu	32(%rcx,%rdi,2), %ymm7
	vmovdqa	LCPI172_50(%rip), %ymm8         ## ymm8 = <u,u,u,u,u,u,u,u,0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u,0,2,4,6,8,10,12,14>
	vpshufb	%ymm8, %ymm1, %ymm1
	vmovdqa	LCPI172_51(%rip), %ymm9         ## ymm9 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u,0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
	vpshufb	%ymm9, %ymm0, %ymm0
	vpblendd	$204, %ymm1, %ymm0, %ymm0       ## ymm0 = ymm0[0,1],ymm1[2,3],ymm0[4,5],ymm1[6,7]
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpshufb	%ymm8, %ymm3, %ymm1
	vpshufb	%ymm9, %ymm2, %ymm2
	vpblendd	$204, %ymm1, %ymm2, %ymm1       ## ymm1 = ymm2[0,1],ymm1[2,3],ymm2[4,5],ymm1[6,7]
	vpermq	$216, %ymm1, %ymm1              ## ymm1 = ymm1[0,2,1,3]
	vpshufb	%ymm8, %ymm5, %ymm2
	vpshufb	%ymm9, %ymm4, %ymm3
	vpblendd	$204, %ymm2, %ymm3, %ymm2       ## ymm2 = ymm3[0,1],ymm2[2,3],ymm3[4,5],ymm2[6,7]
	vpermq	$216, %ymm2, %ymm2              ## ymm2 = ymm2[0,2,1,3]
	vpshufb	%ymm8, %ymm7, %ymm3
	vpshufb	%ymm9, %ymm6, %ymm4
	vpblendd	$204, %ymm3, %ymm4, %ymm3       ## ymm3 = ymm4[0,1],ymm3[2,3],ymm4[4,5],ymm3[6,7]
	vpermq	$216, %ymm3, %ymm3              ## ymm3 = ymm3[0,2,1,3]
	vmovdqu	%ymm0, -96(%rsi,%rdi)
	vmovdqu	%ymm1, -64(%rsi,%rdi)
	vmovdqu	%ymm2, -32(%rsi,%rdi)
	vmovdqu	%ymm3, (%rsi,%rdi)
	subq	$-128, %rdi
	cmpq	%rdi, 152(%rsp)                 ## 8-byte Folded Reload
	jne	LBB172_298
## %bb.299:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	152(%rsp), %rcx                 ## 8-byte Reload
	cmpl	$16, 488(%rsp)                  ## 4-byte Folded Reload
	ja	LBB172_301
## %bb.300:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	416(%rsp), %r10                 ## 8-byte Folded Reload
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	152(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	movl	432(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_124
LBB172_301:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	176(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	addq	376(%rsp), %r10                 ## 8-byte Folded Reload
LBB172_302:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqa	LCPI172_54(%rip), %xmm1         ## xmm1 = [255,255,255,255,255,255,255,255]
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vpand	16(%rax,%rcx,2), %xmm1, %xmm0
	vpand	(%rax,%rcx,2), %xmm1, %xmm1
	vpackuswb	%xmm0, %xmm1, %xmm0
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%xmm0, (%rax,%rcx)
	addq	$16, %rcx
	cmpq	%rcx, 176(%rsp)                 ## 8-byte Folded Reload
	jne	LBB172_302
## %bb.303:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	224(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_124
LBB172_304:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_305:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	(%rax,%rcx,2), %ymm0
	vmovdqu	32(%rax,%rcx,2), %ymm1
	vpshufb	LCPI172_50(%rip), %ymm1, %ymm1  ## ymm1 = ymm1[u,u,u,u,u,u,u,u,0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u,16,18,20,22,24,26,28,30]
	vpshufb	LCPI172_51(%rip), %ymm0, %ymm0  ## ymm0 = ymm0[0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u,16,18,20,22,24,26,28,30,u,u,u,u,u,u,u,u]
	vpblendd	$204, %ymm1, %ymm0, %ymm0       ## ymm0 = ymm0[0,1],ymm1[2,3],ymm0[4,5],ymm1[6,7]
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpalignr	$6, %ymm0, %ymm0, %ymm1         ## ymm1 = ymm0[6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,22,23,24,25,26,27,28,29,30,31,16,17,18,19,20,21]
	vpalignr	$11, %ymm0, %ymm0, %ymm2        ## ymm2 = ymm0[11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,27,28,29,30,31,16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$5, %ymm1, %ymm0, %ymm3         ## ymm3 = ymm1[5,6,7,8,9,10,11,12,13,14,15],ymm0[0,1,2,3,4],ymm1[21,22,23,24,25,26,27,28,29,30,31],ymm0[16,17,18,19,20]
	vpalignr	$5, %ymm2, %ymm1, %ymm1         ## ymm1 = ymm2[5,6,7,8,9,10,11,12,13,14,15],ymm1[0,1,2,3,4],ymm2[21,22,23,24,25,26,27,28,29,30,31],ymm1[16,17,18,19,20]
	vpalignr	$5, %ymm0, %ymm2, %ymm2         ## ymm2 = ymm0[5,6,7,8,9,10,11,12,13,14,15],ymm2[0,1,2,3,4],ymm0[21,22,23,24,25,26,27,28,29,30,31],ymm2[16,17,18,19,20]
	vpalignr	$5, %ymm3, %ymm0, %ymm0         ## ymm0 = ymm3[5,6,7,8,9,10,11,12,13,14,15],ymm0[0,1,2,3,4],ymm3[21,22,23,24,25,26,27,28,29,30,31],ymm0[16,17,18,19,20]
	vpalignr	$5, %ymm1, %ymm2, %ymm1         ## ymm1 = ymm1[5,6,7,8,9,10,11,12,13,14,15],ymm2[0,1,2,3,4],ymm1[21,22,23,24,25,26,27,28,29,30,31],ymm2[16,17,18,19,20]
	vpalignr	$5, %ymm2, %ymm3, %ymm2         ## ymm2 = ymm2[5,6,7,8,9,10,11,12,13,14,15],ymm3[0,1,2,3,4],ymm2[21,22,23,24,25,26,27,28,29,30,31],ymm3[16,17,18,19,20]
	vinserti128	$1, %xmm1, %ymm0, %ymm3
	vmovdqa	LCPI172_55(%rip), %ymm4         ## ymm4 = [0,11,6,1,12,7,2,13,8,3,14,9,4,15,10,5,0,11,6,1,12,7,2,13,8,3,14,9,4,15,10,5]
	vpshufb	%ymm4, %ymm3, %ymm3
	vpblendd	$240, %ymm0, %ymm2, %ymm0       ## ymm0 = ymm2[0,1,2,3],ymm0[4,5,6,7]
	vpshufb	%ymm4, %ymm0, %ymm0
	vperm2i128	$49, %ymm2, %ymm1, %ymm1 ## ymm1 = ymm1[2,3],ymm2[2,3]
	vpshufb	%ymm4, %ymm1, %ymm1
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%ymm1, 64(%rax)
	vmovdqu	%ymm0, 32(%rax)
	vmovdqu	%ymm3, (%rax)
	addq	$32, %rcx
	addq	$96, %rax
	movq	%rax, 56(%rsp)                  ## 8-byte Spill
	cmpq	%rcx, 264(%rsp)                 ## 8-byte Folded Reload
	jne	LBB172_305
## %bb.306:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	264(%rsp), %rcx                 ## 8-byte Reload
	cmpl	$16, 312(%rsp)                  ## 4-byte Folded Reload
	ja	LBB172_308
## %bb.307:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	424(%rsp), %r10                 ## 8-byte Folded Reload
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	296(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	movl	248(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_133
LBB172_308:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	216(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	addq	376(%rsp), %r10                 ## 8-byte Folded Reload
	leaq	(%rcx,%rcx,2), %rsi
	addq	128(%rsp), %rsi                 ## 8-byte Folded Reload
	addq	120(%rsp), %rsi                 ## 8-byte Folded Reload
LBB172_309:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	(%rax,%rcx,2), %xmm0
	vmovdqu	16(%rax,%rcx,2), %xmm1
	vmovdqa	LCPI172_54(%rip), %xmm3         ## xmm3 = [255,255,255,255,255,255,255,255]
	vpand	%xmm3, %xmm1, %xmm2
	vpand	%xmm3, %xmm0, %xmm3
	vpackuswb	%xmm2, %xmm3, %xmm2
	vpalignr	$6, %xmm2, %xmm2, %xmm3         ## xmm3 = xmm2[6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5]
	vpshufb	LCPI172_56(%rip), %xmm0, %xmm0  ## xmm0 = xmm0[u,u,u,u,u,0,2,4,6,8,10,12,14],zero,zero,zero
	vpshufb	LCPI172_57(%rip), %xmm1, %xmm1  ## xmm1 = xmm1[6,8,10,12,14],zero,zero,zero,zero,zero,zero,zero,zero,xmm1[0,2,4]
	vpor	%xmm0, %xmm1, %xmm0
	vpalignr	$5, %xmm3, %xmm2, %xmm4         ## xmm4 = xmm3[5,6,7,8,9,10,11,12,13,14,15],xmm2[0,1,2,3,4]
	vpalignr	$5, %xmm0, %xmm3, %xmm0         ## xmm0 = xmm0[5,6,7,8,9,10,11,12,13,14,15],xmm3[0,1,2,3,4]
	vpalignr	$5, %xmm2, %xmm1, %xmm1         ## xmm1 = xmm2[5,6,7,8,9,10,11,12,13,14,15],xmm1[0,1,2,3,4]
	vpalignr	$5, %xmm4, %xmm0, %xmm2         ## xmm2 = xmm4[5,6,7,8,9,10,11,12,13,14,15],xmm0[0,1,2,3,4]
	vmovdqa	LCPI172_58(%rip), %xmm3         ## xmm3 = [0,11,6,1,12,7,2,13,8,3,14,9,4,15,10,5]
	vpshufb	%xmm3, %xmm2, %xmm2
	vpalignr	$5, %xmm0, %xmm1, %xmm0         ## xmm0 = xmm0[5,6,7,8,9,10,11,12,13,14,15],xmm1[0,1,2,3,4]
	vpshufb	%xmm3, %xmm0, %xmm0
	vpalignr	$5, %xmm1, %xmm4, %xmm1         ## xmm1 = xmm1[5,6,7,8,9,10,11,12,13,14,15],xmm4[0,1,2,3,4]
	vpshufb	%xmm3, %xmm1, %xmm1
	vmovdqu	%xmm2, (%rsi)
	vmovdqu	%xmm0, 16(%rsi)
	vmovdqu	%xmm1, 32(%rsi)
	addq	$16, %rcx
	addq	$48, %rsi
	cmpq	%rcx, 176(%rsp)                 ## 8-byte Folded Reload
	jne	LBB172_309
## %bb.310:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	224(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_133
LBB172_311:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	$0, 368(%rsp)                   ## 8-byte Folded Reload
	je	LBB172_339
## %bb.312:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	440(%rsp), %rax                 ## 8-byte Reload
	movq	136(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rax,%rcx), %rsi
	movq	352(%rsp), %rdi                 ## 8-byte Reload
	xorl	%ecx, %ecx
LBB172_313:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	-64(%rsi,%rcx,2), %ymm0
	vmovdqu	-32(%rsi,%rcx,2), %ymm1
	vmovdqa	LCPI172_50(%rip), %ymm6         ## ymm6 = <u,u,u,u,u,u,u,u,0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u,0,2,4,6,8,10,12,14>
	vpshufb	%ymm6, %ymm1, %ymm2
	vmovdqa	LCPI172_51(%rip), %ymm7         ## ymm7 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u,0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
	vpshufb	%ymm7, %ymm0, %ymm3
	vpblendd	$204, %ymm2, %ymm3, %ymm2       ## ymm2 = ymm3[0,1],ymm2[2,3],ymm3[4,5],ymm2[6,7]
	vpermq	$216, %ymm2, %ymm2              ## ymm2 = ymm2[0,2,1,3]
	vmovdqa	LCPI172_52(%rip), %ymm8         ## ymm8 = <u,u,u,u,u,u,u,u,1,3,5,7,9,11,13,15,u,u,u,u,u,u,u,u,1,3,5,7,9,11,13,15>
	vpshufb	%ymm8, %ymm1, %ymm1
	vmovdqa	LCPI172_53(%rip), %ymm9         ## ymm9 = <1,3,5,7,9,11,13,15,u,u,u,u,u,u,u,u,1,3,5,7,9,11,13,15,u,u,u,u,u,u,u,u>
	vpshufb	%ymm9, %ymm0, %ymm0
	vpblendd	$204, %ymm1, %ymm0, %ymm0       ## ymm0 = ymm0[0,1],ymm1[2,3],ymm0[4,5],ymm1[6,7]
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpunpcklbw	%ymm2, %ymm2, %ymm1     ## ymm1 = ymm2[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23]
	vpunpckhbw	%ymm2, %ymm2, %ymm3     ## ymm3 = ymm2[8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31]
	vpunpcklbw	%ymm0, %ymm2, %ymm4     ## ymm4 = ymm2[0],ymm0[0],ymm2[1],ymm0[1],ymm2[2],ymm0[2],ymm2[3],ymm0[3],ymm2[4],ymm0[4],ymm2[5],ymm0[5],ymm2[6],ymm0[6],ymm2[7],ymm0[7],ymm2[16],ymm0[16],ymm2[17],ymm0[17],ymm2[18],ymm0[18],ymm2[19],ymm0[19],ymm2[20],ymm0[20],ymm2[21],ymm0[21],ymm2[22],ymm0[22],ymm2[23],ymm0[23]
	vpunpckhbw	%ymm0, %ymm2, %ymm0     ## ymm0 = ymm2[8],ymm0[8],ymm2[9],ymm0[9],ymm2[10],ymm0[10],ymm2[11],ymm0[11],ymm2[12],ymm0[12],ymm2[13],ymm0[13],ymm2[14],ymm0[14],ymm2[15],ymm0[15],ymm2[24],ymm0[24],ymm2[25],ymm0[25],ymm2[26],ymm0[26],ymm2[27],ymm0[27],ymm2[28],ymm0[28],ymm2[29],ymm0[29],ymm2[30],ymm0[30],ymm2[31],ymm0[31]
	vpunpcklwd	%ymm4, %ymm1, %ymm2     ## ymm2 = ymm1[0],ymm4[0],ymm1[1],ymm4[1],ymm1[2],ymm4[2],ymm1[3],ymm4[3],ymm1[8],ymm4[8],ymm1[9],ymm4[9],ymm1[10],ymm4[10],ymm1[11],ymm4[11]
	vpunpckhwd	%ymm4, %ymm1, %ymm1     ## ymm1 = ymm1[4],ymm4[4],ymm1[5],ymm4[5],ymm1[6],ymm4[6],ymm1[7],ymm4[7],ymm1[12],ymm4[12],ymm1[13],ymm4[13],ymm1[14],ymm4[14],ymm1[15],ymm4[15]
	vpunpcklwd	%ymm0, %ymm3, %ymm4     ## ymm4 = ymm3[0],ymm0[0],ymm3[1],ymm0[1],ymm3[2],ymm0[2],ymm3[3],ymm0[3],ymm3[8],ymm0[8],ymm3[9],ymm0[9],ymm3[10],ymm0[10],ymm3[11],ymm0[11]
	vpunpckhwd	%ymm0, %ymm3, %ymm0     ## ymm0 = ymm3[4],ymm0[4],ymm3[5],ymm0[5],ymm3[6],ymm0[6],ymm3[7],ymm0[7],ymm3[12],ymm0[12],ymm3[13],ymm0[13],ymm3[14],ymm0[14],ymm3[15],ymm0[15]
	vinserti128	$1, %xmm1, %ymm2, %ymm3
	vinserti128	$1, %xmm0, %ymm4, %ymm5
	vperm2i128	$49, %ymm1, %ymm2, %ymm1 ## ymm1 = ymm2[2,3],ymm1[2,3]
	vperm2i128	$49, %ymm0, %ymm4, %ymm0 ## ymm0 = ymm4[2,3],ymm0[2,3]
	movq	344(%rsp), %rax                 ## 8-byte Reload
	vmovdqu	%ymm0, -32(%rax,%rcx,4)
	vmovdqu	%ymm1, -64(%rax,%rcx,4)
	vmovdqu	%ymm5, -96(%rax,%rcx,4)
	vmovdqu	%ymm3, -128(%rax,%rcx,4)
	vmovdqu	(%rsi,%rcx,2), %ymm0
	vmovdqu	32(%rsi,%rcx,2), %ymm1
	vpshufb	%ymm6, %ymm1, %ymm2
	vpshufb	%ymm7, %ymm0, %ymm3
	vpblendd	$204, %ymm2, %ymm3, %ymm2       ## ymm2 = ymm3[0,1],ymm2[2,3],ymm3[4,5],ymm2[6,7]
	vpermq	$216, %ymm2, %ymm2              ## ymm2 = ymm2[0,2,1,3]
	vpshufb	%ymm8, %ymm1, %ymm1
	vpshufb	%ymm9, %ymm0, %ymm0
	vpblendd	$204, %ymm1, %ymm0, %ymm0       ## ymm0 = ymm0[0,1],ymm1[2,3],ymm0[4,5],ymm1[6,7]
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpunpcklbw	%ymm2, %ymm2, %ymm1     ## ymm1 = ymm2[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23]
	vpunpckhbw	%ymm2, %ymm2, %ymm3     ## ymm3 = ymm2[8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31]
	vpunpcklbw	%ymm0, %ymm2, %ymm4     ## ymm4 = ymm2[0],ymm0[0],ymm2[1],ymm0[1],ymm2[2],ymm0[2],ymm2[3],ymm0[3],ymm2[4],ymm0[4],ymm2[5],ymm0[5],ymm2[6],ymm0[6],ymm2[7],ymm0[7],ymm2[16],ymm0[16],ymm2[17],ymm0[17],ymm2[18],ymm0[18],ymm2[19],ymm0[19],ymm2[20],ymm0[20],ymm2[21],ymm0[21],ymm2[22],ymm0[22],ymm2[23],ymm0[23]
	vpunpckhbw	%ymm0, %ymm2, %ymm0     ## ymm0 = ymm2[8],ymm0[8],ymm2[9],ymm0[9],ymm2[10],ymm0[10],ymm2[11],ymm0[11],ymm2[12],ymm0[12],ymm2[13],ymm0[13],ymm2[14],ymm0[14],ymm2[15],ymm0[15],ymm2[24],ymm0[24],ymm2[25],ymm0[25],ymm2[26],ymm0[26],ymm2[27],ymm0[27],ymm2[28],ymm0[28],ymm2[29],ymm0[29],ymm2[30],ymm0[30],ymm2[31],ymm0[31]
	vpunpcklwd	%ymm4, %ymm1, %ymm2     ## ymm2 = ymm1[0],ymm4[0],ymm1[1],ymm4[1],ymm1[2],ymm4[2],ymm1[3],ymm4[3],ymm1[8],ymm4[8],ymm1[9],ymm4[9],ymm1[10],ymm4[10],ymm1[11],ymm4[11]
	vpunpckhwd	%ymm4, %ymm1, %ymm1     ## ymm1 = ymm1[4],ymm4[4],ymm1[5],ymm4[5],ymm1[6],ymm4[6],ymm1[7],ymm4[7],ymm1[12],ymm4[12],ymm1[13],ymm4[13],ymm1[14],ymm4[14],ymm1[15],ymm4[15]
	vpunpcklwd	%ymm0, %ymm3, %ymm4     ## ymm4 = ymm3[0],ymm0[0],ymm3[1],ymm0[1],ymm3[2],ymm0[2],ymm3[3],ymm0[3],ymm3[8],ymm0[8],ymm3[9],ymm0[9],ymm3[10],ymm0[10],ymm3[11],ymm0[11]
	vpunpckhwd	%ymm0, %ymm3, %ymm0     ## ymm0 = ymm3[4],ymm0[4],ymm3[5],ymm0[5],ymm3[6],ymm0[6],ymm3[7],ymm0[7],ymm3[12],ymm0[12],ymm3[13],ymm0[13],ymm3[14],ymm0[14],ymm3[15],ymm0[15]
	vinserti128	$1, %xmm1, %ymm2, %ymm3
	vinserti128	$1, %xmm0, %ymm4, %ymm5
	vperm2i128	$49, %ymm1, %ymm2, %ymm1 ## ymm1 = ymm2[2,3],ymm1[2,3]
	vperm2i128	$49, %ymm0, %ymm4, %ymm0 ## ymm0 = ymm4[2,3],ymm0[2,3]
	vmovdqu	%ymm0, 96(%rax,%rcx,4)
	vmovdqu	%ymm1, 64(%rax,%rcx,4)
	vmovdqu	%ymm5, 32(%rax,%rcx,4)
	vmovdqu	%ymm3, (%rax,%rcx,4)
	addq	$64, %rcx
	addq	$-2, %rdi
	jne	LBB172_313
	jmp	LBB172_340
LBB172_314:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_315:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rdx                  ## 8-byte Reload
	vmovdqu	(%rdx), %xmm0
	vmovdqu	16(%rdx), %xmm1
	vmovdqu	32(%rdx), %xmm2
	vinserti128	$1, 48(%rdx), %ymm0, %ymm0
	vinserti128	$1, 64(%rdx), %ymm1, %ymm1
	vinserti128	$1, 80(%rdx), %ymm2, %ymm2
	vmovdqa	LCPI172_45(%rip), %ymm3         ## ymm3 = [0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13,0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13]
	vpshufb	%ymm3, %ymm0, %ymm0
	vpshufb	%ymm3, %ymm1, %ymm1
	vpshufb	%ymm3, %ymm2, %ymm2
	vpalignr	$11, %ymm2, %ymm0, %ymm3        ## ymm3 = ymm2[11,12,13,14,15],ymm0[0,1,2,3,4,5,6,7,8,9,10],ymm2[27,28,29,30,31],ymm0[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm0, %ymm1, %ymm4        ## ymm4 = ymm0[11,12,13,14,15],ymm1[0,1,2,3,4,5,6,7,8,9,10],ymm0[27,28,29,30,31],ymm1[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm1, %ymm2, %ymm1        ## ymm1 = ymm1[11,12,13,14,15],ymm2[0,1,2,3,4,5,6,7,8,9,10],ymm1[27,28,29,30,31],ymm2[16,17,18,19,20,21,22,23,24,25,26]
	vmovdqa	LCPI172_46(%rip), %ymm0         ## ymm0 = [255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0]
	vpblendvb	%ymm0, %ymm4, %ymm1, %ymm0
	vpalignr	$11, %ymm3, %ymm1, %ymm6        ## ymm6 = ymm3[11,12,13,14,15],ymm1[0,1,2,3,4,5,6,7,8,9,10],ymm3[27,28,29,30,31],ymm1[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm4, %ymm3, %ymm1        ## ymm1 = ymm4[11,12,13,14,15],ymm3[0,1,2,3,4,5,6,7,8,9,10],ymm4[27,28,29,30,31],ymm3[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$10, %ymm1, %ymm1, %ymm1        ## ymm1 = ymm1[10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,26,27,28,29,30,31,16,17,18,19,20,21,22,23,24,25]
	vextracti128	$1, %ymm1, %xmm2
	vpmovzxbd	%xmm2, %ymm3            ## ymm3 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpshufd	$238, %xmm2, %xmm2              ## xmm2 = xmm2[2,3,2,3]
	vpmovzxbd	%xmm2, %ymm2            ## ymm2 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpmovzxbd	%xmm1, %ymm4            ## ymm4 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpshufd	$238, %xmm1, %xmm1              ## xmm1 = xmm1[2,3,2,3]
	vpmovzxbd	%xmm1, %ymm1            ## ymm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpshufd	$238, %xmm0, %xmm5              ## xmm5 = xmm0[2,3,2,3]
	vpmovzxbd	%xmm5, %ymm5            ## ymm5 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpbroadcastd	LCPI172_0(%rip), %ymm7  ## ymm7 = [77,77,77,77,77,77,77,77]
	vpmaddwd	%ymm7, %ymm1, %ymm1
	vpmaddwd	%ymm7, %ymm4, %ymm4
	vpmaddwd	%ymm7, %ymm3, %ymm3
	vpbroadcastd	LCPI172_1(%rip), %ymm7  ## ymm7 = [150,150,150,150,150,150,150,150]
	vpmaddwd	%ymm7, %ymm5, %ymm5
	vpaddd	%ymm1, %ymm5, %ymm1
	vextracti128	$1, %ymm0, %xmm5
	vpmovzxbd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero,xmm0[4],zero,zero,zero,xmm0[5],zero,zero,zero,xmm0[6],zero,zero,zero,xmm0[7],zero,zero,zero
	vpmaddwd	%ymm7, %ymm0, %ymm0
	vpaddd	%ymm4, %ymm0, %ymm0
	vpmovzxbd	%xmm5, %ymm4            ## ymm4 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpshufd	$238, %xmm5, %xmm5              ## xmm5 = xmm5[2,3,2,3]
	vpmovzxbd	%xmm5, %ymm5            ## ymm5 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpmaddwd	LCPI172_36(%rip), %ymm2, %ymm2
	vpmaddwd	LCPI172_37(%rip), %ymm5, %ymm5
	vpaddd	%ymm2, %ymm5, %ymm2
	vextracti128	$1, %ymm6, %xmm5
	vpmaddwd	%ymm7, %ymm4, %ymm4
	vpaddd	%ymm3, %ymm4, %ymm3
	vpbroadcastd	LCPI172_2(%rip), %ymm4  ## ymm4 = [29,29,29,29,29,29,29,29]
	vpmovzxbd	%xmm5, %ymm7            ## ymm7 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpmaddwd	%ymm4, %ymm7, %ymm7
	vpaddd	%ymm7, %ymm3, %ymm3
	vpshufd	$238, %xmm5, %xmm5              ## xmm5 = xmm5[2,3,2,3]
	vpmovzxbd	%xmm5, %ymm5            ## ymm5 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpmaddwd	LCPI172_38(%rip), %ymm5, %ymm5
	vpaddd	%ymm5, %ymm2, %ymm2
	vpmovzxbd	%xmm6, %ymm5            ## ymm5 = xmm6[0],zero,zero,zero,xmm6[1],zero,zero,zero,xmm6[2],zero,zero,zero,xmm6[3],zero,zero,zero,xmm6[4],zero,zero,zero,xmm6[5],zero,zero,zero,xmm6[6],zero,zero,zero,xmm6[7],zero,zero,zero
	vpmaddwd	%ymm4, %ymm5, %ymm5
	vpaddd	%ymm5, %ymm0, %ymm0
	vpshufd	$238, %xmm6, %xmm5              ## xmm5 = xmm6[2,3,2,3]
	vpmovzxbd	%xmm5, %ymm5            ## ymm5 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpmaddwd	%ymm4, %ymm5, %ymm4
	vpaddd	%ymm4, %ymm1, %ymm1
	vmovdqa	LCPI172_39(%rip), %ymm4         ## ymm4 = [1,128,128,128,5,128,128,128,9,128,128,128,13,128,128,128,17,128,128,128,21,128,128,128,25,128,128,128,29,128,128,128]
	vpshufb	%ymm4, %ymm3, %ymm3
	vpshufb	%ymm4, %ymm2, %ymm2
	vpackusdw	%ymm2, %ymm3, %ymm2
	vpshufb	%ymm4, %ymm0, %ymm0
	vpshufb	%ymm4, %ymm1, %ymm1
	vpackusdw	%ymm1, %ymm0, %ymm0
	vpermq	$216, %ymm2, %ymm1              ## ymm1 = ymm2[0,2,1,3]
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpackuswb	%ymm1, %ymm0, %ymm0
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%ymm0, (%rax,%rcx)
	addq	$32, %rcx
	addq	$96, %rdx
	movq	%rdx, 48(%rsp)                  ## 8-byte Spill
	cmpq	%rcx, 112(%rsp)                 ## 8-byte Folded Reload
	jne	LBB172_315
## %bb.316:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	112(%rsp), %rax                 ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
## %bb.317:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	112(%rsp), %rcx                 ## 8-byte Reload
	testb	$16, 32(%rsp)                   ## 1-byte Folded Reload
	jne	LBB172_247
## %bb.318:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	288(%rsp), %r10                 ## 8-byte Folded Reload
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	112(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	movl	240(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_150
LBB172_319:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_320:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rdx                  ## 8-byte Reload
	vmovdqu	(%rdx), %xmm0
	vmovdqu	16(%rdx), %xmm1
	vmovdqu	32(%rdx), %xmm2
	vinserti128	$1, 48(%rdx), %ymm0, %ymm0
	vinserti128	$1, 64(%rdx), %ymm1, %ymm1
	vinserti128	$1, 80(%rdx), %ymm2, %ymm2
	vmovdqa	LCPI172_45(%rip), %ymm3         ## ymm3 = [0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13,0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13]
	vpshufb	%ymm3, %ymm0, %ymm0
	vpshufb	%ymm3, %ymm1, %ymm1
	vpshufb	%ymm3, %ymm2, %ymm2
	vpalignr	$11, %ymm2, %ymm0, %ymm3        ## ymm3 = ymm2[11,12,13,14,15],ymm0[0,1,2,3,4,5,6,7,8,9,10],ymm2[27,28,29,30,31],ymm0[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm0, %ymm1, %ymm4        ## ymm4 = ymm0[11,12,13,14,15],ymm1[0,1,2,3,4,5,6,7,8,9,10],ymm0[27,28,29,30,31],ymm1[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm1, %ymm2, %ymm0        ## ymm0 = ymm1[11,12,13,14,15],ymm2[0,1,2,3,4,5,6,7,8,9,10],ymm1[27,28,29,30,31],ymm2[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm3, %ymm0, %ymm6        ## ymm6 = ymm3[11,12,13,14,15],ymm0[0,1,2,3,4,5,6,7,8,9,10],ymm3[27,28,29,30,31],ymm0[16,17,18,19,20,21,22,23,24,25,26]
	vmovdqa	LCPI172_46(%rip), %ymm1         ## ymm1 = [255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0]
	vpblendvb	%ymm1, %ymm4, %ymm0, %ymm0
	vpalignr	$11, %ymm4, %ymm3, %ymm1        ## ymm1 = ymm4[11,12,13,14,15],ymm3[0,1,2,3,4,5,6,7,8,9,10],ymm4[27,28,29,30,31],ymm3[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$10, %ymm1, %ymm1, %ymm1        ## ymm1 = ymm1[10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,26,27,28,29,30,31,16,17,18,19,20,21,22,23,24,25]
	vextracti128	$1, %ymm1, %xmm2
	vpmovzxbd	%xmm2, %ymm3            ## ymm3 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpshufd	$238, %xmm2, %xmm2              ## xmm2 = xmm2[2,3,2,3]
	vpmovzxbd	%xmm2, %ymm2            ## ymm2 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpmovzxbd	%xmm1, %ymm4            ## ymm4 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpshufd	$238, %xmm1, %xmm1              ## xmm1 = xmm1[2,3,2,3]
	vpmovzxbd	%xmm1, %ymm1            ## ymm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpshufd	$238, %xmm0, %xmm5              ## xmm5 = xmm0[2,3,2,3]
	vpmovzxbd	%xmm5, %ymm5            ## ymm5 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpbroadcastd	LCPI172_0(%rip), %ymm7  ## ymm7 = [77,77,77,77,77,77,77,77]
	vpmaddwd	%ymm7, %ymm1, %ymm1
	vpmaddwd	%ymm7, %ymm4, %ymm4
	vpmaddwd	%ymm7, %ymm3, %ymm3
	vpbroadcastd	LCPI172_1(%rip), %ymm7  ## ymm7 = [150,150,150,150,150,150,150,150]
	vpmaddwd	%ymm7, %ymm5, %ymm5
	vpaddd	%ymm1, %ymm5, %ymm1
	vextracti128	$1, %ymm0, %xmm5
	vpmovzxbd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero,xmm0[4],zero,zero,zero,xmm0[5],zero,zero,zero,xmm0[6],zero,zero,zero,xmm0[7],zero,zero,zero
	vpmaddwd	%ymm7, %ymm0, %ymm0
	vpaddd	%ymm4, %ymm0, %ymm0
	vpmovzxbd	%xmm5, %ymm4            ## ymm4 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpshufd	$238, %xmm5, %xmm5              ## xmm5 = xmm5[2,3,2,3]
	vpmovzxbd	%xmm5, %ymm5            ## ymm5 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpmaddwd	LCPI172_36(%rip), %ymm2, %ymm2
	vpmaddwd	LCPI172_37(%rip), %ymm5, %ymm5
	vpaddd	%ymm2, %ymm5, %ymm2
	vextracti128	$1, %ymm6, %xmm5
	vpmaddwd	%ymm7, %ymm4, %ymm4
	vpmovzxbd	%xmm5, %ymm7            ## ymm7 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpaddd	%ymm3, %ymm4, %ymm3
	vpbroadcastd	LCPI172_2(%rip), %ymm4  ## ymm4 = [29,29,29,29,29,29,29,29]
	vpmaddwd	%ymm4, %ymm7, %ymm7
	vpaddd	%ymm7, %ymm3, %ymm3
	vpshufd	$238, %xmm5, %xmm5              ## xmm5 = xmm5[2,3,2,3]
	vpmovzxbd	%xmm5, %ymm5            ## ymm5 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpmaddwd	LCPI172_38(%rip), %ymm5, %ymm5
	vpaddd	%ymm5, %ymm2, %ymm2
	vpmovzxbd	%xmm6, %ymm5            ## ymm5 = xmm6[0],zero,zero,zero,xmm6[1],zero,zero,zero,xmm6[2],zero,zero,zero,xmm6[3],zero,zero,zero,xmm6[4],zero,zero,zero,xmm6[5],zero,zero,zero,xmm6[6],zero,zero,zero,xmm6[7],zero,zero,zero
	vpmaddwd	%ymm4, %ymm5, %ymm5
	vpaddd	%ymm5, %ymm0, %ymm0
	vpshufd	$238, %xmm6, %xmm5              ## xmm5 = xmm6[2,3,2,3]
	vpmovzxbd	%xmm5, %ymm5            ## ymm5 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpmaddwd	%ymm4, %ymm5, %ymm4
	vpaddd	%ymm4, %ymm1, %ymm1
	vmovdqa	LCPI172_39(%rip), %ymm4         ## ymm4 = [1,128,128,128,5,128,128,128,9,128,128,128,13,128,128,128,17,128,128,128,21,128,128,128,25,128,128,128,29,128,128,128]
	vpshufb	%ymm4, %ymm3, %ymm3
	vpshufb	%ymm4, %ymm2, %ymm2
	vpackusdw	%ymm2, %ymm3, %ymm2
	vpshufb	%ymm4, %ymm0, %ymm0
	vpshufb	%ymm4, %ymm1, %ymm1
	vpackusdw	%ymm1, %ymm0, %ymm0
	vpermq	$216, %ymm2, %ymm1              ## ymm1 = ymm2[0,2,1,3]
	vpackuswb	%ymm0, %ymm1, %ymm1
	vpcmpeqd	%ymm2, %ymm2, %ymm2
	vpunpcklbw	%ymm2, %ymm1, %ymm1     ## ymm1 = ymm1[0],ymm2[0],ymm1[1],ymm2[1],ymm1[2],ymm2[2],ymm1[3],ymm2[3],ymm1[4],ymm2[4],ymm1[5],ymm2[5],ymm1[6],ymm2[6],ymm1[7],ymm2[7],ymm1[16],ymm2[16],ymm1[17],ymm2[17],ymm1[18],ymm2[18],ymm1[19],ymm2[19],ymm1[20],ymm2[20],ymm1[21],ymm2[21],ymm1[22],ymm2[22],ymm1[23],ymm2[23]
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%ymm1, 32(%rax,%rcx,2)
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpackuswb	%ymm0, %ymm0, %ymm0
	vpunpcklbw	%ymm2, %ymm0, %ymm0     ## ymm0 = ymm0[0],ymm2[0],ymm0[1],ymm2[1],ymm0[2],ymm2[2],ymm0[3],ymm2[3],ymm0[4],ymm2[4],ymm0[5],ymm2[5],ymm0[6],ymm2[6],ymm0[7],ymm2[7],ymm0[16],ymm2[16],ymm0[17],ymm2[17],ymm0[18],ymm2[18],ymm0[19],ymm2[19],ymm0[20],ymm2[20],ymm0[21],ymm2[21],ymm0[22],ymm2[22],ymm0[23],ymm2[23]
	vmovdqu	%ymm0, (%rax,%rcx,2)
	addq	$32, %rcx
	addq	$96, %rdx
	movq	%rdx, 48(%rsp)                  ## 8-byte Spill
	cmpq	%rcx, 112(%rsp)                 ## 8-byte Folded Reload
	jne	LBB172_320
## %bb.321:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	112(%rsp), %rax                 ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
## %bb.322:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	112(%rsp), %rcx                 ## 8-byte Reload
	testb	$16, 32(%rsp)                   ## 1-byte Folded Reload
	jne	LBB172_252
## %bb.323:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	288(%rsp), %r10                 ## 8-byte Folded Reload
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	600(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	movl	240(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_158
LBB172_324:                             ##   in Loop: Header=BB172_84 Depth=1
	cmpq	$0, 368(%rsp)                   ## 8-byte Folded Reload
	je	LBB172_345
## %bb.325:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	352(%rsp), %rdi                 ## 8-byte Reload
	xorl	%ecx, %ecx
LBB172_326:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	(%rax), %xmm0
	vmovdqu	16(%rax), %xmm1
	vmovdqu	32(%rax), %xmm2
	vinserti128	$1, 48(%rax), %ymm0, %ymm0
	vinserti128	$1, 64(%rax), %ymm1, %ymm1
	vinserti128	$1, 80(%rax), %ymm2, %ymm2
	vmovdqa	LCPI172_45(%rip), %ymm8         ## ymm8 = [0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13,0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13]
	vpshufb	%ymm8, %ymm0, %ymm0
	vpshufb	%ymm8, %ymm1, %ymm1
	vpshufb	%ymm8, %ymm2, %ymm2
	vpalignr	$11, %ymm2, %ymm0, %ymm3        ## ymm3 = ymm2[11,12,13,14,15],ymm0[0,1,2,3,4,5,6,7,8,9,10],ymm2[27,28,29,30,31],ymm0[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm0, %ymm1, %ymm0        ## ymm0 = ymm0[11,12,13,14,15],ymm1[0,1,2,3,4,5,6,7,8,9,10],ymm0[27,28,29,30,31],ymm1[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm1, %ymm2, %ymm1        ## ymm1 = ymm1[11,12,13,14,15],ymm2[0,1,2,3,4,5,6,7,8,9,10],ymm1[27,28,29,30,31],ymm2[16,17,18,19,20,21,22,23,24,25,26]
	vbroadcasti128	LCPI172_49(%rip), %ymm2 ## ymm2 = [255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0]
                                        ## ymm2 = mem[0,1,0,1]
	vpalignr	$11, %ymm3, %ymm1, %ymm4        ## ymm4 = ymm3[11,12,13,14,15],ymm1[0,1,2,3,4,5,6,7,8,9,10],ymm3[27,28,29,30,31],ymm1[16,17,18,19,20,21,22,23,24,25,26]
	vpblendvb	%ymm2, %ymm0, %ymm1, %ymm1
	vpalignr	$11, %ymm0, %ymm3, %ymm0        ## ymm0 = ymm0[11,12,13,14,15],ymm3[0,1,2,3,4,5,6,7,8,9,10],ymm0[27,28,29,30,31],ymm3[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$10, %ymm0, %ymm0, %ymm0        ## ymm0 = ymm0[10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,26,27,28,29,30,31,16,17,18,19,20,21,22,23,24,25]
	vpunpcklbw	%ymm1, %ymm0, %ymm3     ## ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[16],ymm1[16],ymm0[17],ymm1[17],ymm0[18],ymm1[18],ymm0[19],ymm1[19],ymm0[20],ymm1[20],ymm0[21],ymm1[21],ymm0[22],ymm1[22],ymm0[23],ymm1[23]
	vpunpckhbw	%ymm1, %ymm0, %ymm0     ## ymm0 = ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15],ymm0[24],ymm1[24],ymm0[25],ymm1[25],ymm0[26],ymm1[26],ymm0[27],ymm1[27],ymm0[28],ymm1[28],ymm0[29],ymm1[29],ymm0[30],ymm1[30],ymm0[31],ymm1[31]
	vpcmpeqd	%ymm7, %ymm7, %ymm7
	vpunpcklbw	%ymm7, %ymm4, %ymm1     ## ymm1 = ymm4[0],ymm7[0],ymm4[1],ymm7[1],ymm4[2],ymm7[2],ymm4[3],ymm7[3],ymm4[4],ymm7[4],ymm4[5],ymm7[5],ymm4[6],ymm7[6],ymm4[7],ymm7[7],ymm4[16],ymm7[16],ymm4[17],ymm7[17],ymm4[18],ymm7[18],ymm4[19],ymm7[19],ymm4[20],ymm7[20],ymm4[21],ymm7[21],ymm4[22],ymm7[22],ymm4[23],ymm7[23]
	vpunpckhbw	%ymm7, %ymm4, %ymm4     ## ymm4 = ymm4[8],ymm7[8],ymm4[9],ymm7[9],ymm4[10],ymm7[10],ymm4[11],ymm7[11],ymm4[12],ymm7[12],ymm4[13],ymm7[13],ymm4[14],ymm7[14],ymm4[15],ymm7[15],ymm4[24],ymm7[24],ymm4[25],ymm7[25],ymm4[26],ymm7[26],ymm4[27],ymm7[27],ymm4[28],ymm7[28],ymm4[29],ymm7[29],ymm4[30],ymm7[30],ymm4[31],ymm7[31]
	vpunpcklwd	%ymm1, %ymm3, %ymm5     ## ymm5 = ymm3[0],ymm1[0],ymm3[1],ymm1[1],ymm3[2],ymm1[2],ymm3[3],ymm1[3],ymm3[8],ymm1[8],ymm3[9],ymm1[9],ymm3[10],ymm1[10],ymm3[11],ymm1[11]
	vpunpckhwd	%ymm1, %ymm3, %ymm1     ## ymm1 = ymm3[4],ymm1[4],ymm3[5],ymm1[5],ymm3[6],ymm1[6],ymm3[7],ymm1[7],ymm3[12],ymm1[12],ymm3[13],ymm1[13],ymm3[14],ymm1[14],ymm3[15],ymm1[15]
	vpunpcklwd	%ymm4, %ymm0, %ymm3     ## ymm3 = ymm0[0],ymm4[0],ymm0[1],ymm4[1],ymm0[2],ymm4[2],ymm0[3],ymm4[3],ymm0[8],ymm4[8],ymm0[9],ymm4[9],ymm0[10],ymm4[10],ymm0[11],ymm4[11]
	vpunpckhwd	%ymm4, %ymm0, %ymm0     ## ymm0 = ymm0[4],ymm4[4],ymm0[5],ymm4[5],ymm0[6],ymm4[6],ymm0[7],ymm4[7],ymm0[12],ymm4[12],ymm0[13],ymm4[13],ymm0[14],ymm4[14],ymm0[15],ymm4[15]
	vinserti128	$1, %xmm1, %ymm5, %ymm4
	vinserti128	$1, %xmm0, %ymm3, %ymm6
	vperm2i128	$49, %ymm1, %ymm5, %ymm1 ## ymm1 = ymm5[2,3],ymm1[2,3]
	vperm2i128	$49, %ymm0, %ymm3, %ymm0 ## ymm0 = ymm3[2,3],ymm0[2,3]
	movq	344(%rsp), %rdx                 ## 8-byte Reload
	vmovdqu	%ymm0, -32(%rdx,%rcx,4)
	vmovdqu	%ymm1, -64(%rdx,%rcx,4)
	vmovdqu	%ymm6, -96(%rdx,%rcx,4)
	vmovdqu	%ymm4, -128(%rdx,%rcx,4)
	vmovdqu	96(%rax), %xmm0
	vmovdqu	112(%rax), %xmm1
	vmovdqu	128(%rax), %xmm3
	vinserti128	$1, 144(%rax), %ymm0, %ymm0
	vinserti128	$1, 160(%rax), %ymm1, %ymm1
	vinserti128	$1, 176(%rax), %ymm3, %ymm3
	vpshufb	%ymm8, %ymm0, %ymm0
	vpshufb	%ymm8, %ymm1, %ymm1
	vpshufb	%ymm8, %ymm3, %ymm3
	vpalignr	$11, %ymm3, %ymm0, %ymm4        ## ymm4 = ymm3[11,12,13,14,15],ymm0[0,1,2,3,4,5,6,7,8,9,10],ymm3[27,28,29,30,31],ymm0[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm0, %ymm1, %ymm0        ## ymm0 = ymm0[11,12,13,14,15],ymm1[0,1,2,3,4,5,6,7,8,9,10],ymm0[27,28,29,30,31],ymm1[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm1, %ymm3, %ymm1        ## ymm1 = ymm1[11,12,13,14,15],ymm3[0,1,2,3,4,5,6,7,8,9,10],ymm1[27,28,29,30,31],ymm3[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm4, %ymm1, %ymm3        ## ymm3 = ymm4[11,12,13,14,15],ymm1[0,1,2,3,4,5,6,7,8,9,10],ymm4[27,28,29,30,31],ymm1[16,17,18,19,20,21,22,23,24,25,26]
	vpblendvb	%ymm2, %ymm0, %ymm1, %ymm1
	vpalignr	$11, %ymm0, %ymm4, %ymm0        ## ymm0 = ymm0[11,12,13,14,15],ymm4[0,1,2,3,4,5,6,7,8,9,10],ymm0[27,28,29,30,31],ymm4[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$10, %ymm0, %ymm0, %ymm0        ## ymm0 = ymm0[10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,26,27,28,29,30,31,16,17,18,19,20,21,22,23,24,25]
	vpunpcklbw	%ymm1, %ymm0, %ymm2     ## ymm2 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[16],ymm1[16],ymm0[17],ymm1[17],ymm0[18],ymm1[18],ymm0[19],ymm1[19],ymm0[20],ymm1[20],ymm0[21],ymm1[21],ymm0[22],ymm1[22],ymm0[23],ymm1[23]
	vpunpckhbw	%ymm1, %ymm0, %ymm0     ## ymm0 = ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15],ymm0[24],ymm1[24],ymm0[25],ymm1[25],ymm0[26],ymm1[26],ymm0[27],ymm1[27],ymm0[28],ymm1[28],ymm0[29],ymm1[29],ymm0[30],ymm1[30],ymm0[31],ymm1[31]
	vpunpcklbw	%ymm7, %ymm3, %ymm1     ## ymm1 = ymm3[0],ymm7[0],ymm3[1],ymm7[1],ymm3[2],ymm7[2],ymm3[3],ymm7[3],ymm3[4],ymm7[4],ymm3[5],ymm7[5],ymm3[6],ymm7[6],ymm3[7],ymm7[7],ymm3[16],ymm7[16],ymm3[17],ymm7[17],ymm3[18],ymm7[18],ymm3[19],ymm7[19],ymm3[20],ymm7[20],ymm3[21],ymm7[21],ymm3[22],ymm7[22],ymm3[23],ymm7[23]
	vpunpckhbw	%ymm7, %ymm3, %ymm3     ## ymm3 = ymm3[8],ymm7[8],ymm3[9],ymm7[9],ymm3[10],ymm7[10],ymm3[11],ymm7[11],ymm3[12],ymm7[12],ymm3[13],ymm7[13],ymm3[14],ymm7[14],ymm3[15],ymm7[15],ymm3[24],ymm7[24],ymm3[25],ymm7[25],ymm3[26],ymm7[26],ymm3[27],ymm7[27],ymm3[28],ymm7[28],ymm3[29],ymm7[29],ymm3[30],ymm7[30],ymm3[31],ymm7[31]
	vpunpcklwd	%ymm1, %ymm2, %ymm4     ## ymm4 = ymm2[0],ymm1[0],ymm2[1],ymm1[1],ymm2[2],ymm1[2],ymm2[3],ymm1[3],ymm2[8],ymm1[8],ymm2[9],ymm1[9],ymm2[10],ymm1[10],ymm2[11],ymm1[11]
	vpunpckhwd	%ymm1, %ymm2, %ymm1     ## ymm1 = ymm2[4],ymm1[4],ymm2[5],ymm1[5],ymm2[6],ymm1[6],ymm2[7],ymm1[7],ymm2[12],ymm1[12],ymm2[13],ymm1[13],ymm2[14],ymm1[14],ymm2[15],ymm1[15]
	vpunpcklwd	%ymm3, %ymm0, %ymm2     ## ymm2 = ymm0[0],ymm3[0],ymm0[1],ymm3[1],ymm0[2],ymm3[2],ymm0[3],ymm3[3],ymm0[8],ymm3[8],ymm0[9],ymm3[9],ymm0[10],ymm3[10],ymm0[11],ymm3[11]
	vpunpckhwd	%ymm3, %ymm0, %ymm0     ## ymm0 = ymm0[4],ymm3[4],ymm0[5],ymm3[5],ymm0[6],ymm3[6],ymm0[7],ymm3[7],ymm0[12],ymm3[12],ymm0[13],ymm3[13],ymm0[14],ymm3[14],ymm0[15],ymm3[15]
	vinserti128	$1, %xmm1, %ymm4, %ymm3
	vinserti128	$1, %xmm0, %ymm2, %ymm5
	vperm2i128	$49, %ymm1, %ymm4, %ymm1 ## ymm1 = ymm4[2,3],ymm1[2,3]
	vperm2i128	$49, %ymm0, %ymm2, %ymm0 ## ymm0 = ymm2[2,3],ymm0[2,3]
	vmovdqu	%ymm0, 96(%rdx,%rcx,4)
	vmovdqu	%ymm1, 64(%rdx,%rcx,4)
	vmovdqu	%ymm5, 32(%rdx,%rcx,4)
	vmovdqu	%ymm3, (%rdx,%rcx,4)
	addq	$64, %rcx
	addq	$192, %rax
	movq	%rax, 48(%rsp)                  ## 8-byte Spill
	addq	$-2, %rdi
	jne	LBB172_326
	jmp	LBB172_346
LBB172_327:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_328:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	(%rax,%rcx,4), %xmm0
	vmovdqu	16(%rax,%rcx,4), %xmm1
	vmovdqu	32(%rax,%rcx,4), %xmm2
	vmovdqu	48(%rax,%rcx,4), %xmm3
	vmovdqa	LCPI172_30(%rip), %xmm5         ## xmm5 = <u,u,u,u,0,4,8,12,u,u,u,u,u,u,u,u>
	vpshufb	%xmm5, %xmm3, %xmm4
	vpshufb	%xmm5, %xmm2, %xmm5
	vpunpckldq	%xmm4, %xmm5, %xmm4     ## xmm4 = xmm5[0],xmm4[0],xmm5[1],xmm4[1]
	vmovdqa	LCPI172_31(%rip), %xmm6         ## xmm6 = <0,4,8,12,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm6, %xmm1, %xmm5
	vpshufb	%xmm6, %xmm0, %xmm6
	vpunpckldq	%xmm5, %xmm6, %xmm9     ## xmm9 = xmm6[0],xmm5[0],xmm6[1],xmm5[1]
	vmovdqa	LCPI172_32(%rip), %xmm5         ## xmm5 = <u,u,u,u,1,5,9,13,u,u,u,u,u,u,u,u>
	vpshufb	%xmm5, %xmm3, %xmm6
	vpshufb	%xmm5, %xmm2, %xmm7
	vpunpckldq	%xmm6, %xmm7, %xmm6     ## xmm6 = xmm7[0],xmm6[0],xmm7[1],xmm6[1]
	vmovdqa	LCPI172_33(%rip), %xmm5         ## xmm5 = <1,5,9,13,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm5, %xmm1, %xmm7
	vpshufb	%xmm5, %xmm0, %xmm5
	vpunpckldq	%xmm7, %xmm5, %xmm5     ## xmm5 = xmm5[0],xmm7[0],xmm5[1],xmm7[1]
	vmovdqa	LCPI172_34(%rip), %xmm7         ## xmm7 = <2,6,10,14,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm7, %xmm1, %xmm1
	vpshufb	%xmm7, %xmm0, %xmm0
	vpunpckldq	%xmm1, %xmm0, %xmm0     ## xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	vmovdqa	LCPI172_35(%rip), %xmm7         ## xmm7 = <u,u,u,u,2,6,10,14,u,u,u,u,u,u,u,u>
	vpshufb	%xmm7, %xmm3, %xmm1
	vpshufb	%xmm7, %xmm2, %xmm2
	vpunpckldq	%xmm1, %xmm2, %xmm1     ## xmm1 = xmm2[0],xmm1[0],xmm2[1],xmm1[1]
	vpshufd	$238, %xmm4, %xmm2              ## xmm2 = xmm4[2,3,2,3]
	vpmovzxbd	%xmm2, %ymm2            ## ymm2 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpshufd	$238, %xmm6, %xmm3              ## xmm3 = xmm6[2,3,2,3]
	vpmovzxbd	%xmm3, %ymm3            ## ymm3 = xmm3[0],zero,zero,zero,xmm3[1],zero,zero,zero,xmm3[2],zero,zero,zero,xmm3[3],zero,zero,zero,xmm3[4],zero,zero,zero,xmm3[5],zero,zero,zero,xmm3[6],zero,zero,zero,xmm3[7],zero,zero,zero
	vmovdqa	LCPI172_36(%rip), %ymm6         ## ymm6 = <77,u,77,u,77,u,77,u,77,u,77,u,77,u,77,u>
	vpmaddwd	%ymm6, %ymm2, %ymm2
	vmovdqa	LCPI172_37(%rip), %ymm7         ## ymm7 = <150,u,150,u,150,u,150,u,150,u,150,u,150,u,150,u>
	vpmaddwd	%ymm7, %ymm3, %ymm3
	vpaddd	%ymm2, %ymm3, %ymm2
	vpmovzxbd	%xmm9, %ymm3            ## ymm3 = xmm9[0],zero,zero,zero,xmm9[1],zero,zero,zero,xmm9[2],zero,zero,zero,xmm9[3],zero,zero,zero,xmm9[4],zero,zero,zero,xmm9[5],zero,zero,zero,xmm9[6],zero,zero,zero,xmm9[7],zero,zero,zero
	vpmovzxbd	%xmm5, %ymm4            ## ymm4 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpmaddwd	%ymm6, %ymm3, %ymm3
	vpmaddwd	%ymm7, %ymm4, %ymm4
	vpaddd	%ymm3, %ymm4, %ymm3
	vpmovzxbd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero,xmm0[4],zero,zero,zero,xmm0[5],zero,zero,zero,xmm0[6],zero,zero,zero,xmm0[7],zero,zero,zero
	vmovdqa	LCPI172_38(%rip), %ymm4         ## ymm4 = <29,u,29,u,29,u,29,u,29,u,29,u,29,u,29,u>
	vpmaddwd	%ymm4, %ymm0, %ymm0
	vpaddd	%ymm0, %ymm3, %ymm0
	vpshufd	$238, %xmm1, %xmm1              ## xmm1 = xmm1[2,3,2,3]
	vpmovzxbd	%xmm1, %ymm1            ## ymm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpmaddwd	%ymm4, %ymm1, %ymm1
	vpaddd	%ymm1, %ymm2, %ymm1
	vmovdqa	LCPI172_39(%rip), %ymm2         ## ymm2 = [1,128,128,128,5,128,128,128,9,128,128,128,13,128,128,128,17,128,128,128,21,128,128,128,25,128,128,128,29,128,128,128]
	vpshufb	%ymm2, %ymm0, %ymm0
	vpshufb	%ymm2, %ymm1, %ymm1
	vpackusdw	%ymm1, %ymm0, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpackuswb	%xmm1, %xmm0, %xmm0
	vpshufd	$216, %xmm0, %xmm0              ## xmm0 = xmm0[0,2,1,3]
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%xmm0, (%rax,%rcx)
	addq	$16, %rcx
	cmpq	%rcx, 176(%rsp)                 ## 8-byte Folded Reload
	jne	LBB172_328
## %bb.329:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	176(%rsp), %rcx                 ## 8-byte Reload
	cmpl	$8, 496(%rsp)                   ## 4-byte Folded Reload
	ja	LBB172_331
## %bb.330:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	320(%rsp), %r10                 ## 8-byte Folded Reload
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	176(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	movl	224(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_174
LBB172_331:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	72(%rsp), %rax                  ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	addq	304(%rsp), %r10                 ## 8-byte Folded Reload
LBB172_332:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	(%rax,%rcx,4), %xmm0
	vmovdqu	16(%rax,%rcx,4), %xmm1
	vmovdqa	LCPI172_31(%rip), %xmm5         ## xmm5 = <0,4,8,12,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm5, %xmm1, %xmm2
	vpshufb	%xmm5, %xmm0, %xmm3
	vpunpckldq	%xmm2, %xmm3, %xmm2     ## xmm2 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
	vmovdqa	LCPI172_33(%rip), %xmm4         ## xmm4 = <1,5,9,13,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm4, %xmm1, %xmm3
	vpshufb	%xmm4, %xmm0, %xmm4
	vpunpckldq	%xmm3, %xmm4, %xmm3     ## xmm3 = xmm4[0],xmm3[0],xmm4[1],xmm3[1]
	vmovdqa	LCPI172_34(%rip), %xmm4         ## xmm4 = <2,6,10,14,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm4, %xmm1, %xmm1
	vpshufb	%xmm4, %xmm0, %xmm0
	vpunpckldq	%xmm1, %xmm0, %xmm0     ## xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	vpmovzxbd	%xmm2, %ymm1            ## ymm1 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpmovzxbd	%xmm3, %ymm2            ## ymm2 = xmm3[0],zero,zero,zero,xmm3[1],zero,zero,zero,xmm3[2],zero,zero,zero,xmm3[3],zero,zero,zero,xmm3[4],zero,zero,zero,xmm3[5],zero,zero,zero,xmm3[6],zero,zero,zero,xmm3[7],zero,zero,zero
	vpmovzxbd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero,xmm0[4],zero,zero,zero,xmm0[5],zero,zero,zero,xmm0[6],zero,zero,zero,xmm0[7],zero,zero,zero
	vpmaddwd	LCPI172_42(%rip), %ymm1, %ymm1
	vpmaddwd	LCPI172_43(%rip), %ymm2, %ymm2
	vpaddd	%ymm1, %ymm2, %ymm1
	vpmaddwd	LCPI172_44(%rip), %ymm0, %ymm0
	vpaddd	%ymm0, %ymm1, %ymm0
	vpsrld	$8, %ymm0, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpshufb	%xmm5, %xmm1, %xmm1
	vpshufb	%xmm5, %xmm0, %xmm0
	vpunpckldq	%xmm1, %xmm0, %xmm0     ## xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovq	%xmm0, (%rax,%rcx)
	addq	$8, %rcx
	cmpq	%rcx, 72(%rsp)                  ## 8-byte Folded Reload
	jne	LBB172_332
## %bb.333:                             ##   in Loop: Header=BB172_84 Depth=1
	movl	528(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_174
LBB172_334:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_335:                             ##   Parent Loop BB172_84 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	48(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	(%rax,%rcx,4), %xmm15
	vmovdqu	16(%rax,%rcx,4), %xmm11
	vmovdqu	32(%rax,%rcx,4), %xmm7
	vmovdqu	48(%rax,%rcx,4), %xmm6
	vmovdqa	LCPI172_30(%rip), %xmm1         ## xmm1 = <u,u,u,u,0,4,8,12,u,u,u,u,u,u,u,u>
	vpshufb	%xmm1, %xmm6, %xmm0
	vpshufb	%xmm1, %xmm7, %xmm1
	vpunpckldq	%xmm0, %xmm1, %xmm0     ## xmm0 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
	vmovdqa	LCPI172_31(%rip), %xmm2         ## xmm2 = <0,4,8,12,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm2, %xmm11, %xmm1
	vpshufb	%xmm2, %xmm15, %xmm2
	vpunpckldq	%xmm1, %xmm2, %xmm9     ## xmm9 = xmm2[0],xmm1[0],xmm2[1],xmm1[1]
	vmovdqa	LCPI172_32(%rip), %xmm1         ## xmm1 = <u,u,u,u,1,5,9,13,u,u,u,u,u,u,u,u>
	vpshufb	%xmm1, %xmm6, %xmm2
	vpshufb	%xmm1, %xmm7, %xmm3
	vpunpckldq	%xmm2, %xmm3, %xmm2     ## xmm2 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
	vmovdqa	LCPI172_33(%rip), %xmm1         ## xmm1 = <1,5,9,13,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm1, %xmm11, %xmm3
	vpshufb	%xmm1, %xmm15, %xmm4
	vpunpckldq	%xmm3, %xmm4, %xmm3     ## xmm3 = xmm4[0],xmm3[0],xmm4[1],xmm3[1]
	vmovdqa	LCPI172_34(%rip), %xmm1         ## xmm1 = <2,6,10,14,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm1, %xmm11, %xmm4
	vpshufb	%xmm1, %xmm15, %xmm5
	vpunpckldq	%xmm4, %xmm5, %xmm4     ## xmm4 = xmm5[0],xmm4[0],xmm5[1],xmm4[1]
	vmovdqa	LCPI172_35(%rip), %xmm1         ## xmm1 = <u,u,u,u,2,6,10,14,u,u,u,u,u,u,u,u>
	vpshufb	%xmm1, %xmm6, %xmm5
	vpshufb	%xmm1, %xmm7, %xmm1
	vpunpckldq	%xmm5, %xmm1, %xmm1     ## xmm1 = xmm1[0],xmm5[0],xmm1[1],xmm5[1]
	vpshufd	$238, %xmm0, %xmm0              ## xmm0 = xmm0[2,3,2,3]
	vpmovzxbd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero,xmm0[4],zero,zero,zero,xmm0[5],zero,zero,zero,xmm0[6],zero,zero,zero,xmm0[7],zero,zero,zero
	vpshufd	$238, %xmm2, %xmm2              ## xmm2 = xmm2[2,3,2,3]
	vpmovzxbd	%xmm2, %ymm2            ## ymm2 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vmovdqa	LCPI172_36(%rip), %ymm5         ## ymm5 = <77,u,77,u,77,u,77,u,77,u,77,u,77,u,77,u>
	vpmaddwd	%ymm5, %ymm0, %ymm0
	vmovdqa	LCPI172_37(%rip), %ymm8         ## ymm8 = <150,u,150,u,150,u,150,u,150,u,150,u,150,u,150,u>
	vpmaddwd	%ymm2, %ymm8, %ymm2
	vpaddd	%ymm0, %ymm2, %ymm0
	vpmovzxbd	%xmm9, %ymm2            ## ymm2 = xmm9[0],zero,zero,zero,xmm9[1],zero,zero,zero,xmm9[2],zero,zero,zero,xmm9[3],zero,zero,zero,xmm9[4],zero,zero,zero,xmm9[5],zero,zero,zero,xmm9[6],zero,zero,zero,xmm9[7],zero,zero,zero
	vpmovzxbd	%xmm3, %ymm3            ## ymm3 = xmm3[0],zero,zero,zero,xmm3[1],zero,zero,zero,xmm3[2],zero,zero,zero,xmm3[3],zero,zero,zero,xmm3[4],zero,zero,zero,xmm3[5],zero,zero,zero,xmm3[6],zero,zero,zero,xmm3[7],zero,zero,zero
	vpmaddwd	%ymm5, %ymm2, %ymm2
	vpmaddwd	%ymm3, %ymm8, %ymm3
	vpaddd	%ymm2, %ymm3, %ymm2
	vpmovzxbd	%xmm4, %ymm3            ## ymm3 = xmm4[0],zero,zero,zero,xmm4[1],zero,zero,zero,xmm4[2],zero,zero,zero,xmm4[3],zero,zero,zero,xmm4[4],zero,zero,zero,xmm4[5],zero,zero,zero,xmm4[6],zero,zero,zero,xmm4[7],zero,zero,zero
	vmovdqa	LCPI172_38(%rip), %ymm4         ## ymm4 = <29,u,29,u,29,u,29,u,29,u,29,u,29,u,29,u>
	vpmaddwd	%ymm4, %ymm3, %ymm3
	vpaddd	%ymm3, %ymm2, %ymm2
	vpshufd	$238, %xmm1, %xmm1              ## xmm1 = xmm1[2,3,2,3]
	vpmovzxbd	%xmm1, %ymm1            ## ymm1 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpmaddwd	%ymm4, %ymm1, %ymm1
	vpaddd	%ymm1, %ymm0, %ymm0
	vmovdqa	LCPI172_39(%rip), %ymm3         ## ymm3 = [1,128,128,128,5,128,128,128,9,128,128,128,13,128,128,128,17,128,128,128,21,128,128,128,25,128,128,128,29,128,128,128]
	vpshufb	%ymm3, %ymm2, %ymm1
	vpshufb	%ymm3, %ymm0, %ymm0
	vpackusdw	%ymm0, %ymm1, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpackuswb	%xmm1, %xmm0, %xmm0
	vmovdqa	LCPI172_40(%rip), %xmm2         ## xmm2 = <3,7,11,15,u,u,u,u,u,u,u,u,u,u,u,u>
	vpshufb	%xmm2, %xmm11, %xmm1
	vpshufb	%xmm2, %xmm15, %xmm2
	vpunpckldq	%xmm1, %xmm2, %xmm1     ## xmm1 = xmm2[0],xmm1[0],xmm2[1],xmm1[1]
	vmovdqa	LCPI172_41(%rip), %xmm3         ## xmm3 = <u,u,u,u,3,7,11,15,u,u,u,u,u,u,u,u>
	vpshufb	%xmm3, %xmm6, %xmm2
	vpshufb	%xmm3, %xmm7, %xmm3
	vpunpckldq	%xmm2, %xmm3, %xmm2     ## xmm2 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
	vpshufd	$216, %xmm0, %xmm0              ## xmm0 = xmm0[0,2,1,3]
	vpunpcklbw	%xmm1, %xmm0, %xmm1     ## xmm1 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	vpunpckhbw	%xmm2, %xmm0, %xmm0     ## xmm0 = xmm0[8],xmm2[8],xmm0[9],xmm2[9],xmm0[10],xmm2[10],xmm0[11],xmm2[11],xmm0[12],xmm2[12],xmm0[13],xmm2[13],xmm0[14],xmm2[14],xmm0[15],xmm2[15]
	movq	56(%rsp), %rax                  ## 8-byte Reload
	vmovdqu	%xmm0, 16(%rax,%rcx,2)
	vmovdqu	%xmm1, (%rax,%rcx,2)
	addq	$16, %rcx
	cmpq	%rcx, 24(%rsp)                  ## 8-byte Folded Reload
	jne	LBB172_335
## %bb.336:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	24(%rsp), %rax                  ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
## %bb.337:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	24(%rsp), %rcx                  ## 8-byte Reload
	testb	$8, 32(%rsp)                    ## 1-byte Folded Reload
	jne	LBB172_264
## %bb.338:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	208(%rsp), %r10                 ## 8-byte Folded Reload
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	200(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	movl	44(%rsp), %eax                  ## 4-byte Reload
	jmp	LBB172_181
LBB172_339:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_340:                             ##   in Loop: Header=BB172_84 Depth=1
	testb	$1, 360(%rsp)                   ## 1-byte Folded Reload
	je	LBB172_342
## %bb.341:                             ##   in Loop: Header=BB172_84 Depth=1
	vmovdqu	(%r10,%rcx,2), %ymm0
	vmovdqu	32(%r10,%rcx,2), %ymm1
	vpshufb	LCPI172_50(%rip), %ymm1, %ymm2  ## ymm2 = ymm1[u,u,u,u,u,u,u,u,0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u,16,18,20,22,24,26,28,30]
	vpshufb	LCPI172_51(%rip), %ymm0, %ymm3  ## ymm3 = ymm0[0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u,16,18,20,22,24,26,28,30,u,u,u,u,u,u,u,u]
	vpblendd	$204, %ymm2, %ymm3, %ymm2       ## ymm2 = ymm3[0,1],ymm2[2,3],ymm3[4,5],ymm2[6,7]
	vpermq	$216, %ymm2, %ymm2              ## ymm2 = ymm2[0,2,1,3]
	vpshufb	LCPI172_52(%rip), %ymm1, %ymm1  ## ymm1 = ymm1[u,u,u,u,u,u,u,u,1,3,5,7,9,11,13,15,u,u,u,u,u,u,u,u,17,19,21,23,25,27,29,31]
	vpshufb	LCPI172_53(%rip), %ymm0, %ymm0  ## ymm0 = ymm0[1,3,5,7,9,11,13,15,u,u,u,u,u,u,u,u,17,19,21,23,25,27,29,31,u,u,u,u,u,u,u,u]
	vpblendd	$204, %ymm1, %ymm0, %ymm0       ## ymm0 = ymm0[0,1],ymm1[2,3],ymm0[4,5],ymm1[6,7]
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpunpcklbw	%ymm2, %ymm2, %ymm1     ## ymm1 = ymm2[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23]
	vpunpckhbw	%ymm2, %ymm2, %ymm3     ## ymm3 = ymm2[8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31]
	vpunpcklbw	%ymm0, %ymm2, %ymm4     ## ymm4 = ymm2[0],ymm0[0],ymm2[1],ymm0[1],ymm2[2],ymm0[2],ymm2[3],ymm0[3],ymm2[4],ymm0[4],ymm2[5],ymm0[5],ymm2[6],ymm0[6],ymm2[7],ymm0[7],ymm2[16],ymm0[16],ymm2[17],ymm0[17],ymm2[18],ymm0[18],ymm2[19],ymm0[19],ymm2[20],ymm0[20],ymm2[21],ymm0[21],ymm2[22],ymm0[22],ymm2[23],ymm0[23]
	vpunpckhbw	%ymm0, %ymm2, %ymm0     ## ymm0 = ymm2[8],ymm0[8],ymm2[9],ymm0[9],ymm2[10],ymm0[10],ymm2[11],ymm0[11],ymm2[12],ymm0[12],ymm2[13],ymm0[13],ymm2[14],ymm0[14],ymm2[15],ymm0[15],ymm2[24],ymm0[24],ymm2[25],ymm0[25],ymm2[26],ymm0[26],ymm2[27],ymm0[27],ymm2[28],ymm0[28],ymm2[29],ymm0[29],ymm2[30],ymm0[30],ymm2[31],ymm0[31]
	vpunpcklwd	%ymm4, %ymm1, %ymm2     ## ymm2 = ymm1[0],ymm4[0],ymm1[1],ymm4[1],ymm1[2],ymm4[2],ymm1[3],ymm4[3],ymm1[8],ymm4[8],ymm1[9],ymm4[9],ymm1[10],ymm4[10],ymm1[11],ymm4[11]
	vpunpckhwd	%ymm4, %ymm1, %ymm1     ## ymm1 = ymm1[4],ymm4[4],ymm1[5],ymm4[5],ymm1[6],ymm4[6],ymm1[7],ymm4[7],ymm1[12],ymm4[12],ymm1[13],ymm4[13],ymm1[14],ymm4[14],ymm1[15],ymm4[15]
	vpunpcklwd	%ymm0, %ymm3, %ymm4     ## ymm4 = ymm3[0],ymm0[0],ymm3[1],ymm0[1],ymm3[2],ymm0[2],ymm3[3],ymm0[3],ymm3[8],ymm0[8],ymm3[9],ymm0[9],ymm3[10],ymm0[10],ymm3[11],ymm0[11]
	vpunpckhwd	%ymm0, %ymm3, %ymm0     ## ymm0 = ymm3[4],ymm0[4],ymm3[5],ymm0[5],ymm3[6],ymm0[6],ymm3[7],ymm0[7],ymm3[12],ymm0[12],ymm3[13],ymm0[13],ymm3[14],ymm0[14],ymm3[15],ymm0[15]
	vinserti128	$1, %xmm1, %ymm2, %ymm3
	vinserti128	$1, %xmm0, %ymm4, %ymm5
	vperm2i128	$49, %ymm1, %ymm2, %ymm1 ## ymm1 = ymm2[2,3],ymm1[2,3]
	vperm2i128	$49, %ymm0, %ymm4, %ymm0 ## ymm0 = ymm4[2,3],ymm0[2,3]
	movq	8(%rsp), %rax                   ## 8-byte Reload
	vmovdqu	%ymm0, 96(%rax,%rcx,4)
	vmovdqu	%ymm1, 64(%rax,%rcx,4)
	vmovdqu	%ymm5, 32(%rax,%rcx,4)
	vmovdqu	%ymm3, (%rax,%rcx,4)
LBB172_342:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	112(%rsp), %rax                 ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
## %bb.343:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	112(%rsp), %rcx                 ## 8-byte Reload
	testb	$16, 32(%rsp)                   ## 1-byte Folded Reload
	jne	LBB172_242
## %bb.344:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	600(%rsp), %r10                 ## 8-byte Folded Reload
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	592(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	movl	240(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_142
LBB172_345:                             ##   in Loop: Header=BB172_84 Depth=1
	xorl	%ecx, %ecx
LBB172_346:                             ##   in Loop: Header=BB172_84 Depth=1
	testb	$1, 360(%rsp)                   ## 1-byte Folded Reload
	je	LBB172_348
## %bb.347:                             ##   in Loop: Header=BB172_84 Depth=1
	leaq	(%rcx,%rcx,2), %rdx
	vmovdqu	(%r10,%rdx), %xmm0
	vmovdqu	16(%r10,%rdx), %xmm1
	vmovdqu	32(%r10,%rdx), %xmm2
	vinserti128	$1, 48(%r10,%rdx), %ymm0, %ymm0
	vinserti128	$1, 64(%r10,%rdx), %ymm1, %ymm1
	vinserti128	$1, 80(%r10,%rdx), %ymm2, %ymm2
	vmovdqa	LCPI172_45(%rip), %ymm3         ## ymm3 = [0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13,0,3,6,9,12,15,2,5,8,11,14,1,4,7,10,13]
	vpshufb	%ymm3, %ymm0, %ymm0
	vpshufb	%ymm3, %ymm1, %ymm1
	vpshufb	%ymm3, %ymm2, %ymm2
	vpalignr	$11, %ymm2, %ymm0, %ymm3        ## ymm3 = ymm2[11,12,13,14,15],ymm0[0,1,2,3,4,5,6,7,8,9,10],ymm2[27,28,29,30,31],ymm0[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm0, %ymm1, %ymm0        ## ymm0 = ymm0[11,12,13,14,15],ymm1[0,1,2,3,4,5,6,7,8,9,10],ymm0[27,28,29,30,31],ymm1[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm1, %ymm2, %ymm1        ## ymm1 = ymm1[11,12,13,14,15],ymm2[0,1,2,3,4,5,6,7,8,9,10],ymm1[27,28,29,30,31],ymm2[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$11, %ymm3, %ymm1, %ymm2        ## ymm2 = ymm3[11,12,13,14,15],ymm1[0,1,2,3,4,5,6,7,8,9,10],ymm3[27,28,29,30,31],ymm1[16,17,18,19,20,21,22,23,24,25,26]
	vmovdqa	LCPI172_46(%rip), %ymm4         ## ymm4 = [255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0]
	vpblendvb	%ymm4, %ymm0, %ymm1, %ymm1
	vpalignr	$11, %ymm0, %ymm3, %ymm0        ## ymm0 = ymm0[11,12,13,14,15],ymm3[0,1,2,3,4,5,6,7,8,9,10],ymm0[27,28,29,30,31],ymm3[16,17,18,19,20,21,22,23,24,25,26]
	vpalignr	$10, %ymm0, %ymm0, %ymm0        ## ymm0 = ymm0[10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,26,27,28,29,30,31,16,17,18,19,20,21,22,23,24,25]
	vpunpcklbw	%ymm1, %ymm0, %ymm3     ## ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[4],ymm1[4],ymm0[5],ymm1[5],ymm0[6],ymm1[6],ymm0[7],ymm1[7],ymm0[16],ymm1[16],ymm0[17],ymm1[17],ymm0[18],ymm1[18],ymm0[19],ymm1[19],ymm0[20],ymm1[20],ymm0[21],ymm1[21],ymm0[22],ymm1[22],ymm0[23],ymm1[23]
	vpunpckhbw	%ymm1, %ymm0, %ymm0     ## ymm0 = ymm0[8],ymm1[8],ymm0[9],ymm1[9],ymm0[10],ymm1[10],ymm0[11],ymm1[11],ymm0[12],ymm1[12],ymm0[13],ymm1[13],ymm0[14],ymm1[14],ymm0[15],ymm1[15],ymm0[24],ymm1[24],ymm0[25],ymm1[25],ymm0[26],ymm1[26],ymm0[27],ymm1[27],ymm0[28],ymm1[28],ymm0[29],ymm1[29],ymm0[30],ymm1[30],ymm0[31],ymm1[31]
	vpcmpeqd	%ymm4, %ymm4, %ymm4
	vpunpcklbw	%ymm4, %ymm2, %ymm1     ## ymm1 = ymm2[0],ymm4[0],ymm2[1],ymm4[1],ymm2[2],ymm4[2],ymm2[3],ymm4[3],ymm2[4],ymm4[4],ymm2[5],ymm4[5],ymm2[6],ymm4[6],ymm2[7],ymm4[7],ymm2[16],ymm4[16],ymm2[17],ymm4[17],ymm2[18],ymm4[18],ymm2[19],ymm4[19],ymm2[20],ymm4[20],ymm2[21],ymm4[21],ymm2[22],ymm4[22],ymm2[23],ymm4[23]
	vpunpckhbw	%ymm4, %ymm2, %ymm2     ## ymm2 = ymm2[8],ymm4[8],ymm2[9],ymm4[9],ymm2[10],ymm4[10],ymm2[11],ymm4[11],ymm2[12],ymm4[12],ymm2[13],ymm4[13],ymm2[14],ymm4[14],ymm2[15],ymm4[15],ymm2[24],ymm4[24],ymm2[25],ymm4[25],ymm2[26],ymm4[26],ymm2[27],ymm4[27],ymm2[28],ymm4[28],ymm2[29],ymm4[29],ymm2[30],ymm4[30],ymm2[31],ymm4[31]
	vpunpcklwd	%ymm1, %ymm3, %ymm4     ## ymm4 = ymm3[0],ymm1[0],ymm3[1],ymm1[1],ymm3[2],ymm1[2],ymm3[3],ymm1[3],ymm3[8],ymm1[8],ymm3[9],ymm1[9],ymm3[10],ymm1[10],ymm3[11],ymm1[11]
	vpunpckhwd	%ymm1, %ymm3, %ymm1     ## ymm1 = ymm3[4],ymm1[4],ymm3[5],ymm1[5],ymm3[6],ymm1[6],ymm3[7],ymm1[7],ymm3[12],ymm1[12],ymm3[13],ymm1[13],ymm3[14],ymm1[14],ymm3[15],ymm1[15]
	vpunpcklwd	%ymm2, %ymm0, %ymm3     ## ymm3 = ymm0[0],ymm2[0],ymm0[1],ymm2[1],ymm0[2],ymm2[2],ymm0[3],ymm2[3],ymm0[8],ymm2[8],ymm0[9],ymm2[9],ymm0[10],ymm2[10],ymm0[11],ymm2[11]
	vpunpckhwd	%ymm2, %ymm0, %ymm0     ## ymm0 = ymm0[4],ymm2[4],ymm0[5],ymm2[5],ymm0[6],ymm2[6],ymm0[7],ymm2[7],ymm0[12],ymm2[12],ymm0[13],ymm2[13],ymm0[14],ymm2[14],ymm0[15],ymm2[15]
	vinserti128	$1, %xmm1, %ymm4, %ymm2
	vinserti128	$1, %xmm0, %ymm3, %ymm5
	vperm2i128	$49, %ymm1, %ymm4, %ymm1 ## ymm1 = ymm4[2,3],ymm1[2,3]
	vperm2i128	$49, %ymm0, %ymm3, %ymm0 ## ymm0 = ymm3[2,3],ymm0[2,3]
	movq	8(%rsp), %rax                   ## 8-byte Reload
	vmovdqu	%ymm0, 96(%rax,%rcx,4)
	vmovdqu	%ymm1, 64(%rax,%rcx,4)
	vmovdqu	%ymm5, 32(%rax,%rcx,4)
	vmovdqu	%ymm2, (%rax,%rcx,4)
LBB172_348:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	112(%rsp), %rax                 ## 8-byte Reload
	cmpq	%rax, 32(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_83
## %bb.349:                             ##   in Loop: Header=BB172_84 Depth=1
	movq	112(%rsp), %rcx                 ## 8-byte Reload
	testb	$16, 32(%rsp)                   ## 1-byte Folded Reload
	jne	LBB172_257
## %bb.350:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	288(%rsp), %r10                 ## 8-byte Folded Reload
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	592(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	movl	240(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_166
LBB172_351:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	88(%rsp), %r10                  ## 8-byte Folded Reload
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	664(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	movl	172(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_91
LBB172_352:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	88(%rsp), %r10                  ## 8-byte Folded Reload
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	672(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	movl	172(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_101
LBB172_353:                             ##   in Loop: Header=BB172_84 Depth=1
	addq	88(%rsp), %r10                  ## 8-byte Folded Reload
	movq	8(%rsp), %rax                   ## 8-byte Reload
	addq	680(%rsp), %rax                 ## 8-byte Folded Reload
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	movl	172(%rsp), %eax                 ## 4-byte Reload
	jmp	LBB172_111
LBB172_354:
	leaq	L_.str.114(%rip), %rcx
	jmp	LBB172_78
LBB172_355:
	movq	256(%rsp), %rax                 ## 8-byte Reload
	movl	(%rax), %ecx
	movl	4(%rax), %edx
	movq	144(%rsp), %rax                 ## 8-byte Reload
                                        ## kill: def $eax killed $eax killed $rax
	movq	%rcx, 336(%rsp)                 ## 8-byte Spill
	imull	%ecx, %eax
	movl	%eax, 48(%rsp)                  ## 4-byte Spill
	movl	%eax, %edi
	movq	%rdx, 608(%rsp)                 ## 8-byte Spill
	imull	%edx, %edi
	addl	%edi, %edi
	callq	_malloc
	movq	%rax, 120(%rsp)                 ## 8-byte Spill
	testq	%rax, %rax
	je	LBB172_576
## %bb.356:
	cmpl	$0, 608(%rsp)                   ## 4-byte Folded Reload
	jle	LBB172_577
## %bb.357:
	movq	144(%rsp), %rax                 ## 8-byte Reload
	movq	280(%rsp), %rcx                 ## 8-byte Reload
	leal	(%rax,%rcx,8), %eax
	movq	%rax, 408(%rsp)                 ## 8-byte Spill
	cmpl	$35, %eax
	ja	LBB172_582
## %bb.358:
	movabsq	$60500352000, %rax              ## imm = 0xE161A1C00
	movq	408(%rsp), %rcx                 ## 8-byte Reload
	btq	%rcx, %rax
	jae	LBB172_582
## %bb.359:
	movq	336(%rsp), %rcx                 ## 8-byte Reload
	leal	-1(%rcx), %r15d
	movl	%r15d, %eax
	leaq	1(%rax), %rdi
                                        ## kill: def $ecx killed $ecx killed $rcx
	imull	280(%rsp), %ecx                 ## 4-byte Folded Reload
	movl	%ecx, 232(%rsp)                 ## 4-byte Spill
	movabsq	$8589934560, %r8                ## imm = 0x1FFFFFFE0
	leaq	24(%r8), %r9
	andq	%rdi, %r9
	movl	%r15d, %ecx
	subl	%r9d, %ecx
	movl	%ecx, 152(%rsp)                 ## 4-byte Spill
	movl	%edi, %ecx
	andl	$7, %ecx
	testq	%rcx, %rcx
	movl	$8, %edx
	cmovneq	%rcx, %rdx
	negq	%rdx
	leaq	(%rax,%rdx), %r10
	incq	%r10
	movl	%r15d, %ecx
	subl	%r10d, %ecx
	movl	%ecx, 44(%rsp)                  ## 4-byte Spill
	movl	%edi, %ecx
	andl	$15, %ecx
	testq	%rcx, %rcx
	movl	$16, %edx
	cmovneq	%rcx, %rdx
	movq	%rdi, %r11
	movq	%rdx, %rcx
	movq	%rdx, 352(%rsp)                 ## 8-byte Spill
	subq	%rdx, %r11
	movl	%r15d, %ecx
	subl	%r11d, %ecx
	movl	%ecx, 464(%rsp)                 ## 4-byte Spill
	movl	%edi, %ecx
	andl	$63, %ecx
	testq	%rcx, %rcx
	movl	$64, %edx
	cmovneq	%rcx, %rdx
	leaq	(%rax,%rax,2), %rcx
	movq	120(%rsp), %r14                 ## 8-byte Reload
	leaq	6(%r14,%rcx,2), %rsi
	movq	%rsi, 584(%rsp)                 ## 8-byte Spill
	leaq	6(%rbx,%rcx,2), %rcx
	movq	%rcx, 576(%rsp)                 ## 8-byte Spill
	leaq	4(%r14,%rax,4), %rcx
	movq	%rcx, 568(%rsp)                 ## 8-byte Spill
	leaq	2(%rbx,%rax,2), %rcx
	movq	%rcx, 560(%rsp)                 ## 8-byte Spill
	leaq	8(%r14,%rax,8), %rcx
	movq	%rcx, 552(%rsp)                 ## 8-byte Spill
	leaq	2(%r14,%rax,2), %rcx
	movq	%rcx, 544(%rsp)                 ## 8-byte Spill
	leaq	2(%rbx,%rax,4), %rcx
	movq	%rcx, 400(%rsp)                 ## 8-byte Spill
	leaq	6(%rbx,%rax,8), %rax
	movq	%rax, 224(%rsp)                 ## 8-byte Spill
	movq	%rdi, %r12
	movq	%rdx, %rax
	movq	%rdx, 504(%rsp)                 ## 8-byte Spill
	subq	%rdx, %r12
	movl	%r15d, %eax
	subl	%r12d, %eax
	movl	%eax, 456(%rsp)                 ## 4-byte Spill
	movq	%rdi, %rdx
	andq	$-32, %rdx
	movl	%r15d, %eax
	subl	%edx, %eax
	movl	%eax, 368(%rsp)                 ## 4-byte Spill
	leaq	16(%r8), %rsi
	andq	%rdi, %rsi
	movl	%r15d, %eax
	subl	%esi, %eax
	movl	%eax, 172(%rsp)                 ## 4-byte Spill
	addq	$-32, %r8
	movq	%rdi, %rax
	movq	%rdi, 72(%rsp)                  ## 8-byte Spill
	andq	%rdi, %r8
	movl	%r15d, 8(%rsp)                  ## 4-byte Spill
	subl	%r8d, %r15d
	movl	%r15d, 424(%rsp)                ## 4-byte Spill
	leaq	-8(%r9), %rax
	movq	%rax, 392(%rsp)                 ## 8-byte Spill
	movq	%rax, %rdi
	shrq	$3, %rdi
	incq	%rdi
	leaq	-16(%rsi), %rax
	movq	%rax, 496(%rsp)                 ## 8-byte Spill
	movq	%rax, %rcx
	shrq	$4, %rcx
	incq	%rcx
	movq	%rdi, %rax
	movq	%rdi, 384(%rsp)                 ## 8-byte Spill
	andq	$-2, %rdi
	movq	%rdi, 312(%rsp)                 ## 8-byte Spill
	movl	%ecx, %eax
	andl	$3, %eax
	andq	$-4, %rcx
	movq	%rcx, 448(%rsp)                 ## 8-byte Spill
	movq	%rax, 488(%rsp)                 ## 8-byte Spill
	shlq	$5, %rax
	leaq	(%rax,%rax,2), %rax
	movq	%rax, 112(%rsp)                 ## 8-byte Spill
	vpcmpeqd	%xmm10, %xmm10, %xmm10
	vmovdqa	LCPI172_10(%rip), %ymm11        ## ymm11 = <0,1,8,9,u,u,u,u,2,3,10,11,u,u,u,u,4,5,12,13,u,u,u,u,6,7,14,15,u,u,u,u>
	vmovdqa	LCPI172_8(%rip), %ymm12         ## ymm12 = <u,u,u,u,0,1,8,9,u,u,u,u,2,3,10,11,u,u,u,u,4,5,12,13,u,u,u,u,6,7,14,15>
	leaq	(%r9,%r9), %rax
	movq	%rax, 184(%rsp)                 ## 8-byte Spill
	leaq	(,%r9,4), %rax
	movq	%rax, 328(%rsp)                 ## 8-byte Spill
	leaq	(,%r10,4), %rax
	movq	%rax, 208(%rsp)                 ## 8-byte Spill
	movq	%r9, 160(%rsp)                  ## 8-byte Spill
	leaq	(%r9,%r9,2), %rax
	movq	%rax, 216(%rsp)                 ## 8-byte Spill
	leaq	(%r11,%r11), %rax
	movq	%rax, 240(%rsp)                 ## 8-byte Spill
	movq	%r11, 512(%rsp)                 ## 8-byte Spill
	leaq	(%r11,%r11,2), %rax
	movq	%rax, 288(%rsp)                 ## 8-byte Spill
	leaq	(%r10,%r10,2), %rax
	movq	%rax, 200(%rsp)                 ## 8-byte Spill
	movq	%r10, 32(%rsp)                  ## 8-byte Spill
	leaq	(%r10,%r10), %rax
	movq	%rax, 320(%rsp)                 ## 8-byte Spill
	movq	%r12, 296(%rsp)                 ## 8-byte Spill
	leaq	(%r12,%r12), %rax
	movq	%rax, 440(%rsp)                 ## 8-byte Spill
	movq	%rdx, 376(%rsp)                 ## 8-byte Spill
	leaq	(,%rdx,4), %rax
	movq	%rax, 360(%rsp)                 ## 8-byte Spill
	movq	%rsi, 248(%rsp)                 ## 8-byte Spill
	leaq	(%rsi,%rsi,2), %rax
	movq	%rax, 432(%rsp)                 ## 8-byte Spill
	movq	%r8, 304(%rsp)                  ## 8-byte Spill
	leaq	(%r8,%r8), %rax
	movq	%rax, 416(%rsp)                 ## 8-byte Spill
	leaq	64(%r14), %rax
	movq	%rax, 536(%rsp)                 ## 8-byte Spill
	leaq	32(%rbx), %rax
	movq	%rax, 520(%rsp)                 ## 8-byte Spill
	leaq	192(%rbx), %rax
	movq	%rax, 480(%rsp)                 ## 8-byte Spill
	leaq	96(%r14), %rax
	movq	%rax, 472(%rsp)                 ## 8-byte Spill
	leaq	48(%rbx), %rax
	movq	%rax, 528(%rsp)                 ## 8-byte Spill
	leaq	192(%r14), %rax
	movq	%rax, 88(%rsp)                  ## 8-byte Spill
	leaq	96(%rbx), %rax
	movq	%rax, 264(%rsp)                 ## 8-byte Spill
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	vmovdqa	LCPI172_3(%rip), %ymm15         ## ymm15 = <1,2,5,6,9,10,13,14,u,u,u,u,u,u,u,u,17,18,21,22,25,26,29,30,u,u,u,u,u,u,u,u>
	vpxor	%xmm13, %xmm13, %xmm13
	vmovdqa	LCPI172_20(%rip), %ymm14        ## ymm14 = [255,255,255,255,0,0,255,255,255,255,0,0,255,255,255,255,0,0,255,255,255,255,0,0,255,255,255,255,0,0,255,255]
	jmp	LBB172_361
LBB172_360:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	136(%rsp), %r9                  ## 8-byte Reload
	incq	%r9
	movl	128(%rsp), %ecx                 ## 4-byte Reload
	addl	232(%rsp), %ecx                 ## 4-byte Folded Reload
	movq	56(%rsp), %rax                  ## 8-byte Reload
	addl	48(%rsp), %eax                  ## 4-byte Folded Reload
	cmpq	608(%rsp), %r9                  ## 8-byte Folded Reload
	je	LBB172_577
LBB172_361:                             ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB172_505 Depth 2
                                        ##     Child Loop BB172_459 Depth 2
                                        ##     Child Loop BB172_496 Depth 2
                                        ##     Child Loop BB172_503 Depth 2
                                        ##     Child Loop BB172_494 Depth 2
                                        ##     Child Loop BB172_563 Depth 2
                                        ##     Child Loop BB172_490 Depth 2
                                        ##     Child Loop BB172_455 Depth 2
                                        ##     Child Loop BB172_487 Depth 2
                                        ##     Child Loop BB172_451 Depth 2
                                        ##     Child Loop BB172_485 Depth 2
                                        ##     Child Loop BB172_554 Depth 2
                                        ##     Child Loop BB172_532 Depth 2
                                        ##     Child Loop BB172_536 Depth 2
                                        ##     Child Loop BB172_540 Depth 2
                                        ##     Child Loop BB172_545 Depth 2
                                        ##     Child Loop BB172_517 Depth 2
                                        ##     Child Loop BB172_521 Depth 2
                                        ##     Child Loop BB172_525 Depth 2
                                        ##     Child Loop BB172_530 Depth 2
                                        ##     Child Loop BB172_477 Depth 2
                                        ##     Child Loop BB172_390 Depth 2
                                        ##     Child Loop BB172_463 Depth 2
                                        ##     Child Loop BB172_565 Depth 2
                                        ##     Child Loop BB172_568 Depth 2
                                        ##     Child Loop BB172_573 Depth 2
                                        ##     Child Loop BB172_381 Depth 2
                                        ##     Child Loop BB172_467 Depth 2
                                        ##     Child Loop BB172_508 Depth 2
                                        ##     Child Loop BB172_512 Depth 2
                                        ##     Child Loop BB172_371 Depth 2
                                        ##     Child Loop BB172_471 Depth 2
                                        ##     Child Loop BB172_444 Depth 2
                                        ##     Child Loop BB172_447 Depth 2
	movl	%ecx, 128(%rsp)                 ## 4-byte Spill
	movl	%ecx, %r15d
	leaq	(%rbx,%r15,2), %rcx
	movq	%rcx, 16(%rsp)                  ## 8-byte Spill
	movq	%rax, 56(%rsp)                  ## 8-byte Spill
	movl	%eax, %r8d
	movq	120(%rsp), %rdi                 ## 8-byte Reload
	leaq	(%rdi,%r8,2), %rax
	movq	%rax, 80(%rsp)                  ## 8-byte Spill
	movq	336(%rsp), %rax                 ## 8-byte Reload
                                        ## kill: def $eax killed $eax killed $rax def $rax
	imull	%r9d, %eax
	movl	%eax, %ecx
	imull	280(%rsp), %ecx                 ## 4-byte Folded Reload
	leaq	(%rbx,%rcx,2), %r11
	imull	144(%rsp), %eax                 ## 4-byte Folded Reload
	leaq	(%rdi,%rax,2), %rax
	movq	408(%rsp), %rcx                 ## 8-byte Reload
	leal	-10(%rcx), %edx
	cmpl	$24, %edx
	movq	%r9, 136(%rsp)                  ## 8-byte Spill
	ja	LBB172_392
## %bb.362:                             ##   in Loop: Header=BB172_361 Depth=1
	leaq	(%r8,%r8), %rcx
	movq	%rcx, 176(%rsp)                 ## 8-byte Spill
	movq	264(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rcx,%r15,2), %rcx
	movq	%rcx, 104(%rsp)                 ## 8-byte Spill
	movq	88(%rsp), %rcx                  ## 8-byte Reload
	leaq	(%rcx,%r8,2), %rcx
	movq	%rcx, 344(%rsp)                 ## 8-byte Spill
	movq	536(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rcx,%r8,2), %rcx
	movq	%rcx, 96(%rsp)                  ## 8-byte Spill
	movl	48(%rsp), %ecx                  ## 4-byte Reload
	movl	%ecx, %esi
	imull	%r9d, %esi
	leaq	(%rdi,%rsi,2), %rcx
	movq	%rcx, 24(%rsp)                  ## 8-byte Spill
	movq	568(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rcx,%rsi,2), %rcx
	movq	%rcx, 192(%rsp)                 ## 8-byte Spill
	movl	232(%rsp), %ecx                 ## 4-byte Reload
                                        ## kill: def $ecx killed $ecx def $rcx
	imull	%r9d, %ecx
	leaq	(%rbx,%rcx,2), %rdi
	movq	%rdi, 64(%rsp)                  ## 8-byte Spill
	movq	544(%rsp), %rdi                 ## 8-byte Reload
	leaq	(%rdi,%rsi,2), %rdi
	movq	%rdi, 272(%rsp)                 ## 8-byte Spill
	movq	576(%rsp), %rdi                 ## 8-byte Reload
	leaq	(%rdi,%rcx,2), %r10
	movq	552(%rsp), %rdi                 ## 8-byte Reload
	leaq	(%rdi,%rsi,2), %r14
	movq	584(%rsp), %rdi                 ## 8-byte Reload
	leaq	(%rdi,%rsi,2), %r12
	leaq	LJTI172_0(%rip), %rdi
	movslq	(%rdi,%rdx,4), %rsi
	addq	%rdi, %rsi
	movq	400(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rdx,%rcx,2), %rdi
	movq	560(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rdx,%rcx,2), %rdx
	jmpq	*%rsi
LBB172_363:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	344(%rsp), %r8                  ## 8-byte Reload
	movq	192(%rsp), %r10                 ## 8-byte Reload
	movq	104(%rsp), %rsi                 ## 8-byte Reload
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	js	LBB172_360
## %bb.364:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$7, 8(%rsp)                     ## 4-byte Folded Reload
	jb	LBB172_367
## %bb.365:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%rdx, 24(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_472
## %bb.366:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r10, 64(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_472
LBB172_367:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
LBB172_368:                             ##   in Loop: Header=BB172_361 Depth=1
                                        ## kill: def $ecx killed $ecx def $rcx
LBB172_369:                             ##   in Loop: Header=BB172_361 Depth=1
	leal	1(%rcx), %edx
	testb	$3, %dl
	je	LBB172_468
## %bb.370:                             ##   in Loop: Header=BB172_361 Depth=1
	leal	1(%rcx), %edx
	movzbl	%dl, %edx
	andl	$3, %edx
	xorl	%esi, %esi
LBB172_371:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11), %edi
	movw	%di, (%rax)
	movw	$-1, 2(%rax)
	addq	$2, %r11
	addq	$4, %rax
	incq	%rsi
	cmpl	%esi, %edx
	jne	LBB172_371
## %bb.372:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%ecx, %edx
	subl	%esi, %edx
	jmp	LBB172_469
LBB172_373:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	104(%rsp), %rsi                 ## 8-byte Reload
	movq	176(%rsp), %r10                 ## 8-byte Reload
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	js	LBB172_360
## %bb.374:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$7, 8(%rsp)                     ## 4-byte Folded Reload
	jb	LBB172_377
## %bb.375:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%rdx, 24(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_474
## %bb.376:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r12, 64(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_474
LBB172_377:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
LBB172_378:                             ##   in Loop: Header=BB172_361 Depth=1
                                        ## kill: def $ecx killed $ecx def $rcx
LBB172_379:                             ##   in Loop: Header=BB172_361 Depth=1
	leal	1(%rcx), %edx
	testb	$3, %dl
	je	LBB172_464
## %bb.380:                             ##   in Loop: Header=BB172_361 Depth=1
	leal	1(%rcx), %edx
	movzbl	%dl, %edx
	andl	$3, %edx
	xorl	%esi, %esi
LBB172_381:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11), %edi
	movw	%di, 4(%rax)
	movw	%di, 2(%rax)
	movw	%di, (%rax)
	addq	$2, %r11
	addq	$6, %rax
	incq	%rsi
	cmpl	%esi, %edx
	jne	LBB172_381
## %bb.382:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%ecx, %edx
	subl	%esi, %edx
	jmp	LBB172_465
LBB172_383:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	344(%rsp), %rdi                 ## 8-byte Reload
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	js	LBB172_360
## %bb.384:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$31, 8(%rsp)                    ## 4-byte Folded Reload
	jb	LBB172_387
## %bb.385:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%rdx, 24(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_476
## %bb.386:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r14, 64(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_476
LBB172_387:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
                                        ## kill: def $ecx killed $ecx def $rcx
LBB172_388:                             ##   in Loop: Header=BB172_361 Depth=1
	leal	1(%rcx), %edx
	testb	$3, %dl
	je	LBB172_460
## %bb.389:                             ##   in Loop: Header=BB172_361 Depth=1
	leal	1(%rcx), %edx
	movzbl	%dl, %edx
	andl	$3, %edx
	xorl	%esi, %esi
LBB172_390:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11), %edi
	movw	%di, 4(%rax)
	movw	%di, 2(%rax)
	movw	%di, (%rax)
	movw	$-1, 6(%rax)
	addq	$2, %r11
	addq	$8, %rax
	incq	%rsi
	cmpl	%esi, %edx
	jne	LBB172_390
## %bb.391:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%ecx, %edx
	subl	%esi, %edx
	jmp	LBB172_461
LBB172_392:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	js	LBB172_360
## %bb.393:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$7, 8(%rsp)                     ## 4-byte Folded Reload
	ja	LBB172_443
## %bb.394:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
	jmp	LBB172_446
LBB172_395:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	272(%rsp), %r12                 ## 8-byte Reload
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	js	LBB172_360
## %bb.396:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$8, 8(%rsp)                     ## 4-byte Folded Reload
	jb	LBB172_399
## %bb.397:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%rdi, 24(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_479
## %bb.398:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r12, 64(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_479
LBB172_399:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
	jmp	LBB172_523
LBB172_400:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	176(%rsp), %rsi                 ## 8-byte Reload
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	js	LBB172_360
## %bb.401:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$8, 8(%rsp)                     ## 4-byte Folded Reload
	jb	LBB172_404
## %bb.402:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%rdi, 24(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_481
## %bb.403:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r12, 64(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_481
LBB172_404:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
	jmp	LBB172_538
LBB172_405:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	96(%rsp), %rdi                  ## 8-byte Reload
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	js	LBB172_360
## %bb.406:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$7, 8(%rsp)                     ## 4-byte Folded Reload
	jb	LBB172_409
## %bb.407:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	400(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rdx,%rcx,2), %rcx
	addq	$2, %rcx
	cmpq	%rcx, 24(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_483
## %bb.408:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r14, 64(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_483
LBB172_409:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
	movl	%ecx, %edx
	testb	$1, %dl
	jne	LBB172_551
LBB172_410:                             ##   in Loop: Header=BB172_361 Depth=1
	movzwl	(%r11), %ecx
	movw	%cx, 4(%rax)
	movw	%cx, 2(%rax)
	movw	%cx, (%rax)
	movzwl	2(%r11), %ecx
	movw	%cx, 6(%rax)
	addq	$4, %r11
	addq	$8, %rax
	leal	-1(%rdx), %ecx
	jmp	LBB172_552
LBB172_411:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	272(%rsp), %r12                 ## 8-byte Reload
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	js	LBB172_360
## %bb.412:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$7, 8(%rsp)                     ## 4-byte Folded Reload
	jb	LBB172_415
## %bb.413:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r10, 24(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_486
## %bb.414:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r12, 64(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_486
LBB172_415:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
	movl	%ecx, %edx
LBB172_416:                             ##   in Loop: Header=BB172_361 Depth=1
	testb	$1, %dl
	jne	LBB172_448
## %bb.417:                             ##   in Loop: Header=BB172_361 Depth=1
	movzwl	(%r11), %ecx
	movzwl	2(%r11), %esi
	movzwl	4(%r11), %edi
	imull	$77, %ecx, %ecx
	imull	$150, %esi, %esi
	addl	%ecx, %esi
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	addl	%edi, %ecx
	addl	%esi, %ecx
	shrl	$8, %ecx
	movw	%cx, (%rax)
	addq	$6, %r11
	addq	$2, %rax
	leal	-1(%rdx), %r8d
	jmp	LBB172_449
LBB172_418:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	%r10, %rcx
	movq	192(%rsp), %r10                 ## 8-byte Reload
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	js	LBB172_360
## %bb.419:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$7, 8(%rsp)                     ## 4-byte Folded Reload
	jb	LBB172_422
## %bb.420:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%rcx, 24(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_489
## %bb.421:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r10, 64(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_489
LBB172_422:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
	movl	%ecx, %edx
LBB172_423:                             ##   in Loop: Header=BB172_361 Depth=1
	testb	$1, %dl
	jne	LBB172_452
## %bb.424:                             ##   in Loop: Header=BB172_361 Depth=1
	movzwl	(%r11), %ecx
	movzwl	2(%r11), %esi
	movzwl	4(%r11), %edi
	imull	$77, %ecx, %ecx
	imull	$150, %esi, %esi
	addl	%ecx, %esi
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	addl	%edi, %ecx
	addl	%esi, %ecx
	shrl	$8, %ecx
	movw	%cx, (%rax)
	movw	$-1, 2(%rax)
	addq	$6, %r11
	addq	$4, %rax
	leal	-1(%rdx), %r8d
	jmp	LBB172_453
LBB172_425:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	96(%rsp), %r12                  ## 8-byte Reload
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	js	LBB172_360
## %bb.426:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$7, 8(%rsp)                     ## 4-byte Folded Reload
	jb	LBB172_429
## %bb.427:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r10, 24(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_492
## %bb.428:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r14, 64(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_492
LBB172_429:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
	movl	%ecx, %edx
	testb	$1, %dl
	jne	LBB172_560
LBB172_430:                             ##   in Loop: Header=BB172_361 Depth=1
	movzwl	(%r11), %ecx
	movw	%cx, (%rax)
	movzwl	2(%r11), %ecx
	movw	%cx, 2(%rax)
	movzwl	4(%r11), %ecx
	movw	%cx, 4(%rax)
	movw	$-1, 6(%rax)
	addq	$6, %r11
	addq	$8, %rax
	leal	-1(%rdx), %ecx
	jmp	LBB172_561
LBB172_431:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	272(%rsp), %r12                 ## 8-byte Reload
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	js	LBB172_360
## %bb.432:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$7, 8(%rsp)                     ## 4-byte Folded Reload
	jbe	LBB172_435
## %bb.433:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	224(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rdx,%rcx,2), %rcx
	cmpq	%rcx, 24(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_495
## %bb.434:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r12, 64(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_495
LBB172_435:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
	jmp	LBB172_498
LBB172_436:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	192(%rsp), %r10                 ## 8-byte Reload
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	js	LBB172_360
## %bb.437:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$7, 8(%rsp)                     ## 4-byte Folded Reload
	jb	LBB172_440
## %bb.438:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	224(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rdx,%rcx,2), %rcx
	addq	$2, %rcx
	cmpq	%rcx, 24(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_504
## %bb.439:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%r10, 64(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_504
LBB172_440:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
	movl	%ecx, %edx
LBB172_441:                             ##   in Loop: Header=BB172_361 Depth=1
	testb	$1, %dl
	jne	LBB172_456
## %bb.442:                             ##   in Loop: Header=BB172_361 Depth=1
	movzwl	(%r11), %ecx
	movzwl	2(%r11), %esi
	movzwl	4(%r11), %edi
	imull	$77, %ecx, %ecx
	imull	$150, %esi, %esi
	addl	%ecx, %esi
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	addl	%edi, %ecx
	addl	%esi, %ecx
	shrl	$8, %ecx
	movw	%cx, (%rax)
	movzwl	6(%r11), %ecx
	movw	%cx, 2(%rax)
	addq	$8, %r11
	addq	$4, %rax
	leal	-1(%rdx), %r8d
	jmp	LBB172_457
LBB172_443:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	200(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rax,%rcx,2), %rax
	movq	208(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%r11,%rcx,2), %r11
	xorl	%ecx, %ecx
	movq	32(%rsp), %rdx                  ## 8-byte Reload
	vmovdqa	LCPI172_27(%rip), %ymm3         ## ymm3 = <0,1,2,3,4,5,8,9,10,11,12,13,u,u,u,u,4,5,8,9,10,11,12,13,u,u,u,u,u,u,u,u>
	vmovdqa	LCPI172_28(%rip), %xmm4         ## xmm4 = <u,u,u,u,u,u,u,u,0,1,2,3,4,5,8,9>
	vmovdqa	LCPI172_29(%rip), %xmm5         ## xmm5 = <u,u,u,u,0,1,2,3,4,5,8,9,10,11,12,13>
	movq	80(%rsp), %rsi                  ## 8-byte Reload
	movq	16(%rsp), %rdi                  ## 8-byte Reload
LBB172_444:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rdi,%rcx,8), %ymm8
	vpshufb	%ymm3, %ymm8, %ymm8
	vpbroadcastd	16(%rdi,%rcx,8), %xmm9
	vpblendd	$8, %ymm9, %ymm8, %ymm8         ## ymm8 = ymm8[0,1,2],ymm9[3],ymm8[4,5,6,7]
	vmovdqu	32(%rdi,%rcx,8), %xmm0
	vpshufb	%xmm4, %xmm0, %xmm1
	vinserti128	$1, %xmm1, %ymm0, %ymm1
	vpblendd	$192, %ymm1, %ymm8, %ymm1       ## ymm1 = ymm8[0,1,2,3,4,5],ymm1[6,7]
	vpsrldq	$10, %xmm0, %xmm0               ## xmm0 = xmm0[10,11,12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
	vmovdqu	48(%rdi,%rcx,8), %xmm2
	vpshufb	%xmm5, %xmm2, %xmm2
	vpblendd	$1, %xmm0, %xmm2, %xmm0         ## xmm0 = xmm0[0],xmm2[1,2,3]
	vmovdqu	%xmm0, 32(%rsi)
	vmovdqu	%ymm1, (%rsi)
	addq	$8, %rcx
	addq	$48, %rsi
	cmpq	%rcx, %rdx
	jne	LBB172_444
## %bb.445:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	44(%rsp), %ecx                  ## 4-byte Reload
LBB172_446:                             ##   in Loop: Header=BB172_361 Depth=1
                                        ## kill: def $ecx killed $ecx def $rcx
	incl	%ecx
	xorl	%edx, %edx
LBB172_447:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11,%rdx,8), %esi
	movw	%si, (%rax)
	movzwl	2(%r11,%rdx,8), %esi
	movw	%si, 2(%rax)
	movzwl	4(%r11,%rdx,8), %esi
	movw	%si, 4(%rax)
	incq	%rdx
	addq	$6, %rax
	cmpl	%edx, %ecx
	jne	LBB172_447
	jmp	LBB172_360
LBB172_448:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%edx, %r8d
LBB172_449:                             ##   in Loop: Header=BB172_361 Depth=1
	testl	%edx, %edx
	je	LBB172_360
## %bb.450:                             ##   in Loop: Header=BB172_361 Depth=1
	incl	%r8d
	xorl	%edx, %edx
LBB172_451:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11), %esi
	movzwl	2(%r11), %edi
	movzwl	4(%r11), %ecx
	imull	$77, %esi, %esi
	imull	$150, %edi, %edi
	addl	%esi, %edi
	leal	(%rcx,%rcx,8), %esi
	leal	(%rsi,%rsi,2), %esi
	addl	%ecx, %esi
	addl	%ecx, %esi
	addl	%edi, %esi
	shrl	$8, %esi
	movw	%si, (%rax,%rdx,2)
	movzwl	6(%r11), %ecx
	movzwl	8(%r11), %esi
	movzwl	10(%r11), %edi
	imull	$77, %ecx, %ecx
	imull	$150, %esi, %esi
	addl	%ecx, %esi
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	addl	%edi, %ecx
	addl	%esi, %ecx
	shrl	$8, %ecx
	movw	%cx, 2(%rax,%rdx,2)
	addq	$2, %rdx
	addq	$12, %r11
	cmpl	%edx, %r8d
	jne	LBB172_451
	jmp	LBB172_360
LBB172_452:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%edx, %r8d
LBB172_453:                             ##   in Loop: Header=BB172_361 Depth=1
	testl	%edx, %edx
	je	LBB172_360
## %bb.454:                             ##   in Loop: Header=BB172_361 Depth=1
	incl	%r8d
	xorl	%edx, %edx
LBB172_455:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11), %esi
	movzwl	2(%r11), %edi
	movzwl	4(%r11), %ecx
	imull	$77, %esi, %esi
	imull	$150, %edi, %edi
	addl	%esi, %edi
	leal	(%rcx,%rcx,8), %esi
	leal	(%rsi,%rsi,2), %esi
	addl	%ecx, %esi
	addl	%ecx, %esi
	addl	%edi, %esi
	shrl	$8, %esi
	movw	%si, (%rax,%rdx,4)
	movw	$-1, 2(%rax,%rdx,4)
	movzwl	6(%r11), %ecx
	movzwl	8(%r11), %esi
	movzwl	10(%r11), %edi
	imull	$77, %ecx, %ecx
	imull	$150, %esi, %esi
	addl	%ecx, %esi
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	addl	%edi, %ecx
	addl	%esi, %ecx
	shrl	$8, %ecx
	movw	%cx, 4(%rax,%rdx,4)
	movw	$-1, 6(%rax,%rdx,4)
	addq	$2, %rdx
	addq	$12, %r11
	cmpl	%edx, %r8d
	jne	LBB172_455
	jmp	LBB172_360
LBB172_456:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%edx, %r8d
LBB172_457:                             ##   in Loop: Header=BB172_361 Depth=1
	testl	%edx, %edx
	je	LBB172_360
## %bb.458:                             ##   in Loop: Header=BB172_361 Depth=1
	incl	%r8d
	xorl	%edx, %edx
LBB172_459:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11,%rdx,8), %esi
	movzwl	2(%r11,%rdx,8), %edi
	movzwl	4(%r11,%rdx,8), %ecx
	imull	$77, %esi, %esi
	imull	$150, %edi, %edi
	addl	%esi, %edi
	leal	(%rcx,%rcx,8), %esi
	leal	(%rsi,%rsi,2), %esi
	addl	%ecx, %esi
	addl	%ecx, %esi
	addl	%edi, %esi
	shrl	$8, %esi
	movw	%si, (%rax,%rdx,4)
	movzwl	6(%r11,%rdx,8), %ecx
	movw	%cx, 2(%rax,%rdx,4)
	movzwl	8(%r11,%rdx,8), %ecx
	movzwl	10(%r11,%rdx,8), %esi
	movzwl	12(%r11,%rdx,8), %edi
	imull	$77, %ecx, %ecx
	imull	$150, %esi, %esi
	addl	%ecx, %esi
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	addl	%edi, %ecx
	addl	%esi, %ecx
	shrl	$8, %ecx
	movw	%cx, 4(%rax,%rdx,4)
	movzwl	14(%r11,%rdx,8), %ecx
	movw	%cx, 6(%rax,%rdx,4)
	addq	$2, %rdx
	cmpl	%edx, %r8d
	jne	LBB172_459
	jmp	LBB172_360
LBB172_460:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%ecx, %edx
LBB172_461:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$3, %ecx
	jb	LBB172_360
## %bb.462:                             ##   in Loop: Header=BB172_361 Depth=1
	incl	%edx
	xorl	%ecx, %ecx
LBB172_463:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11,%rcx,2), %esi
	movw	%si, 4(%rax,%rcx,8)
	movw	%si, 2(%rax,%rcx,8)
	movw	%si, (%rax,%rcx,8)
	movw	$-1, 6(%rax,%rcx,8)
	movzwl	2(%r11,%rcx,2), %esi
	movw	%si, 12(%rax,%rcx,8)
	movw	%si, 10(%rax,%rcx,8)
	movw	%si, 8(%rax,%rcx,8)
	movw	$-1, 14(%rax,%rcx,8)
	movzwl	4(%r11,%rcx,2), %esi
	movw	%si, 20(%rax,%rcx,8)
	movw	%si, 18(%rax,%rcx,8)
	movw	%si, 16(%rax,%rcx,8)
	movw	$-1, 22(%rax,%rcx,8)
	movzwl	6(%r11,%rcx,2), %esi
	movw	%si, 28(%rax,%rcx,8)
	movw	%si, 26(%rax,%rcx,8)
	movw	%si, 24(%rax,%rcx,8)
	movw	$-1, 30(%rax,%rcx,8)
	addq	$4, %rcx
	cmpl	%ecx, %edx
	jne	LBB172_463
	jmp	LBB172_360
LBB172_464:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%ecx, %edx
LBB172_465:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$3, %ecx
	jb	LBB172_360
## %bb.466:                             ##   in Loop: Header=BB172_361 Depth=1
	incl	%edx
	addq	$22, %rax
	xorl	%ecx, %ecx
LBB172_467:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11,%rcx,2), %esi
	movw	%si, -18(%rax)
	movw	%si, -20(%rax)
	movw	%si, -22(%rax)
	movzwl	2(%r11,%rcx,2), %esi
	movw	%si, -12(%rax)
	movw	%si, -14(%rax)
	movw	%si, -16(%rax)
	movzwl	4(%r11,%rcx,2), %esi
	movw	%si, -6(%rax)
	movw	%si, -8(%rax)
	movw	%si, -10(%rax)
	movzwl	6(%r11,%rcx,2), %esi
	movw	%si, (%rax)
	movw	%si, -2(%rax)
	movw	%si, -4(%rax)
	addq	$4, %rcx
	addq	$24, %rax
	cmpl	%ecx, %edx
	jne	LBB172_467
	jmp	LBB172_360
LBB172_468:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%ecx, %edx
LBB172_469:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$3, %ecx
	jb	LBB172_360
## %bb.470:                             ##   in Loop: Header=BB172_361 Depth=1
	incl	%edx
	xorl	%ecx, %ecx
LBB172_471:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11,%rcx,2), %esi
	movw	%si, (%rax,%rcx,4)
	movw	$-1, 2(%rax,%rcx,4)
	movzwl	2(%r11,%rcx,2), %esi
	movw	%si, 4(%rax,%rcx,4)
	movw	$-1, 6(%rax,%rcx,4)
	movzwl	4(%r11,%rcx,2), %esi
	movw	%si, 8(%rax,%rcx,4)
	movw	$-1, 10(%rax,%rcx,4)
	movzwl	6(%r11,%rcx,2), %esi
	movw	%si, 12(%rax,%rcx,4)
	movw	$-1, 14(%rax,%rcx,4)
	addq	$4, %rcx
	cmpl	%ecx, %edx
	jne	LBB172_471
	jmp	LBB172_360
LBB172_472:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$63, 8(%rsp)                    ## 4-byte Folded Reload
	jae	LBB172_507
## %bb.473:                             ##   in Loop: Header=BB172_361 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB172_511
LBB172_474:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$15, 8(%rsp)                    ## 4-byte Folded Reload
	jae	LBB172_514
## %bb.475:                             ##   in Loop: Header=BB172_361 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB172_572
LBB172_476:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	528(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rcx,%r15,2), %rcx
	movq	360(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rax,%rdx,2), %rax
	movq	376(%rsp), %rsi                 ## 8-byte Reload
	leaq	(%r11,%rsi,2), %r11
	xorl	%edx, %edx
LBB172_477:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vbroadcasti128	-48(%rcx,%rdx,2), %ymm0 ## ymm0 = mem[0,1,0,1]
	vinserti128	$1, %xmm10, %ymm0, %ymm1
	vpermq	$136, %ymm0, %ymm2              ## ymm2 = ymm0[0,2,0,2]
	vpshufb	%ymm11, %ymm2, %ymm2
	vpermq	$136, %ymm1, %ymm3              ## ymm3 = ymm1[0,2,0,2]
	vpshufb	%ymm12, %ymm3, %ymm3
	vpblendd	$170, %ymm3, %ymm2, %ymm2       ## ymm2 = ymm2[0],ymm3[1],ymm2[2],ymm3[3],ymm2[4],ymm3[5],ymm2[6],ymm3[7]
	vpermq	$221, %ymm0, %ymm0              ## ymm0 = ymm0[1,3,1,3]
	vpshufb	%ymm11, %ymm0, %ymm0
	vpermq	$221, %ymm1, %ymm1              ## ymm1 = ymm1[1,3,1,3]
	vpshufb	%ymm12, %ymm1, %ymm1
	vbroadcasti128	-32(%rcx,%rdx,2), %ymm3 ## ymm3 = mem[0,1,0,1]
	vbroadcasti128	-16(%rcx,%rdx,2), %ymm4 ## ymm4 = mem[0,1,0,1]
	vbroadcasti128	(%rcx,%rdx,2), %ymm8    ## ymm8 = mem[0,1,0,1]
	vpblendd	$170, %ymm1, %ymm0, %ymm0       ## ymm0 = ymm0[0],ymm1[1],ymm0[2],ymm1[3],ymm0[4],ymm1[5],ymm0[6],ymm1[7]
	vmovdqu	%ymm0, -160(%rdi,%rdx,8)
	vmovdqu	%ymm2, -192(%rdi,%rdx,8)
	vinserti128	$1, %xmm10, %ymm3, %ymm0
	vpermq	$136, %ymm3, %ymm1              ## ymm1 = ymm3[0,2,0,2]
	vpshufb	%ymm11, %ymm1, %ymm1
	vpermq	$136, %ymm0, %ymm2              ## ymm2 = ymm0[0,2,0,2]
	vpshufb	%ymm12, %ymm2, %ymm2
	vpblendd	$170, %ymm2, %ymm1, %ymm1       ## ymm1 = ymm1[0],ymm2[1],ymm1[2],ymm2[3],ymm1[4],ymm2[5],ymm1[6],ymm2[7]
	vpermq	$221, %ymm3, %ymm2              ## ymm2 = ymm3[1,3,1,3]
	vpshufb	%ymm11, %ymm2, %ymm2
	vpermq	$221, %ymm0, %ymm0              ## ymm0 = ymm0[1,3,1,3]
	vpshufb	%ymm12, %ymm0, %ymm0
	vpblendd	$170, %ymm0, %ymm2, %ymm0       ## ymm0 = ymm2[0],ymm0[1],ymm2[2],ymm0[3],ymm2[4],ymm0[5],ymm2[6],ymm0[7]
	vmovdqu	%ymm0, -96(%rdi,%rdx,8)
	vmovdqu	%ymm1, -128(%rdi,%rdx,8)
	vinserti128	$1, %xmm10, %ymm4, %ymm0
	vpermq	$136, %ymm4, %ymm1              ## ymm1 = ymm4[0,2,0,2]
	vpshufb	%ymm11, %ymm1, %ymm1
	vpermq	$136, %ymm0, %ymm2              ## ymm2 = ymm0[0,2,0,2]
	vpshufb	%ymm12, %ymm2, %ymm2
	vpblendd	$170, %ymm2, %ymm1, %ymm1       ## ymm1 = ymm1[0],ymm2[1],ymm1[2],ymm2[3],ymm1[4],ymm2[5],ymm1[6],ymm2[7]
	vpermq	$221, %ymm4, %ymm2              ## ymm2 = ymm4[1,3,1,3]
	vpshufb	%ymm11, %ymm2, %ymm2
	vpermq	$221, %ymm0, %ymm0              ## ymm0 = ymm0[1,3,1,3]
	vpshufb	%ymm12, %ymm0, %ymm0
	vpblendd	$170, %ymm0, %ymm2, %ymm0       ## ymm0 = ymm2[0],ymm0[1],ymm2[2],ymm0[3],ymm2[4],ymm0[5],ymm2[6],ymm0[7]
	vmovdqu	%ymm0, -32(%rdi,%rdx,8)
	vmovdqu	%ymm1, -64(%rdi,%rdx,8)
	vinserti128	$1, %xmm10, %ymm8, %ymm0
	vpermq	$136, %ymm8, %ymm1              ## ymm1 = ymm8[0,2,0,2]
	vpshufb	%ymm11, %ymm1, %ymm1
	vpermq	$136, %ymm0, %ymm2              ## ymm2 = ymm0[0,2,0,2]
	vpshufb	%ymm12, %ymm2, %ymm2
	vpblendd	$170, %ymm2, %ymm1, %ymm1       ## ymm1 = ymm1[0],ymm2[1],ymm1[2],ymm2[3],ymm1[4],ymm2[5],ymm1[6],ymm2[7]
	vpermq	$221, %ymm8, %ymm2              ## ymm2 = ymm8[1,3,1,3]
	vpshufb	%ymm11, %ymm2, %ymm2
	vpermq	$221, %ymm0, %ymm0              ## ymm0 = ymm0[1,3,1,3]
	vpshufb	%ymm12, %ymm0, %ymm0
	vpblendd	$170, %ymm0, %ymm2, %ymm0       ## ymm0 = ymm2[0],ymm0[1],ymm2[2],ymm0[3],ymm2[4],ymm0[5],ymm2[6],ymm0[7]
	vmovdqu	%ymm0, 32(%rdi,%rdx,8)
	vmovdqu	%ymm1, (%rdi,%rdx,8)
	addq	$32, %rdx
	cmpq	%rdx, %rsi
	jne	LBB172_477
## %bb.478:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	368(%rsp), %ecx                 ## 4-byte Reload
                                        ## kill: def $ecx killed $ecx def $rcx
	cmpq	%rsi, 72(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_360
	jmp	LBB172_388
LBB172_479:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$64, 8(%rsp)                    ## 4-byte Folded Reload
	jae	LBB172_516
## %bb.480:                             ##   in Loop: Header=BB172_361 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB172_520
LBB172_481:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$16, 8(%rsp)                    ## 4-byte Folded Reload
	jae	LBB172_531
## %bb.482:                             ##   in Loop: Header=BB172_361 Depth=1
	xorl	%ecx, %ecx
	jmp	LBB172_535
LBB172_483:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	$0, 392(%rsp)                   ## 8-byte Folded Reload
	je	LBB172_546
## %bb.484:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	520(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rcx,%r15,2), %rdx
	movq	312(%rsp), %rsi                 ## 8-byte Reload
	xorl	%ecx, %ecx
	vmovdqa	LCPI172_7(%rip), %ymm4          ## ymm4 = [0,1,4,5,8,9,12,13,2,3,6,7,10,11,14,15,16,17,20,21,24,25,28,29,18,19,22,23,26,27,30,31]
	vmovdqa	LCPI172_11(%rip), %ymm5         ## ymm5 = <u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,16,17,20,21,24,25,28,29,u,u,u,u,u,u,u,u>
	vmovdqa	LCPI172_9(%rip), %xmm6          ## xmm6 = <0,1,4,5,8,9,12,13,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u>
LBB172_485:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	-32(%rdx,%rcx,4), %ymm0
	vpshufb	%ymm4, %ymm0, %ymm1
	vpermq	$68, %ymm1, %ymm2               ## ymm2 = ymm1[0,1,0,1]
	vpshufb	%ymm12, %ymm2, %ymm2
	vmovdqu	-32(%rdx,%rcx,4), %xmm3
	vpshufb	%xmm6, %xmm3, %xmm3
	vpbroadcastq	%xmm3, %ymm3
	vpshufb	%ymm11, %ymm3, %ymm3
	vpblendd	$170, %ymm2, %ymm3, %ymm2       ## ymm2 = ymm3[0],ymm2[1],ymm3[2],ymm2[3],ymm3[4],ymm2[5],ymm3[6],ymm2[7]
	vpermq	$238, %ymm1, %ymm1              ## ymm1 = ymm1[2,3,2,3]
	vpshufb	%ymm12, %ymm1, %ymm1
	vpshufb	%ymm5, %ymm0, %ymm0
	vpermq	$170, %ymm0, %ymm0              ## ymm0 = ymm0[2,2,2,2]
	vpshufb	%ymm11, %ymm0, %ymm0
	vpblendd	$170, %ymm1, %ymm0, %ymm0       ## ymm0 = ymm0[0],ymm1[1],ymm0[2],ymm1[3],ymm0[4],ymm1[5],ymm0[6],ymm1[7]
	vmovdqu	%ymm0, -32(%rdi,%rcx,8)
	vmovdqu	%ymm2, -64(%rdi,%rcx,8)
	vmovdqu	(%rdx,%rcx,4), %ymm0
	vpshufb	%ymm4, %ymm0, %ymm1
	vpermq	$68, %ymm1, %ymm2               ## ymm2 = ymm1[0,1,0,1]
	vpshufb	%ymm12, %ymm2, %ymm2
	vmovdqu	(%rdx,%rcx,4), %xmm3
	vpshufb	%xmm6, %xmm3, %xmm3
	vpbroadcastq	%xmm3, %ymm3
	vpshufb	%ymm11, %ymm3, %ymm3
	vpblendd	$170, %ymm2, %ymm3, %ymm2       ## ymm2 = ymm3[0],ymm2[1],ymm3[2],ymm2[3],ymm3[4],ymm2[5],ymm3[6],ymm2[7]
	vpermq	$238, %ymm1, %ymm1              ## ymm1 = ymm1[2,3,2,3]
	vpshufb	%ymm12, %ymm1, %ymm1
	vpshufb	%ymm5, %ymm0, %ymm0
	vpermq	$170, %ymm0, %ymm0              ## ymm0 = ymm0[2,2,2,2]
	vpshufb	%ymm11, %ymm0, %ymm0
	vpblendd	$170, %ymm1, %ymm0, %ymm0       ## ymm0 = ymm0[0],ymm1[1],ymm0[2],ymm1[3],ymm0[4],ymm1[5],ymm0[6],ymm1[7]
	vmovdqu	%ymm0, 32(%rdi,%rcx,8)
	vmovdqu	%ymm2, (%rdi,%rcx,8)
	addq	$16, %rcx
	addq	$-2, %rsi
	jne	LBB172_485
	jmp	LBB172_547
LBB172_486:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	160(%rsp), %rsi                 ## 8-byte Reload
	leaq	(%rax,%rsi,2), %rax
	movq	216(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%r11,%rcx,2), %r11
	xorl	%ecx, %ecx
	vmovdqa	LCPI172_4(%rip), %xmm5          ## xmm5 = [0,1,6,7,12,13,2,3,8,9,14,15,4,5,10,11]
	vmovdqa	LCPI172_5(%rip), %xmm6          ## xmm6 = [2,3,8,9,14,15,4,5,10,11,0,1,6,7,12,13]
	vmovdqa	LCPI172_6(%rip), %xmm7          ## xmm7 = [4,5,10,11,0,1,6,7,12,13,2,3,8,9,14,15]
	movq	80(%rsp), %rdx                  ## 8-byte Reload
	movq	16(%rsp), %rdi                  ## 8-byte Reload
LBB172_487:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rdi), %xmm0
	vmovdqu	16(%rdi), %xmm1
	vmovdqu	32(%rdi), %xmm2
	vpblendw	$36, %xmm2, %xmm0, %xmm3        ## xmm3 = xmm0[0,1],xmm2[2],xmm0[3,4],xmm2[5],xmm0[6,7]
	vpblendw	$146, %xmm1, %xmm3, %xmm3       ## xmm3 = xmm3[0],xmm1[1],xmm3[2,3],xmm1[4],xmm3[5,6],xmm1[7]
	vpshufb	%xmm5, %xmm3, %xmm3
	vpblendw	$73, %xmm2, %xmm0, %xmm4        ## xmm4 = xmm2[0],xmm0[1,2],xmm2[3],xmm0[4,5],xmm2[6],xmm0[7]
	vpblendw	$36, %xmm1, %xmm4, %xmm4        ## xmm4 = xmm4[0,1],xmm1[2],xmm4[3,4],xmm1[5],xmm4[6,7]
	vpshufb	%xmm6, %xmm4, %xmm4
	vpblendw	$146, %xmm2, %xmm0, %xmm0       ## xmm0 = xmm0[0],xmm2[1],xmm0[2,3],xmm2[4],xmm0[5,6],xmm2[7]
	vpblendw	$73, %xmm1, %xmm0, %xmm0        ## xmm0 = xmm1[0],xmm0[1,2],xmm1[3],xmm0[4,5],xmm1[6],xmm0[7]
	vpshufb	%xmm7, %xmm0, %xmm0
	vpmovzxwd	%xmm3, %ymm1            ## ymm1 = xmm3[0],zero,xmm3[1],zero,xmm3[2],zero,xmm3[3],zero,xmm3[4],zero,xmm3[5],zero,xmm3[6],zero,xmm3[7],zero
	vpmovzxwd	%xmm4, %ymm2            ## ymm2 = xmm4[0],zero,xmm4[1],zero,xmm4[2],zero,xmm4[3],zero,xmm4[4],zero,xmm4[5],zero,xmm4[6],zero,xmm4[7],zero
	vpbroadcastd	LCPI172_0(%rip), %ymm3  ## ymm3 = [77,77,77,77,77,77,77,77]
	vpmovzxwd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
	vpmulld	%ymm3, %ymm1, %ymm1
	vpbroadcastd	LCPI172_1(%rip), %ymm3  ## ymm3 = [150,150,150,150,150,150,150,150]
	vpmulld	%ymm3, %ymm2, %ymm2
	vpaddd	%ymm1, %ymm2, %ymm1
	vpbroadcastd	LCPI172_2(%rip), %ymm2  ## ymm2 = [29,29,29,29,29,29,29,29]
	vpmulld	%ymm2, %ymm0, %ymm0
	vpaddd	%ymm0, %ymm1, %ymm0
	vpshufb	%ymm15, %ymm0, %ymm0
	vpermq	$232, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,2,3]
	vmovdqu	%xmm0, (%rdx,%rcx,2)
	addq	$8, %rcx
	addq	$48, %rdi
	cmpq	%rcx, %rsi
	jne	LBB172_487
## %bb.488:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	152(%rsp), %ecx                 ## 4-byte Reload
	movl	%ecx, %edx
	cmpq	%rsi, 72(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_360
	jmp	LBB172_416
LBB172_489:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	184(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rax,%rcx,2), %rax
	movq	216(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%r11,%rcx,2), %r11
	xorl	%ecx, %ecx
	movq	160(%rsp), %rsi                 ## 8-byte Reload
	vmovdqa	LCPI172_4(%rip), %xmm5          ## xmm5 = [0,1,6,7,12,13,2,3,8,9,14,15,4,5,10,11]
	vmovdqa	LCPI172_5(%rip), %xmm6          ## xmm6 = [2,3,8,9,14,15,4,5,10,11,0,1,6,7,12,13]
	vmovdqa	LCPI172_6(%rip), %xmm7          ## xmm7 = [4,5,10,11,0,1,6,7,12,13,2,3,8,9,14,15]
	movq	80(%rsp), %rdx                  ## 8-byte Reload
	movq	16(%rsp), %rdi                  ## 8-byte Reload
LBB172_490:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rdi), %xmm0
	vmovdqu	16(%rdi), %xmm1
	vmovdqu	32(%rdi), %xmm2
	vpblendw	$36, %xmm2, %xmm0, %xmm3        ## xmm3 = xmm0[0,1],xmm2[2],xmm0[3,4],xmm2[5],xmm0[6,7]
	vpblendw	$146, %xmm1, %xmm3, %xmm3       ## xmm3 = xmm3[0],xmm1[1],xmm3[2,3],xmm1[4],xmm3[5,6],xmm1[7]
	vpshufb	%xmm5, %xmm3, %xmm3
	vpblendw	$73, %xmm2, %xmm0, %xmm4        ## xmm4 = xmm2[0],xmm0[1,2],xmm2[3],xmm0[4,5],xmm2[6],xmm0[7]
	vpblendw	$36, %xmm1, %xmm4, %xmm4        ## xmm4 = xmm4[0,1],xmm1[2],xmm4[3,4],xmm1[5],xmm4[6,7]
	vpshufb	%xmm6, %xmm4, %xmm4
	vpblendw	$146, %xmm2, %xmm0, %xmm0       ## xmm0 = xmm0[0],xmm2[1],xmm0[2,3],xmm2[4],xmm0[5,6],xmm2[7]
	vpblendw	$73, %xmm1, %xmm0, %xmm0        ## xmm0 = xmm1[0],xmm0[1,2],xmm1[3],xmm0[4,5],xmm1[6],xmm0[7]
	vpshufb	%xmm7, %xmm0, %xmm0
	vpmovzxwd	%xmm3, %ymm1            ## ymm1 = xmm3[0],zero,xmm3[1],zero,xmm3[2],zero,xmm3[3],zero,xmm3[4],zero,xmm3[5],zero,xmm3[6],zero,xmm3[7],zero
	vpmovzxwd	%xmm4, %ymm2            ## ymm2 = xmm4[0],zero,xmm4[1],zero,xmm4[2],zero,xmm4[3],zero,xmm4[4],zero,xmm4[5],zero,xmm4[6],zero,xmm4[7],zero
	vpmovzxwd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
	vpbroadcastd	LCPI172_0(%rip), %ymm3  ## ymm3 = [77,77,77,77,77,77,77,77]
	vpbroadcastd	LCPI172_1(%rip), %ymm4  ## ymm4 = [150,150,150,150,150,150,150,150]
	vpmulld	%ymm3, %ymm1, %ymm1
	vpmulld	%ymm4, %ymm2, %ymm2
	vpbroadcastd	LCPI172_2(%rip), %ymm3  ## ymm3 = [29,29,29,29,29,29,29,29]
	vpaddd	%ymm1, %ymm2, %ymm1
	vpmulld	%ymm3, %ymm0, %ymm0
	vpaddd	%ymm0, %ymm1, %ymm0
	vpshufb	%ymm15, %ymm0, %ymm0
	vpermq	$232, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,2,3]
	vpunpcklwd	%xmm10, %xmm0, %xmm1    ## xmm1 = xmm0[0],xmm10[0],xmm0[1],xmm10[1],xmm0[2],xmm10[2],xmm0[3],xmm10[3]
	vpunpckhwd	%xmm10, %xmm0, %xmm0    ## xmm0 = xmm0[4],xmm10[4],xmm0[5],xmm10[5],xmm0[6],xmm10[6],xmm0[7],xmm10[7]
	vmovdqu	%xmm0, 16(%rdx,%rcx,4)
	vmovdqu	%xmm1, (%rdx,%rcx,4)
	addq	$8, %rcx
	addq	$48, %rdi
	cmpq	%rcx, %rsi
	jne	LBB172_490
## %bb.491:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	152(%rsp), %ecx                 ## 4-byte Reload
	movl	%ecx, %edx
	cmpq	%rsi, 72(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_360
	jmp	LBB172_423
LBB172_492:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	$0, 392(%rsp)                   ## 8-byte Folded Reload
	je	LBB172_555
## %bb.493:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	312(%rsp), %r8                  ## 8-byte Reload
	xorl	%edx, %edx
	movq	%r12, %rdi
	movq	16(%rsp), %rcx                  ## 8-byte Reload
LBB172_494:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	32(%rcx), %xmm0
	vpextrw	$4, %xmm0, %esi
	vmovdqu	(%rcx), %xmm1
	vpshufd	$85, %xmm0, %xmm2               ## xmm2 = xmm0[1,1,1,1]
	vpinsrw	$2, %esi, %xmm2, %xmm2
	vmovdqu	16(%rcx), %xmm3
	vpextrw	$5, %xmm0, %esi
	vpblendw	$8, %xmm10, %xmm2, %xmm2        ## xmm2 = xmm2[0,1,2],xmm10[3],xmm2[4,5,6,7]
	vpinsrw	$4, %esi, %xmm2, %xmm2
	vpextrw	$6, %xmm0, %esi
	vpinsrw	$5, %esi, %xmm2, %xmm2
	vpextrw	$7, %xmm0, %esi
	vpinsrw	$6, %esi, %xmm2, %xmm2
	vmovd	%xmm3, %esi
	vpshufd	$255, %xmm1, %xmm4              ## xmm4 = xmm1[3,3,3,3]
	vpinsrw	$2, %esi, %xmm4, %xmm4
	vpextrw	$1, %xmm3, %esi
	vpblendw	$8, %xmm10, %xmm4, %xmm4        ## xmm4 = xmm4[0,1,2],xmm10[3],xmm4[4,5,6,7]
	vpinsrw	$4, %esi, %xmm4, %xmm4
	vpextrw	$2, %xmm3, %esi
	vpinsrw	$5, %esi, %xmm4, %xmm4
	vpextrw	$3, %xmm3, %esi
	vpinsrw	$6, %esi, %xmm4, %xmm4
	vpextrw	$7, %xmm3, %esi
	vpshufd	$238, %xmm3, %xmm3              ## xmm3 = xmm3[2,3,2,3]
	vpblendw	$8, %xmm10, %xmm3, %xmm3        ## xmm3 = xmm3[0,1,2],xmm10[3],xmm3[4,5,6,7]
	vpinsrw	$4, %esi, %xmm3, %xmm3
	vmovd	%xmm0, %esi
	vpinsrw	$5, %esi, %xmm3, %xmm3
	vpextrw	$1, %xmm0, %esi
	vpinsrw	$6, %esi, %xmm3, %xmm0
	vpextrw	$3, %xmm1, %esi
	vpblendw	$8, %xmm10, %xmm1, %xmm3        ## xmm3 = xmm1[0,1,2],xmm10[3],xmm1[4,5,6,7]
	vpinsrw	$4, %esi, %xmm3, %xmm3
	vpextrw	$4, %xmm1, %esi
	vpinsrw	$5, %esi, %xmm3, %xmm3
	vpextrw	$5, %xmm1, %esi
	vpblendw	$128, %xmm10, %xmm2, %xmm1      ## xmm1 = xmm2[0,1,2,3,4,5,6],xmm10[7]
	vpblendw	$128, %xmm10, %xmm4, %xmm2      ## xmm2 = xmm4[0,1,2,3,4,5,6],xmm10[7]
	vpblendw	$128, %xmm10, %xmm0, %xmm0      ## xmm0 = xmm0[0,1,2,3,4,5,6],xmm10[7]
	vpinsrw	$6, %esi, %xmm3, %xmm3
	vpblendw	$128, %xmm10, %xmm3, %xmm3      ## xmm3 = xmm3[0,1,2,3,4,5,6],xmm10[7]
	vmovdqu	%xmm3, -64(%rdi,%rdx,8)
	vmovdqu	%xmm0, -32(%rdi,%rdx,8)
	vmovdqu	%xmm2, -48(%rdi,%rdx,8)
	vmovdqu	%xmm1, -16(%rdi,%rdx,8)
	vmovdqu	48(%rcx), %xmm8
	vmovdqu	64(%rcx), %xmm0
	vmovd	%xmm0, %esi
	vpshufd	$255, %xmm8, %xmm1              ## xmm1 = xmm8[3,3,3,3]
	vpinsrw	$2, %esi, %xmm1, %xmm1
	vpextrw	$1, %xmm0, %esi
	vpblendw	$8, %xmm10, %xmm1, %xmm1        ## xmm1 = xmm1[0,1,2],xmm10[3],xmm1[4,5,6,7]
	vpinsrw	$4, %esi, %xmm1, %xmm1
	vpextrw	$2, %xmm0, %esi
	vpinsrw	$5, %esi, %xmm1, %xmm1
	vpextrw	$3, %xmm0, %esi
	vpinsrw	$6, %esi, %xmm1, %xmm1
	vmovdqu	80(%rcx), %xmm2
	vpextrw	$4, %xmm2, %esi
	vpshufd	$85, %xmm2, %xmm3               ## xmm3 = xmm2[1,1,1,1]
	vpinsrw	$2, %esi, %xmm3, %xmm3
	vpextrw	$5, %xmm2, %esi
	vpblendw	$8, %xmm10, %xmm3, %xmm3        ## xmm3 = xmm3[0,1,2],xmm10[3],xmm3[4,5,6,7]
	vpinsrw	$4, %esi, %xmm3, %xmm3
	vpextrw	$6, %xmm2, %esi
	vpinsrw	$5, %esi, %xmm3, %xmm3
	vpextrw	$7, %xmm2, %esi
	vpinsrw	$6, %esi, %xmm3, %xmm3
	vpextrw	$7, %xmm0, %esi
	vpshufd	$238, %xmm0, %xmm0              ## xmm0 = xmm0[2,3,2,3]
	vpblendw	$8, %xmm10, %xmm0, %xmm0        ## xmm0 = xmm0[0,1,2],xmm10[3],xmm0[4,5,6,7]
	vpinsrw	$4, %esi, %xmm0, %xmm0
	vmovd	%xmm2, %esi
	vpinsrw	$5, %esi, %xmm0, %xmm0
	vpextrw	$1, %xmm2, %esi
	vpinsrw	$6, %esi, %xmm0, %xmm0
	vpextrw	$3, %xmm8, %esi
	vpblendw	$8, %xmm10, %xmm8, %xmm2        ## xmm2 = xmm8[0,1,2],xmm10[3],xmm8[4,5,6,7]
	vpinsrw	$4, %esi, %xmm2, %xmm2
	vpextrw	$4, %xmm8, %esi
	vpinsrw	$5, %esi, %xmm2, %xmm2
	vpextrw	$5, %xmm8, %esi
	vpinsrw	$6, %esi, %xmm2, %xmm2
	vpblendw	$128, %xmm10, %xmm1, %xmm1      ## xmm1 = xmm1[0,1,2,3,4,5,6],xmm10[7]
	vpblendw	$128, %xmm10, %xmm3, %xmm3      ## xmm3 = xmm3[0,1,2,3,4,5,6],xmm10[7]
	vpblendw	$128, %xmm10, %xmm0, %xmm0      ## xmm0 = xmm0[0,1,2,3,4,5,6],xmm10[7]
	vpblendw	$128, %xmm10, %xmm2, %xmm2      ## xmm2 = xmm2[0,1,2,3,4,5,6],xmm10[7]
	vmovdqu	%xmm2, (%rdi,%rdx,8)
	vmovdqu	%xmm0, 32(%rdi,%rdx,8)
	vmovdqu	%xmm3, 48(%rdi,%rdx,8)
	vmovdqu	%xmm1, 16(%rdi,%rdx,8)
	addq	$16, %rdx
	addq	$96, %rcx
	addq	$-2, %r8
	jne	LBB172_494
	jmp	LBB172_556
LBB172_495:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	32(%rsp), %rdx                  ## 8-byte Reload
	leaq	(%rax,%rdx,2), %rax
	movq	208(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%r11,%rcx,2), %r11
	xorl	%ecx, %ecx
	movq	80(%rsp), %rsi                  ## 8-byte Reload
	movq	16(%rsp), %rdi                  ## 8-byte Reload
LBB172_496:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vpblendw	$17, 32(%rdi,%rcx,8), %ymm13, %ymm0 ## ymm0 = mem[0],ymm13[1,2,3],mem[4],ymm13[5,6,7],mem[8],ymm13[9,10,11],mem[12],ymm13[13,14,15]
	vextracti128	$1, %ymm0, %xmm1
	vpackusdw	%xmm1, %xmm0, %xmm0
	vpblendw	$17, (%rdi,%rcx,8), %ymm13, %ymm1 ## ymm1 = mem[0],ymm13[1,2,3],mem[4],ymm13[5,6,7],mem[8],ymm13[9,10,11],mem[12],ymm13[13,14,15]
	vextracti128	$1, %ymm1, %xmm2
	vpackusdw	%xmm2, %xmm1, %xmm1
	vpackusdw	%xmm0, %xmm1, %xmm0
	vmovdqu	(%rdi,%rcx,8), %xmm1
	vmovdqu	16(%rdi,%rcx,8), %xmm2
	vmovdqu	32(%rdi,%rcx,8), %xmm3
	vmovdqu	48(%rdi,%rcx,8), %xmm4
	vpshufd	$232, %xmm4, %xmm5              ## xmm5 = xmm4[0,2,2,3]
	vpshuflw	$212, %xmm5, %xmm5              ## xmm5 = xmm5[0,1,1,3,4,5,6,7]
	vpshufd	$232, %xmm3, %xmm6              ## xmm6 = xmm3[0,2,2,3]
	vpshuflw	$212, %xmm6, %xmm6              ## xmm6 = xmm6[0,1,1,3,4,5,6,7]
	vpunpckldq	%xmm5, %xmm6, %xmm5     ## xmm5 = xmm6[0],xmm5[0],xmm6[1],xmm5[1]
	vpshufd	$232, %xmm2, %xmm6              ## xmm6 = xmm2[0,2,2,3]
	vpshuflw	$237, %xmm6, %xmm6              ## xmm6 = xmm6[1,3,2,3,4,5,6,7]
	vpshufd	$232, %xmm1, %xmm7              ## xmm7 = xmm1[0,2,2,3]
	vpshuflw	$237, %xmm7, %xmm7              ## xmm7 = xmm7[1,3,2,3,4,5,6,7]
	vpunpckldq	%xmm6, %xmm7, %xmm6     ## xmm6 = xmm7[0],xmm6[0],xmm7[1],xmm6[1]
	vpblendd	$12, %xmm5, %xmm6, %xmm5        ## xmm5 = xmm6[0,1],xmm5[2,3]
	vpshufd	$231, %xmm4, %xmm4              ## xmm4 = xmm4[3,1,2,3]
	vpshuflw	$36, %xmm4, %xmm4               ## xmm4 = xmm4[0,1,2,0,4,5,6,7]
	vpshufd	$231, %xmm3, %xmm3              ## xmm3 = xmm3[3,1,2,3]
	vpshuflw	$36, %xmm3, %xmm3               ## xmm3 = xmm3[0,1,2,0,4,5,6,7]
	vpunpckldq	%xmm4, %xmm3, %xmm3     ## xmm3 = xmm3[0],xmm4[0],xmm3[1],xmm4[1]
	vpshufd	$231, %xmm2, %xmm2              ## xmm2 = xmm2[3,1,2,3]
	vpshuflw	$226, %xmm2, %xmm2              ## xmm2 = xmm2[2,0,2,3,4,5,6,7]
	vpshufd	$231, %xmm1, %xmm1              ## xmm1 = xmm1[3,1,2,3]
	vpshuflw	$226, %xmm1, %xmm1              ## xmm1 = xmm1[2,0,2,3,4,5,6,7]
	vpunpckldq	%xmm2, %xmm1, %xmm1     ## xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vpblendd	$12, %xmm3, %xmm1, %xmm1        ## xmm1 = xmm1[0,1],xmm3[2,3]
	vpmovzxwd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
	vpmovzxwd	%xmm5, %ymm2            ## ymm2 = xmm5[0],zero,xmm5[1],zero,xmm5[2],zero,xmm5[3],zero,xmm5[4],zero,xmm5[5],zero,xmm5[6],zero,xmm5[7],zero
	vpmovzxwd	%xmm1, %ymm1            ## ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
	vpbroadcastd	LCPI172_0(%rip), %ymm3  ## ymm3 = [77,77,77,77,77,77,77,77]
	vpbroadcastd	LCPI172_1(%rip), %ymm4  ## ymm4 = [150,150,150,150,150,150,150,150]
	vpmulld	%ymm3, %ymm0, %ymm0
	vpmulld	%ymm4, %ymm2, %ymm2
	vpbroadcastd	LCPI172_2(%rip), %ymm3  ## ymm3 = [29,29,29,29,29,29,29,29]
	vpmulld	%ymm3, %ymm1, %ymm1
	vpaddd	%ymm1, %ymm2, %ymm1
	vpaddd	%ymm1, %ymm0, %ymm0
	vpshufb	%ymm15, %ymm0, %ymm0
	vpermq	$232, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,2,3]
	vmovdqu	%xmm0, (%rsi,%rcx,2)
	addq	$8, %rcx
	cmpq	%rcx, %rdx
	jne	LBB172_496
## %bb.497:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	44(%rsp), %ecx                  ## 4-byte Reload
LBB172_498:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%ecx, %edx
	testb	$1, %dl
	jne	LBB172_500
## %bb.499:                             ##   in Loop: Header=BB172_361 Depth=1
	movzwl	(%r11), %ecx
	movzwl	2(%r11), %esi
	movzwl	4(%r11), %edi
	imull	$77, %ecx, %ecx
	imull	$150, %esi, %esi
	addl	%ecx, %esi
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	addl	%edi, %ecx
	addl	%esi, %ecx
	shrl	$8, %ecx
	movw	%cx, (%rax)
	addq	$8, %r11
	addq	$2, %rax
	leal	-1(%rdx), %r8d
	jmp	LBB172_501
LBB172_500:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%edx, %r8d
LBB172_501:                             ##   in Loop: Header=BB172_361 Depth=1
	testl	%edx, %edx
	je	LBB172_360
## %bb.502:                             ##   in Loop: Header=BB172_361 Depth=1
	incl	%r8d
	xorl	%edx, %edx
LBB172_503:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11,%rdx,8), %esi
	movzwl	2(%r11,%rdx,8), %edi
	movzwl	4(%r11,%rdx,8), %ecx
	imull	$77, %esi, %esi
	imull	$150, %edi, %edi
	addl	%esi, %edi
	leal	(%rcx,%rcx,8), %esi
	leal	(%rsi,%rsi,2), %esi
	addl	%ecx, %esi
	addl	%ecx, %esi
	addl	%edi, %esi
	shrl	$8, %esi
	movw	%si, (%rax,%rdx,2)
	movzwl	8(%r11,%rdx,8), %ecx
	movzwl	10(%r11,%rdx,8), %esi
	movzwl	12(%r11,%rdx,8), %edi
	imull	$77, %ecx, %ecx
	imull	$150, %esi, %esi
	addl	%ecx, %esi
	leal	(%rdi,%rdi,8), %ecx
	leal	(%rcx,%rcx,2), %ecx
	addl	%edi, %ecx
	addl	%edi, %ecx
	addl	%esi, %ecx
	shrl	$8, %ecx
	movw	%cx, 2(%rax,%rdx,2)
	addq	$2, %rdx
	cmpl	%edx, %r8d
	jne	LBB172_503
	jmp	LBB172_360
LBB172_504:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	184(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rax,%rcx,2), %rax
	movq	328(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%r11,%rcx,2), %r11
	xorl	%ecx, %ecx
	movq	160(%rsp), %rsi                 ## 8-byte Reload
	movq	80(%rsp), %rdx                  ## 8-byte Reload
	movq	16(%rsp), %rdi                  ## 8-byte Reload
LBB172_505:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vpblendw	$17, 32(%rdi,%rcx,8), %ymm13, %ymm0 ## ymm0 = mem[0],ymm13[1,2,3],mem[4],ymm13[5,6,7],mem[8],ymm13[9,10,11],mem[12],ymm13[13,14,15]
	vextracti128	$1, %ymm0, %xmm1
	vpackusdw	%xmm1, %xmm0, %xmm0
	vpblendw	$17, (%rdi,%rcx,8), %ymm13, %ymm1 ## ymm1 = mem[0],ymm13[1,2,3],mem[4],ymm13[5,6,7],mem[8],ymm13[9,10,11],mem[12],ymm13[13,14,15]
	vextracti128	$1, %ymm1, %xmm2
	vpackusdw	%xmm2, %xmm1, %xmm1
	vpackusdw	%xmm0, %xmm1, %xmm8
	vmovdqu	(%rdi,%rcx,8), %xmm1
	vmovdqu	16(%rdi,%rcx,8), %xmm2
	vmovdqu	32(%rdi,%rcx,8), %xmm7
	vmovdqu	48(%rdi,%rcx,8), %xmm5
	vpshufd	$232, %xmm5, %xmm4              ## xmm4 = xmm5[0,2,2,3]
	vpshuflw	$212, %xmm4, %xmm4              ## xmm4 = xmm4[0,1,1,3,4,5,6,7]
	vpshufd	$232, %xmm7, %xmm6              ## xmm6 = xmm7[0,2,2,3]
	vpshuflw	$212, %xmm6, %xmm6              ## xmm6 = xmm6[0,1,1,3,4,5,6,7]
	vpunpckldq	%xmm4, %xmm6, %xmm4     ## xmm4 = xmm6[0],xmm4[0],xmm6[1],xmm4[1]
	vpshufd	$232, %xmm2, %xmm6              ## xmm6 = xmm2[0,2,2,3]
	vpshuflw	$237, %xmm6, %xmm6              ## xmm6 = xmm6[1,3,2,3,4,5,6,7]
	vpshufd	$232, %xmm1, %xmm3              ## xmm3 = xmm1[0,2,2,3]
	vpshuflw	$237, %xmm3, %xmm3              ## xmm3 = xmm3[1,3,2,3,4,5,6,7]
	vpunpckldq	%xmm6, %xmm3, %xmm3     ## xmm3 = xmm3[0],xmm6[0],xmm3[1],xmm6[1]
	vpblendd	$12, %xmm4, %xmm3, %xmm3        ## xmm3 = xmm3[0,1],xmm4[2,3]
	vpshufd	$231, %xmm5, %xmm4              ## xmm4 = xmm5[3,1,2,3]
	vpshuflw	$36, %xmm4, %xmm5               ## xmm5 = xmm4[0,1,2,0,4,5,6,7]
	vpshufd	$231, %xmm7, %xmm6              ## xmm6 = xmm7[3,1,2,3]
	vpshuflw	$36, %xmm6, %xmm7               ## xmm7 = xmm6[0,1,2,0,4,5,6,7]
	vpunpckldq	%xmm5, %xmm7, %xmm5     ## xmm5 = xmm7[0],xmm5[0],xmm7[1],xmm5[1]
	vpshufd	$231, %xmm2, %xmm2              ## xmm2 = xmm2[3,1,2,3]
	vpshuflw	$226, %xmm2, %xmm7              ## xmm7 = xmm2[2,0,2,3,4,5,6,7]
	vpshufd	$231, %xmm1, %xmm1              ## xmm1 = xmm1[3,1,2,3]
	vpshuflw	$226, %xmm1, %xmm0              ## xmm0 = xmm1[2,0,2,3,4,5,6,7]
	vpunpckldq	%xmm7, %xmm0, %xmm0     ## xmm0 = xmm0[0],xmm7[0],xmm0[1],xmm7[1]
	vpblendd	$12, %xmm5, %xmm0, %xmm0        ## xmm0 = xmm0[0,1],xmm5[2,3]
	vpmovzxwd	%xmm8, %ymm5            ## ymm5 = xmm8[0],zero,xmm8[1],zero,xmm8[2],zero,xmm8[3],zero,xmm8[4],zero,xmm8[5],zero,xmm8[6],zero,xmm8[7],zero
	vpmovzxwd	%xmm3, %ymm3            ## ymm3 = xmm3[0],zero,xmm3[1],zero,xmm3[2],zero,xmm3[3],zero,xmm3[4],zero,xmm3[5],zero,xmm3[6],zero,xmm3[7],zero
	vpbroadcastd	LCPI172_0(%rip), %ymm7  ## ymm7 = [77,77,77,77,77,77,77,77]
	vpmovzxwd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
	vpmulld	%ymm7, %ymm5, %ymm5
	vpbroadcastd	LCPI172_1(%rip), %ymm7  ## ymm7 = [150,150,150,150,150,150,150,150]
	vpmulld	%ymm7, %ymm3, %ymm3
	vpbroadcastd	LCPI172_2(%rip), %ymm7  ## ymm7 = [29,29,29,29,29,29,29,29]
	vpmulld	%ymm7, %ymm0, %ymm0
	vpaddd	%ymm0, %ymm3, %ymm0
	vpaddd	%ymm0, %ymm5, %ymm0
	vpshufb	%ymm15, %ymm0, %ymm0
	vpermq	$232, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,2,3]
	vpshuflw	$231, %xmm2, %xmm2              ## xmm2 = xmm2[3,1,2,3,4,5,6,7]
	vpshuflw	$231, %xmm1, %xmm1              ## xmm1 = xmm1[3,1,2,3,4,5,6,7]
	vpunpckldq	%xmm2, %xmm1, %xmm1     ## xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vpunpcklwd	%xmm1, %xmm0, %xmm1     ## xmm1 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3]
	vpshuflw	$116, %xmm4, %xmm2              ## xmm2 = xmm4[0,1,3,1,4,5,6,7]
	vpshuflw	$116, %xmm6, %xmm3              ## xmm3 = xmm6[0,1,3,1,4,5,6,7]
	vpunpckldq	%xmm2, %xmm3, %xmm2     ## xmm2 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
	vpunpckhwd	%xmm2, %xmm0, %xmm0     ## xmm0 = xmm0[4],xmm2[4],xmm0[5],xmm2[5],xmm0[6],xmm2[6],xmm0[7],xmm2[7]
	vmovdqu	%xmm0, 16(%rdx,%rcx,4)
	vmovdqu	%xmm1, (%rdx,%rcx,4)
	addq	$8, %rcx
	cmpq	%rcx, %rsi
	jne	LBB172_505
## %bb.506:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	152(%rsp), %ecx                 ## 4-byte Reload
	movl	%ecx, %edx
	cmpq	%rsi, 72(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_360
	jmp	LBB172_441
LBB172_507:                             ##   in Loop: Header=BB172_361 Depth=1
	xorl	%ecx, %ecx
	movq	304(%rsp), %rdx                 ## 8-byte Reload
LBB172_508:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rdi
	vmovdqu	-96(%rsi,%rcx,2), %ymm0
	vmovdqu	-64(%rsi,%rcx,2), %ymm1
	vmovdqu	-32(%rsi,%rcx,2), %ymm2
	vmovdqu	(%rsi,%rcx,2), %ymm3
	vpermq	$212, %ymm0, %ymm4              ## ymm4 = ymm0[0,1,1,3]
	vpcmpeqd	%ymm5, %ymm5, %ymm5
	vpunpcklwd	%ymm5, %ymm4, %ymm4     ## ymm4 = ymm4[0],ymm5[0],ymm4[1],ymm5[1],ymm4[2],ymm5[2],ymm4[3],ymm5[3],ymm4[8],ymm5[8],ymm4[9],ymm5[9],ymm4[10],ymm5[10],ymm4[11],ymm5[11]
	vpermq	$246, %ymm0, %ymm0              ## ymm0 = ymm0[2,1,3,3]
	vpunpcklwd	%ymm5, %ymm0, %ymm0     ## ymm0 = ymm0[0],ymm5[0],ymm0[1],ymm5[1],ymm0[2],ymm5[2],ymm0[3],ymm5[3],ymm0[8],ymm5[8],ymm0[9],ymm5[9],ymm0[10],ymm5[10],ymm0[11],ymm5[11]
	movq	%r8, %rdi
	vmovdqu	%ymm0, -160(%r8,%rcx,4)
	vmovdqu	%ymm4, -192(%r8,%rcx,4)
	vpermq	$212, %ymm1, %ymm0              ## ymm0 = ymm1[0,1,1,3]
	vpunpcklwd	%ymm5, %ymm0, %ymm0     ## ymm0 = ymm0[0],ymm5[0],ymm0[1],ymm5[1],ymm0[2],ymm5[2],ymm0[3],ymm5[3],ymm0[8],ymm5[8],ymm0[9],ymm5[9],ymm0[10],ymm5[10],ymm0[11],ymm5[11]
	vpermq	$246, %ymm1, %ymm1              ## ymm1 = ymm1[2,1,3,3]
	vpunpcklwd	%ymm5, %ymm1, %ymm1     ## ymm1 = ymm1[0],ymm5[0],ymm1[1],ymm5[1],ymm1[2],ymm5[2],ymm1[3],ymm5[3],ymm1[8],ymm5[8],ymm1[9],ymm5[9],ymm1[10],ymm5[10],ymm1[11],ymm5[11]
	vmovdqu	%ymm1, -96(%r8,%rcx,4)
	vmovdqu	%ymm0, -128(%r8,%rcx,4)
	vpermq	$212, %ymm2, %ymm0              ## ymm0 = ymm2[0,1,1,3]
	vpunpcklwd	%ymm5, %ymm0, %ymm0     ## ymm0 = ymm0[0],ymm5[0],ymm0[1],ymm5[1],ymm0[2],ymm5[2],ymm0[3],ymm5[3],ymm0[8],ymm5[8],ymm0[9],ymm5[9],ymm0[10],ymm5[10],ymm0[11],ymm5[11]
	vpermq	$246, %ymm2, %ymm1              ## ymm1 = ymm2[2,1,3,3]
	vpunpcklwd	%ymm5, %ymm1, %ymm1     ## ymm1 = ymm1[0],ymm5[0],ymm1[1],ymm5[1],ymm1[2],ymm5[2],ymm1[3],ymm5[3],ymm1[8],ymm5[8],ymm1[9],ymm5[9],ymm1[10],ymm5[10],ymm1[11],ymm5[11]
	vmovdqu	%ymm1, -32(%r8,%rcx,4)
	vmovdqu	%ymm0, -64(%r8,%rcx,4)
	vpermq	$212, %ymm3, %ymm0              ## ymm0 = ymm3[0,1,1,3]
	vpunpcklwd	%ymm5, %ymm0, %ymm0     ## ymm0 = ymm0[0],ymm5[0],ymm0[1],ymm5[1],ymm0[2],ymm5[2],ymm0[3],ymm5[3],ymm0[8],ymm5[8],ymm0[9],ymm5[9],ymm0[10],ymm5[10],ymm0[11],ymm5[11]
	vpermq	$246, %ymm3, %ymm1              ## ymm1 = ymm3[2,1,3,3]
	vpunpcklwd	%ymm5, %ymm1, %ymm1     ## ymm1 = ymm1[0],ymm5[0],ymm1[1],ymm5[1],ymm1[2],ymm5[2],ymm1[3],ymm5[3],ymm1[8],ymm5[8],ymm1[9],ymm5[9],ymm1[10],ymm5[10],ymm1[11],ymm5[11]
	vmovdqu	%ymm1, 32(%r8,%rcx,4)
	vmovdqu	%ymm0, (%r8,%rcx,4)
	addq	$64, %rcx
	cmpq	%rcx, %rdx
	jne	LBB172_508
## %bb.509:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	%rdx, 72(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_360
## %bb.510:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	304(%rsp), %rcx                 ## 8-byte Reload
	testb	$56, 72(%rsp)                   ## 1-byte Folded Reload
	je	LBB172_575
LBB172_511:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	184(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rax,%rdx,2), %rax
	movq	160(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%r11,%rdx,2), %r11
	movq	80(%rsp), %rsi                  ## 8-byte Reload
	movq	16(%rsp), %rdi                  ## 8-byte Reload
LBB172_512:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rdi,%rcx,2), %xmm0
	vpunpcklwd	%xmm10, %xmm0, %xmm1    ## xmm1 = xmm0[0],xmm10[0],xmm0[1],xmm10[1],xmm0[2],xmm10[2],xmm0[3],xmm10[3]
	vpunpckhwd	%xmm10, %xmm0, %xmm0    ## xmm0 = xmm0[4],xmm10[4],xmm0[5],xmm10[5],xmm0[6],xmm10[6],xmm0[7],xmm10[7]
	vmovdqu	%xmm0, 16(%rsi,%rcx,4)
	vmovdqu	%xmm1, (%rsi,%rcx,4)
	addq	$8, %rcx
	cmpq	%rcx, %rdx
	jne	LBB172_512
## %bb.513:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	152(%rsp), %ecx                 ## 4-byte Reload
                                        ## kill: def $ecx killed $ecx def $rcx
	cmpq	%rdx, 72(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_360
	jmp	LBB172_369
LBB172_514:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	$48, 496(%rsp)                  ## 8-byte Folded Reload
	jae	LBB172_564
## %bb.515:                             ##   in Loop: Header=BB172_361 Depth=1
	xorl	%edi, %edi
	jmp	LBB172_566
LBB172_516:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	480(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rcx,%r15,2), %rcx
	movq	472(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rdx,%r8,2), %rdx
	xorl	%edi, %edi
	movq	296(%rsp), %rsi                 ## 8-byte Reload
LBB172_517:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vpshuflw	$232, -160(%rcx,%rdi,4), %ymm0  ## ymm0 = mem[0,2,2,3,4,5,6,7,8,10,10,11,12,13,14,15]
	vpshufhw	$232, %ymm0, %ymm0              ## ymm0 = ymm0[0,1,2,3,4,6,6,7,8,9,10,11,12,14,14,15]
	vpshuflw	$232, -192(%rcx,%rdi,4), %ymm1  ## ymm1 = mem[0,2,2,3,4,5,6,7,8,10,10,11,12,13,14,15]
	vpshufhw	$232, %ymm1, %ymm1              ## ymm1 = ymm1[0,1,2,3,4,6,6,7,8,9,10,11,12,14,14,15]
	vshufps	$136, %ymm0, %ymm1, %ymm0       ## ymm0 = ymm1[0,2],ymm0[0,2],ymm1[4,6],ymm0[4,6]
	vpermpd	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpshuflw	$232, -96(%rcx,%rdi,4), %ymm1   ## ymm1 = mem[0,2,2,3,4,5,6,7,8,10,10,11,12,13,14,15]
	vpshufhw	$232, %ymm1, %ymm1              ## ymm1 = ymm1[0,1,2,3,4,6,6,7,8,9,10,11,12,14,14,15]
	vpshuflw	$232, -128(%rcx,%rdi,4), %ymm2  ## ymm2 = mem[0,2,2,3,4,5,6,7,8,10,10,11,12,13,14,15]
	vpshufhw	$232, %ymm2, %ymm2              ## ymm2 = ymm2[0,1,2,3,4,6,6,7,8,9,10,11,12,14,14,15]
	vshufps	$136, %ymm1, %ymm2, %ymm1       ## ymm1 = ymm2[0,2],ymm1[0,2],ymm2[4,6],ymm1[4,6]
	vpermpd	$216, %ymm1, %ymm1              ## ymm1 = ymm1[0,2,1,3]
	vpshuflw	$232, -32(%rcx,%rdi,4), %ymm2   ## ymm2 = mem[0,2,2,3,4,5,6,7,8,10,10,11,12,13,14,15]
	vpshufhw	$232, %ymm2, %ymm2              ## ymm2 = ymm2[0,1,2,3,4,6,6,7,8,9,10,11,12,14,14,15]
	vpshuflw	$232, -64(%rcx,%rdi,4), %ymm3   ## ymm3 = mem[0,2,2,3,4,5,6,7,8,10,10,11,12,13,14,15]
	vpshufhw	$232, %ymm3, %ymm3              ## ymm3 = ymm3[0,1,2,3,4,6,6,7,8,9,10,11,12,14,14,15]
	vshufps	$136, %ymm2, %ymm3, %ymm2       ## ymm2 = ymm3[0,2],ymm2[0,2],ymm3[4,6],ymm2[4,6]
	vpermpd	$216, %ymm2, %ymm2              ## ymm2 = ymm2[0,2,1,3]
	vpshuflw	$232, 32(%rcx,%rdi,4), %ymm3    ## ymm3 = mem[0,2,2,3,4,5,6,7,8,10,10,11,12,13,14,15]
	vpshufhw	$232, %ymm3, %ymm3              ## ymm3 = ymm3[0,1,2,3,4,6,6,7,8,9,10,11,12,14,14,15]
	vpshuflw	$232, (%rcx,%rdi,4), %ymm4      ## ymm4 = mem[0,2,2,3,4,5,6,7,8,10,10,11,12,13,14,15]
	vpshufhw	$232, %ymm4, %ymm4              ## ymm4 = ymm4[0,1,2,3,4,6,6,7,8,9,10,11,12,14,14,15]
	vshufps	$136, %ymm3, %ymm4, %ymm3       ## ymm3 = ymm4[0,2],ymm3[0,2],ymm4[4,6],ymm3[4,6]
	vpermpd	$216, %ymm3, %ymm3              ## ymm3 = ymm3[0,2,1,3]
	vmovups	%ymm0, -96(%rdx,%rdi,2)
	vmovups	%ymm1, -64(%rdx,%rdi,2)
	vmovups	%ymm2, -32(%rdx,%rdi,2)
	vmovups	%ymm3, (%rdx,%rdi,2)
	addq	$64, %rdi
	cmpq	%rdi, %rsi
	jne	LBB172_517
## %bb.518:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	%rsi, %rcx
	cmpl	$8, 504(%rsp)                   ## 4-byte Folded Reload
	ja	LBB172_520
## %bb.519:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	440(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%r11,%rcx,2), %r11
	movq	296(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rax,%rcx,2), %rax
	movl	456(%rsp), %ecx                 ## 4-byte Reload
	jmp	LBB172_523
LBB172_520:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	32(%rsp), %rdx                  ## 8-byte Reload
	leaq	(%rax,%rdx,2), %rax
	movq	320(%rsp), %rsi                 ## 8-byte Reload
	leaq	(%r11,%rsi,2), %r11
	vxorps	%xmm2, %xmm2, %xmm2
	movq	80(%rsp), %rsi                  ## 8-byte Reload
	movq	16(%rsp), %rdi                  ## 8-byte Reload
LBB172_521:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vpblendw	$85, 16(%rdi,%rcx,4), %xmm2, %xmm0 ## xmm0 = mem[0],xmm2[1],mem[2],xmm2[3],mem[4],xmm2[5],mem[6],xmm2[7]
	vpblendw	$85, (%rdi,%rcx,4), %xmm2, %xmm1 ## xmm1 = mem[0],xmm2[1],mem[2],xmm2[3],mem[4],xmm2[5],mem[6],xmm2[7]
	vpackusdw	%xmm0, %xmm1, %xmm0
	vmovdqu	%xmm0, (%rsi,%rcx,2)
	addq	$8, %rcx
	cmpq	%rcx, %rdx
	jne	LBB172_521
## %bb.522:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	44(%rsp), %ecx                  ## 4-byte Reload
LBB172_523:                             ##   in Loop: Header=BB172_361 Depth=1
                                        ## kill: def $ecx killed $ecx def $rcx
	leal	1(%rcx), %edx
	testb	$7, %dl
	je	LBB172_527
## %bb.524:                             ##   in Loop: Header=BB172_361 Depth=1
	leal	1(%rcx), %edx
	movzbl	%dl, %edx
	andl	$7, %edx
	xorl	%esi, %esi
LBB172_525:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11), %edi
	movw	%di, (%rax)
	addq	$4, %r11
	addq	$2, %rax
	incq	%rsi
	cmpl	%esi, %edx
	jne	LBB172_525
## %bb.526:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%ecx, %edx
	subl	%esi, %edx
	jmp	LBB172_528
LBB172_527:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%ecx, %edx
LBB172_528:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$7, %ecx
	jb	LBB172_360
## %bb.529:                             ##   in Loop: Header=BB172_361 Depth=1
	incl	%edx
	xorl	%ecx, %ecx
LBB172_530:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11,%rcx,4), %esi
	movw	%si, (%rax,%rcx,2)
	movzwl	4(%r11,%rcx,4), %esi
	movw	%si, 2(%rax,%rcx,2)
	movzwl	8(%r11,%rcx,4), %esi
	movw	%si, 4(%rax,%rcx,2)
	movzwl	12(%r11,%rcx,4), %esi
	movw	%si, 6(%rax,%rcx,2)
	movzwl	16(%r11,%rcx,4), %esi
	movw	%si, 8(%rax,%rcx,2)
	movzwl	20(%r11,%rcx,4), %esi
	movw	%si, 10(%rax,%rcx,2)
	movzwl	24(%r11,%rcx,4), %esi
	movw	%si, 12(%rax,%rcx,2)
	movzwl	28(%r11,%rcx,4), %esi
	movw	%si, 14(%rax,%rcx,2)
	addq	$8, %rcx
	cmpl	%ecx, %edx
	jne	LBB172_530
	jmp	LBB172_360
LBB172_531:                             ##   in Loop: Header=BB172_361 Depth=1
	xorl	%ecx, %ecx
	movq	512(%rsp), %rdx                 ## 8-byte Reload
LBB172_532:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	16(%rsp), %rdi                  ## 8-byte Reload
	vmovdqu	(%rdi,%rcx,4), %ymm0
	vmovdqu	32(%rdi,%rcx,4), %ymm1
	vpermq	$148, %ymm0, %ymm2              ## ymm2 = ymm0[0,1,1,2]
	vpshufb	LCPI172_12(%rip), %ymm2, %ymm2  ## ymm2 = ymm2[0,1,0,1,0,1,4,5,4,5,4,5,8,9,8,9,16,17,20,21,20,21,20,21,24,25,24,25,24,25,28,29]
	vperm2i128	$33, %ymm1, %ymm0, %ymm0 ## ymm0 = ymm0[2,3],ymm1[0,1]
	vpshufb	LCPI172_13(%rip), %ymm0, %ymm0  ## ymm0 = ymm0[4,5,4,5,8,9,8,9,8,9,12,13,12,13,12,13,16,17,16,17,16,17,20,21,20,21,20,21,24,25,24,25]
	vpermq	$233, %ymm1, %ymm1              ## ymm1 = ymm1[1,2,2,3]
	vpshufb	LCPI172_14(%rip), %ymm1, %ymm1  ## ymm1 = ymm1[0,1,4,5,4,5,4,5,8,9,8,9,8,9,12,13,20,21,20,21,24,25,24,25,24,25,28,29,28,29,28,29]
	movq	80(%rsp), %rdi                  ## 8-byte Reload
	vmovdqu	%ymm1, 64(%rdi)
	vmovdqu	%ymm0, 32(%rdi)
	vmovdqu	%ymm2, (%rdi)
	addq	$16, %rcx
	addq	$96, %rdi
	movq	%rdi, 80(%rsp)                  ## 8-byte Spill
	cmpq	%rcx, %rdx
	jne	LBB172_532
## %bb.533:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	%rdx, %rcx
	cmpl	$8, 352(%rsp)                   ## 4-byte Folded Reload
	ja	LBB172_535
## %bb.534:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	240(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%r11,%rcx,2), %r11
	movq	288(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rax,%rcx,2), %rax
	movl	464(%rsp), %ecx                 ## 4-byte Reload
	jmp	LBB172_538
LBB172_535:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	200(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rax,%rdx,2), %rax
	movq	320(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%r11,%rdx,2), %r11
	leaq	(%rcx,%rcx,2), %rdx
	leaq	(%rsi,%rdx,2), %rdx
	addq	120(%rsp), %rdx                 ## 8-byte Folded Reload
	movq	32(%rsp), %rsi                  ## 8-byte Reload
	vpxor	%xmm4, %xmm4, %xmm4
	vmovdqa	LCPI172_15(%rip), %ymm5         ## ymm5 = <0,1,4,5,8,9,12,13,u,u,u,u,u,u,u,u,16,17,20,21,24,25,28,29,u,u,u,u,u,u,u,u>
	vmovdqa	LCPI172_16(%rip), %xmm6         ## xmm6 = <4,5,u,u,10,11,8,9,u,u,14,15,12,13,u,u>
	vmovdqa	LCPI172_17(%rip), %ymm7         ## ymm7 = <u,0,0,u,1,1,u,2>
	vmovdqa	LCPI172_18(%rip), %ymm8         ## ymm8 = <0,1,u,u,6,7,2,3,u,u,8,9,4,5,u,u,16,17,u,u,22,23,18,19,u,u,24,25,20,21,u,u>
	vmovdqa	LCPI172_19(%rip), %ymm9         ## ymm9 = <u,u,0,1,u,u,u,u,2,3,u,u,u,u,4,5,u,u,6,7,u,u,u,u,8,9,u,u,u,u,10,11>
	movq	16(%rsp), %rdi                  ## 8-byte Reload
LBB172_536:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rdi,%rcx,4), %ymm0
	vpshufb	%ymm5, %ymm0, %ymm0
	vpblendw	$85, 16(%rdi,%rcx,4), %xmm4, %xmm1 ## xmm1 = mem[0],xmm4[1],mem[2],xmm4[3],mem[4],xmm4[5],mem[6],xmm4[7]
	vpblendw	$85, (%rdi,%rcx,4), %xmm4, %xmm2 ## xmm2 = mem[0],xmm4[1],mem[2],xmm4[3],mem[4],xmm4[5],mem[6],xmm4[7]
	vpackusdw	%xmm1, %xmm2, %xmm1
	vpshufd	$250, %xmm1, %xmm2              ## xmm2 = xmm1[2,2,3,3]
	vpermq	$136, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,0,2]
	vextracti128	$1, %ymm0, %xmm3
	vpunpckhwd	%xmm0, %xmm3, %xmm3     ## xmm3 = xmm3[4],xmm0[4],xmm3[5],xmm0[5],xmm3[6],xmm0[6],xmm3[7],xmm0[7]
	vpshufb	%xmm6, %xmm3, %xmm3
	vpblendw	$146, %xmm2, %xmm3, %xmm2       ## xmm2 = xmm3[0],xmm2[1],xmm3[2,3],xmm2[4],xmm3[5,6],xmm2[7]
	vpermd	%ymm1, %ymm7, %ymm1
	vpshufb	%ymm8, %ymm0, %ymm3
	vpshufb	%ymm9, %ymm0, %ymm0
	vpblendw	$109, %ymm3, %ymm0, %ymm0       ## ymm0 = ymm3[0],ymm0[1],ymm3[2,3],ymm0[4],ymm3[5,6],ymm0[7],ymm3[8],ymm0[9],ymm3[10,11],ymm0[12],ymm3[13,14],ymm0[15]
	vpblendvb	%ymm14, %ymm0, %ymm1, %ymm0
	vmovdqu	%ymm0, (%rdx)
	vmovdqu	%xmm2, 32(%rdx)
	addq	$8, %rcx
	addq	$48, %rdx
	cmpq	%rcx, %rsi
	jne	LBB172_536
## %bb.537:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	44(%rsp), %ecx                  ## 4-byte Reload
LBB172_538:                             ##   in Loop: Header=BB172_361 Depth=1
                                        ## kill: def $ecx killed $ecx def $rcx
	leal	1(%rcx), %edx
	testb	$3, %dl
	je	LBB172_542
## %bb.539:                             ##   in Loop: Header=BB172_361 Depth=1
	leal	1(%rcx), %edx
	movzbl	%dl, %edx
	andl	$3, %edx
	xorl	%esi, %esi
LBB172_540:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11), %edi
	movw	%di, 4(%rax)
	movw	%di, 2(%rax)
	movw	%di, (%rax)
	addq	$4, %r11
	addq	$6, %rax
	incq	%rsi
	cmpl	%esi, %edx
	jne	LBB172_540
## %bb.541:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%ecx, %edx
	subl	%esi, %edx
	jmp	LBB172_543
LBB172_542:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%ecx, %edx
LBB172_543:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpl	$3, %ecx
	jb	LBB172_360
## %bb.544:                             ##   in Loop: Header=BB172_361 Depth=1
	incl	%edx
	addq	$22, %rax
	xorl	%ecx, %ecx
LBB172_545:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11,%rcx,4), %esi
	movw	%si, -18(%rax)
	movw	%si, -20(%rax)
	movw	%si, -22(%rax)
	movzwl	4(%r11,%rcx,4), %esi
	movw	%si, -12(%rax)
	movw	%si, -14(%rax)
	movw	%si, -16(%rax)
	movzwl	8(%r11,%rcx,4), %esi
	movw	%si, -6(%rax)
	movw	%si, -8(%rax)
	movw	%si, -10(%rax)
	movzwl	12(%r11,%rcx,4), %esi
	movw	%si, (%rax)
	movw	%si, -2(%rax)
	movw	%si, -4(%rax)
	addq	$4, %rcx
	addq	$24, %rax
	cmpl	%ecx, %edx
	jne	LBB172_545
	jmp	LBB172_360
LBB172_546:                             ##   in Loop: Header=BB172_361 Depth=1
	xorl	%ecx, %ecx
LBB172_547:                             ##   in Loop: Header=BB172_361 Depth=1
	testb	$1, 384(%rsp)                   ## 1-byte Folded Reload
	je	LBB172_549
## %bb.548:                             ##   in Loop: Header=BB172_361 Depth=1
	vmovdqu	(%r11,%rcx,4), %ymm0
	vpshufb	LCPI172_7(%rip), %ymm0, %ymm1   ## ymm1 = ymm0[0,1,4,5,8,9,12,13,2,3,6,7,10,11,14,15,16,17,20,21,24,25,28,29,18,19,22,23,26,27,30,31]
	vpermq	$68, %ymm1, %ymm2               ## ymm2 = ymm1[0,1,0,1]
	vpshufb	%ymm12, %ymm2, %ymm2
	vmovdqu	(%r11,%rcx,4), %xmm3
	vpshufb	LCPI172_9(%rip), %xmm3, %xmm3   ## xmm3 = xmm3[0,1,4,5,8,9,12,13,u,u,u,u,u,u,u,u]
	vpbroadcastq	%xmm3, %ymm3
	vpshufb	%ymm11, %ymm3, %ymm3
	vpblendd	$170, %ymm2, %ymm3, %ymm2       ## ymm2 = ymm3[0],ymm2[1],ymm3[2],ymm2[3],ymm3[4],ymm2[5],ymm3[6],ymm2[7]
	vpermq	$238, %ymm1, %ymm1              ## ymm1 = ymm1[2,3,2,3]
	vpshufb	%ymm12, %ymm1, %ymm1
	vpshufb	LCPI172_11(%rip), %ymm0, %ymm0  ## ymm0 = ymm0[u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,u,16,17,20,21,24,25,28,29,u,u,u,u,u,u,u,u]
	vpermq	$170, %ymm0, %ymm0              ## ymm0 = ymm0[2,2,2,2]
	vpshufb	%ymm11, %ymm0, %ymm0
	vpblendd	$170, %ymm1, %ymm0, %ymm0       ## ymm0 = ymm0[0],ymm1[1],ymm0[2],ymm1[3],ymm0[4],ymm1[5],ymm0[6],ymm1[7]
	vmovdqu	%ymm0, 32(%rax,%rcx,8)
	vmovdqu	%ymm2, (%rax,%rcx,8)
LBB172_549:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	160(%rsp), %rcx                 ## 8-byte Reload
	cmpq	%rcx, 72(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_360
## %bb.550:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	328(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rax,%rcx,2), %rax
	movq	184(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%r11,%rcx,2), %r11
	movl	152(%rsp), %ecx                 ## 4-byte Reload
	movl	%ecx, %edx
	testb	$1, %dl
	je	LBB172_410
LBB172_551:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%edx, %ecx
LBB172_552:                             ##   in Loop: Header=BB172_361 Depth=1
	testl	%edx, %edx
	je	LBB172_360
## %bb.553:                             ##   in Loop: Header=BB172_361 Depth=1
	incl	%ecx
	xorl	%edx, %edx
LBB172_554:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11,%rdx,4), %esi
	movw	%si, 4(%rax,%rdx,8)
	movw	%si, 2(%rax,%rdx,8)
	movw	%si, (%rax,%rdx,8)
	movzwl	2(%r11,%rdx,4), %esi
	movw	%si, 6(%rax,%rdx,8)
	movzwl	4(%r11,%rdx,4), %esi
	movw	%si, 12(%rax,%rdx,8)
	movw	%si, 10(%rax,%rdx,8)
	movw	%si, 8(%rax,%rdx,8)
	movzwl	6(%r11,%rdx,4), %esi
	movw	%si, 14(%rax,%rdx,8)
	addq	$2, %rdx
	cmpl	%edx, %ecx
	jne	LBB172_554
	jmp	LBB172_360
LBB172_555:                             ##   in Loop: Header=BB172_361 Depth=1
	xorl	%edx, %edx
LBB172_556:                             ##   in Loop: Header=BB172_361 Depth=1
	testb	$1, 384(%rsp)                   ## 1-byte Folded Reload
	je	LBB172_558
## %bb.557:                             ##   in Loop: Header=BB172_361 Depth=1
	leaq	(%rdx,%rdx,2), %rcx
	vmovdqu	32(%r11,%rcx,2), %xmm0
	vpextrw	$4, %xmm0, %esi
	vpshufd	$85, %xmm0, %xmm1               ## xmm1 = xmm0[1,1,1,1]
	vpinsrw	$2, %esi, %xmm1, %xmm1
	vmovdqu	(%r11,%rcx,2), %xmm2
	vmovdqu	16(%r11,%rcx,2), %xmm3
	vpextrw	$5, %xmm0, %ecx
	vpblendw	$8, %xmm10, %xmm1, %xmm1        ## xmm1 = xmm1[0,1,2],xmm10[3],xmm1[4,5,6,7]
	vpinsrw	$4, %ecx, %xmm1, %xmm1
	vpextrw	$6, %xmm0, %ecx
	vpinsrw	$5, %ecx, %xmm1, %xmm1
	vpextrw	$7, %xmm0, %ecx
	vpinsrw	$6, %ecx, %xmm1, %xmm1
	vmovd	%xmm3, %ecx
	vpshufd	$255, %xmm2, %xmm4              ## xmm4 = xmm2[3,3,3,3]
	vpinsrw	$2, %ecx, %xmm4, %xmm4
	vpextrw	$1, %xmm3, %ecx
	vpblendw	$8, %xmm10, %xmm4, %xmm4        ## xmm4 = xmm4[0,1,2],xmm10[3],xmm4[4,5,6,7]
	vpinsrw	$4, %ecx, %xmm4, %xmm4
	vpextrw	$2, %xmm3, %ecx
	vpinsrw	$5, %ecx, %xmm4, %xmm4
	vpextrw	$3, %xmm3, %ecx
	vpinsrw	$6, %ecx, %xmm4, %xmm4
	vpextrw	$7, %xmm3, %ecx
	vpshufd	$238, %xmm3, %xmm3              ## xmm3 = xmm3[2,3,2,3]
	vpblendw	$8, %xmm10, %xmm3, %xmm3        ## xmm3 = xmm3[0,1,2],xmm10[3],xmm3[4,5,6,7]
	vpinsrw	$4, %ecx, %xmm3, %xmm3
	vmovd	%xmm0, %ecx
	vpinsrw	$5, %ecx, %xmm3, %xmm3
	vpextrw	$1, %xmm0, %ecx
	vpinsrw	$6, %ecx, %xmm3, %xmm0
	vpextrw	$3, %xmm2, %ecx
	vpblendw	$8, %xmm10, %xmm2, %xmm3        ## xmm3 = xmm2[0,1,2],xmm10[3],xmm2[4,5,6,7]
	vpinsrw	$4, %ecx, %xmm3, %xmm3
	vpextrw	$4, %xmm2, %ecx
	vpinsrw	$5, %ecx, %xmm3, %xmm3
	vpextrw	$5, %xmm2, %ecx
	vpinsrw	$6, %ecx, %xmm3, %xmm2
	vpblendw	$128, %xmm10, %xmm1, %xmm1      ## xmm1 = xmm1[0,1,2,3,4,5,6],xmm10[7]
	vpblendw	$128, %xmm10, %xmm4, %xmm3      ## xmm3 = xmm4[0,1,2,3,4,5,6],xmm10[7]
	vpblendw	$128, %xmm10, %xmm0, %xmm0      ## xmm0 = xmm0[0,1,2,3,4,5,6],xmm10[7]
	vpblendw	$128, %xmm10, %xmm2, %xmm2      ## xmm2 = xmm2[0,1,2,3,4,5,6],xmm10[7]
	vmovdqu	%xmm2, (%rax,%rdx,8)
	vmovdqu	%xmm0, 32(%rax,%rdx,8)
	vmovdqu	%xmm3, 16(%rax,%rdx,8)
	vmovdqu	%xmm1, 48(%rax,%rdx,8)
LBB172_558:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	160(%rsp), %rcx                 ## 8-byte Reload
	cmpq	%rcx, 72(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_360
## %bb.559:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	328(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rax,%rcx,2), %rax
	movq	216(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%r11,%rcx,2), %r11
	movl	152(%rsp), %ecx                 ## 4-byte Reload
	movl	%ecx, %edx
	testb	$1, %dl
	je	LBB172_430
LBB172_560:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	%edx, %ecx
LBB172_561:                             ##   in Loop: Header=BB172_361 Depth=1
	testl	%edx, %edx
	je	LBB172_360
## %bb.562:                             ##   in Loop: Header=BB172_361 Depth=1
	incl	%ecx
	xorl	%edx, %edx
LBB172_563:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzwl	(%r11), %esi
	movw	%si, (%rax,%rdx,8)
	movzwl	2(%r11), %esi
	movw	%si, 2(%rax,%rdx,8)
	movzwl	4(%r11), %esi
	movw	%si, 4(%rax,%rdx,8)
	movw	$-1, 6(%rax,%rdx,8)
	movzwl	6(%r11), %esi
	movw	%si, 8(%rax,%rdx,8)
	movzwl	8(%r11), %esi
	movw	%si, 10(%rax,%rdx,8)
	movzwl	10(%r11), %esi
	movw	%si, 12(%rax,%rdx,8)
	movw	$-1, 14(%rax,%rdx,8)
	addq	$2, %rdx
	addq	$12, %r11
	cmpl	%edx, %ecx
	jne	LBB172_563
	jmp	LBB172_360
LBB172_564:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	448(%rsp), %r8                  ## 8-byte Reload
	xorl	%edi, %edi
LBB172_565:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rdx
	vmovdqu	-96(%rsi,%rdi,2), %ymm0
	vpermq	$68, %ymm0, %ymm1               ## ymm1 = ymm0[0,1,0,1]
	vmovdqa	LCPI172_21(%rip), %ymm3         ## ymm3 = [0,1,0,1,0,1,2,3,2,3,2,3,4,5,4,5,4,5,6,7,6,7,6,7,8,9,8,9,8,9,10,11]
	vpshufb	%ymm3, %ymm1, %ymm1
	vpermq	$238, %ymm0, %ymm2              ## ymm2 = ymm0[2,3,2,3]
	vmovdqa	LCPI172_22(%rip), %ymm4         ## ymm4 = [4,5,6,7,6,7,6,7,8,9,8,9,8,9,10,11,10,11,10,11,12,13,12,13,12,13,14,15,14,15,14,15]
	vpshufb	%ymm4, %ymm2, %ymm2
	vmovdqa	LCPI172_23(%rip), %ymm5         ## ymm5 = [10,11,10,11,12,13,12,13,12,13,14,15,14,15,14,15,0,1,0,1,0,1,2,3,2,3,2,3,4,5,4,5]
	vpshufb	%ymm5, %ymm0, %ymm0
	movq	80(%rsp), %rcx                  ## 8-byte Reload
	vmovdqu	%ymm0, 32(%rcx)
	vmovdqu	%ymm2, 64(%rcx)
	vmovdqu	%ymm1, (%rcx)
	vmovdqu	-64(%rsi,%rdi,2), %ymm0
	vpermq	$68, %ymm0, %ymm1               ## ymm1 = ymm0[0,1,0,1]
	vpshufb	%ymm3, %ymm1, %ymm1
	vpermq	$238, %ymm0, %ymm2              ## ymm2 = ymm0[2,3,2,3]
	vpshufb	%ymm4, %ymm2, %ymm2
	vpshufb	%ymm5, %ymm0, %ymm0
	vmovdqu	%ymm0, 128(%rcx)
	vmovdqu	%ymm2, 160(%rcx)
	vmovdqu	%ymm1, 96(%rcx)
	vmovdqu	-32(%rsi,%rdi,2), %ymm0
	vpermq	$68, %ymm0, %ymm1               ## ymm1 = ymm0[0,1,0,1]
	vpshufb	%ymm3, %ymm1, %ymm1
	vpermq	$238, %ymm0, %ymm2              ## ymm2 = ymm0[2,3,2,3]
	vpshufb	%ymm4, %ymm2, %ymm2
	vpshufb	%ymm5, %ymm0, %ymm0
	vmovdqu	%ymm0, 224(%rcx)
	vmovdqu	%ymm2, 256(%rcx)
	vmovdqu	%ymm1, 192(%rcx)
	vmovdqu	(%rsi,%rdi,2), %ymm0
	vpermq	$68, %ymm0, %ymm1               ## ymm1 = ymm0[0,1,0,1]
	vpshufb	%ymm3, %ymm1, %ymm1
	vpermq	$238, %ymm0, %ymm2              ## ymm2 = ymm0[2,3,2,3]
	vpshufb	%ymm4, %ymm2, %ymm2
	vpshufb	%ymm5, %ymm0, %ymm0
	vmovdqu	%ymm0, 320(%rcx)
	vmovdqu	%ymm2, 352(%rcx)
	vmovdqu	%ymm1, 288(%rcx)
	addq	$64, %rdi
	addq	$384, %rcx                      ## imm = 0x180
	movq	%rcx, 80(%rsp)                  ## 8-byte Spill
	addq	$-4, %r8
	jne	LBB172_565
LBB172_566:                             ##   in Loop: Header=BB172_361 Depth=1
	cmpq	$0, 488(%rsp)                   ## 8-byte Folded Reload
	je	LBB172_569
## %bb.567:                             ##   in Loop: Header=BB172_361 Depth=1
	addq	%r15, %r15
	leaq	(%r15,%rdi,2), %rcx
	addq	%rbx, %rcx
	leaq	(%rdi,%rdi,2), %rdx
	leaq	(%r10,%rdx,2), %rdx
	addq	120(%rsp), %rdx                 ## 8-byte Folded Reload
	xorl	%esi, %esi
LBB172_568:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rcx), %ymm0
	vpermq	$68, %ymm0, %ymm1               ## ymm1 = ymm0[0,1,0,1]
	vpshufb	LCPI172_21(%rip), %ymm1, %ymm1  ## ymm1 = ymm1[0,1,0,1,0,1,2,3,2,3,2,3,4,5,4,5,20,21,22,23,22,23,22,23,24,25,24,25,24,25,26,27]
	vpermq	$238, %ymm0, %ymm2              ## ymm2 = ymm0[2,3,2,3]
	vpshufb	LCPI172_22(%rip), %ymm2, %ymm2  ## ymm2 = ymm2[4,5,6,7,6,7,6,7,8,9,8,9,8,9,10,11,26,27,26,27,28,29,28,29,28,29,30,31,30,31,30,31]
	vpshufb	LCPI172_23(%rip), %ymm0, %ymm0  ## ymm0 = ymm0[10,11,10,11,12,13,12,13,12,13,14,15,14,15,14,15,16,17,16,17,16,17,18,19,18,19,18,19,20,21,20,21]
	vmovdqu	%ymm0, 32(%rdx,%rsi)
	vmovdqu	%ymm2, 64(%rdx,%rsi)
	vmovdqu	%ymm1, (%rdx,%rsi)
	addq	$32, %rcx
	addq	$96, %rsi
	cmpq	%rsi, 112(%rsp)                 ## 8-byte Folded Reload
	jne	LBB172_568
LBB172_569:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	248(%rsp), %rcx                 ## 8-byte Reload
	cmpq	%rcx, 72(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_360
## %bb.570:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	248(%rsp), %rcx                 ## 8-byte Reload
	testb	$8, 72(%rsp)                    ## 1-byte Folded Reload
	jne	LBB172_572
## %bb.571:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	248(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%r11,%rcx,2), %r11
	movq	432(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rax,%rcx,2), %rax
	movl	172(%rsp), %ecx                 ## 4-byte Reload
	jmp	LBB172_378
LBB172_572:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	216(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rax,%rdx,2), %rax
	movq	160(%rsp), %rsi                 ## 8-byte Reload
	leaq	(%r11,%rsi,2), %r11
	leaq	(%rcx,%rcx,2), %rdx
	leaq	(%r10,%rdx,2), %rdx
	addq	120(%rsp), %rdx                 ## 8-byte Folded Reload
	vmovdqa	LCPI172_24(%rip), %ymm3         ## ymm3 = [0,1,128,128,0,1,2,3,128,128,2,3,4,5,128,128,128,128,128,128,22,23,128,128,128,128,24,25,128,128,128,128]
	vmovdqa	LCPI172_25(%rip), %ymm4         ## ymm4 = [128,128,0,1,128,128,128,128,2,3,128,128,128,128,4,5,20,21,22,23,128,128,22,23,24,25,128,128,24,25,26,27]
	vmovdqa	LCPI172_26(%rip), %xmm5         ## xmm5 = [10,11,10,11,12,13,12,13,12,13,14,15,14,15,14,15]
	movq	16(%rsp), %rdi                  ## 8-byte Reload
LBB172_573:                             ##   Parent Loop BB172_361 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vbroadcasti128	(%rdi,%rcx,2), %ymm0    ## ymm0 = mem[0,1,0,1]
	vpshufb	%ymm3, %ymm0, %ymm1
	vpermq	$78, %ymm0, %ymm2               ## ymm2 = ymm0[2,3,0,1]
	vpshufb	%ymm4, %ymm2, %ymm2
	vpor	%ymm1, %ymm2, %ymm1
	vpshufb	%xmm5, %xmm0, %xmm0
	vmovdqu	%xmm0, 32(%rdx)
	vmovdqu	%ymm1, (%rdx)
	addq	$8, %rcx
	addq	$48, %rdx
	cmpq	%rcx, %rsi
	jne	LBB172_573
## %bb.574:                             ##   in Loop: Header=BB172_361 Depth=1
	movl	152(%rsp), %ecx                 ## 4-byte Reload
                                        ## kill: def $ecx killed $ecx def $rcx
	cmpq	%rsi, 72(%rsp)                  ## 8-byte Folded Reload
	je	LBB172_360
	jmp	LBB172_379
LBB172_575:                             ##   in Loop: Header=BB172_361 Depth=1
	movq	304(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%r11,%rcx,2), %r11
	movq	416(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rax,%rcx,2), %rax
	movl	424(%rsp), %ecx                 ## 4-byte Reload
	jmp	LBB172_368
LBB172_576:
	movq	%rbx, %rdi
	callq	_free
	leaq	L_.str.131(%rip), %rcx
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
	movq	144(%rsp), %rax                 ## 8-byte Reload
	movq	256(%rsp), %rcx                 ## 8-byte Reload
	movl	%eax, 12(%rcx)
	jmp	LBB172_79
LBB172_577:
	movq	%rbx, %rdi
	vzeroupper
	callq	_free
	movq	144(%rsp), %rax                 ## 8-byte Reload
	movq	256(%rsp), %rdx                 ## 8-byte Reload
	movl	%eax, 12(%rdx)
	movq	120(%rsp), %rbx                 ## 8-byte Reload
LBB172_578:
	movl	(%rdx), %eax
	movl	%eax, (%r13)
	movl	4(%rdx), %eax
	movq	688(%rsp), %rcx                 ## 8-byte Reload
	movl	%eax, (%rcx)
	movq	696(%rsp), %rcx                 ## 8-byte Reload
	testq	%rcx, %rcx
	je	LBB172_580
## %bb.579:
	movl	8(%rdx), %eax
	movl	%eax, (%rcx)
LBB172_580:
	xorl	%edi, %edi
LBB172_581:
	callq	_free
	movq	720(%rsp), %rdi
	callq	_free
	movq	712(%rsp), %rdi
	callq	_free
	jmp	LBB172_80
LBB172_582:
	callq	__ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi.cold.2
LBB172_583:
	xorl	%eax, %eax
	jmp	LBB172_81
LBB172_584:
	callq	__ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi.cold.1
	jmp	LBB172_583
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L172_0_set_363, LBB172_363-LJTI172_0
.set L172_0_set_373, LBB172_373-LJTI172_0
.set L172_0_set_383, LBB172_383-LJTI172_0
.set L172_0_set_392, LBB172_392-LJTI172_0
.set L172_0_set_395, LBB172_395-LJTI172_0
.set L172_0_set_400, LBB172_400-LJTI172_0
.set L172_0_set_405, LBB172_405-LJTI172_0
.set L172_0_set_411, LBB172_411-LJTI172_0
.set L172_0_set_418, LBB172_418-LJTI172_0
.set L172_0_set_425, LBB172_425-LJTI172_0
.set L172_0_set_431, LBB172_431-LJTI172_0
.set L172_0_set_436, LBB172_436-LJTI172_0
LJTI172_0:
	.long	L172_0_set_363
	.long	L172_0_set_373
	.long	L172_0_set_383
	.long	L172_0_set_392
	.long	L172_0_set_392
	.long	L172_0_set_392
	.long	L172_0_set_392
	.long	L172_0_set_395
	.long	L172_0_set_392
	.long	L172_0_set_400
	.long	L172_0_set_405
	.long	L172_0_set_392
	.long	L172_0_set_392
	.long	L172_0_set_392
	.long	L172_0_set_392
	.long	L172_0_set_411
	.long	L172_0_set_418
	.long	L172_0_set_392
	.long	L172_0_set_425
	.long	L172_0_set_392
	.long	L172_0_set_392
	.long	L172_0_set_392
	.long	L172_0_set_392
	.long	L172_0_set_431
	.long	L172_0_set_436
.set L172_1_set_86, LBB172_86-LJTI172_1
.set L172_1_set_96, LBB172_96-LJTI172_1
.set L172_1_set_106, LBB172_106-LJTI172_1
.set L172_1_set_116, LBB172_116-LJTI172_1
.set L172_1_set_119, LBB172_119-LJTI172_1
.set L172_1_set_128, LBB172_128-LJTI172_1
.set L172_1_set_137, LBB172_137-LJTI172_1
.set L172_1_set_145, LBB172_145-LJTI172_1
.set L172_1_set_153, LBB172_153-LJTI172_1
.set L172_1_set_161, LBB172_161-LJTI172_1
.set L172_1_set_169, LBB172_169-LJTI172_1
.set L172_1_set_176, LBB172_176-LJTI172_1
LJTI172_1:
	.long	L172_1_set_86
	.long	L172_1_set_96
	.long	L172_1_set_106
	.long	L172_1_set_116
	.long	L172_1_set_116
	.long	L172_1_set_116
	.long	L172_1_set_116
	.long	L172_1_set_119
	.long	L172_1_set_116
	.long	L172_1_set_128
	.long	L172_1_set_137
	.long	L172_1_set_116
	.long	L172_1_set_116
	.long	L172_1_set_116
	.long	L172_1_set_116
	.long	L172_1_set_145
	.long	L172_1_set_153
	.long	L172_1_set_116
	.long	L172_1_set_161
	.long	L172_1_set_116
	.long	L172_1_set_116
	.long	L172_1_set_116
	.long	L172_1_set_116
	.long	L172_1_set_169
	.long	L172_1_set_176
	.end_data_region
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL10stbi__get8P13stbi__context
__ZL10stbi__get8P13stbi__context:       ## @_ZL10stbi__get8P13stbi__context
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	movq	192(%rdi), %rax
	cmpq	200(%rdi), %rax
	jae	LBB173_2
## %bb.1:
	leaq	1(%rax), %rcx
	movq	%rcx, 192(%rbx)
	movb	(%rax), %al
	jmp	LBB173_8
LBB173_2:
	cmpl	$0, 48(%rbx)
	je	LBB173_3
## %bb.4:
	movq	40(%rbx), %rdi
	leaq	56(%rbx), %rsi
	movl	52(%rbx), %edx
	callq	*16(%rbx)
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB173_5
## %bb.6:
	cltq
	leaq	(%rbx,%rax), %rcx
	addq	$56, %rcx
	movb	56(%rbx), %al
	jmp	LBB173_7
LBB173_3:
	xorl	%eax, %eax
	jmp	LBB173_8
LBB173_5:
	movl	$0, 48(%rbx)
	leaq	57(%rbx), %rcx
	movb	$0, 56(%rbx)
	xorl	%eax, %eax
LBB173_7:
	movq	%rcx, 200(%rbx)
	leaq	57(%rbx), %rcx
	movq	%rcx, 192(%rbx)
LBB173_8:
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbi__parse_png_fileP9stbi__pngii
__ZL20stbi__parse_png_fileP9stbi__pngii: ## @_ZL20stbi__parse_png_fileP9stbi__pngii
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	$5384, %eax                     ## imm = 0x1508
	callq	____chkstk_darwin
	subq	%rax, %rsp
	popq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, -5328(%rbp)               ## 4-byte Spill
	movl	%esi, -5220(%rbp)               ## 4-byte Spill
	movq	%rdi, %r15
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movb	$0, -5234(%rbp)
	movw	$0, -5236(%rbp)
	movq	(%rdi), %r9
	leaq	192(%r9), %r13
	leaq	200(%r9), %rbx
	leaq	48(%r9), %r8
	leaq	56(%r9), %rsi
	leaq	57(%r9), %r14
	vpxor	%xmm0, %xmm0, %xmm0
	vmovdqu	%xmm0, 8(%rdi)
	movq	$0, 24(%rdi)
	movq	192(%r9), %rcx
	movq	200(%r9), %rax
	cmpq	%rax, %rcx
	jae	LBB174_2
## %bb.1:
	leaq	1(%rcx), %rdx
	movq	%rdx, (%r13)
	movb	(%rcx), %cl
	cmpb	$-119, %cl
	je	LBB174_7
	jmp	LBB174_62
LBB174_2:
	cmpl	$0, (%r8)
	je	LBB174_62
## %bb.3:
	movq	%r13, -5176(%rbp)               ## 8-byte Spill
	movq	%r14, -5208(%rbp)               ## 8-byte Spill
	movq	%r8, %r14
	movq	40(%r9), %rdi
	movl	52(%r9), %edx
	movq	%rsi, %r12
	movq	%r9, %r13
	callq	*16(%r9)
	movq	%r13, %r9
	movl	192(%r13), %ecx
	subl	208(%r13), %ecx
	addl	%ecx, 184(%r13)
	testl	%eax, %eax
	je	LBB174_5
## %bb.4:
	cltq
	addq	%r9, %rax
	addq	$56, %rax
	movb	56(%r9), %cl
	movq	%r14, %r8
	movq	%r12, %rsi
	movq	-5208(%rbp), %r14               ## 8-byte Reload
	jmp	LBB174_6
LBB174_5:
	movq	%r14, %r8
	movl	$0, (%r14)
	movb	$0, (%r12)
	xorl	%ecx, %ecx
	movq	-5208(%rbp), %r14               ## 8-byte Reload
	movq	%r14, %rax
	movq	%r12, %rsi
LBB174_6:
	movq	-5176(%rbp), %r13               ## 8-byte Reload
	movq	%rax, (%rbx)
	movq	%r14, (%r13)
	movq	%r14, %rdx
	cmpb	$-119, %cl
	jne	LBB174_62
LBB174_7:
	cmpq	%rax, %rdx
	jae	LBB174_9
## %bb.8:
	leaq	1(%rdx), %rdi
	movq	%rdi, (%r13)
	movb	(%rdx), %cl
	cmpb	$80, %cl
	jne	LBB174_62
	jmp	LBB174_14
LBB174_9:
	cmpl	$0, (%r8)
	je	LBB174_62
## %bb.10:
	movq	%r15, -5192(%rbp)               ## 8-byte Spill
	movq	%r8, %r15
	movq	%r13, -5176(%rbp)               ## 8-byte Spill
	movq	%rbx, %r13
	movq	40(%r9), %rdi
	movl	52(%r9), %edx
	movq	%rsi, %r12
	movq	%r9, %rbx
	callq	*16(%r9)
	movq	%rbx, %r9
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB174_12
## %bb.11:
	cltq
	addq	%r9, %rax
	addq	$56, %rax
	movb	56(%r9), %cl
	movq	%r13, %rbx
	movq	%r15, %r8
	jmp	LBB174_13
LBB174_12:
	movq	%r15, %r8
	movl	$0, (%r15)
	movb	$0, (%r12)
	xorl	%ecx, %ecx
	movq	%r14, %rax
	movq	%r13, %rbx
LBB174_13:
	movq	%r12, %rsi
	movq	%rax, (%rbx)
	movq	-5176(%rbp), %r13               ## 8-byte Reload
	movq	%r14, (%r13)
	movq	%r14, %rdi
	movq	-5192(%rbp), %r15               ## 8-byte Reload
	cmpb	$80, %cl
	jne	LBB174_62
LBB174_14:
	cmpq	%rax, %rdi
	jae	LBB174_16
## %bb.15:
	leaq	1(%rdi), %rdx
	movq	%rdx, (%r13)
	movb	(%rdi), %cl
	cmpb	$78, %cl
	jne	LBB174_62
	jmp	LBB174_21
LBB174_16:
	cmpl	$0, (%r8)
	je	LBB174_62
## %bb.17:
	movq	%r15, -5192(%rbp)               ## 8-byte Spill
	movq	%r8, %r15
	movq	%r13, -5176(%rbp)               ## 8-byte Spill
	movq	%rbx, %r13
	movq	40(%r9), %rdi
	movl	52(%r9), %edx
	movq	%rsi, %r12
	movq	%r9, %rbx
	callq	*16(%r9)
	movq	%rbx, %r9
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB174_19
## %bb.18:
	cltq
	addq	%r9, %rax
	addq	$56, %rax
	movb	56(%r9), %cl
	movq	%r13, %rbx
	movq	%r15, %r8
	jmp	LBB174_20
LBB174_19:
	movq	%r15, %r8
	movl	$0, (%r15)
	movb	$0, (%r12)
	xorl	%ecx, %ecx
	movq	%r14, %rax
	movq	%r13, %rbx
LBB174_20:
	movq	%r12, %rsi
	movq	%rax, (%rbx)
	movq	-5176(%rbp), %r13               ## 8-byte Reload
	movq	%r14, (%r13)
	movq	%r14, %rdx
	movq	-5192(%rbp), %r15               ## 8-byte Reload
	cmpb	$78, %cl
	jne	LBB174_62
LBB174_21:
	cmpq	%rax, %rdx
	jae	LBB174_23
## %bb.22:
	leaq	1(%rdx), %rdi
	movq	%rdi, (%r13)
	movb	(%rdx), %cl
	cmpb	$71, %cl
	jne	LBB174_62
	jmp	LBB174_28
LBB174_23:
	cmpl	$0, (%r8)
	je	LBB174_62
## %bb.24:
	movq	%r15, -5192(%rbp)               ## 8-byte Spill
	movq	%r8, %r15
	movq	%r13, -5176(%rbp)               ## 8-byte Spill
	movq	%rbx, %r13
	movq	40(%r9), %rdi
	movl	52(%r9), %edx
	movq	%rsi, %r12
	movq	%r9, %rbx
	callq	*16(%r9)
	movq	%rbx, %r9
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB174_26
## %bb.25:
	cltq
	addq	%r9, %rax
	addq	$56, %rax
	movb	56(%r9), %cl
	movq	%r13, %rbx
	movq	%r15, %r8
	jmp	LBB174_27
LBB174_26:
	movq	%r15, %r8
	movl	$0, (%r15)
	movb	$0, (%r12)
	xorl	%ecx, %ecx
	movq	%r14, %rax
	movq	%r13, %rbx
LBB174_27:
	movq	%r12, %rsi
	movq	%rax, (%rbx)
	movq	-5176(%rbp), %r13               ## 8-byte Reload
	movq	%r14, (%r13)
	movq	%r14, %rdi
	movq	-5192(%rbp), %r15               ## 8-byte Reload
	cmpb	$71, %cl
	jne	LBB174_62
LBB174_28:
	cmpq	%rax, %rdi
	jae	LBB174_30
## %bb.29:
	leaq	1(%rdi), %rdx
	movq	%rdx, (%r13)
	movb	(%rdi), %cl
	jmp	LBB174_35
LBB174_30:
	cmpl	$0, (%r8)
	je	LBB174_62
## %bb.31:
	movq	%r15, -5192(%rbp)               ## 8-byte Spill
	movq	%r8, %r15
	movq	%r13, -5176(%rbp)               ## 8-byte Spill
	movq	%rbx, %r13
	movq	40(%r9), %rdi
	movl	52(%r9), %edx
	movq	%rsi, %r12
	movq	%r9, %rbx
	callq	*16(%r9)
	movq	%rbx, %r9
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB174_33
## %bb.32:
	cltq
	addq	%r9, %rax
	addq	$56, %rax
	movb	56(%r9), %cl
	movq	%r13, %rbx
	movq	%r15, %r8
	jmp	LBB174_34
LBB174_33:
	movq	%r15, %r8
	movl	$0, (%r15)
	movb	$0, (%r12)
	xorl	%ecx, %ecx
	movq	%r14, %rax
	movq	%r13, %rbx
LBB174_34:
	movq	%r12, %rsi
	movq	%rax, (%rbx)
	movq	-5176(%rbp), %r13               ## 8-byte Reload
	movq	%r14, (%r13)
	movq	%r14, %rdx
	movq	-5192(%rbp), %r15               ## 8-byte Reload
LBB174_35:
	cmpb	$13, %cl
	jne	LBB174_62
## %bb.36:
	cmpq	%rax, %rdx
	jae	LBB174_38
## %bb.37:
	leaq	1(%rdx), %rdi
	movq	%rdi, (%r13)
	movb	(%rdx), %cl
	jmp	LBB174_43
LBB174_38:
	cmpl	$0, (%r8)
	je	LBB174_62
## %bb.39:
	movq	%r15, -5192(%rbp)               ## 8-byte Spill
	movq	%r8, %r15
	movq	%r13, -5176(%rbp)               ## 8-byte Spill
	movq	%rbx, %r13
	movq	40(%r9), %rdi
	movl	52(%r9), %edx
	movq	%rsi, %r12
	movq	%r9, %rbx
	callq	*16(%r9)
	movq	%rbx, %r9
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB174_41
## %bb.40:
	cltq
	addq	%r9, %rax
	addq	$56, %rax
	movb	56(%r9), %cl
	movq	%r13, %rbx
	movq	%r15, %r8
	jmp	LBB174_42
LBB174_41:
	movq	%r15, %r8
	movl	$0, (%r15)
	movb	$0, (%r12)
	xorl	%ecx, %ecx
	movq	%r14, %rax
	movq	%r13, %rbx
LBB174_42:
	movq	%r12, %rsi
	movq	%rax, (%rbx)
	movq	-5176(%rbp), %r13               ## 8-byte Reload
	movq	%r14, (%r13)
	movq	%r14, %rdi
	movq	-5192(%rbp), %r15               ## 8-byte Reload
LBB174_43:
	cmpb	$10, %cl
	jne	LBB174_62
## %bb.44:
	cmpq	%rax, %rdi
	jae	LBB174_46
## %bb.45:
	leaq	1(%rdi), %rdx
	movq	%rdx, (%r13)
	movb	(%rdi), %cl
	jmp	LBB174_51
LBB174_46:
	cmpl	$0, (%r8)
	je	LBB174_62
## %bb.47:
	movq	%r15, -5192(%rbp)               ## 8-byte Spill
	movq	%r8, %r15
	movq	%r13, -5176(%rbp)               ## 8-byte Spill
	movq	%rbx, %r13
	movq	40(%r9), %rdi
	movl	52(%r9), %edx
	movq	%rsi, %r12
	movq	%r9, %rbx
	callq	*16(%r9)
	movq	%rbx, %r9
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB174_49
## %bb.48:
	cltq
	addq	%r9, %rax
	addq	$56, %rax
	movb	56(%r9), %cl
	movq	%r13, %rbx
	movq	%r15, %r8
	jmp	LBB174_50
LBB174_49:
	movq	%r15, %r8
	movl	$0, (%r15)
	movb	$0, (%r12)
	xorl	%ecx, %ecx
	movq	%r14, %rax
	movq	%r13, %rbx
LBB174_50:
	movq	%r12, %rsi
	movq	%rax, (%rbx)
	movq	-5176(%rbp), %r13               ## 8-byte Reload
	movq	%r14, (%r13)
	movq	%r14, %rdx
	movq	-5192(%rbp), %r15               ## 8-byte Reload
LBB174_51:
	cmpb	$26, %cl
	jne	LBB174_62
## %bb.52:
	cmpq	%rax, %rdx
	jae	LBB174_54
## %bb.53:
	leaq	1(%rdx), %rax
	movq	%rax, (%r13)
	movb	(%rdx), %al
	jmp	LBB174_59
LBB174_54:
	cmpl	$0, (%r8)
	je	LBB174_62
## %bb.55:
	movq	%r15, -5192(%rbp)               ## 8-byte Spill
	movq	%r8, %r15
	movq	%r13, -5176(%rbp)               ## 8-byte Spill
	movq	%rbx, %r13
	movq	40(%r9), %rdi
	movl	52(%r9), %edx
	movq	%rsi, %r12
	movq	%r9, %rbx
	callq	*16(%r9)
	movq	%rbx, %r9
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB174_57
## %bb.56:
	cltq
	leaq	(%r9,%rax), %rcx
	addq	$56, %rcx
	movb	56(%r9), %al
	movq	%r13, %rbx
	movq	%r15, %r8
	movq	%r12, %rsi
	jmp	LBB174_58
LBB174_57:
	movq	%r15, %r8
	movl	$0, (%r15)
	movq	%r12, %rsi
	movb	$0, (%r12)
	xorl	%eax, %eax
	movq	%r14, %rcx
	movq	%r13, %rbx
LBB174_58:
	movq	%rcx, (%rbx)
	movq	-5176(%rbp), %r13               ## 8-byte Reload
	movq	%r14, (%r13)
	movq	-5192(%rbp), %r15               ## 8-byte Reload
LBB174_59:
	cmpb	$10, %al
	jne	LBB174_62
## %bb.60:
	movq	%r15, -5192(%rbp)               ## 8-byte Spill
	movl	$1, %r15d
	cmpl	$1, -5220(%rbp)                 ## 4-byte Folded Reload
	je	LBB174_65
## %bb.61:
	movq	%r14, -5208(%rbp)               ## 8-byte Spill
	movq	%rsi, -5232(%rbp)               ## 8-byte Spill
	movq	%r8, -5216(%rbp)                ## 8-byte Spill
	movq	%rbx, -5176(%rbp)               ## 8-byte Spill
	movq	-5192(%rbp), %rax               ## 8-byte Reload
	addq	$8, %rax
	movq	%rax, -5264(%rbp)               ## 8-byte Spill
	movl	$1, %r12d
	xorl	%eax, %eax
	movq	%rax, -5280(%rbp)               ## 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, -5304(%rbp)               ## 8-byte Spill
	movl	$0, -5292(%rbp)                 ## 4-byte Folded Spill
	xorl	%eax, %eax
	movq	%rax, -5272(%rbp)               ## 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, -5320(%rbp)               ## 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, -5248(%rbp)               ## 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, -5312(%rbp)               ## 8-byte Spill
	movl	$0, -5196(%rbp)                 ## 4-byte Folded Spill
	movq	%r9, -5184(%rbp)                ## 8-byte Spill
	jmp	LBB174_69
LBB174_62:
	leaq	L_.str.112(%rip), %rcx
LBB174_63:
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
LBB174_64:
	xorl	%r15d, %r15d
LBB174_65:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB174_265
## %bb.66:
	movl	%r15d, %eax
	addq	$5384, %rsp                     ## imm = 0x1508
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB174_67:                              ##   in Loop: Header=BB174_69 Depth=1
	movq	-5176(%rbp), %rax               ## 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, (%r13)
LBB174_68:                              ##   in Loop: Header=BB174_69 Depth=1
	movq	%r8, %rdi
	callq	__ZL13stbi__get16beP13stbi__context
	movq	-5184(%rbp), %rdi               ## 8-byte Reload
	callq	__ZL13stbi__get16beP13stbi__context
	movq	-5184(%rbp), %r9                ## 8-byte Reload
LBB174_69:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB174_83 Depth 2
                                        ##     Child Loop BB174_169 Depth 2
                                        ##     Child Loop BB174_162 Depth 2
                                        ##     Child Loop BB174_115 Depth 2
                                        ##     Child Loop BB174_99 Depth 2
	movq	%r9, %rdi
	movq	%r9, %rbx
	callq	__ZL13stbi__get16beP13stbi__context
	movl	%eax, %r15d
	shll	$16, %r15d
	movq	%rbx, %rdi
	callq	__ZL13stbi__get16beP13stbi__context
	movl	%eax, %r14d
	addl	%r15d, %r14d
	movq	%rbx, %rdi
	callq	__ZL13stbi__get16beP13stbi__context
	movl	%eax, %r15d
	shll	$16, %r15d
	movq	%rbx, %rdi
	callq	__ZL13stbi__get16beP13stbi__context
	addl	%r15d, %eax
	cmpl	$1229472849, %eax               ## imm = 0x49484451
	jle	LBB174_90
## %bb.70:                              ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$1229472850, %eax               ## imm = 0x49484452
	movq	-5176(%rbp), %rdx               ## 8-byte Reload
	je	LBB174_102
## %bb.71:                              ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$1347179589, %eax               ## imm = 0x504C5445
	movq	-5216(%rbp), %r9                ## 8-byte Reload
	movq	-5192(%rbp), %rsi               ## 8-byte Reload
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	je	LBB174_108
## %bb.72:                              ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$1951551059, %eax               ## imm = 0x74524E53
	movq	%r14, %rdi
	jne	LBB174_143
## %bb.73:                              ##   in Loop: Header=BB174_69 Depth=1
	testl	%r12d, %r12d
	jne	LBB174_217
## %bb.74:                              ##   in Loop: Header=BB174_69 Depth=1
	movq	-5264(%rbp), %rax               ## 8-byte Reload
	cmpq	$0, (%rax)
	jne	LBB174_219
## %bb.75:                              ##   in Loop: Header=BB174_69 Depth=1
	cmpb	$0, -5196(%rbp)                 ## 1-byte Folded Reload
	je	LBB174_157
## %bb.76:                              ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$2, -5220(%rbp)                 ## 4-byte Folded Reload
	movq	-5272(%rbp), %rax               ## 8-byte Reload
	je	LBB174_229
## %bb.77:                              ##   in Loop: Header=BB174_69 Depth=1
	testl	%eax, %eax
	je	LBB174_230
## %bb.78:                              ##   in Loop: Header=BB174_69 Depth=1
	cmpl	%edi, %eax
	jb	LBB174_224
## %bb.79:                              ##   in Loop: Header=BB174_69 Depth=1
	movb	$4, %al
	movl	%eax, -5196(%rbp)               ## 4-byte Spill
	xorl	%r12d, %r12d
	testl	%edi, %edi
	je	LBB174_68
## %bb.80:                              ##   in Loop: Header=BB174_69 Depth=1
	movl	%edi, %eax
	movq	(%r13), %rbx
	movq	(%rdx), %r10
	shlq	$2, %rax
	xorl	%r15d, %r15d
	movq	-5232(%rbp), %rsi               ## 8-byte Reload
	jmp	LBB174_83
LBB174_81:                              ##   in Loop: Header=BB174_83 Depth=2
	leaq	1(%rbx), %rcx
	movq	%rcx, (%r13)
	movzbl	(%rbx), %edx
	movq	%rcx, %rbx
LBB174_82:                              ##   in Loop: Header=BB174_83 Depth=2
	movl	%r15d, %ecx
	andl	$-4, %ecx
	movb	%dl, -5165(%rbp,%rcx)
	addq	$4, %r15
	cmpq	%r15, %rax
	je	LBB174_68
LBB174_83:                              ##   Parent Loop BB174_69 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpq	%r10, %rbx
	jb	LBB174_81
## %bb.84:                              ##   in Loop: Header=BB174_83 Depth=2
	cmpl	$0, (%r9)
	je	LBB174_87
## %bb.85:                              ##   in Loop: Header=BB174_83 Depth=2
	movq	%rax, %r12
	movq	%r13, %r14
	movq	40(%r8), %rdi
	movl	52(%r8), %edx
	movq	%rsi, %r13
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	callq	*16(%rax)
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	movl	192(%r8), %ecx
	subl	208(%r8), %ecx
	addl	%ecx, 184(%r8)
	testl	%eax, %eax
	je	LBB174_88
## %bb.86:                              ##   in Loop: Header=BB174_83 Depth=2
	cltq
	leaq	(%r8,%rax), %r10
	addq	$56, %r10
	movzbl	56(%r8), %edx
	movq	-5176(%rbp), %rcx               ## 8-byte Reload
	movq	-5216(%rbp), %r9                ## 8-byte Reload
	movq	%r13, %rsi
	movq	-5208(%rbp), %rbx               ## 8-byte Reload
	jmp	LBB174_89
LBB174_87:                              ##   in Loop: Header=BB174_83 Depth=2
	xorl	%edx, %edx
	jmp	LBB174_82
LBB174_88:                              ##   in Loop: Header=BB174_83 Depth=2
	movq	-5216(%rbp), %r9                ## 8-byte Reload
	movl	$0, (%r9)
	movb	$0, (%r13)
	xorl	%edx, %edx
	movq	-5208(%rbp), %rbx               ## 8-byte Reload
	movq	%rbx, %r10
	movq	-5176(%rbp), %rcx               ## 8-byte Reload
	movq	%r13, %rsi
LBB174_89:                              ##   in Loop: Header=BB174_83 Depth=2
	movq	%r12, %rax
	movq	%r10, (%rcx)
	movq	%r14, %r13
	movq	%rbx, (%r14)
	xorl	%r12d, %r12d
	jmp	LBB174_82
LBB174_90:                              ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$1130840649, %eax               ## imm = 0x43674249
	movq	-5176(%rbp), %rcx               ## 8-byte Reload
	je	LBB174_138
## %bb.91:                              ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$1229209940, %eax               ## imm = 0x49444154
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	movq	%r14, %rdi
	jne	LBB174_142
## %bb.92:                              ##   in Loop: Header=BB174_69 Depth=1
	testl	%r12d, %r12d
	movq	-5264(%rbp), %rdx               ## 8-byte Reload
	jne	LBB174_217
## %bb.93:                              ##   in Loop: Header=BB174_69 Depth=1
	cmpb	$0, -5196(%rbp)                 ## 1-byte Folded Reload
	movq	-5272(%rbp), %rax               ## 8-byte Reload
	je	LBB174_95
## %bb.94:                              ##   in Loop: Header=BB174_69 Depth=1
	testl	%eax, %eax
	je	LBB174_220
LBB174_95:                              ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$2, -5220(%rbp)                 ## 4-byte Folded Reload
	je	LBB174_223
## %bb.96:                              ##   in Loop: Header=BB174_69 Depth=1
	movq	-5248(%rbp), %rax               ## 8-byte Reload
	leal	(%rdi,%rax), %ebx
	xorl	%r15d, %r15d
	cmpl	%eax, %ebx
	jl	LBB174_65
## %bb.97:                              ##   in Loop: Header=BB174_69 Depth=1
	movq	-5320(%rbp), %rsi               ## 8-byte Reload
	cmpl	%esi, %ebx
	jbe	LBB174_150
## %bb.98:                              ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$4097, %edi                     ## imm = 0x1001
	movl	$4096, %eax                     ## imm = 0x1000
	cmovael	%edi, %eax
	testl	%esi, %esi
	cmovnel	%esi, %eax
LBB174_99:                              ##   Parent Loop BB174_69 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%eax, %ecx
	leal	(%rcx,%rcx), %eax
	cmpl	%ecx, %ebx
	ja	LBB174_99
## %bb.100:                             ##   in Loop: Header=BB174_69 Depth=1
	movl	%ebx, %r12d
	movq	(%rdx), %rdi
	movq	%rcx, -5320(%rbp)               ## 8-byte Spill
	movl	%ecx, %esi
	movq	%rdx, %rbx
	callq	_realloc
	testq	%rax, %rax
	je	LBB174_286
## %bb.101:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	%rax, (%rbx)
	movq	-5176(%rbp), %rcx               ## 8-byte Reload
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	movq	%r14, %rdi
	movl	%r12d, %ebx
	jmp	LBB174_151
LBB174_102:                             ##   in Loop: Header=BB174_69 Depth=1
	testl	%r12d, %r12d
	movq	-5184(%rbp), %rdi               ## 8-byte Reload
	je	LBB174_218
## %bb.103:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$13, %r14d
	jne	LBB174_221
## %bb.104:                             ##   in Loop: Header=BB174_69 Depth=1
	callq	__ZL13stbi__get16beP13stbi__context
	movl	%eax, %r15d
	shll	$16, %r15d
	movq	-5184(%rbp), %rdi               ## 8-byte Reload
	callq	__ZL13stbi__get16beP13stbi__context
	addl	%r15d, %eax
	movq	-5184(%rbp), %rcx               ## 8-byte Reload
	movl	%eax, (%rcx)
	movq	-5184(%rbp), %rdi               ## 8-byte Reload
	callq	__ZL13stbi__get16beP13stbi__context
	movl	%eax, %r15d
	shll	$16, %r15d
	movq	-5184(%rbp), %rdi               ## 8-byte Reload
	callq	__ZL13stbi__get16beP13stbi__context
	movq	-5184(%rbp), %rbx               ## 8-byte Reload
	addl	%r15d, %eax
	movl	%eax, 4(%rbx)
	cmpl	$16777217, %eax                 ## imm = 0x1000001
	jae	LBB174_212
## %bb.105:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$16777217, (%rbx)               ## imm = 0x1000001
	movq	-5176(%rbp), %rax               ## 8-byte Reload
	movq	-5216(%rbp), %r8                ## 8-byte Reload
	movq	-5192(%rbp), %r15               ## 8-byte Reload
	movq	-5232(%rbp), %rsi               ## 8-byte Reload
	jae	LBB174_212
## %bb.106:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	(%r13), %rdx
	movq	(%rax), %rax
	cmpq	%rax, %rdx
	jae	LBB174_154
## %bb.107:                             ##   in Loop: Header=BB174_69 Depth=1
	leaq	1(%rdx), %rcx
	movq	%rcx, (%r13)
	movb	(%rdx), %dl
	jmp	LBB174_173
LBB174_108:                             ##   in Loop: Header=BB174_69 Depth=1
	testl	%r12d, %r12d
	jne	LBB174_217
## %bb.109:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$769, %r14d                     ## imm = 0x301
	jae	LBB174_213
## %bb.110:                             ##   in Loop: Header=BB174_69 Depth=1
	movzwl	%r14w, %eax
	imull	$43691, %eax, %eax              ## imm = 0xAAAB
	shrl	$17, %eax
	movq	%rax, -5272(%rbp)               ## 8-byte Spill
	leal	(%rax,%rax,2), %eax
	cmpl	%r14d, %eax
	jne	LBB174_213
## %bb.111:                             ##   in Loop: Header=BB174_69 Depth=1
	xorl	%r12d, %r12d
	cmpw	$3, %r14w
	jb	LBB174_68
## %bb.112:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	-5272(%rbp), %rax               ## 8-byte Reload
	cmpl	$2, %eax
	movl	$1, %r14d
	cmovael	%eax, %r14d
	movq	(%r13), %rcx
	movq	(%rdx), %rax
	xorl	%r15d, %r15d
	movq	-5232(%rbp), %rsi               ## 8-byte Reload
	jmp	LBB174_115
LBB174_113:                             ##   in Loop: Header=BB174_115 Depth=2
	leaq	1(%rcx), %rbx
	movq	%rbx, (%r13)
	movzbl	(%rcx), %edx
	movq	%rbx, %rcx
LBB174_114:                             ##   in Loop: Header=BB174_115 Depth=2
	movb	%dl, -5166(%rbp,%r15,4)
	movb	$-1, -5165(%rbp,%r15,4)
	incq	%r15
	cmpq	%r15, %r14
	je	LBB174_68
LBB174_115:                             ##   Parent Loop BB174_69 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpq	%rax, %rcx
	jae	LBB174_117
## %bb.116:                             ##   in Loop: Header=BB174_115 Depth=2
	leaq	1(%rcx), %rbx
	movq	%rbx, (%r13)
	movzbl	(%rcx), %edx
	movq	%rbx, %rcx
	jmp	LBB174_123
LBB174_117:                             ##   in Loop: Header=BB174_115 Depth=2
	cmpl	$0, (%r9)
	je	LBB174_120
## %bb.118:                             ##   in Loop: Header=BB174_115 Depth=2
	movq	40(%r8), %rdi
	movl	52(%r8), %edx
	movq	%rsi, %rbx
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	callq	*16(%rax)
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	movl	192(%r8), %ecx
	subl	208(%r8), %ecx
	addl	%ecx, 184(%r8)
	testl	%eax, %eax
	je	LBB174_121
## %bb.119:                             ##   in Loop: Header=BB174_115 Depth=2
	cltq
	addq	%r8, %rax
	addq	$56, %rax
	movzbl	56(%r8), %edx
	movq	-5176(%rbp), %rdi               ## 8-byte Reload
	movq	-5216(%rbp), %r9                ## 8-byte Reload
	movq	%rbx, %rsi
	movq	-5208(%rbp), %rcx               ## 8-byte Reload
	jmp	LBB174_122
LBB174_120:                             ##   in Loop: Header=BB174_115 Depth=2
	xorl	%edx, %edx
	jmp	LBB174_123
LBB174_121:                             ##   in Loop: Header=BB174_115 Depth=2
	movq	-5216(%rbp), %r9                ## 8-byte Reload
	movl	$0, (%r9)
	movb	$0, (%rbx)
	xorl	%edx, %edx
	movq	-5208(%rbp), %rcx               ## 8-byte Reload
	movq	%rcx, %rax
	movq	-5176(%rbp), %rdi               ## 8-byte Reload
	movq	%rbx, %rsi
LBB174_122:                             ##   in Loop: Header=BB174_115 Depth=2
	movq	%rax, (%rdi)
	movq	%rcx, (%r13)
LBB174_123:                             ##   in Loop: Header=BB174_115 Depth=2
	movb	%dl, -5168(%rbp,%r15,4)
	cmpq	%rax, %rcx
	jae	LBB174_125
## %bb.124:                             ##   in Loop: Header=BB174_115 Depth=2
	leaq	1(%rcx), %rbx
	movq	%rbx, (%r13)
	movzbl	(%rcx), %edx
	movq	%rbx, %rcx
	jmp	LBB174_131
LBB174_125:                             ##   in Loop: Header=BB174_115 Depth=2
	cmpl	$0, (%r9)
	je	LBB174_128
## %bb.126:                             ##   in Loop: Header=BB174_115 Depth=2
	movq	40(%r8), %rdi
	movl	52(%r8), %edx
	movq	%rsi, %rbx
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	callq	*16(%rax)
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	movl	192(%r8), %ecx
	subl	208(%r8), %ecx
	addl	%ecx, 184(%r8)
	testl	%eax, %eax
	je	LBB174_129
## %bb.127:                             ##   in Loop: Header=BB174_115 Depth=2
	cltq
	addq	%r8, %rax
	addq	$56, %rax
	movzbl	56(%r8), %edx
	movq	-5176(%rbp), %rdi               ## 8-byte Reload
	movq	-5216(%rbp), %r9                ## 8-byte Reload
	movq	%rbx, %rsi
	movq	-5208(%rbp), %rcx               ## 8-byte Reload
	jmp	LBB174_130
LBB174_128:                             ##   in Loop: Header=BB174_115 Depth=2
	xorl	%edx, %edx
	jmp	LBB174_131
LBB174_129:                             ##   in Loop: Header=BB174_115 Depth=2
	movq	-5216(%rbp), %r9                ## 8-byte Reload
	movl	$0, (%r9)
	movb	$0, (%rbx)
	xorl	%edx, %edx
	movq	-5208(%rbp), %rcx               ## 8-byte Reload
	movq	%rcx, %rax
	movq	-5176(%rbp), %rdi               ## 8-byte Reload
	movq	%rbx, %rsi
LBB174_130:                             ##   in Loop: Header=BB174_115 Depth=2
	movq	%rax, (%rdi)
	movq	%rcx, (%r13)
LBB174_131:                             ##   in Loop: Header=BB174_115 Depth=2
	movb	%dl, -5167(%rbp,%r15,4)
	cmpq	%rax, %rcx
	jb	LBB174_113
## %bb.132:                             ##   in Loop: Header=BB174_115 Depth=2
	cmpl	$0, (%r9)
	je	LBB174_135
## %bb.133:                             ##   in Loop: Header=BB174_115 Depth=2
	movq	40(%r8), %rdi
	movl	52(%r8), %edx
	movq	%rsi, %rbx
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	callq	*16(%rax)
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	movl	192(%r8), %ecx
	subl	208(%r8), %ecx
	addl	%ecx, 184(%r8)
	testl	%eax, %eax
	je	LBB174_136
## %bb.134:                             ##   in Loop: Header=BB174_115 Depth=2
	cltq
	addq	%r8, %rax
	addq	$56, %rax
	movzbl	56(%r8), %edx
	movq	-5176(%rbp), %rdi               ## 8-byte Reload
	movq	-5216(%rbp), %r9                ## 8-byte Reload
	movq	%rbx, %rsi
	movq	-5208(%rbp), %rcx               ## 8-byte Reload
	jmp	LBB174_137
LBB174_135:                             ##   in Loop: Header=BB174_115 Depth=2
	xorl	%edx, %edx
	jmp	LBB174_114
LBB174_136:                             ##   in Loop: Header=BB174_115 Depth=2
	movq	-5216(%rbp), %r9                ## 8-byte Reload
	movl	$0, (%r9)
	movb	$0, (%rbx)
	xorl	%edx, %edx
	movq	-5208(%rbp), %rcx               ## 8-byte Reload
	movq	%rcx, %rax
	movq	-5176(%rbp), %rdi               ## 8-byte Reload
	movq	%rbx, %rsi
LBB174_137:                             ##   in Loop: Header=BB174_115 Depth=2
	movq	%rax, (%rdi)
	movq	%rcx, (%r13)
	jmp	LBB174_114
LBB174_138:                             ##   in Loop: Header=BB174_69 Depth=1
	movl	$1, -5292(%rbp)                 ## 4-byte Folded Spill
	testl	%r14d, %r14d
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	je	LBB174_68
## %bb.139:                             ##   in Loop: Header=BB174_69 Depth=1
	js	LBB174_67
## %bb.140:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpq	$0, 16(%r8)
	je	LBB174_181
## %bb.141:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	-5176(%rbp), %rax               ## 8-byte Reload
	movq	(%rax), %rcx
	movq	(%r13), %rax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%r14d, %esi
	subl	%edx, %esi
	jg	LBB174_149
	jmp	LBB174_182
LBB174_142:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$1229278788, %eax               ## imm = 0x49454E44
	je	LBB174_216
LBB174_143:                             ##   in Loop: Header=BB174_69 Depth=1
	testl	%r12d, %r12d
	jne	LBB174_217
## %bb.144:                             ##   in Loop: Header=BB174_69 Depth=1
	testl	$536870912, %eax                ## imm = 0x20000000
	je	LBB174_222
## %bb.145:                             ##   in Loop: Header=BB174_69 Depth=1
	xorl	%r12d, %r12d
	testl	%edi, %edi
	je	LBB174_68
## %bb.146:                             ##   in Loop: Header=BB174_69 Depth=1
	js	LBB174_67
## %bb.147:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpq	$0, 16(%r8)
	je	LBB174_183
## %bb.148:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	-5176(%rbp), %rax               ## 8-byte Reload
	movq	(%rax), %rcx
	movq	(%r13), %rax
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edi, %esi
	subl	%edx, %esi
	jle	LBB174_184
LBB174_149:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	%rcx, 192(%r8)
	movq	40(%r8), %rdi
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	callq	*24(%rax)
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	jmp	LBB174_68
LBB174_150:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	(%rdx), %rax
LBB174_151:                             ##   in Loop: Header=BB174_69 Depth=1
	movl	-5248(%rbp), %r14d              ## 4-byte Reload
	addq	%rax, %r14
	cmpq	$0, 16(%r8)
	je	LBB174_164
## %bb.152:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	(%rcx), %rax
	movq	(%r13), %rsi
	movq	%rax, %rcx
	subq	%rsi, %rcx
	movl	%edi, %r12d
	subl	%ecx, %r12d
	jle	LBB174_165
## %bb.153:                             ##   in Loop: Header=BB174_69 Depth=1
	movslq	%ecx, %rdx
	movq	%rdx, -5248(%rbp)               ## 8-byte Spill
	movq	%r14, %rdi
	callq	_memcpy
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	movq	40(%rax), %rdi
	addq	-5248(%rbp), %r14               ## 8-byte Folded Reload
	movq	%r14, %rsi
	movl	%r12d, %edx
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	callq	*16(%rax)
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	movl	%r12d, %edx
	xorl	%r12d, %r12d
	movq	200(%r8), %rcx
	movq	%rcx, 192(%r8)
	movl	%ebx, %ecx
	movq	%rcx, -5248(%rbp)               ## 8-byte Spill
	cmpl	%edx, %eax
	je	LBB174_68
	jmp	LBB174_225
LBB174_154:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$0, (%r8)
	je	LBB174_231
## %bb.155:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	40(%rbx), %rdi
	movl	52(%rbx), %edx
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	callq	*16(%rax)
	movq	-5184(%rbp), %rbx               ## 8-byte Reload
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB174_171
## %bb.156:                             ##   in Loop: Header=BB174_69 Depth=1
	cltq
	addq	%rbx, %rax
	addq	$56, %rax
	movb	56(%rbx), %dl
	movq	-5176(%rbp), %rcx               ## 8-byte Reload
	movq	-5216(%rbp), %r8                ## 8-byte Reload
	movq	-5232(%rbp), %rsi               ## 8-byte Reload
	movq	-5208(%rbp), %rdi               ## 8-byte Reload
	jmp	LBB174_172
LBB174_157:                             ##   in Loop: Header=BB174_69 Depth=1
	movl	8(%r8), %eax
	testb	$1, %al
	je	LBB174_263
## %bb.158:                             ##   in Loop: Header=BB174_69 Depth=1
	leal	(%rax,%rax), %ecx
	cmpl	%edi, %ecx
	jne	LBB174_224
## %bb.159:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$16, 32(%rsi)
	jne	LBB174_167
## %bb.160:                             ##   in Loop: Header=BB174_69 Depth=1
	movb	$1, %cl
	movq	%rcx, -5312(%rbp)               ## 8-byte Spill
	testl	%eax, %eax
	jle	LBB174_186
## %bb.161:                             ##   in Loop: Header=BB174_69 Depth=1
	xorl	%r15d, %r15d
LBB174_162:                             ##   Parent Loop BB174_69 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	%r8, %rdi
	callq	__ZL13stbi__get16beP13stbi__context
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	movw	%ax, -5390(%rbp,%r15,2)
	incq	%r15
	movslq	8(%r8), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r15
	jl	LBB174_162
	jmp	LBB174_163
LBB174_164:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	(%r13), %rsi
	movq	(%rcx), %rax
LBB174_165:                             ##   in Loop: Header=BB174_69 Depth=1
	movslq	%edi, %r12
	leaq	(%rsi,%r12), %rcx
	cmpq	%rax, %rcx
	ja	LBB174_225
## %bb.166:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	%r14, %rdi
	movq	%r12, %rdx
	callq	_memcpy
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	addq	%r12, (%r13)
	xorl	%r12d, %r12d
	movl	%ebx, %eax
	movq	%rax, -5248(%rbp)               ## 8-byte Spill
	jmp	LBB174_68
LBB174_167:                             ##   in Loop: Header=BB174_69 Depth=1
	movb	$1, %cl
	movq	%rcx, -5312(%rbp)               ## 8-byte Spill
	testl	%eax, %eax
	jle	LBB174_186
## %bb.168:                             ##   in Loop: Header=BB174_69 Depth=1
	xorl	%r15d, %r15d
	movq	-5192(%rbp), %r14               ## 8-byte Reload
	leaq	__ZL23stbi__depth_scale_table(%rip), %rbx
LBB174_169:                             ##   Parent Loop BB174_69 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	%r8, %rdi
	callq	__ZL13stbi__get16beP13stbi__context
	movq	-5184(%rbp), %r8                ## 8-byte Reload
	movl	%eax, %ecx
	movslq	32(%r14), %rax
	movzbl	(%rax,%rbx), %eax
	mulb	%cl
	movb	%al, -5236(%rbp,%r15)
	incq	%r15
	movslq	8(%r8), %rax
	xorl	%r12d, %r12d
	cmpq	%rax, %r15
	jl	LBB174_169
LBB174_163:                             ##   in Loop: Header=BB174_69 Depth=1
	movl	$0, -5196(%rbp)                 ## 4-byte Folded Spill
	jmp	LBB174_68
LBB174_171:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	-5216(%rbp), %r8                ## 8-byte Reload
	movl	$0, (%r8)
	movq	-5232(%rbp), %rsi               ## 8-byte Reload
	movb	$0, (%rsi)
	xorl	%edx, %edx
	movq	-5208(%rbp), %rdi               ## 8-byte Reload
	movq	%rdi, %rax
	movq	-5176(%rbp), %rcx               ## 8-byte Reload
LBB174_172:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	%rax, (%rcx)
	movq	%rdi, (%r13)
	movq	%rdi, %rcx
LBB174_173:                             ##   in Loop: Header=BB174_69 Depth=1
	movzbl	%dl, %edx
	movl	%edx, 32(%r15)
	cmpb	$16, %dl
	ja	LBB174_264
## %bb.174:                             ##   in Loop: Header=BB174_69 Depth=1
	movl	$65814, %edi                    ## imm = 0x10116
	btq	%rdx, %rdi
	jae	LBB174_264
## %bb.175:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpq	%rax, %rcx
	jae	LBB174_177
## %bb.176:                             ##   in Loop: Header=BB174_69 Depth=1
	leaq	1(%rcx), %rdi
	movq	%rdi, (%r13)
	movb	(%rcx), %dl
	jmp	LBB174_189
LBB174_177:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$0, (%r8)
	je	LBB174_180
## %bb.178:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	40(%rbx), %rdi
	movl	52(%rbx), %edx
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	callq	*16(%rax)
	movq	-5184(%rbp), %rbx               ## 8-byte Reload
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB174_187
## %bb.179:                             ##   in Loop: Header=BB174_69 Depth=1
	cltq
	addq	%rbx, %rax
	addq	$56, %rax
	movb	56(%rbx), %dl
	movq	-5176(%rbp), %rcx               ## 8-byte Reload
	movq	-5216(%rbp), %r8                ## 8-byte Reload
	movq	-5232(%rbp), %rsi               ## 8-byte Reload
	movq	-5208(%rbp), %rdi               ## 8-byte Reload
	jmp	LBB174_188
LBB174_180:                             ##   in Loop: Header=BB174_69 Depth=1
	xorl	%edx, %edx
	jmp	LBB174_195
LBB174_181:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	(%r13), %rax
LBB174_182:                             ##   in Loop: Header=BB174_69 Depth=1
	movl	%r14d, %ecx
	jmp	LBB174_185
LBB174_183:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	(%r13), %rax
LBB174_184:                             ##   in Loop: Header=BB174_69 Depth=1
	movl	%edi, %ecx
LBB174_185:                             ##   in Loop: Header=BB174_69 Depth=1
	addq	%rax, %rcx
	movq	%rcx, (%r13)
	jmp	LBB174_68
LBB174_186:                             ##   in Loop: Header=BB174_69 Depth=1
	xorl	%r12d, %r12d
	movl	$0, -5196(%rbp)                 ## 4-byte Folded Spill
	jmp	LBB174_68
LBB174_187:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	-5216(%rbp), %r8                ## 8-byte Reload
	movl	$0, (%r8)
	movq	-5232(%rbp), %rsi               ## 8-byte Reload
	movb	$0, (%rsi)
	xorl	%edx, %edx
	movq	-5208(%rbp), %rdi               ## 8-byte Reload
	movq	%rdi, %rax
	movq	-5176(%rbp), %rcx               ## 8-byte Reload
LBB174_188:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	%rax, (%rcx)
	movq	%rdi, (%r13)
LBB174_189:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	%rdi, %rcx
	cmpb	$7, %dl
	jae	LBB174_215
## %bb.190:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpb	$3, %dl
	jne	LBB174_193
## %bb.191:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$16, 32(%r15)
	je	LBB174_215
## %bb.192:                             ##   in Loop: Header=BB174_69 Depth=1
	movb	$3, %dl
	movl	%edx, -5196(%rbp)               ## 4-byte Spill
	movl	$3, %edx
	jmp	LBB174_195
LBB174_193:                             ##   in Loop: Header=BB174_69 Depth=1
	testb	$1, %dl
	jne	LBB174_215
## %bb.194:                             ##   in Loop: Header=BB174_69 Depth=1
	movzbl	%dl, %edx
LBB174_195:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	%rdx, -5304(%rbp)               ## 8-byte Spill
	cmpq	%rax, %rcx
	jae	LBB174_197
## %bb.196:                             ##   in Loop: Header=BB174_69 Depth=1
	leaq	1(%rcx), %rax
	movq	%rax, (%r13)
	movb	(%rcx), %al
	jmp	LBB174_202
LBB174_197:                             ##   in Loop: Header=BB174_69 Depth=1
	cmpl	$0, (%r8)
	je	LBB174_203
## %bb.198:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	40(%rbx), %rdi
	movl	52(%rbx), %edx
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	callq	*16(%rax)
	movq	-5184(%rbp), %rbx               ## 8-byte Reload
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB174_200
## %bb.199:                             ##   in Loop: Header=BB174_69 Depth=1
	cltq
	leaq	(%rbx,%rax), %rcx
	addq	$56, %rcx
	movb	56(%rbx), %al
	movq	-5208(%rbp), %rsi               ## 8-byte Reload
	jmp	LBB174_201
LBB174_200:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	-5216(%rbp), %rax               ## 8-byte Reload
	movl	$0, (%rax)
	movq	-5232(%rbp), %rax               ## 8-byte Reload
	movb	$0, (%rax)
	xorl	%eax, %eax
	movq	-5208(%rbp), %rsi               ## 8-byte Reload
	movq	%rsi, %rcx
LBB174_201:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	-5176(%rbp), %rdx               ## 8-byte Reload
	movq	%rcx, (%rdx)
	movq	%rsi, (%r13)
LBB174_202:                             ##   in Loop: Header=BB174_69 Depth=1
	testb	%al, %al
	jne	LBB174_228
LBB174_203:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	%rbx, %rdi
	callq	__ZL10stbi__get8P13stbi__context
	testb	%al, %al
	jne	LBB174_226
## %bb.204:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	%rbx, %rdi
	callq	__ZL10stbi__get8P13stbi__context
	cmpb	$2, %al
	jae	LBB174_227
## %bb.205:                             ##   in Loop: Header=BB174_69 Depth=1
	movl	(%rbx), %esi
	testl	%esi, %esi
	je	LBB174_214
## %bb.206:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	%rbx, %r8
	movl	4(%rbx), %ecx
	testl	%ecx, %ecx
	je	LBB174_214
## %bb.207:                             ##   in Loop: Header=BB174_69 Depth=1
	movzbl	%al, %eax
	movq	%rax, -5280(%rbp)               ## 8-byte Spill
	cmpb	$0, -5196(%rbp)                 ## 1-byte Folded Reload
	je	LBB174_209
## %bb.208:                             ##   in Loop: Header=BB174_69 Depth=1
	movl	$1, 8(%r8)
	xorl	%r12d, %r12d
	movl	$1073741824, %eax               ## imm = 0x40000000
	xorl	%edx, %edx
	divl	%esi
	shrl	$2, %eax
	cmpl	%ecx, %eax
	jae	LBB174_68
	jmp	LBB174_212
LBB174_209:                             ##   in Loop: Header=BB174_69 Depth=1
	movq	-5304(%rbp), %rdx               ## 8-byte Reload
	movl	%edx, %eax
	andl	$2, %eax
                                        ## kill: def $edx killed $edx killed $rdx def $rdx
	shrl	$2, %edx
	andl	$1, %edx
	leal	(%rdx,%rax), %edi
	incl	%edi
	movl	%edi, 8(%r8)
	movl	$1073741824, %eax               ## imm = 0x40000000
	xorl	%edx, %edx
	divl	%esi
	xorl	%edx, %edx
	divl	%edi
	cmpl	%ecx, %eax
	jb	LBB174_212
## %bb.210:                             ##   in Loop: Header=BB174_69 Depth=1
	xorl	%r12d, %r12d
	movl	$0, -5196(%rbp)                 ## 4-byte Folded Spill
	cmpl	$2, -5220(%rbp)                 ## 4-byte Folded Reload
	jne	LBB174_68
## %bb.211:
	movl	$1, %r15d
	jmp	LBB174_65
LBB174_212:
	leaq	L_.str.117(%rip), %rcx
	jmp	LBB174_63
LBB174_213:
	leaq	L_.str.125(%rip), %rcx
	jmp	LBB174_63
LBB174_214:
	leaq	L_.str.123(%rip), %rcx
	jmp	LBB174_63
LBB174_215:
	leaq	L_.str.119(%rip), %rcx
	jmp	LBB174_63
LBB174_216:
	testl	%r12d, %r12d
	je	LBB174_232
LBB174_217:
	leaq	L_.str.124(%rip), %rcx
	jmp	LBB174_63
LBB174_218:
	leaq	L_.str.115(%rip), %rcx
	jmp	LBB174_63
LBB174_219:
	leaq	L_.str.126(%rip), %rcx
	jmp	LBB174_63
LBB174_220:
	leaq	L_.str.130(%rip), %rcx
	jmp	LBB174_63
LBB174_221:
	leaq	L_.str.116(%rip), %rcx
	jmp	LBB174_63
LBB174_222:
	leaq	__ZZL20stbi__parse_png_fileP9stbi__pngiiE13invalid_chunk(%rip), %rcx
	bswapl	%eax
	movl	%eax, __ZZL20stbi__parse_png_fileP9stbi__pngiiE13invalid_chunk(%rip)
	jmp	LBB174_63
LBB174_223:
	movzbl	-5196(%rbp), %eax               ## 1-byte Folded Reload
	movl	%eax, 8(%r8)
	movl	$1, %r15d
	jmp	LBB174_65
LBB174_224:
	leaq	L_.str.128(%rip), %rcx
	jmp	LBB174_63
LBB174_225:
	leaq	L_.str.132(%rip), %rcx
	jmp	LBB174_287
LBB174_226:
	leaq	L_.str.121(%rip), %rcx
	jmp	LBB174_63
LBB174_227:
	leaq	L_.str.122(%rip), %rcx
	jmp	LBB174_63
LBB174_228:
	leaq	L_.str.120(%rip), %rcx
	jmp	LBB174_63
LBB174_229:
	movl	$4, 8(%r8)
	movl	$1, %r15d
	jmp	LBB174_65
LBB174_230:
	leaq	L_.str.127(%rip), %rcx
	jmp	LBB174_63
LBB174_231:
	movl	$0, 32(%r15)
	leaq	L_.str.118(%rip), %rcx
	jmp	LBB174_63
LBB174_232:
	movl	$1, %r15d
	cmpl	$0, -5220(%rbp)                 ## 4-byte Folded Reload
	jne	LBB174_65
## %bb.233:
	movq	-5264(%rbp), %rax               ## 8-byte Reload
	movq	(%rax), %rbx
	testq	%rbx, %rbx
	je	LBB174_266
## %bb.234:
	movq	-5192(%rbp), %rax               ## 8-byte Reload
	movl	32(%rax), %eax
	movq	-5184(%rbp), %rdx               ## 8-byte Reload
	imull	(%rdx), %eax
	addl	$7, %eax
	shrl	$3, %eax
	movl	4(%rdx), %ecx
	movl	8(%rdx), %r15d
	imull	%ecx, %r15d
	imull	%eax, %r15d
	addl	%ecx, %r15d
	movslq	%r15d, %rdi
	callq	_malloc
	testq	%rax, %rax
	je	LBB174_268
## %bb.235:
	xorl	%r8d, %r8d
	cmpl	$0, -5292(%rbp)                 ## 4-byte Folded Reload
	sete	%r8b
	movq	%rbx, -4144(%rbp)
	movslq	-5248(%rbp), %rcx               ## 4-byte Folded Reload
	addq	%rbx, %rcx
	movq	%rcx, -4136(%rbp)
	leaq	-4144(%rbp), %rdi
	movq	%rax, %rsi
	movl	%r15d, %edx
	movl	$1, %ecx
	callq	__ZL13stbi__do_zlibP10stbi__zbufPciii
	testl	%eax, %eax
	je	LBB174_267
## %bb.236:
	movl	-4120(%rbp), %eax
	movl	%eax, -5252(%rbp)               ## 4-byte Spill
	movq	-4112(%rbp), %rax
	movq	-5192(%rbp), %rcx               ## 8-byte Reload
	movq	%rax, 16(%rcx)
	xorl	%r15d, %r15d
	testq	%rax, %rax
	je	LBB174_65
## %bb.237:
	subl	%eax, -5252(%rbp)               ## 4-byte Folded Spill
	movq	-5192(%rbp), %rbx               ## 8-byte Reload
	movq	8(%rbx), %rdi
	callq	_free
	movq	$0, 8(%rbx)
	movq	-5184(%rbp), %rsi               ## 8-byte Reload
	movl	8(%rsi), %eax
	leal	1(%rax), %ecx
	cmpb	$0, -5312(%rbp)                 ## 1-byte Folded Reload
	cmovnel	%ecx, %eax
	cmpb	$0, -5196(%rbp)                 ## 1-byte Folded Reload
	movl	%ecx, %edi
	cmovnel	%eax, %edi
	movl	-5328(%rbp), %edx               ## 4-byte Reload
	cmpl	%edx, %ecx
	cmovnel	%eax, %edi
	cmpl	$3, %edx
	cmovel	%eax, %edi
	movl	%edi, -5284(%rbp)               ## 4-byte Spill
	movl	%edi, 12(%rsi)
	movq	(%rbx), %r14
	movq	16(%rbx), %rax
	movq	%rax, -5344(%rbp)               ## 8-byte Spill
	movl	32(%rbx), %eax
	movq	%rax, -5368(%rbp)               ## 8-byte Spill
	cmpl	$16, %eax
	sete	%cl
	movl	(%r14), %r13d
	movl	4(%r14), %r12d
	cmpl	$0, -5280(%rbp)                 ## 4-byte Folded Reload
	je	LBB174_269
## %bb.238:
	movl	%r12d, %eax
	orl	%r13d, %eax
	js	LBB174_286
## %bb.239:
	testl	%r12d, %r12d
	je	LBB174_241
## %bb.240:
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	xorl	%edx, %edx
	idivl	%r12d
	cmpl	%r13d, %eax
	jl	LBB174_286
LBB174_241:
	xorl	%edx, %edx
	movb	%cl, %dl
	incl	%edx
	imull	-5284(%rbp), %edx               ## 4-byte Folded Reload
	movl	%r12d, %ecx
	imull	%r13d, %ecx
	movl	%ecx, %eax
	movl	%edx, -5224(%rbp)               ## 4-byte Spill
	orl	%edx, %eax
	js	LBB174_286
## %bb.242:
	cmpl	$0, -5224(%rbp)                 ## 4-byte Folded Reload
	je	LBB174_244
## %bb.243:
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	xorl	%edx, %edx
	idivl	-5224(%rbp)                     ## 4-byte Folded Reload
	cmpl	%ecx, %eax
	jl	LBB174_286
LBB174_244:
	imull	-5224(%rbp), %ecx               ## 4-byte Folded Reload
	movslq	%ecx, %rdi
	callq	_malloc
	movq	%rax, -5336(%rbp)               ## 8-byte Spill
	testq	%rax, %rax
	je	LBB174_286
## %bb.245:
	movslq	-5224(%rbp), %rax               ## 4-byte Folded Reload
	movq	%rax, -5272(%rbp)               ## 8-byte Spill
	addq	%rax, %rax
	movq	%rax, -5400(%rbp)               ## 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, -5352(%rbp)               ## 8-byte Spill
LBB174_246:                             ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB174_253 Depth 2
                                        ##       Child Loop BB174_256 Depth 3
	movq	-5352(%rbp), %rcx               ## 8-byte Reload
	leaq	l___const._ZL22stbi__create_png_imageP9stbi__pngPhjiiii.xorig(%rip), %rax
	movslq	(%rax,%rcx,4), %rdx
	leaq	l___const._ZL22stbi__create_png_imageP9stbi__pngPhjiiii.xspc(%rip), %rax
	movslq	(%rax,%rcx,4), %rdi
	movq	%rdx, -5384(%rbp)               ## 8-byte Spill
	movl	%edx, %esi
	notl	%esi
	addl	%r13d, %esi
	addl	%edi, %esi
	movl	%esi, %eax
	xorl	%edx, %edx
	divl	%edi
	movl	%eax, -5280(%rbp)               ## 4-byte Spill
	leaq	l___const._ZL22stbi__create_png_imageP9stbi__pngPhjiiii.yorig(%rip), %rax
	movl	(%rax,%rcx,4), %edx
	leaq	l___const._ZL22stbi__create_png_imageP9stbi__pngPhjiiii.yspc(%rip), %rax
	movl	(%rax,%rcx,4), %ebx
	movl	%edx, -5324(%rbp)               ## 4-byte Spill
	movl	%edx, %ecx
	notl	%ecx
	addl	%r12d, %ecx
	addl	%ebx, %ecx
	movl	%ecx, %eax
	xorl	%edx, %edx
	movl	%ebx, -5288(%rbp)               ## 4-byte Spill
	divl	%ebx
	movq	%rdi, -5376(%rbp)               ## 8-byte Spill
	cmpl	%esi, %edi
	ja	LBB174_261
## %bb.247:                             ##   in Loop: Header=BB174_246 Depth=1
	cmpl	%ecx, -5288(%rbp)               ## 4-byte Folded Reload
	ja	LBB174_261
## %bb.248:                             ##   in Loop: Header=BB174_246 Depth=1
	movl	%eax, %r13d
	movl	-5280(%rbp), %r8d               ## 4-byte Reload
	movl	%r8d, %ecx
	movq	-5368(%rbp), %rax               ## 8-byte Reload
	imull	%eax, %ecx
	imull	8(%r14), %ecx
	movl	%ecx, %ebx
	movq	-5192(%rbp), %rdi               ## 8-byte Reload
	movq	-5344(%rbp), %rsi               ## 8-byte Reload
	movl	-5252(%rbp), %edx               ## 4-byte Reload
	movl	-5284(%rbp), %ecx               ## 4-byte Reload
	movl	%r13d, %r9d
	pushq	-5304(%rbp)                     ## 8-byte Folded Reload
	pushq	%rax
	callq	__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii
	addq	$16, %rsp
	testl	%eax, %eax
	je	LBB174_291
## %bb.249:                             ##   in Loop: Header=BB174_246 Depth=1
	addl	$7, %ebx
	sarl	$3, %ebx
	incl	%ebx
	imull	%r13d, %ebx
	movl	%ebx, -5356(%rbp)               ## 4-byte Spill
	testl	%r13d, %r13d
	jle	LBB174_259
## %bb.250:                             ##   in Loop: Header=BB174_246 Depth=1
	cmpl	$0, -5280(%rbp)                 ## 4-byte Folded Reload
	jle	LBB174_259
## %bb.251:                             ##   in Loop: Header=BB174_246 Depth=1
	movq	-5192(%rbp), %rax               ## 8-byte Reload
	movq	(%rax), %rcx
	movq	%rcx, -5216(%rbp)               ## 8-byte Spill
	movq	24(%rax), %rax
	movq	%rax, -5208(%rbp)               ## 8-byte Spill
	movl	-5280(%rbp), %eax               ## 4-byte Reload
	movl	%r13d, %ecx
	movq	%rcx, -5424(%rbp)               ## 8-byte Spill
	movq	%rax, -5320(%rbp)               ## 8-byte Spill
                                        ## kill: def $eax killed $eax killed $rax def $rax
	andl	$-2, %eax
	movq	%rax, -5248(%rbp)               ## 8-byte Spill
	movl	-5224(%rbp), %eax               ## 4-byte Reload
	movl	%eax, %ecx
	imull	-5324(%rbp), %ecx               ## 4-byte Folded Reload
	movl	%ecx, -5220(%rbp)               ## 4-byte Spill
	imull	-5288(%rbp), %eax               ## 4-byte Folded Reload
	movl	%eax, -5360(%rbp)               ## 4-byte Spill
	movq	-5384(%rbp), %rdx               ## 8-byte Reload
	movq	-5376(%rbp), %rsi               ## 8-byte Reload
	leaq	(%rsi,%rdx), %rdi
	movq	-5272(%rbp), %rcx               ## 8-byte Reload
	imulq	%rcx, %rdi
	movq	-5336(%rbp), %rax               ## 8-byte Reload
	addq	%rax, %rdi
	movq	%rdi, -5416(%rbp)               ## 8-byte Spill
	movq	-5400(%rbp), %rdi               ## 8-byte Reload
	imulq	%rsi, %rdi
	movq	%rdi, -5232(%rbp)               ## 8-byte Spill
	imulq	%rdx, %rcx
	addq	%rax, %rcx
	movq	%rcx, -5408(%rbp)               ## 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, -5264(%rbp)               ## 8-byte Spill
	jmp	LBB174_253
LBB174_252:                             ##   in Loop: Header=BB174_253 Depth=2
	movq	-5264(%rbp), %rcx               ## 8-byte Reload
	incq	%rcx
	movl	-5360(%rbp), %eax               ## 4-byte Reload
	addl	%eax, -5220(%rbp)               ## 4-byte Folded Spill
	movq	%rcx, %rax
	movq	%rcx, -5264(%rbp)               ## 8-byte Spill
	cmpq	-5424(%rbp), %rcx               ## 8-byte Folded Reload
	je	LBB174_260
LBB174_253:                             ##   Parent Loop BB174_246 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB174_256 Depth 3
	movq	-5264(%rbp), %rax               ## 8-byte Reload
	imulq	-5320(%rbp), %rax               ## 8-byte Folded Reload
	movq	%rax, -5176(%rbp)               ## 8-byte Spill
	cmpl	$1, -5280(%rbp)                 ## 4-byte Folded Reload
	jne	LBB174_255
## %bb.254:                             ##   in Loop: Header=BB174_253 Depth=2
	xorl	%ecx, %ecx
	jmp	LBB174_257
LBB174_255:                             ##   in Loop: Header=BB174_253 Depth=2
	movq	-5408(%rbp), %r13               ## 8-byte Reload
	movq	-5416(%rbp), %rbx               ## 8-byte Reload
	xorl	%ecx, %ecx
LBB174_256:                             ##   Parent Loop BB174_246 Depth=1
                                        ##     Parent Loop BB174_253 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movq	-5216(%rbp), %rax               ## 8-byte Reload
	movl	(%rax), %edi
	imull	-5220(%rbp), %edi               ## 4-byte Folded Reload
	addq	%r13, %rdi
	movq	%rcx, %r12
	movq	-5176(%rbp), %rax               ## 8-byte Reload
	leaq	(%rcx,%rax), %rsi
	movq	-5272(%rbp), %r14               ## 8-byte Reload
	imulq	%r14, %rsi
	addq	-5208(%rbp), %rsi               ## 8-byte Folded Reload
	movq	%r14, %rdx
	callq	_memcpy
	movq	%r12, %rsi
	orq	$1, %rsi
	movq	-5216(%rbp), %rax               ## 8-byte Reload
	movl	(%rax), %edi
	imull	-5220(%rbp), %edi               ## 4-byte Folded Reload
	addq	%rbx, %rdi
	addq	-5176(%rbp), %rsi               ## 8-byte Folded Reload
	imulq	%r14, %rsi
	addq	-5208(%rbp), %rsi               ## 8-byte Folded Reload
	movq	%r14, %rdx
	callq	_memcpy
	addq	$2, %r12
	movq	-5232(%rbp), %rax               ## 8-byte Reload
	addq	%rax, %rbx
	addq	%rax, %r13
	movq	%r12, %rcx
	cmpq	-5248(%rbp), %r12               ## 8-byte Folded Reload
	jne	LBB174_256
LBB174_257:                             ##   in Loop: Header=BB174_253 Depth=2
	testb	$1, -5320(%rbp)                 ## 1-byte Folded Reload
	je	LBB174_252
## %bb.258:                             ##   in Loop: Header=BB174_253 Depth=2
	movl	-5288(%rbp), %eax               ## 4-byte Reload
                                        ## kill: def $eax killed $eax def $rax
	imull	-5264(%rbp), %eax               ## 4-byte Folded Reload
	addl	-5324(%rbp), %eax               ## 4-byte Folded Reload
	imull	-5224(%rbp), %eax               ## 4-byte Folded Reload
	movq	%rcx, %rbx
	movq	%rcx, %rdi
	imulq	-5376(%rbp), %rdi               ## 8-byte Folded Reload
	addq	-5384(%rbp), %rdi               ## 8-byte Folded Reload
	movq	-5216(%rbp), %rcx               ## 8-byte Reload
	imull	(%rcx), %eax
	addq	-5336(%rbp), %rax               ## 8-byte Folded Reload
	movq	-5272(%rbp), %rdx               ## 8-byte Reload
	imulq	%rdx, %rdi
	addq	%rax, %rdi
	movq	-5176(%rbp), %rsi               ## 8-byte Reload
	addq	%rbx, %rsi
	imulq	%rdx, %rsi
	addq	-5208(%rbp), %rsi               ## 8-byte Folded Reload
	callq	_memcpy
	jmp	LBB174_252
LBB174_259:                             ##   in Loop: Header=BB174_246 Depth=1
	movq	-5192(%rbp), %rax               ## 8-byte Reload
	movq	24(%rax), %rax
	movq	%rax, -5208(%rbp)               ## 8-byte Spill
LBB174_260:                             ##   in Loop: Header=BB174_246 Depth=1
	movq	-5208(%rbp), %rdi               ## 8-byte Reload
	callq	_free
	movl	-5356(%rbp), %ecx               ## 4-byte Reload
	movl	%ecx, %eax
	addq	%rax, -5344(%rbp)               ## 8-byte Folded Spill
	subl	%ecx, -5252(%rbp)               ## 4-byte Folded Spill
LBB174_261:                             ##   in Loop: Header=BB174_246 Depth=1
	movq	-5352(%rbp), %rcx               ## 8-byte Reload
	incq	%rcx
	movq	%rcx, %rax
	movq	%rcx, -5352(%rbp)               ## 8-byte Spill
	cmpq	$7, %rcx
	je	LBB174_290
## %bb.262:                             ##   in Loop: Header=BB174_246 Depth=1
	movq	-5192(%rbp), %rax               ## 8-byte Reload
	movq	(%rax), %r14
	movl	(%r14), %r13d
	movl	4(%r14), %r12d
	jmp	LBB174_246
LBB174_263:
	leaq	L_.str.129(%rip), %rcx
	jmp	LBB174_63
LBB174_264:
	leaq	L_.str.118(%rip), %rcx
	jmp	LBB174_63
LBB174_265:
	callq	___stack_chk_fail
LBB174_266:
	leaq	L_.str.133(%rip), %rcx
	jmp	LBB174_63
LBB174_267:
	movq	-4112(%rbp), %rdi
	callq	_free
LBB174_268:
	movq	-5192(%rbp), %rax               ## 8-byte Reload
	movq	$0, 16(%rax)
	jmp	LBB174_64
LBB174_269:
	movq	-5192(%rbp), %rdi               ## 8-byte Reload
	movq	-5344(%rbp), %rsi               ## 8-byte Reload
	movl	-5252(%rbp), %edx               ## 4-byte Reload
	movl	-5284(%rbp), %ecx               ## 4-byte Reload
	movl	%r13d, %r8d
	movl	%r12d, %r9d
	pushq	-5304(%rbp)                     ## 8-byte Folded Reload
	pushq	-5368(%rbp)                     ## 8-byte Folded Reload
	callq	__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii
	addq	$16, %rsp
	testl	%eax, %eax
	je	LBB174_65
## %bb.270:
	cmpb	$0, -5312(%rbp)                 ## 1-byte Folded Reload
	je	LBB174_274
LBB174_271:
	movq	-5192(%rbp), %rax               ## 8-byte Reload
	cmpl	$16, 32(%rax)
	jne	LBB174_273
## %bb.272:
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	movl	12(%rax), %r8d
	movq	-5192(%rbp), %rcx               ## 8-byte Reload
	movq	(%rcx), %rax
	movq	24(%rcx), %rdx
	movl	(%rax), %edi
	movl	4(%rax), %esi
	leaq	-5390(%rbp), %rcx
	callq	__ZL28stbi__compute_transparency16P9stbi__pngPti
	jmp	LBB174_274
LBB174_273:
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	movl	12(%rax), %r8d
	movq	-5192(%rbp), %rcx               ## 8-byte Reload
	movq	(%rcx), %rax
	movq	24(%rcx), %rdx
	movl	(%rax), %edi
	movl	4(%rax), %esi
	leaq	-5236(%rbp), %rcx
	callq	__ZL26stbi__compute_transparencyP9stbi__pngPhi
LBB174_274:
	cmpl	$0, -5292(%rbp)                 ## 4-byte Folded Reload
	je	LBB174_278
## %bb.275:
	movq	__ZL24stbi__de_iphone_flag_set@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rax, %rcx
	movq	__ZL26stbi__de_iphone_flag_local@TLVP(%rip), %rdi
	callq	*(%rdi)
	leaq	__ZL27stbi__de_iphone_flag_global(%rip), %rdx
	cmpb	$0, (%rcx)
	cmovneq	%rax, %rdx
	cmpl	$0, (%rdx)
	je	LBB174_278
## %bb.276:
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	cmpl	$3, 12(%rax)
	jl	LBB174_278
## %bb.277:
	movq	-5192(%rbp), %rax               ## 8-byte Reload
	movq	(%rax), %rdi
	movq	24(%rax), %rsi
	callq	__ZL15stbi__de_iphoneP9stbi__png
LBB174_278:
	cmpb	$0, -5196(%rbp)                 ## 1-byte Folded Reload
	je	LBB174_288
## %bb.279:
	movzbl	-5196(%rbp), %ebx               ## 1-byte Folded Reload
	movq	-5184(%rbp), %rcx               ## 8-byte Reload
	movl	%ebx, 8(%rcx)
	movl	-5328(%rbp), %eax               ## 4-byte Reload
	cmpl	$3, %eax
	cmovgel	%eax, %ebx
	movl	%ebx, 12(%rcx)
	movq	-5192(%rbp), %rax               ## 8-byte Reload
	movq	(%rax), %rax
	movl	4(%rax), %r13d
	imull	(%rax), %r13d
	movl	%r13d, %eax
	orl	%ebx, %eax
	js	LBB174_286
## %bb.280:
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	xorl	%edx, %edx
	divl	%ebx
	cmpl	%r13d, %eax
	jl	LBB174_286
## %bb.281:
	movq	-5192(%rbp), %rax               ## 8-byte Reload
	movq	24(%rax), %r14
	movl	%r13d, %eax
	imull	%ebx, %eax
	movslq	%eax, %rdi
	callq	_malloc
	testq	%rax, %rax
	je	LBB174_286
## %bb.282:
	movq	%rax, %r12
	cmpl	$3, %ebx
	jne	LBB174_292
## %bb.283:
	testl	%r13d, %r13d
	je	LBB174_303
## %bb.284:
	movl	%r13d, %r8d
	cmpl	$1, %r13d
	jne	LBB174_299
## %bb.285:
	xorl	%esi, %esi
	movq	%r12, %rcx
	jmp	LBB174_301
LBB174_286:
	leaq	L_.str.131(%rip), %rcx
LBB174_287:
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rcx, (%rax)
	jmp	LBB174_65
LBB174_288:
	cmpb	$0, -5312(%rbp)                 ## 1-byte Folded Reload
	je	LBB174_304
## %bb.289:
	movq	-5184(%rbp), %rax               ## 8-byte Reload
	incl	8(%rax)
	jmp	LBB174_304
LBB174_290:
	movq	-5192(%rbp), %rax               ## 8-byte Reload
	movq	-5336(%rbp), %rcx               ## 8-byte Reload
	movq	%rcx, 24(%rax)
	cmpb	$0, -5312(%rbp)                 ## 1-byte Folded Reload
	jne	LBB174_271
	jmp	LBB174_274
LBB174_291:
	movq	-5336(%rbp), %rdi               ## 8-byte Reload
	callq	_free
	jmp	LBB174_64
LBB174_292:
	testl	%r13d, %r13d
	je	LBB174_303
## %bb.293:
	movl	%r13d, %ebx
	cmpl	$8, %r13d
	jb	LBB174_296
## %bb.294:
	leaq	(%r14,%rbx), %rax
	cmpq	%rax, %r12
	jae	LBB174_305
## %bb.295:
	leaq	(%r12,%rbx,4), %rax
	cmpq	%rax, %r14
	jae	LBB174_305
LBB174_296:
	xorl	%eax, %eax
	movq	%rax, -5176(%rbp)               ## 8-byte Spill
	movq	%r12, %r9
LBB174_297:
	movq	-5176(%rbp), %rsi               ## 8-byte Reload
	subq	%rsi, %rbx
	addq	%r14, %rsi
	xorl	%eax, %eax
LBB174_298:                             ## =>This Inner Loop Header: Depth=1
	movzbl	(%rsi,%rax), %ecx
	movzbl	-5168(%rbp,%rcx,4), %edx
	movb	%dl, (%r9,%rax,4)
	movzbl	-5167(%rbp,%rcx,4), %edx
	movb	%dl, 1(%r9,%rax,4)
	movzbl	-5166(%rbp,%rcx,4), %edx
	movb	%dl, 2(%r9,%rax,4)
	movzbl	-5165(%rbp,%rcx,4), %ecx
	movb	%cl, 3(%r9,%rax,4)
	incq	%rax
	cmpq	%rax, %rbx
	jne	LBB174_298
	jmp	LBB174_303
LBB174_299:
	movl	%r8d, %r9d
	andl	$-2, %r9d
	xorl	%esi, %esi
	movq	%r12, %rcx
LBB174_300:                             ## =>This Inner Loop Header: Depth=1
	movzbl	(%r14,%rsi), %edi
	movzbl	-5168(%rbp,%rdi,4), %eax
	movb	%al, (%rcx)
	movzbl	-5167(%rbp,%rdi,4), %eax
	movb	%al, 1(%rcx)
	movzbl	-5166(%rbp,%rdi,4), %eax
	movb	%al, 2(%rcx)
	movzbl	1(%r14,%rsi), %eax
	movzbl	-5168(%rbp,%rax,4), %edx
	movb	%dl, 3(%rcx)
	movzbl	-5167(%rbp,%rax,4), %edx
	movb	%dl, 4(%rcx)
	movzbl	-5166(%rbp,%rax,4), %eax
	movb	%al, 5(%rcx)
	addq	$6, %rcx
	addq	$2, %rsi
	cmpq	%rsi, %r9
	jne	LBB174_300
LBB174_301:
	testb	$1, %r8b
	je	LBB174_303
## %bb.302:
	movzbl	(%r14,%rsi), %eax
	movb	-5168(%rbp,%rax,4), %dl
	movb	%dl, (%rcx)
	movb	-5167(%rbp,%rax,4), %dl
	movb	%dl, 1(%rcx)
	movb	-5166(%rbp,%rax,4), %al
	movb	%al, 2(%rcx)
LBB174_303:
	movq	%r14, %rdi
	callq	_free
	movq	-5192(%rbp), %rax               ## 8-byte Reload
	movq	%r12, 24(%rax)
LBB174_304:
	movq	-5192(%rbp), %rbx               ## 8-byte Reload
	movq	16(%rbx), %rdi
	callq	_free
	movq	$0, 16(%rbx)
	movq	-5184(%rbp), %r12               ## 8-byte Reload
	movq	%r12, %rdi
	callq	__ZL13stbi__get16beP13stbi__context
	movq	%r12, %rdi
	callq	__ZL13stbi__get16beP13stbi__context
	movl	$1, %r15d
	jmp	LBB174_65
LBB174_305:
	cmpl	$16, %r13d
	jae	LBB174_310
## %bb.306:
	xorl	%eax, %eax
	movq	%rax, -5176(%rbp)               ## 8-byte Spill
LBB174_307:
	movq	-5176(%rbp), %rsi               ## 8-byte Reload
	movl	%ebx, %eax
	andl	$-8, %eax
	movq	%rax, -5176(%rbp)               ## 8-byte Spill
	leaq	(%r12,%rax,4), %r9
LBB174_308:                             ## =>This Inner Loop Header: Depth=1
	movzbl	(%r14,%rsi), %edi
	movzbl	1(%r14,%rsi), %eax
	movzbl	2(%r14,%rsi), %ecx
	movzbl	3(%r14,%rsi), %r10d
	movzbl	4(%r14,%rsi), %r11d
	movzbl	5(%r14,%rsi), %r15d
	movzbl	6(%r14,%rsi), %edx
	movzbl	7(%r14,%rsi), %r13d
	vmovd	-5168(%rbp,%rdi,4), %xmm0       ## xmm0 = mem[0],zero,zero,zero
	vpinsrb	$1, -5167(%rbp,%rdi,4), %xmm0, %xmm0
	vpinsrb	$2, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$3, -5167(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$4, -5168(%rbp,%rcx,4), %xmm0, %xmm0
	vpinsrb	$5, -5167(%rbp,%rcx,4), %xmm0, %xmm0
	vpinsrb	$6, -5168(%rbp,%r10,4), %xmm0, %xmm0
	vpinsrb	$7, -5167(%rbp,%r10,4), %xmm0, %xmm0
	vpinsrb	$8, -5168(%rbp,%r11,4), %xmm0, %xmm0
	vpinsrb	$9, -5167(%rbp,%r11,4), %xmm0, %xmm0
	vpinsrb	$10, -5168(%rbp,%r15,4), %xmm0, %xmm0
	vpinsrb	$11, -5167(%rbp,%r15,4), %xmm0, %xmm0
	vpinsrb	$12, -5168(%rbp,%rdx,4), %xmm0, %xmm0
	vpinsrb	$13, -5167(%rbp,%rdx,4), %xmm0, %xmm0
	vpinsrb	$14, -5168(%rbp,%r13,4), %xmm0, %xmm0
	vpinsrb	$15, -5167(%rbp,%r13,4), %xmm0, %xmm0
	movzbl	-5166(%rbp,%rdi,4), %r8d
	vmovd	%r8d, %xmm1
	vpinsrb	$1, -5165(%rbp,%rdi,4), %xmm1, %xmm1
	vpinsrb	$2, -5166(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$3, -5165(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$4, -5166(%rbp,%rcx,4), %xmm1, %xmm1
	vpinsrb	$5, -5165(%rbp,%rcx,4), %xmm1, %xmm1
	vpinsrb	$6, -5166(%rbp,%r10,4), %xmm1, %xmm1
	vpinsrb	$7, -5165(%rbp,%r10,4), %xmm1, %xmm1
	vpinsrb	$8, -5166(%rbp,%r11,4), %xmm1, %xmm1
	vpinsrb	$9, -5165(%rbp,%r11,4), %xmm1, %xmm1
	vpinsrb	$10, -5166(%rbp,%r15,4), %xmm1, %xmm1
	vpinsrb	$11, -5165(%rbp,%r15,4), %xmm1, %xmm1
	vpinsrb	$12, -5166(%rbp,%rdx,4), %xmm1, %xmm1
	vpinsrb	$13, -5165(%rbp,%rdx,4), %xmm1, %xmm1
	vpinsrb	$14, -5166(%rbp,%r13,4), %xmm1, %xmm1
	vpinsrb	$15, -5165(%rbp,%r13,4), %xmm1, %xmm1
	vpunpcklwd	%xmm1, %xmm0, %xmm2     ## xmm2 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3]
	vpunpckhwd	%xmm1, %xmm0, %xmm0     ## xmm0 = xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	vmovdqu	%xmm0, 16(%r12,%rsi,4)
	vmovdqu	%xmm2, (%r12,%rsi,4)
	addq	$8, %rsi
	cmpq	%rsi, -5176(%rbp)               ## 8-byte Folded Reload
	jne	LBB174_308
## %bb.309:
	cmpq	%rbx, -5176(%rbp)               ## 8-byte Folded Reload
	jne	LBB174_297
	jmp	LBB174_303
LBB174_310:
	movl	%ebx, %eax
	andl	$-16, %eax
	movq	%rax, -5176(%rbp)               ## 8-byte Spill
	xorl	%edx, %edx
LBB174_311:                             ## =>This Inner Loop Header: Depth=1
	movzbl	(%r14,%rdx), %esi
	movzbl	1(%r14,%rdx), %edi
	vmovd	-5168(%rbp,%rsi,4), %xmm0       ## xmm0 = mem[0],zero,zero,zero
	vpinsrb	$1, -5168(%rbp,%rdi,4), %xmm0, %xmm0
	movzbl	-5167(%rbp,%rsi,4), %eax
	vmovd	%eax, %xmm1
	vpinsrb	$1, -5167(%rbp,%rdi,4), %xmm1, %xmm1
	movzbl	-5166(%rbp,%rsi,4), %eax
	vmovd	%eax, %xmm2
	vpinsrb	$1, -5166(%rbp,%rdi,4), %xmm2, %xmm2
	movzbl	-5165(%rbp,%rsi,4), %eax
	vmovd	%eax, %xmm3
	vpinsrb	$1, -5165(%rbp,%rdi,4), %xmm3, %xmm3
	movzbl	2(%r14,%rdx), %eax
	vpinsrb	$2, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$2, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$2, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$2, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	3(%r14,%rdx), %eax
	vpinsrb	$3, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$3, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$3, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$3, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	4(%r14,%rdx), %eax
	vpinsrb	$4, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$4, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$4, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$4, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	5(%r14,%rdx), %eax
	vpinsrb	$5, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$5, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$5, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$5, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	6(%r14,%rdx), %eax
	vpinsrb	$6, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$6, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$6, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$6, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	7(%r14,%rdx), %eax
	vpinsrb	$7, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$7, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$7, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$7, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	8(%r14,%rdx), %eax
	vpinsrb	$8, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$8, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$8, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$8, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	9(%r14,%rdx), %eax
	vpinsrb	$9, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$9, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$9, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$9, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	10(%r14,%rdx), %eax
	vpinsrb	$10, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$10, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$10, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$10, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	11(%r14,%rdx), %eax
	vpinsrb	$11, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$11, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$11, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$11, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	12(%r14,%rdx), %eax
	vpinsrb	$12, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$12, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$12, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$12, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	13(%r14,%rdx), %eax
	vpinsrb	$13, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$13, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$13, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$13, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	14(%r14,%rdx), %eax
	vpinsrb	$14, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$14, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$14, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$14, -5165(%rbp,%rax,4), %xmm3, %xmm3
	movzbl	15(%r14,%rdx), %eax
	vpinsrb	$15, -5168(%rbp,%rax,4), %xmm0, %xmm0
	vpinsrb	$15, -5167(%rbp,%rax,4), %xmm1, %xmm1
	vpinsrb	$15, -5166(%rbp,%rax,4), %xmm2, %xmm2
	vpinsrb	$15, -5165(%rbp,%rax,4), %xmm3, %xmm3
	vpunpcklbw	%xmm1, %xmm0, %xmm4     ## xmm4 = xmm0[0],xmm1[0],xmm0[1],xmm1[1],xmm0[2],xmm1[2],xmm0[3],xmm1[3],xmm0[4],xmm1[4],xmm0[5],xmm1[5],xmm0[6],xmm1[6],xmm0[7],xmm1[7]
	vpunpckhbw	%xmm1, %xmm0, %xmm0     ## xmm0 = xmm0[8],xmm1[8],xmm0[9],xmm1[9],xmm0[10],xmm1[10],xmm0[11],xmm1[11],xmm0[12],xmm1[12],xmm0[13],xmm1[13],xmm0[14],xmm1[14],xmm0[15],xmm1[15]
	vpunpcklbw	%xmm3, %xmm2, %xmm1     ## xmm1 = xmm2[0],xmm3[0],xmm2[1],xmm3[1],xmm2[2],xmm3[2],xmm2[3],xmm3[3],xmm2[4],xmm3[4],xmm2[5],xmm3[5],xmm2[6],xmm3[6],xmm2[7],xmm3[7]
	vpunpckhbw	%xmm3, %xmm2, %xmm2     ## xmm2 = xmm2[8],xmm3[8],xmm2[9],xmm3[9],xmm2[10],xmm3[10],xmm2[11],xmm3[11],xmm2[12],xmm3[12],xmm2[13],xmm3[13],xmm2[14],xmm3[14],xmm2[15],xmm3[15]
	vpunpcklwd	%xmm1, %xmm4, %xmm3     ## xmm3 = xmm4[0],xmm1[0],xmm4[1],xmm1[1],xmm4[2],xmm1[2],xmm4[3],xmm1[3]
	vpunpckhwd	%xmm1, %xmm4, %xmm1     ## xmm1 = xmm4[4],xmm1[4],xmm4[5],xmm1[5],xmm4[6],xmm1[6],xmm4[7],xmm1[7]
	vpunpcklwd	%xmm2, %xmm0, %xmm4     ## xmm4 = xmm0[0],xmm2[0],xmm0[1],xmm2[1],xmm0[2],xmm2[2],xmm0[3],xmm2[3]
	vpunpckhwd	%xmm2, %xmm0, %xmm0     ## xmm0 = xmm0[4],xmm2[4],xmm0[5],xmm2[5],xmm0[6],xmm2[6],xmm0[7],xmm2[7]
	vmovdqu	%xmm0, 48(%r12,%rdx,4)
	vmovdqu	%xmm4, 32(%r12,%rdx,4)
	vmovdqu	%xmm1, 16(%r12,%rdx,4)
	vmovdqu	%xmm3, (%r12,%rdx,4)
	addq	$16, %rdx
	cmpq	%rdx, -5176(%rbp)               ## 8-byte Folded Reload
	jne	LBB174_311
## %bb.312:
	cmpq	%rbx, -5176(%rbp)               ## 8-byte Folded Reload
	je	LBB174_303
## %bb.313:
	testb	$8, %bl
	jne	LBB174_307
## %bb.314:
	movq	-5176(%rbp), %rax               ## 8-byte Reload
	leaq	(%r12,%rax,4), %r9
	jmp	LBB174_297
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL13stbi__get16beP13stbi__context
__ZL13stbi__get16beP13stbi__context:    ## @_ZL13stbi__get16beP13stbi__context
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rdi, %rbx
	movq	192(%rdi), %rcx
	movq	200(%rdi), %rax
	cmpq	%rax, %rcx
	jae	LBB175_2
## %bb.1:
	leaq	1(%rcx), %rdx
	movq	%rdx, 192(%rbx)
	movb	(%rcx), %r14b
	movq	%rdx, %rcx
	cmpq	%rax, %rcx
	jae	LBB175_10
	jmp	LBB175_9
LBB175_2:
	cmpl	$0, 48(%rbx)
	je	LBB175_3
## %bb.4:
	movq	40(%rbx), %rdi
	leaq	56(%rbx), %rsi
	movl	52(%rbx), %edx
	callq	*16(%rbx)
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB175_5
## %bb.6:
	cltq
	addq	%rbx, %rax
	addq	$56, %rax
	movb	56(%rbx), %r14b
	jmp	LBB175_7
LBB175_3:
	xorl	%r14d, %r14d
	cmpq	%rax, %rcx
	jb	LBB175_9
LBB175_10:
	cmpl	$0, 48(%rbx)
	je	LBB175_11
## %bb.12:
	movq	40(%rbx), %rdi
	leaq	56(%rbx), %rsi
	movl	52(%rbx), %edx
	callq	*16(%rbx)
	movl	192(%rbx), %ecx
	subl	208(%rbx), %ecx
	addl	%ecx, 184(%rbx)
	testl	%eax, %eax
	je	LBB175_13
## %bb.14:
	cltq
	leaq	(%rbx,%rax), %rcx
	addq	$56, %rcx
	movb	56(%rbx), %al
	jmp	LBB175_15
LBB175_11:
	xorl	%eax, %eax
	jmp	LBB175_16
LBB175_5:
	movl	$0, 48(%rbx)
	leaq	57(%rbx), %rax
	movb	$0, 56(%rbx)
	xorl	%r14d, %r14d
LBB175_7:
	movq	%rax, 200(%rbx)
	leaq	57(%rbx), %rcx
	movq	%rcx, 192(%rbx)
	cmpq	%rax, %rcx
	jae	LBB175_10
LBB175_9:
	leaq	1(%rcx), %rax
	movq	%rax, 192(%rbx)
	movb	(%rcx), %al
	jmp	LBB175_16
LBB175_13:
	movl	$0, 48(%rbx)
	leaq	57(%rbx), %rcx
	movb	$0, 56(%rbx)
	xorl	%eax, %eax
LBB175_15:
	movq	%rcx, 200(%rbx)
	leaq	57(%rbx), %rcx
	movq	%rcx, 192(%rbx)
LBB175_16:
	movzbl	%r14b, %ecx
	shll	$8, %ecx
	movzbl	%al, %eax
	orl	%ecx, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__const
	.p2align	5                               ## -- Begin function _ZL28stbi__compute_transparency16P9stbi__pngPti
LCPI176_0:
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	16                              ## 0x10
	.byte	17                              ## 0x11
	.byte	20                              ## 0x14
	.byte	21                              ## 0x15
	.byte	24                              ## 0x18
	.byte	25                              ## 0x19
	.byte	28                              ## 0x1c
	.byte	29                              ## 0x1d
LCPI176_1:
	.byte	0                               ## 0x0
	.byte	1                               ## 0x1
	.byte	4                               ## 0x4
	.byte	5                               ## 0x5
	.byte	8                               ## 0x8
	.byte	9                               ## 0x9
	.byte	12                              ## 0xc
	.byte	13                              ## 0xd
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.byte	16                              ## 0x10
	.byte	17                              ## 0x11
	.byte	20                              ## 0x14
	.byte	21                              ## 0x15
	.byte	24                              ## 0x18
	.byte	25                              ## 0x19
	.byte	28                              ## 0x1c
	.byte	29                              ## 0x1d
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
__ZL28stbi__compute_transparency16P9stbi__pngPti: ## @_ZL28stbi__compute_transparency16P9stbi__pngPti
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
                                        ## kill: def $edi killed $edi def $rdi
	imull	%esi, %edi
	cmpl	$2, %r8d
	je	LBB176_9
## %bb.1:
	cmpl	$4, %r8d
	jne	LBB176_30
## %bb.2:
	testl	%edi, %edi
	je	LBB176_29
## %bb.3:
	movl	%edi, %eax
	xorl	%esi, %esi
	jmp	LBB176_4
	.p2align	4, 0x90
LBB176_8:                               ##   in Loop: Header=BB176_4 Depth=1
	incq	%rsi
	cmpl	%esi, %eax
	je	LBB176_29
LBB176_4:                               ## =>This Inner Loop Header: Depth=1
	movzwl	(%rdx,%rsi,8), %edi
	cmpw	(%rcx), %di
	jne	LBB176_8
## %bb.5:                               ##   in Loop: Header=BB176_4 Depth=1
	movzwl	2(%rdx,%rsi,8), %edi
	cmpw	2(%rcx), %di
	jne	LBB176_8
## %bb.6:                               ##   in Loop: Header=BB176_4 Depth=1
	movzwl	4(%rdx,%rsi,8), %edi
	cmpw	4(%rcx), %di
	jne	LBB176_8
## %bb.7:                               ##   in Loop: Header=BB176_4 Depth=1
	movw	$0, 6(%rdx,%rsi,8)
	jmp	LBB176_8
LBB176_9:
	testl	%edi, %edi
	je	LBB176_29
## %bb.10:
	leal	-1(%rdi), %r11d
	xorl	%r10d, %r10d
	cmpl	$8, %r11d
	jb	LBB176_22
## %bb.11:
	leaq	2(%rcx), %rax
	cmpq	%rdx, %rax
	jbe	LBB176_13
## %bb.12:
	leaq	(%rdx,%r11,4), %rax
	addq	$4, %rax
	cmpq	%rcx, %rax
	ja	LBB176_22
LBB176_13:
	leaq	1(%r11), %r10
	cmpl	$16, %r11d
	jae	LBB176_18
## %bb.14:
	xorl	%r8d, %r8d
	jmp	LBB176_15
LBB176_18:
	movl	%r10d, %eax
	andl	$15, %eax
	testq	%rax, %rax
	movl	$16, %r9d
	cmovneq	%rax, %r9
	movq	%r10, %r8
	subq	%r9, %r8
	vpbroadcastw	(%rcx), %ymm0
	movq	%r11, %rsi
	subq	%r9, %rsi
	movq	$-1, %rax
	vmovdqa	LCPI176_0(%rip), %ymm1          ## ymm1 = <u,u,u,u,u,u,u,u,0,1,4,5,8,9,12,13,u,u,u,u,u,u,u,u,16,17,20,21,24,25,28,29>
	vmovdqa	LCPI176_1(%rip), %ymm2          ## ymm2 = <0,1,4,5,8,9,12,13,u,u,u,u,u,u,u,u,16,17,20,21,24,25,28,29,u,u,u,u,u,u,u,u>
	vpcmpeqd	%ymm3, %ymm3, %ymm3
	.p2align	4, 0x90
LBB176_19:                              ## =>This Inner Loop Header: Depth=1
	vmovdqu	4(%rdx,%rax,4), %ymm4
	vpshufb	%ymm2, %ymm4, %ymm4
	vmovdqu	36(%rdx,%rax,4), %ymm5
	vpshufb	%ymm1, %ymm5, %ymm5
	vpblendd	$204, %ymm5, %ymm4, %ymm4       ## ymm4 = ymm4[0,1],ymm5[2,3],ymm4[4,5],ymm5[6,7]
	vpermq	$216, %ymm4, %ymm4              ## ymm4 = ymm4[0,2,1,3]
	vpcmpeqw	%ymm0, %ymm4, %ymm4
	vpxor	%ymm3, %ymm4, %ymm4
	vpextrw	$0, %xmm4, 6(%rdx,%rax,4)
	vpextrw	$1, %xmm4, 10(%rdx,%rax,4)
	vpextrw	$2, %xmm4, 14(%rdx,%rax,4)
	vpextrw	$3, %xmm4, 18(%rdx,%rax,4)
	vpextrw	$4, %xmm4, 22(%rdx,%rax,4)
	vpextrw	$5, %xmm4, 26(%rdx,%rax,4)
	vpextrw	$6, %xmm4, 30(%rdx,%rax,4)
	vpextrw	$7, %xmm4, 34(%rdx,%rax,4)
	vextracti128	$1, %ymm4, %xmm4
	vpextrw	$0, %xmm4, 38(%rdx,%rax,4)
	vpextrw	$1, %xmm4, 42(%rdx,%rax,4)
	vpextrw	$2, %xmm4, 46(%rdx,%rax,4)
	vpextrw	$3, %xmm4, 50(%rdx,%rax,4)
	vpextrw	$4, %xmm4, 54(%rdx,%rax,4)
	vpextrw	$5, %xmm4, 58(%rdx,%rax,4)
	vpextrw	$6, %xmm4, 62(%rdx,%rax,4)
	vpextrw	$7, %xmm4, 66(%rdx,%rax,4)
	addq	$16, %rax
	cmpq	%rax, %rsi
	jne	LBB176_19
## %bb.20:
	cmpl	$8, %r9d
	ja	LBB176_15
## %bb.21:
	leaq	(%rdx,%r8,4), %rdx
	movl	%r8d, %r10d
	jmp	LBB176_22
LBB176_15:
	movl	%r10d, %eax
	andl	$7, %eax
	testq	%rax, %rax
	movl	$8, %esi
	cmovneq	%rax, %rsi
	subq	%rsi, %r10
	leaq	(%rdx,%r10,4), %rax
	leaq	(%rdx,%r8,4), %rdx
	addq	$30, %rdx
	subq	%rsi, %r11
	subq	%r8, %r11
	movq	$-1, %rsi
	vpxor	%xmm0, %xmm0, %xmm0
	vpcmpeqd	%xmm1, %xmm1, %xmm1
	.p2align	4, 0x90
LBB176_16:                              ## =>This Inner Loop Header: Depth=1
	vpblendw	$85, -10(%rdx,%rsi,4), %xmm0, %xmm2 ## xmm2 = mem[0],xmm0[1],mem[2],xmm0[3],mem[4],xmm0[5],mem[6],xmm0[7]
	vpblendw	$85, -26(%rdx,%rsi,4), %xmm0, %xmm3 ## xmm3 = mem[0],xmm0[1],mem[2],xmm0[3],mem[4],xmm0[5],mem[6],xmm0[7]
	vpackusdw	%xmm2, %xmm3, %xmm2
	vpbroadcastw	(%rcx), %xmm3
	vpcmpeqw	%xmm3, %xmm2, %xmm2
	vpxor	%xmm1, %xmm2, %xmm2
	vpextrw	$0, %xmm2, -24(%rdx,%rsi,4)
	vpextrw	$1, %xmm2, -20(%rdx,%rsi,4)
	vpextrw	$2, %xmm2, -16(%rdx,%rsi,4)
	vpextrw	$3, %xmm2, -12(%rdx,%rsi,4)
	vpextrw	$4, %xmm2, -8(%rdx,%rsi,4)
	vpextrw	$5, %xmm2, -4(%rdx,%rsi,4)
	vpextrw	$6, %xmm2, (%rdx,%rsi,4)
	vpextrw	$7, %xmm2, 4(%rdx,%rsi,4)
	addq	$8, %rsi
	cmpq	%rsi, %r11
	jne	LBB176_16
## %bb.17:
	movq	%rax, %rdx
LBB176_22:
	movl	%edi, %r9d
	subl	%r10d, %r9d
	movl	%r10d, %r8d
	notl	%r8d
	addl	%edi, %r8d
	andl	$3, %r9d
	je	LBB176_26
## %bb.23:
	negl	%r9d
	xorl	%esi, %esi
	.p2align	4, 0x90
LBB176_24:                              ## =>This Inner Loop Header: Depth=1
	movzwl	(%rdx), %r11d
	xorl	%eax, %eax
	cmpw	(%rcx), %r11w
	setne	%al
	negl	%eax
	movw	%ax, 2(%rdx)
	addq	$4, %rdx
	decl	%esi
	cmpl	%esi, %r9d
	jne	LBB176_24
## %bb.25:
	subl	%esi, %r10d
LBB176_26:
	cmpl	$3, %r8d
	jb	LBB176_29
## %bb.27:
	subl	%r10d, %edi
	xorl	%eax, %eax
	.p2align	4, 0x90
LBB176_28:                              ## =>This Inner Loop Header: Depth=1
	movzwl	(%rdx,%rax,4), %r9d
	movzwl	4(%rdx,%rax,4), %r8d
	xorl	%esi, %esi
	cmpw	(%rcx), %r9w
	setne	%sil
	negl	%esi
	movw	%si, 2(%rdx,%rax,4)
	xorl	%esi, %esi
	cmpw	(%rcx), %r8w
	setne	%sil
	negl	%esi
	movw	%si, 6(%rdx,%rax,4)
	movzwl	8(%rdx,%rax,4), %r8d
	xorl	%esi, %esi
	cmpw	(%rcx), %r8w
	setne	%sil
	negl	%esi
	movw	%si, 10(%rdx,%rax,4)
	movzwl	12(%rdx,%rax,4), %r8d
	xorl	%esi, %esi
	cmpw	(%rcx), %r8w
	setne	%sil
	negl	%esi
	movw	%si, 14(%rdx,%rax,4)
	addq	$4, %rax
	cmpl	%eax, %edi
	jne	LBB176_28
LBB176_29:
	popq	%rbp
	vzeroupper
	retq
LBB176_30:
	callq	__ZL28stbi__compute_transparency16P9stbi__pngPti.cold.1
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4                               ## -- Begin function _ZL26stbi__compute_transparencyP9stbi__pngPhi
LCPI177_0:
	.short	255                             ## 0xff
	.short	255                             ## 0xff
	.short	255                             ## 0xff
	.short	255                             ## 0xff
	.short	255                             ## 0xff
	.short	255                             ## 0xff
	.short	255                             ## 0xff
	.short	255                             ## 0xff
LCPI177_1:
	.byte	0                               ## 0x0
	.byte	2                               ## 0x2
	.byte	4                               ## 0x4
	.byte	6                               ## 0x6
	.byte	8                               ## 0x8
	.byte	10                              ## 0xa
	.byte	12                              ## 0xc
	.byte	14                              ## 0xe
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.space	1
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
__ZL26stbi__compute_transparencyP9stbi__pngPhi: ## @_ZL26stbi__compute_transparencyP9stbi__pngPhi
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
                                        ## kill: def $edi killed $edi def $rdi
	imull	%esi, %edi
	cmpl	$2, %r8d
	je	LBB177_9
## %bb.1:
	cmpl	$4, %r8d
	jne	LBB177_30
## %bb.2:
	testl	%edi, %edi
	je	LBB177_29
## %bb.3:
	movl	%edi, %edi
	xorl	%esi, %esi
	jmp	LBB177_4
	.p2align	4, 0x90
LBB177_8:                               ##   in Loop: Header=BB177_4 Depth=1
	incq	%rsi
	cmpl	%esi, %edi
	je	LBB177_29
LBB177_4:                               ## =>This Inner Loop Header: Depth=1
	movzbl	(%rdx,%rsi,4), %eax
	cmpb	(%rcx), %al
	jne	LBB177_8
## %bb.5:                               ##   in Loop: Header=BB177_4 Depth=1
	movzbl	1(%rdx,%rsi,4), %eax
	cmpb	1(%rcx), %al
	jne	LBB177_8
## %bb.6:                               ##   in Loop: Header=BB177_4 Depth=1
	movzbl	2(%rdx,%rsi,4), %eax
	cmpb	2(%rcx), %al
	jne	LBB177_8
## %bb.7:                               ##   in Loop: Header=BB177_4 Depth=1
	movb	$0, 3(%rdx,%rsi,4)
	jmp	LBB177_8
LBB177_9:
	testl	%edi, %edi
	je	LBB177_29
## %bb.10:
	leal	-1(%rdi), %r11d
	xorl	%r10d, %r10d
	cmpl	$8, %r11d
	jb	LBB177_22
## %bb.11:
	leaq	1(%rcx), %rax
	cmpq	%rdx, %rax
	jbe	LBB177_13
## %bb.12:
	leaq	(%rdx,%r11,2), %rax
	addq	$2, %rax
	cmpq	%rcx, %rax
	ja	LBB177_22
LBB177_13:
	leaq	1(%r11), %r10
	cmpl	$16, %r11d
	jae	LBB177_18
## %bb.14:
	xorl	%r8d, %r8d
	jmp	LBB177_15
LBB177_18:
	movl	%r10d, %eax
	andl	$15, %eax
	testq	%rax, %rax
	movl	$16, %r9d
	cmovneq	%rax, %r9
	movq	%r10, %r8
	subq	%r9, %r8
	vpbroadcastb	(%rcx), %xmm0
	movq	%r11, %rsi
	subq	%r9, %rsi
	movq	$-1, %rax
	vmovdqa	LCPI177_0(%rip), %xmm1          ## xmm1 = [255,255,255,255,255,255,255,255]
	vpcmpeqd	%xmm2, %xmm2, %xmm2
	.p2align	4, 0x90
LBB177_19:                              ## =>This Inner Loop Header: Depth=1
	vpand	18(%rdx,%rax,2), %xmm1, %xmm3
	vpand	2(%rdx,%rax,2), %xmm1, %xmm4
	vpackuswb	%xmm3, %xmm4, %xmm3
	vpcmpeqb	%xmm0, %xmm3, %xmm3
	vpxor	%xmm2, %xmm3, %xmm3
	vpextrb	$0, %xmm3, 3(%rdx,%rax,2)
	vpextrb	$1, %xmm3, 5(%rdx,%rax,2)
	vpextrb	$2, %xmm3, 7(%rdx,%rax,2)
	vpextrb	$3, %xmm3, 9(%rdx,%rax,2)
	vpextrb	$4, %xmm3, 11(%rdx,%rax,2)
	vpextrb	$5, %xmm3, 13(%rdx,%rax,2)
	vpextrb	$6, %xmm3, 15(%rdx,%rax,2)
	vpextrb	$7, %xmm3, 17(%rdx,%rax,2)
	vpextrb	$8, %xmm3, 19(%rdx,%rax,2)
	vpextrb	$9, %xmm3, 21(%rdx,%rax,2)
	vpextrb	$10, %xmm3, 23(%rdx,%rax,2)
	vpextrb	$11, %xmm3, 25(%rdx,%rax,2)
	vpextrb	$12, %xmm3, 27(%rdx,%rax,2)
	vpextrb	$13, %xmm3, 29(%rdx,%rax,2)
	vpextrb	$14, %xmm3, 31(%rdx,%rax,2)
	vpextrb	$15, %xmm3, 33(%rdx,%rax,2)
	addq	$16, %rax
	cmpq	%rax, %rsi
	jne	LBB177_19
## %bb.20:
	cmpl	$8, %r9d
	ja	LBB177_15
## %bb.21:
	leaq	(%rdx,%r8,2), %rdx
	movl	%r8d, %r10d
	jmp	LBB177_22
LBB177_15:
	movl	%r10d, %eax
	andl	$7, %eax
	testq	%rax, %rax
	movl	$8, %esi
	cmovneq	%rax, %rsi
	subq	%rsi, %r10
	leaq	(%rdx,%r10,2), %rax
	leaq	(%rdx,%r8,2), %rdx
	addq	$15, %rdx
	subq	%rsi, %r11
	subq	%r8, %r11
	movq	$-1, %rsi
	vmovdqa	LCPI177_1(%rip), %xmm0          ## xmm0 = <0,2,4,6,8,10,12,14,u,u,u,u,u,u,u,u>
	vpcmpeqd	%xmm1, %xmm1, %xmm1
	.p2align	4, 0x90
LBB177_16:                              ## =>This Inner Loop Header: Depth=1
	vmovdqu	-13(%rdx,%rsi,2), %xmm2
	vpshufb	%xmm0, %xmm2, %xmm2
	vpbroadcastb	(%rcx), %xmm3
	vpcmpeqb	%xmm3, %xmm2, %xmm2
	vpxor	%xmm1, %xmm2, %xmm2
	vpextrb	$0, %xmm2, -12(%rdx,%rsi,2)
	vpextrb	$1, %xmm2, -10(%rdx,%rsi,2)
	vpextrb	$2, %xmm2, -8(%rdx,%rsi,2)
	vpextrb	$3, %xmm2, -6(%rdx,%rsi,2)
	vpextrb	$4, %xmm2, -4(%rdx,%rsi,2)
	vpextrb	$5, %xmm2, -2(%rdx,%rsi,2)
	vpextrb	$6, %xmm2, (%rdx,%rsi,2)
	vpextrb	$7, %xmm2, 2(%rdx,%rsi,2)
	addq	$8, %rsi
	cmpq	%rsi, %r11
	jne	LBB177_16
## %bb.17:
	movq	%rax, %rdx
LBB177_22:
	movl	%edi, %r9d
	subl	%r10d, %r9d
	movl	%r10d, %r8d
	notl	%r8d
	addl	%edi, %r8d
	andl	$3, %r9d
	je	LBB177_26
## %bb.23:
	negl	%r9d
	xorl	%esi, %esi
	.p2align	4, 0x90
LBB177_24:                              ## =>This Inner Loop Header: Depth=1
	movzbl	(%rdx), %eax
	cmpb	(%rcx), %al
	setne	%al
	negb	%al
	movb	%al, 1(%rdx)
	addq	$2, %rdx
	decl	%esi
	cmpl	%esi, %r9d
	jne	LBB177_24
## %bb.25:
	subl	%esi, %r10d
LBB177_26:
	cmpl	$3, %r8d
	jb	LBB177_29
## %bb.27:
	subl	%r10d, %edi
	xorl	%esi, %esi
	.p2align	4, 0x90
LBB177_28:                              ## =>This Inner Loop Header: Depth=1
	movzbl	(%rdx,%rsi,2), %eax
	cmpb	(%rcx), %al
	movzbl	2(%rdx,%rsi,2), %r8d
	setne	%al
	negb	%al
	movb	%al, 1(%rdx,%rsi,2)
	cmpb	(%rcx), %r8b
	setne	%al
	negb	%al
	movb	%al, 3(%rdx,%rsi,2)
	movzbl	4(%rdx,%rsi,2), %eax
	cmpb	(%rcx), %al
	setne	%al
	negb	%al
	movb	%al, 5(%rdx,%rsi,2)
	movzbl	6(%rdx,%rsi,2), %eax
	cmpb	(%rcx), %al
	setne	%al
	negb	%al
	movb	%al, 7(%rdx,%rsi,2)
	addq	$4, %rsi
	cmpl	%esi, %edi
	jne	LBB177_28
LBB177_29:
	popq	%rbp
	retq
LBB177_30:
	callq	__ZL26stbi__compute_transparencyP9stbi__pngPhi.cold.1
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL15stbi__de_iphoneP9stbi__png
__ZL15stbi__de_iphoneP9stbi__png:       ## @_ZL15stbi__de_iphoneP9stbi__png
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	4(%rdi), %r8d
	movl	12(%rdi), %eax
	imull	(%rdi), %r8d
	cmpl	$3, %eax
	jne	LBB178_1
## %bb.3:
	testl	%r8d, %r8d
	je	LBB178_24
## %bb.4:
	leal	-1(%r8), %eax
	cmpl	$3, %eax
	jb	LBB178_7
## %bb.5:
	movl	%r8d, %eax
	andl	$-4, %eax
	.p2align	4, 0x90
LBB178_6:                               ## =>This Inner Loop Header: Depth=1
	movzbl	(%rsi), %ecx
	movzbl	2(%rsi), %edx
	movb	%dl, (%rsi)
	movb	%cl, 2(%rsi)
	movzbl	3(%rsi), %ecx
	movzbl	5(%rsi), %edx
	movb	%dl, 3(%rsi)
	movb	%cl, 5(%rsi)
	movzbl	6(%rsi), %ecx
	movzbl	8(%rsi), %edx
	movb	%dl, 6(%rsi)
	movb	%cl, 8(%rsi)
	movzbl	9(%rsi), %ecx
	movzbl	11(%rsi), %edx
	movb	%dl, 9(%rsi)
	movb	%cl, 11(%rsi)
	addq	$12, %rsi
	addl	$-4, %eax
	jne	LBB178_6
LBB178_7:
	testb	$3, %r8b
	je	LBB178_24
## %bb.8:
	andl	$3, %r8d
	leaq	(%r8,%r8,2), %rdi
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB178_9:                               ## =>This Inner Loop Header: Depth=1
	movzbl	(%rsi,%rcx), %edx
	movzbl	2(%rsi,%rcx), %eax
	movb	%al, (%rsi,%rcx)
	movb	%dl, 2(%rsi,%rcx)
	addq	$3, %rcx
	cmpl	%ecx, %edi
	jne	LBB178_9
	jmp	LBB178_24
LBB178_1:
	cmpl	$4, %eax
	jne	LBB178_2
## %bb.10:
	movq	__ZL31stbi__unpremultiply_on_load_set@TLVP(%rip), %rdi
	callq	*(%rdi)
	movq	%rax, %rcx
	movq	__ZL33stbi__unpremultiply_on_load_local@TLVP(%rip), %rdi
	callq	*(%rdi)
	leaq	__ZL34stbi__unpremultiply_on_load_global(%rip), %rdx
	cmpb	$0, (%rcx)
	cmovneq	%rax, %rdx
	cmpl	$0, (%rdx)
	je	LBB178_15
## %bb.11:
	testl	%r8d, %r8d
	je	LBB178_24
## %bb.12:
	movl	%r8d, %r8d
	xorl	%edi, %edi
	jmp	LBB178_13
	.p2align	4, 0x90
LBB178_22:                              ##   in Loop: Header=BB178_13 Depth=1
	movzbl	2(%rsi,%rdi,4), %ecx
	movb	%cl, (%rsi,%rdi,4)
	movb	%al, 2(%rsi,%rdi,4)
	incq	%rdi
	cmpl	%edi, %r8d
	je	LBB178_24
LBB178_13:                              ## =>This Inner Loop Header: Depth=1
	movzbl	3(%rsi,%rdi,4), %ecx
	movzbl	(%rsi,%rdi,4), %eax
	testl	%ecx, %ecx
	je	LBB178_22
## %bb.14:                              ##   in Loop: Header=BB178_13 Depth=1
	movzbl	%al, %r10d
	movl	%ecx, %r9d
	shrl	%r9d
	movzbl	2(%rsi,%rdi,4), %edx
	movl	%edx, %eax
	shll	$8, %eax
	subl	%edx, %eax
	addl	%r9d, %eax
                                        ## kill: def $ax killed $ax killed $eax
	xorl	%edx, %edx
	divw	%cx
	movb	%al, (%rsi,%rdi,4)
	movzbl	1(%rsi,%rdi,4), %edx
	movl	%edx, %eax
	shll	$8, %eax
	subl	%edx, %eax
	addl	%r9d, %eax
                                        ## kill: def $ax killed $ax killed $eax
	xorl	%edx, %edx
	divw	%cx
	movb	%al, 1(%rsi,%rdi,4)
	movl	%r10d, %eax
	shll	$8, %eax
	subl	%r10d, %eax
	addl	%r9d, %eax
                                        ## kill: def $ax killed $ax killed $eax
	xorl	%edx, %edx
	divw	%cx
	movb	%al, 2(%rsi,%rdi,4)
	incq	%rdi
	cmpl	%edi, %r8d
	jne	LBB178_13
	jmp	LBB178_24
LBB178_15:
	testl	%r8d, %r8d
	je	LBB178_24
## %bb.16:
	leal	-1(%r8), %eax
	cmpl	$3, %eax
	jb	LBB178_19
## %bb.17:
	movl	%r8d, %eax
	andl	$-4, %eax
	.p2align	4, 0x90
LBB178_18:                              ## =>This Inner Loop Header: Depth=1
	movzbl	(%rsi), %ecx
	movzbl	2(%rsi), %edx
	movb	%dl, (%rsi)
	movb	%cl, 2(%rsi)
	movzbl	4(%rsi), %ecx
	movzbl	6(%rsi), %edx
	movb	%dl, 4(%rsi)
	movb	%cl, 6(%rsi)
	movzbl	8(%rsi), %ecx
	movzbl	10(%rsi), %edx
	movb	%dl, 8(%rsi)
	movb	%cl, 10(%rsi)
	movzbl	12(%rsi), %ecx
	movzbl	14(%rsi), %edx
	movb	%dl, 12(%rsi)
	movb	%cl, 14(%rsi)
	addq	$16, %rsi
	addl	$-4, %eax
	jne	LBB178_18
LBB178_19:
	testb	$3, %r8b
	je	LBB178_24
## %bb.20:
	andl	$3, %r8d
	xorl	%eax, %eax
	.p2align	4, 0x90
LBB178_21:                              ## =>This Inner Loop Header: Depth=1
	movzbl	(%rsi,%rax,4), %ecx
	movzbl	2(%rsi,%rax,4), %edx
	movb	%dl, (%rsi,%rax,4)
	movb	%cl, 2(%rsi,%rax,4)
	incq	%rax
	cmpl	%eax, %r8d
	jne	LBB178_21
LBB178_24:
	popq	%rbp
	retq
LBB178_2:
	callq	__ZL15stbi__de_iphoneP9stbi__png.cold.1
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__const
	.p2align	5                               ## -- Begin function _ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii
LCPI179_0:
	.space	32,127
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4
LCPI179_1:
	.space	16,127
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii: ## @_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	andq	$-32, %rsp
	subq	$416, %rsp                      ## imm = 0x1A0
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
                                        ## kill: def $r8d killed $r8d def $r8
	movl	%edx, %r14d
	movq	%rsi, %r13
	movq	%rdi, %r12
	movl	16(%rbp), %r15d
	xorl	%ebx, %ebx
	cmpl	$16, %r15d
	sete	%sil
	movq	(%rdi), %rax
	movslq	8(%rax), %r11
	leal	1(%r11), %r10d
	cmpl	%ecx, %r11d
	je	LBB179_2
## %bb.1:
	cmpl	%ecx, %r10d
	jne	LBB179_433
LBB179_2:
	movl	%r9d, %eax
	orl	%r8d, %eax
	js	LBB179_8
## %bb.3:
	testl	%r9d, %r9d
	je	LBB179_5
## %bb.4:
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	xorl	%edx, %edx
	idivl	%r9d
	cmpl	%r8d, %eax
	jl	LBB179_8
LBB179_5:
	movb	%sil, %bl
	incl	%ebx
	movl	%ebx, %edi
	imull	%ecx, %edi
	movl	%r9d, %esi
	imull	%r8d, %esi
	movl	%edi, %eax
	orl	%esi, %eax
	js	LBB179_8
## %bb.6:
	testl	%edi, %edi
	je	LBB179_13
## %bb.7:
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	xorl	%edx, %edx
	idivl	%edi
	cmpl	%esi, %eax
	jge	LBB179_13
LBB179_8:
	movq	$0, 24(%r12)
LBB179_9:
	leaq	L_.str.131(%rip), %rbx
LBB179_10:
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	vzeroupper
	callq	*(%rdi)
	movq	%rbx, (%rax)
LBB179_11:
	xorl	%eax, %eax
LBB179_12:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
LBB179_13:
	movl	%r10d, 220(%rsp)                ## 4-byte Spill
	movl	%r9d, 60(%rsp)                  ## 4-byte Spill
	movq	%r8, 72(%rsp)                   ## 8-byte Spill
	movq	%r11, 120(%rsp)                 ## 8-byte Spill
	movl	%ebx, 48(%rsp)                  ## 4-byte Spill
	movl	%ecx, 52(%rsp)                  ## 4-byte Spill
	movl	%edi, 44(%rsp)                  ## 4-byte Spill
	imull	%edi, %esi
	movslq	%esi, %rdi
	callq	_malloc
	movq	%rax, 24(%r12)
	testq	%rax, %rax
	je	LBB179_9
## %bb.14:
	movq	%rax, %r11
	leaq	L_.str.117(%rip), %rbx
	movq	120(%rsp), %r10                 ## 8-byte Reload
	movl	%r10d, %eax
	movq	72(%rsp), %r9                   ## 8-byte Reload
	orl	%r9d, %eax
	js	LBB179_10
## %bb.15:
	testl	%r9d, %r9d
	je	LBB179_17
## %bb.16:
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	xorl	%edx, %edx
	idivl	%r9d
	cmpl	%r10d, %eax
	jl	LBB179_10
LBB179_17:
	movl	%r10d, %edi
	imull	%r9d, %edi
	movl	%edi, %eax
	orl	%r15d, %eax
	js	LBB179_10
## %bb.18:
	testl	%r15d, %r15d
	je	LBB179_21
## %bb.19:
	movl	$2147483647, %eax               ## imm = 0x7FFFFFFF
	xorl	%edx, %edx
	idivl	%r15d
	cmpl	%edi, %eax
	movl	52(%rsp), %esi                  ## 4-byte Reload
	movl	48(%rsp), %ecx                  ## 4-byte Reload
	jl	LBB179_10
## %bb.20:
	movl	%edi, %r8d
	imull	%r15d, %r8d
	cmpl	$2147483640, %r8d               ## imm = 0x7FFFFFF8
	jle	LBB179_22
	jmp	LBB179_10
LBB179_21:
	xorl	%r8d, %r8d
	movl	52(%rsp), %esi                  ## 4-byte Reload
	movl	48(%rsp), %ecx                  ## 4-byte Reload
LBB179_22:
	addl	$7, %r8d
	shrl	$3, %r8d
	leal	1(%r8), %eax
	movl	60(%rsp), %edx                  ## 4-byte Reload
	imull	%edx, %eax
	cmpl	%r14d, %eax
	jbe	LBB179_24
## %bb.23:
	leaq	L_.str.135(%rip), %rbx
	jmp	LBB179_10
LBB179_24:
	movl	%r9d, %ebx
	imull	%esi, %ebx
	testl	%edx, %edx
	movq	%rbx, 168(%rsp)                 ## 8-byte Spill
	je	LBB179_27
## %bb.25:
	movl	%edi, 56(%rsp)                  ## 4-byte Spill
	cmpl	$8, %r15d
	setl	%r15b
	cmpl	%esi, %r10d
	sete	%bl
	movb	(%r13), %r14b
	cmpb	$4, %r14b
	jbe	LBB179_36
LBB179_26:
	leaq	L_.str.136(%rip), %rbx
	jmp	LBB179_10
LBB179_27:
	movl	$1, %eax
	cmpl	$8, %r15d
	jl	LBB179_12
## %bb.28:
	cmpl	$16, %r15d
	jne	LBB179_12
LBB179_29:
	movq	168(%rsp), %rsi                 ## 8-byte Reload
	imull	60(%rsp), %esi                  ## 4-byte Folded Reload
	movl	$1, %eax
	testl	%esi, %esi
	je	LBB179_12
## %bb.30:
	movq	24(%r12), %rcx
	leal	-1(%rsi), %edx
	cmpl	$3, %edx
	jb	LBB179_33
## %bb.31:
	movl	%esi, %edx
	andl	$-4, %edx
LBB179_32:                              ## =>This Inner Loop Header: Depth=1
	rolw	$8, (%rcx)
	rolw	$8, 2(%rcx)
	rolw	$8, 4(%rcx)
	rolw	$8, 6(%rcx)
	addq	$8, %rcx
	addl	$-4, %edx
	jne	LBB179_32
LBB179_33:
	testb	$3, %sil
	je	LBB179_12
## %bb.34:
	andl	$3, %esi
	xorl	%edx, %edx
LBB179_35:                              ## =>This Inner Loop Header: Depth=1
	rolw	$8, (%rcx,%rdx,2)
	incq	%rdx
	cmpl	%edx, %esi
	jne	LBB179_35
	jmp	LBB179_12
LBB179_36:
	movb	%bl, 24(%rsp)                   ## 1-byte Spill
	movl	%ecx, %edi
	movq	168(%rsp), %rdx                 ## 8-byte Reload
	imull	%edx, %edi
	movl	%r10d, %ebx
	imull	%ecx, %ebx
	movl	%ebx, 8(%rsp)                   ## 4-byte Spill
                                        ## kill: def $edx killed $edx killed $rdx def $rdx
	movq	%r8, %rbx
	subl	%ebx, %edx
	movq	%rdx, 376(%rsp)                 ## 8-byte Spill
	movl	%edi, 36(%rsp)                  ## 4-byte Spill
	movl	%edi, %ecx
	movq	%rcx, %rdx
	negq	%rdx
	movq	%rdx, 192(%rsp)                 ## 8-byte Spill
	movl	%esi, %edi
	movslq	44(%rsp), %r8                   ## 4-byte Folded Reload
	orb	24(%rsp), %r15b                 ## 1-byte Folded Reload
	movl	%r9d, %eax
	andl	$7, %eax
	movl	%eax, 216(%rsp)                 ## 4-byte Spill
	movl	%r9d, %eax
	andl	$-8, %eax
	movl	%eax, 212(%rsp)                 ## 4-byte Spill
	movl	$96, %eax
	subq	%r8, %rax
	movq	%rax, 160(%rsp)                 ## 8-byte Spill
	movq	%r8, %rax
	negq	%rax
	movq	%rax, 80(%rsp)                  ## 8-byte Spill
	subq	%rcx, %rax
	movq	%rax, 352(%rsp)                 ## 8-byte Spill
	movl	$32, %eax
	subq	%r8, %rax
	movq	%rax, 344(%rsp)                 ## 8-byte Spill
	movl	$3, %eax
	subq	%rcx, %rax
	movq	%rax, 336(%rsp)                 ## 8-byte Spill
	movl	$32, %eax
	subq	%rcx, %rax
	movq	%rax, 304(%rsp)                 ## 8-byte Spill
	movl	$1, %eax
	subq	%rcx, %rax
	movq	%rax, 328(%rsp)                 ## 8-byte Spill
	movl	$96, %eax
	subq	%rcx, %rax
	movq	%rax, 312(%rsp)                 ## 8-byte Spill
	vpcmpeqd	%ymm13, %ymm13, %ymm13
	vmovdqa	LCPI179_1(%rip), %xmm14         ## xmm14 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	vmovdqa	LCPI179_0(%rip), %ymm15         ## ymm15 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	movslq	%esi, %rax
	movq	%rax, 384(%rsp)                 ## 8-byte Spill
	leal	-1(%r9), %eax
	movl	%eax, 32(%rsp)                  ## 4-byte Spill
	movl	60(%rsp), %eax                  ## 4-byte Reload
	movq	%rax, 184(%rsp)                 ## 8-byte Spill
	movq	%rcx, 320(%rsp)                 ## 8-byte Spill
	leaq	(%r8,%rcx), %rax
	movq	%rax, 368(%rsp)                 ## 8-byte Spill
	xorl	%eax, %eax
	movq	%rax, 296(%rsp)                 ## 8-byte Spill
	leaq	LJTI179_0(%rip), %rsi
	movl	%r9d, %eax
	movq	%rax, 288(%rsp)                 ## 8-byte Spill
	xorl	%edx, %edx
	movq	%r12, 112(%rsp)                 ## 8-byte Spill
	movq	%rbx, 104(%rsp)                 ## 8-byte Spill
	movb	%r15b, 43(%rsp)                 ## 1-byte Spill
	movq	%r8, 16(%rsp)                   ## 8-byte Spill
	movq	%r11, %r15
	movl	%edi, %r12d
LBB179_37:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB179_47 Depth 2
                                        ##     Child Loop BB179_264 Depth 2
                                        ##       Child Loop BB179_273 Depth 3
                                        ##       Child Loop BB179_276 Depth 3
                                        ##       Child Loop BB179_281 Depth 3
                                        ##     Child Loop BB179_243 Depth 2
                                        ##       Child Loop BB179_252 Depth 3
                                        ##       Child Loop BB179_255 Depth 3
                                        ##       Child Loop BB179_260 Depth 3
                                        ##     Child Loop BB179_218 Depth 2
                                        ##       Child Loop BB179_228 Depth 3
                                        ##       Child Loop BB179_232 Depth 3
                                        ##       Child Loop BB179_238 Depth 3
                                        ##     Child Loop BB179_191 Depth 2
                                        ##       Child Loop BB179_201 Depth 3
                                        ##       Child Loop BB179_209 Depth 3
                                        ##       Child Loop BB179_214 Depth 3
                                        ##     Child Loop BB179_166 Depth 2
                                        ##       Child Loop BB179_175 Depth 3
                                        ##       Child Loop BB179_179 Depth 3
                                        ##       Child Loop BB179_183 Depth 3
                                        ##       Child Loop BB179_187 Depth 3
                                        ##     Child Loop BB179_145 Depth 2
                                        ##       Child Loop BB179_154 Depth 3
                                        ##       Child Loop BB179_157 Depth 3
                                        ##       Child Loop BB179_162 Depth 3
                                        ##     Child Loop BB179_70 Depth 2
                                        ##       Child Loop BB179_78 Depth 3
                                        ##       Child Loop BB179_84 Depth 3
                                        ##       Child Loop BB179_88 Depth 3
                                        ##       Child Loop BB179_90 Depth 3
                                        ##     Child Loop BB179_293 Depth 2
                                        ##     Child Loop BB179_297 Depth 2
                                        ##     Child Loop BB179_367 Depth 2
                                        ##     Child Loop BB179_371 Depth 2
                                        ##     Child Loop BB179_139 Depth 2
                                        ##     Child Loop BB179_359 Depth 2
                                        ##     Child Loop BB179_363 Depth 2
                                        ##     Child Loop BB179_131 Depth 2
                                        ##     Child Loop BB179_351 Depth 2
                                        ##     Child Loop BB179_355 Depth 2
                                        ##     Child Loop BB179_122 Depth 2
                                        ##     Child Loop BB179_349 Depth 2
                                        ##     Child Loop BB179_382 Depth 2
                                        ##     Child Loop BB179_116 Depth 2
                                        ##     Child Loop BB179_341 Depth 2
                                        ##     Child Loop BB179_345 Depth 2
                                        ##     Child Loop BB179_104 Depth 2
                                        ##     Child Loop BB179_108 Depth 2
                                        ##     Child Loop BB179_333 Depth 2
                                        ##     Child Loop BB179_337 Depth 2
                                        ##     Child Loop BB179_98 Depth 2
	cmpl	$7, 16(%rbp)
	jg	LBB179_40
## %bb.38:                              ##   in Loop: Header=BB179_37 Depth=1
	cmpl	%r9d, %ebx
	ja	LBB179_431
## %bb.39:                              ##   in Loop: Header=BB179_37 Depth=1
	addq	376(%rsp), %r15                 ## 8-byte Folded Reload
	movl	$1, 8(%rsp)                     ## 4-byte Folded Spill
	movl	%ebx, %r11d
	movq	%r11, 288(%rsp)                 ## 8-byte Spill
LBB179_40:                              ##   in Loop: Header=BB179_37 Depth=1
	testq	%rdx, %rdx
	movq	%rdx, 200(%rsp)                 ## 8-byte Spill
	jne	LBB179_42
## %bb.41:                              ##   in Loop: Header=BB179_37 Depth=1
	movzbl	%r14b, %eax
	leaq	__ZL16first_row_filter(%rip), %rcx
	movb	(%rax,%rcx), %r14b
LBB179_42:                              ##   in Loop: Header=BB179_37 Depth=1
	leaq	1(%r13), %rbx
	movq	192(%rsp), %rax                 ## 8-byte Reload
	leaq	(%r15,%rax), %r11
	movzbl	%r14b, %eax
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	jle	LBB179_51
## %bb.43:                              ##   in Loop: Header=BB179_37 Depth=1
	movl	8(%rsp), %edx                   ## 4-byte Reload
	xorl	%edi, %edi
	jmp	LBB179_47
	.p2align	4, 0x90
LBB179_44:                              ##   in Loop: Header=BB179_47 Depth=2
	movzbl	(%rbx,%rdi), %ecx
LBB179_45:                              ##   in Loop: Header=BB179_47 Depth=2
	movb	%cl, (%r15,%rdi)
LBB179_46:                              ##   in Loop: Header=BB179_47 Depth=2
	incq	%rdi
	cmpq	%rdi, %rdx
	je	LBB179_51
LBB179_47:                              ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpb	$6, %r14b
	ja	LBB179_46
## %bb.48:                              ##   in Loop: Header=BB179_47 Depth=2
	movslq	(%rsi,%rax,4), %rcx
	addq	%rsi, %rcx
	jmpq	*%rcx
LBB179_49:                              ##   in Loop: Header=BB179_47 Depth=2
	movzbl	(%r11,%rdi), %ecx
	addb	(%rbx,%rdi), %cl
	jmp	LBB179_45
LBB179_50:                              ##   in Loop: Header=BB179_47 Depth=2
	movzbl	(%r11,%rdi), %ecx
	shrb	%cl
	addb	(%rbx,%rdi), %cl
	jmp	LBB179_45
LBB179_51:                              ##   in Loop: Header=BB179_37 Depth=1
	movl	16(%rbp), %ecx
	cmpl	$8, %ecx
	jne	LBB179_55
## %bb.52:                              ##   in Loop: Header=BB179_37 Depth=1
	cmpl	%r12d, %r10d
	je	LBB179_54
## %bb.53:                              ##   in Loop: Header=BB179_37 Depth=1
	movb	$-1, (%r15,%r10)
LBB179_54:                              ##   in Loop: Header=BB179_37 Depth=1
	addq	%r10, %rbx
	movq	%rbx, (%rsp)                    ## 8-byte Spill
	movq	384(%rsp), %rbx                 ## 8-byte Reload
	jmp	LBB179_60
LBB179_55:                              ##   in Loop: Header=BB179_37 Depth=1
	cmpl	$16, %ecx
	jne	LBB179_59
## %bb.56:                              ##   in Loop: Header=BB179_37 Depth=1
	movslq	8(%rsp), %rcx                   ## 4-byte Folded Reload
	cmpl	%r12d, %r10d
	je	LBB179_58
## %bb.57:                              ##   in Loop: Header=BB179_37 Depth=1
	movb	$-1, (%r15,%rcx)
	movb	$-1, 1(%rcx,%r15)
LBB179_58:                              ##   in Loop: Header=BB179_37 Depth=1
	addq	%rcx, %rbx
	movq	%rbx, (%rsp)                    ## 8-byte Spill
	movq	%r8, %rbx
	jmp	LBB179_60
LBB179_59:                              ##   in Loop: Header=BB179_37 Depth=1
	addq	$2, %r13
	movl	$1, %ebx
	movq	%r13, (%rsp)                    ## 8-byte Spill
LBB179_60:                              ##   in Loop: Header=BB179_37 Depth=1
	leaq	(%r15,%rbx), %rdi
	leaq	(%r11,%rbx), %r9
	cmpb	$0, 43(%rsp)                    ## 1-byte Folded Reload
	je	LBB179_64
## %bb.61:                              ##   in Loop: Header=BB179_37 Depth=1
	movq	288(%rsp), %rcx                 ## 8-byte Reload
	leal	-1(%rcx), %r10d
	imull	8(%rsp), %r10d                  ## 4-byte Folded Reload
	movslq	%r10d, %rcx
	movq	%rcx, 24(%rsp)                  ## 8-byte Spill
	cmpb	$6, %r14b
	ja	LBB179_140
## %bb.62:                              ##   in Loop: Header=BB179_37 Depth=1
	leaq	LJTI179_2(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
LBB179_63:                              ##   in Loop: Header=BB179_37 Depth=1
	movq	(%rsp), %rsi                    ## 8-byte Reload
	movq	24(%rsp), %rdx                  ## 8-byte Reload
	vzeroupper
	callq	_memcpy
	vmovdqa	LCPI179_0(%rip), %ymm15         ## ymm15 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	vmovdqa	LCPI179_1(%rip), %xmm14         ## xmm14 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	vpcmpeqd	%ymm13, %ymm13, %ymm13
	jmp	LBB179_140
LBB179_64:                              ##   in Loop: Header=BB179_37 Depth=1
	cmpl	%r12d, 220(%rsp)                ## 4-byte Folded Reload
	jne	LBB179_434
## %bb.65:                              ##   in Loop: Header=BB179_37 Depth=1
	cmpb	$6, %r14b
	ja	LBB179_288
## %bb.66:                              ##   in Loop: Header=BB179_37 Depth=1
	leaq	LJTI179_1(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
LBB179_67:                              ##   in Loop: Header=BB179_37 Depth=1
	movl	32(%rsp), %r10d                 ## 4-byte Reload
	testl	%r10d, %r10d
	je	LBB179_288
## %bb.68:                              ##   in Loop: Header=BB179_37 Depth=1
	movl	8(%rsp), %eax                   ## 4-byte Reload
	movslq	%eax, %r14
	movl	%eax, %esi
	addq	%rbx, %r15
	movl	%esi, %r8d
	andl	$-128, %r8d
	movl	%esi, %r12d
	andl	$-16, %r12d
	leaq	-128(%r8), %rax
	movq	%rax, 24(%rsp)                  ## 8-byte Spill
	movq	%rax, %rcx
	shrq	$7, %rcx
	incq	%rcx
	movq	%rcx, %rax
	movq	%rcx, 128(%rsp)                 ## 8-byte Spill
	andq	$-2, %rcx
	movq	%rcx, 224(%rsp)                 ## 8-byte Spill
	movl	%esi, %r11d
	andl	$3, %r11d
	xorl	%r9d, %r9d
	movq	(%rsp), %r13                    ## 8-byte Reload
	jmp	LBB179_70
LBB179_69:                              ##   in Loop: Header=BB179_70 Depth=2
	movb	$-1, (%rdi,%r14)
	addq	%r14, %r13
	addq	16(%rsp), %rdi                  ## 8-byte Folded Reload
	incq	%r9
	decl	%r10d
	je	LBB179_289
LBB179_70:                              ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB179_78 Depth 3
                                        ##       Child Loop BB179_84 Depth 3
                                        ##       Child Loop BB179_88 Depth 3
                                        ##       Child Loop BB179_90 Depth 3
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	jle	LBB179_69
## %bb.71:                              ##   in Loop: Header=BB179_70 Depth=2
	cmpl	$16, 8(%rsp)                    ## 4-byte Folded Reload
	jb	LBB179_75
## %bb.72:                              ##   in Loop: Header=BB179_70 Depth=2
	movq	%r9, %rax
	imulq	%r14, %rax
	addq	(%rsp), %rax                    ## 8-byte Folded Reload
	movq	%r9, %rcx
	imulq	16(%rsp), %rcx                  ## 8-byte Folded Reload
	addq	%r15, %rcx
	subq	%rax, %rcx
	movl	$0, %eax
	cmpq	$128, %rcx
	jb	LBB179_86
## %bb.73:                              ##   in Loop: Header=BB179_70 Depth=2
	cmpl	$128, 8(%rsp)                   ## 4-byte Folded Reload
	jae	LBB179_76
## %bb.74:                              ##   in Loop: Header=BB179_70 Depth=2
	xorl	%ecx, %ecx
	jmp	LBB179_84
LBB179_75:                              ##   in Loop: Header=BB179_70 Depth=2
	xorl	%eax, %eax
	jmp	LBB179_86
LBB179_76:                              ##   in Loop: Header=BB179_70 Depth=2
	cmpq	$0, 24(%rsp)                    ## 8-byte Folded Reload
	je	LBB179_79
## %bb.77:                              ##   in Loop: Header=BB179_70 Depth=2
	movq	224(%rsp), %rdx                 ## 8-byte Reload
	xorl	%eax, %eax
LBB179_78:                              ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_70 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovups	(%r13,%rax), %ymm0
	vmovups	32(%r13,%rax), %ymm1
	vmovups	64(%r13,%rax), %ymm2
	vmovups	96(%r13,%rax), %ymm3
	vmovups	%ymm0, (%rdi,%rax)
	vmovups	%ymm1, 32(%rdi,%rax)
	vmovups	%ymm2, 64(%rdi,%rax)
	vmovups	%ymm3, 96(%rdi,%rax)
	vmovdqu	128(%r13,%rax), %ymm0
	vmovdqu	160(%r13,%rax), %ymm1
	vmovdqu	192(%r13,%rax), %ymm2
	vmovdqu	224(%r13,%rax), %ymm3
	vmovdqu	%ymm0, 128(%rdi,%rax)
	vmovdqu	%ymm1, 160(%rdi,%rax)
	vmovdqu	%ymm2, 192(%rdi,%rax)
	vmovdqu	%ymm3, 224(%rdi,%rax)
	addq	$256, %rax                      ## imm = 0x100
	addq	$-2, %rdx
	jne	LBB179_78
	jmp	LBB179_80
LBB179_79:                              ##   in Loop: Header=BB179_70 Depth=2
	xorl	%eax, %eax
LBB179_80:                              ##   in Loop: Header=BB179_70 Depth=2
	testb	$1, 128(%rsp)                   ## 1-byte Folded Reload
	je	LBB179_82
## %bb.81:                              ##   in Loop: Header=BB179_70 Depth=2
	vmovdqu	(%r13,%rax), %ymm0
	vmovdqu	32(%r13,%rax), %ymm1
	vmovdqu	64(%r13,%rax), %ymm2
	vmovdqu	96(%r13,%rax), %ymm3
	vmovdqu	%ymm0, (%rdi,%rax)
	vmovdqu	%ymm1, 32(%rdi,%rax)
	vmovdqu	%ymm2, 64(%rdi,%rax)
	vmovdqu	%ymm3, 96(%rdi,%rax)
LBB179_82:                              ##   in Loop: Header=BB179_70 Depth=2
	cmpq	%rsi, %r8
	je	LBB179_69
## %bb.83:                              ##   in Loop: Header=BB179_70 Depth=2
	movq	%r8, %rcx
	movq	%r8, %rax
	testb	$112, %sil
	je	LBB179_86
	.p2align	4, 0x90
LBB179_84:                              ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_70 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovdqu	(%r13,%rcx), %xmm0
	vmovdqu	%xmm0, (%rdi,%rcx)
	addq	$16, %rcx
	cmpq	%rcx, %r12
	jne	LBB179_84
## %bb.85:                              ##   in Loop: Header=BB179_70 Depth=2
	movq	%r12, %rax
	cmpq	%rsi, %r12
	je	LBB179_69
LBB179_86:                              ##   in Loop: Header=BB179_70 Depth=2
	movq	%rax, %rcx
	notq	%rcx
	addq	%rsi, %rcx
	testq	%r11, %r11
	je	LBB179_89
## %bb.87:                              ##   in Loop: Header=BB179_70 Depth=2
	movq	%r11, %rdx
	.p2align	4, 0x90
LBB179_88:                              ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_70 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	(%r13,%rax), %ebx
	movb	%bl, (%rdi,%rax)
	incq	%rax
	decq	%rdx
	jne	LBB179_88
LBB179_89:                              ##   in Loop: Header=BB179_70 Depth=2
	cmpq	$3, %rcx
	jb	LBB179_69
	.p2align	4, 0x90
LBB179_90:                              ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_70 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	(%r13,%rax), %ecx
	movb	%cl, (%rdi,%rax)
	movzbl	1(%r13,%rax), %ecx
	movb	%cl, 1(%rdi,%rax)
	movzbl	2(%r13,%rax), %ecx
	movb	%cl, 2(%rdi,%rax)
	movzbl	3(%r13,%rax), %ecx
	movb	%cl, 3(%rdi,%rax)
	addq	$4, %rax
	cmpq	%rax, %rsi
	jne	LBB179_90
	jmp	LBB179_69
LBB179_91:                              ##   in Loop: Header=BB179_37 Depth=1
	testl	%r10d, %r10d
	jle	LBB179_140
## %bb.92:                              ##   in Loop: Header=BB179_37 Depth=1
	movslq	8(%rsp), %r8                    ## 4-byte Folded Reload
	movl	%r10d, %r9d
	cmpl	$16, %r10d
	jae	LBB179_304
LBB179_93:                              ##   in Loop: Header=BB179_37 Depth=1
	xorl	%eax, %eax
LBB179_94:                              ##   in Loop: Header=BB179_37 Depth=1
	movq	%rax, %rsi
	testb	$1, %r9b
	je	LBB179_96
## %bb.95:                              ##   in Loop: Header=BB179_37 Depth=1
	movq	%rax, %rcx
	subq	%r8, %rcx
	movb	(%rdi,%rcx), %cl
	movq	(%rsp), %rdx                    ## 8-byte Reload
	addb	(%rdx,%rax), %cl
	movb	%cl, (%rdi,%rax)
	movq	%rax, %rsi
	orq	$1, %rsi
LBB179_96:                              ##   in Loop: Header=BB179_37 Depth=1
	notq	%rax
	addq	%r9, %rax
	je	LBB179_140
## %bb.97:                              ##   in Loop: Header=BB179_37 Depth=1
	movq	%rbx, %rax
	subq	%r8, %rax
	addq	%r15, %rax
	incq	%rax
	leaq	(%r15,%rbx), %rcx
	incq	%rcx
LBB179_98:                              ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	-1(%rax,%rsi), %edx
	movq	(%rsp), %rdi                    ## 8-byte Reload
	addb	(%rdi,%rsi), %dl
	movb	%dl, -1(%rcx,%rsi)
	movzbl	(%rax,%rsi), %edx
	addb	1(%rdi,%rsi), %dl
	movb	%dl, (%rcx,%rsi)
	addq	$2, %rsi
	cmpq	%rsi, %r9
	jne	LBB179_98
	jmp	LBB179_140
LBB179_99:                              ##   in Loop: Header=BB179_37 Depth=1
	testl	%r10d, %r10d
	jle	LBB179_140
## %bb.100:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	%r10d, %eax
	cmpl	$16, %r10d
	jae	LBB179_308
LBB179_101:                             ##   in Loop: Header=BB179_37 Depth=1
	xorl	%r11d, %r11d
LBB179_102:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%r11, %r8
	notq	%r8
	addq	%rax, %r8
	movq	%rax, %r9
	andq	$3, %r9
	je	LBB179_106
## %bb.103:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%r11, %rsi
	negq	%rsi
	movq	%rbx, %r10
	leaq	(%r11,%rbx), %rcx
	addq	%r15, %rcx
	movq	192(%rsp), %rdx                 ## 8-byte Reload
	leaq	(%rcx,%rdx), %rdi
	addq	(%rsp), %r11                    ## 8-byte Folded Reload
	xorl	%ebx, %ebx
LBB179_104:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%rdi,%rbx), %edx
	addb	(%r11,%rbx), %dl
	movb	%dl, (%rcx,%rbx)
	incq	%rbx
	decq	%rsi
	cmpq	%rbx, %r9
	jne	LBB179_104
## %bb.105:                             ##   in Loop: Header=BB179_37 Depth=1
	negq	%rsi
	movq	%rsi, %r11
	movq	%r10, %rbx
LBB179_106:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpq	$3, %r8
	jb	LBB179_140
## %bb.107:                             ##   in Loop: Header=BB179_37 Depth=1
	subq	%r11, %rax
	addq	%r11, %rbx
	leaq	(%r15,%rbx), %rcx
	addq	$3, %rcx
	movq	(%rsp), %rdx                    ## 8-byte Reload
	addq	%r11, %rdx
	addq	$3, %rdx
LBB179_108:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	192(%rsp), %rsi                 ## 8-byte Reload
	movzbl	-3(%rcx,%rsi), %ebx
	addb	-3(%rdx), %bl
	movb	%bl, -3(%rcx)
	movzbl	-2(%rcx,%rsi), %ebx
	addb	-2(%rdx), %bl
	movb	%bl, -2(%rcx)
	movzbl	-1(%rcx,%rsi), %ebx
	addb	-1(%rdx), %bl
	movb	%bl, -1(%rcx)
	movzbl	(%rcx,%rsi), %ebx
	addb	(%rdx), %bl
	movb	%bl, (%rcx)
	addq	$4, %rcx
	addq	$4, %rdx
	addq	$-4, %rax
	jne	LBB179_108
	jmp	LBB179_140
LBB179_109:                             ##   in Loop: Header=BB179_37 Depth=1
	testl	%r10d, %r10d
	jle	LBB179_140
## %bb.110:                             ##   in Loop: Header=BB179_37 Depth=1
	movslq	8(%rsp), %r8                    ## 4-byte Folded Reload
	movl	%r10d, %r14d
	cmpl	$16, %r10d
	jae	LBB179_312
LBB179_111:                             ##   in Loop: Header=BB179_37 Depth=1
	xorl	%r11d, %r11d
LBB179_112:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%r11, %r10
	testb	$1, %r14b
	je	LBB179_114
## %bb.113:                             ##   in Loop: Header=BB179_37 Depth=1
	movzbl	(%r9,%r11), %ecx
	movq	%r11, %rdx
	subq	%r8, %rdx
	movzbl	(%rdi,%rdx), %edx
	addl	%ecx, %edx
	shrl	%edx
	movq	(%rsp), %rax                    ## 8-byte Reload
	addb	(%rax,%r11), %dl
	movb	%dl, (%rdi,%r11)
	movq	%r11, %r10
	orq	$1, %r10
LBB179_114:                             ##   in Loop: Header=BB179_37 Depth=1
	notq	%r11
	addq	%r14, %r11
	je	LBB179_140
## %bb.115:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rbx, %rcx
	subq	%r8, %rcx
	leaq	(%r15,%rcx), %rdx
	incq	%rdx
	leaq	(%r15,%rbx), %rsi
	incq	%rsi
	addq	328(%rsp), %r15                 ## 8-byte Folded Reload
	addq	%rbx, %r15
	movq	(%rsp), %rcx                    ## 8-byte Reload
	leaq	1(%rcx), %rdi
LBB179_116:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	-1(%r15,%r10), %ecx
	movzbl	-1(%rdx,%r10), %eax
	addl	%ecx, %eax
	shrl	%eax
	addb	-1(%rdi,%r10), %al
	movb	%al, -1(%rsi,%r10)
	movzbl	(%r15,%r10), %eax
	movzbl	(%rdx,%r10), %ecx
	addl	%eax, %ecx
	shrl	%ecx
	addb	(%rdi,%r10), %cl
	movb	%cl, (%rsi,%r10)
	addq	$-2, %r14
	addq	$2, %rdx
	addq	$2, %rsi
	addq	$2, %r15
	addq	$2, %rdi
	cmpq	%r14, %r10
	jne	LBB179_116
	jmp	LBB179_140
LBB179_117:                             ##   in Loop: Header=BB179_37 Depth=1
	testl	%r10d, %r10d
	jle	LBB179_140
## %bb.118:                             ##   in Loop: Header=BB179_37 Depth=1
	movslq	8(%rsp), %rdx                   ## 4-byte Folded Reload
	movl	%r10d, %r12d
	cmpl	$16, %r10d
	jae	LBB179_317
LBB179_119:                             ##   in Loop: Header=BB179_37 Depth=1
	xorl	%r8d, %r8d
LBB179_120:                             ##   in Loop: Header=BB179_37 Depth=1
	subq	%rdx, %rbx
	addq	%rbx, %r15
	addq	%rbx, %r11
	movq	(%rsp), %r14                    ## 8-byte Reload
	jmp	LBB179_122
LBB179_121:                             ##   in Loop: Header=BB179_122 Depth=2
	cmpl	%esi, %ecx
	cmoval	%r13d, %eax
	cmpl	%edx, %ecx
	cmoval	%r13d, %eax
	addb	(%r14,%r8), %al
	movb	%al, (%rdi,%r8)
	incq	%r15
	incq	%r11
	incq	%rdi
	incq	%r9
	incq	%r14
	decq	%r12
	cmpq	%r12, %r8
	je	LBB179_140
LBB179_122:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	(%r15,%r8), %eax
	movzbl	(%r9,%r8), %r10d
	movzbl	(%r11,%r8), %r13d
	leal	(%r10,%rax), %ebx
	subl	%r13d, %ebx
	movl	%ebx, %edx
	subl	%eax, %edx
	movl	%edx, %ecx
	negl	%ecx
	cmovsl	%edx, %ecx
	movl	%ebx, %esi
	subl	%r10d, %esi
	movl	%esi, %edx
	negl	%edx
	cmovsl	%esi, %edx
	subl	%r13d, %ebx
	movl	%ebx, %esi
	negl	%esi
	cmovsl	%ebx, %esi
	cmpl	%esi, %edx
	ja	LBB179_121
## %bb.123:                             ##   in Loop: Header=BB179_122 Depth=2
	movl	%r10d, %r13d
	jmp	LBB179_121
LBB179_124:                             ##   in Loop: Header=BB179_37 Depth=1
	testl	%r10d, %r10d
	jle	LBB179_140
## %bb.125:                             ##   in Loop: Header=BB179_37 Depth=1
	movslq	8(%rsp), %r8                    ## 4-byte Folded Reload
	movl	%r10d, %r9d
	cmpl	$16, %r10d
	jae	LBB179_323
LBB179_126:                             ##   in Loop: Header=BB179_37 Depth=1
	xorl	%eax, %eax
LBB179_127:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rax, %rsi
	testb	$1, %r9b
	je	LBB179_129
## %bb.128:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rax, %rcx
	subq	%r8, %rcx
	movb	(%rdi,%rcx), %cl
	shrb	%cl
	movq	(%rsp), %rdx                    ## 8-byte Reload
	addb	(%rdx,%rax), %cl
	movb	%cl, (%rdi,%rax)
	movq	%rax, %rsi
	orq	$1, %rsi
LBB179_129:                             ##   in Loop: Header=BB179_37 Depth=1
	notq	%rax
	addq	%r9, %rax
	je	LBB179_140
## %bb.130:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rbx, %rax
	subq	%r8, %rax
	addq	%r15, %rax
	incq	%rax
	leaq	(%r15,%rbx), %rcx
	incq	%rcx
LBB179_131:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	-1(%rax,%rsi), %edx
	shrb	%dl
	movq	(%rsp), %rdi                    ## 8-byte Reload
	addb	(%rdi,%rsi), %dl
	movb	%dl, -1(%rcx,%rsi)
	movzbl	(%rax,%rsi), %edx
	shrb	%dl
	addb	1(%rdi,%rsi), %dl
	movb	%dl, (%rcx,%rsi)
	addq	$2, %rsi
	cmpq	%rsi, %r9
	jne	LBB179_131
	jmp	LBB179_140
LBB179_132:                             ##   in Loop: Header=BB179_37 Depth=1
	testl	%r10d, %r10d
	jle	LBB179_140
## %bb.133:                             ##   in Loop: Header=BB179_37 Depth=1
	movslq	8(%rsp), %r8                    ## 4-byte Folded Reload
	movl	%r10d, %r9d
	cmpl	$16, %r10d
	jae	LBB179_327
LBB179_134:                             ##   in Loop: Header=BB179_37 Depth=1
	xorl	%eax, %eax
LBB179_135:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rax, %rsi
	testb	$1, %r9b
	je	LBB179_137
## %bb.136:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rax, %rcx
	subq	%r8, %rcx
	movb	(%rdi,%rcx), %cl
	movq	(%rsp), %rdx                    ## 8-byte Reload
	addb	(%rdx,%rax), %cl
	movb	%cl, (%rdi,%rax)
	movq	%rax, %rsi
	orq	$1, %rsi
LBB179_137:                             ##   in Loop: Header=BB179_37 Depth=1
	notq	%rax
	addq	%r9, %rax
	je	LBB179_140
## %bb.138:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rbx, %rax
	subq	%r8, %rax
	addq	%r15, %rax
	incq	%rax
	leaq	(%r15,%rbx), %rcx
	incq	%rcx
LBB179_139:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movzbl	-1(%rax,%rsi), %edx
	movq	(%rsp), %rdi                    ## 8-byte Reload
	addb	(%rdi,%rsi), %dl
	movb	%dl, -1(%rcx,%rsi)
	movzbl	(%rax,%rsi), %edx
	addb	1(%rdi,%rsi), %dl
	movb	%dl, (%rcx,%rsi)
	addq	$2, %rsi
	cmpq	%rsi, %r9
	jne	LBB179_139
LBB179_140:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	(%rsp), %r13                    ## 8-byte Reload
	addq	24(%rsp), %r13                  ## 8-byte Folded Reload
	movq	112(%rsp), %r12                 ## 8-byte Reload
	movl	16(%rbp), %r14d
	jmp	LBB179_300
LBB179_142:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	32(%rsp), %r10d                 ## 4-byte Reload
	testl	%r10d, %r10d
	je	LBB179_288
## %bb.143:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	8(%rsp), %eax                   ## 4-byte Reload
	movslq	%eax, %r12
	movl	%eax, %r14d
	leaq	(%r15,%rbx), %rdx
	movl	%r14d, %r11d
	andl	$-128, %r11d
	movl	%r14d, %r9d
	andl	$-16, %r9d
	movq	%r14, %rax
	negq	%rax
	movq	%rax, 24(%rsp)                  ## 8-byte Spill
	movq	160(%rsp), %rax                 ## 8-byte Reload
	movq	%rbx, %rcx
	leaq	(%r15,%rax), %rbx
	addq	%rcx, %rbx
	addq	80(%rsp), %r15                  ## 8-byte Folded Reload
	addq	%rcx, %r15
	movq	%r15, %rsi
	movq	%rdx, %r15
	xorl	%r8d, %r8d
	movq	(%rsp), %r13                    ## 8-byte Reload
	jmp	LBB179_145
LBB179_144:                             ##   in Loop: Header=BB179_145 Depth=2
	movb	$-1, (%rdi,%r12)
	addq	%r12, %r13
	movq	16(%rsp), %rax                  ## 8-byte Reload
	addq	%rax, %rdi
	incq	%r8
	addq	%rax, %rbx
	addq	%rax, %rsi
	decl	%r10d
	je	LBB179_289
LBB179_145:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB179_154 Depth 3
                                        ##       Child Loop BB179_157 Depth 3
                                        ##       Child Loop BB179_162 Depth 3
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	jle	LBB179_144
## %bb.146:                             ##   in Loop: Header=BB179_145 Depth=2
	cmpl	$16, 8(%rsp)                    ## 4-byte Folded Reload
	jb	LBB179_147
## %bb.148:                             ##   in Loop: Header=BB179_145 Depth=2
	movq	%r8, %rax
	imulq	16(%rsp), %rax                  ## 8-byte Folded Reload
	addq	%r15, %rax
	movq	%r8, %rcx
	imulq	%r12, %rcx
	addq	(%rsp), %rcx                    ## 8-byte Folded Reload
	subq	%rcx, %rax
	cmpq	$128, %rax
	jb	LBB179_147
## %bb.149:                             ##   in Loop: Header=BB179_145 Depth=2
	movl	$0, %edx
	cmpl	$128, 44(%rsp)                  ## 4-byte Folded Reload
	jb	LBB179_159
## %bb.150:                             ##   in Loop: Header=BB179_145 Depth=2
	cmpl	$128, 8(%rsp)                   ## 4-byte Folded Reload
	jae	LBB179_153
## %bb.151:                             ##   in Loop: Header=BB179_145 Depth=2
	xorl	%eax, %eax
	jmp	LBB179_157
LBB179_147:                             ##   in Loop: Header=BB179_145 Depth=2
	xorl	%edx, %edx
LBB179_159:                             ##   in Loop: Header=BB179_145 Depth=2
	movq	%rdx, %rax
	testb	$1, %r14b
	je	LBB179_161
## %bb.160:                             ##   in Loop: Header=BB179_145 Depth=2
	movq	%rdx, %rax
	subq	16(%rsp), %rax                  ## 8-byte Folded Reload
	movb	(%rdi,%rax), %al
	addb	(%r13,%rdx), %al
	movb	%al, (%rdi,%rdx)
	movq	%rdx, %rax
	orq	$1, %rax
LBB179_161:                             ##   in Loop: Header=BB179_145 Depth=2
	notq	%rdx
	cmpq	24(%rsp), %rdx                  ## 8-byte Folded Reload
	je	LBB179_144
	.p2align	4, 0x90
LBB179_162:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_145 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	(%rsi,%rax), %ecx
	addb	(%r13,%rax), %cl
	movb	%cl, (%rdi,%rax)
	movzbl	1(%rsi,%rax), %ecx
	addb	1(%r13,%rax), %cl
	movb	%cl, 1(%rdi,%rax)
	addq	$2, %rax
	cmpq	%rax, %r14
	jne	LBB179_162
	jmp	LBB179_144
LBB179_153:                             ##   in Loop: Header=BB179_145 Depth=2
	xorl	%eax, %eax
LBB179_154:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_145 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovdqu	-96(%rbx,%rax), %ymm0
	vmovdqu	-64(%rbx,%rax), %ymm1
	vmovdqu	-32(%rbx,%rax), %ymm2
	vmovdqu	(%rbx,%rax), %ymm3
	vpaddb	(%r13,%rax), %ymm0, %ymm0
	vpaddb	32(%r13,%rax), %ymm1, %ymm1
	vpaddb	64(%r13,%rax), %ymm2, %ymm2
	vpaddb	96(%r13,%rax), %ymm3, %ymm3
	vmovdqu	%ymm0, (%rdi,%rax)
	vmovdqu	%ymm1, 32(%rdi,%rax)
	vmovdqu	%ymm2, 64(%rdi,%rax)
	vmovdqu	%ymm3, 96(%rdi,%rax)
	subq	$-128, %rax
	cmpq	%rax, %r11
	jne	LBB179_154
## %bb.155:                             ##   in Loop: Header=BB179_145 Depth=2
	cmpq	%r14, %r11
	je	LBB179_144
## %bb.156:                             ##   in Loop: Header=BB179_145 Depth=2
	movq	%r11, %rax
	movq	%r11, %rdx
	testb	$112, %r14b
	je	LBB179_159
LBB179_157:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_145 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rsi,%rax), %xmm0
	vpaddb	(%r13,%rax), %xmm0, %xmm0
	vmovdqu	%xmm0, (%rdi,%rax)
	addq	$16, %rax
	cmpq	%rax, %r9
	jne	LBB179_157
## %bb.158:                             ##   in Loop: Header=BB179_145 Depth=2
	movq	%r9, %rdx
	cmpq	%r14, %r9
	je	LBB179_144
	jmp	LBB179_159
LBB179_163:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	32(%rsp), %eax                  ## 4-byte Reload
	testl	%eax, %eax
	je	LBB179_288
## %bb.164:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
	movslq	%ecx, %rsi
	movl	%ecx, %r8d
	leaq	(%r15,%rbx), %rcx
	movq	%rcx, 64(%rsp)                  ## 8-byte Spill
	movl	%r8d, %ecx
	andl	$-128, %ecx
	movq	%rcx, 88(%rsp)                  ## 8-byte Spill
	movl	%r8d, %ecx
	andl	$-16, %ecx
	movq	%rcx, 176(%rsp)                 ## 8-byte Spill
	movq	%r8, 224(%rsp)                  ## 8-byte Spill
                                        ## kill: def $r8d killed $r8d killed $r8 def $r8
	andl	$3, %r8d
	leaq	(%rbx,%r15), %rcx
	addq	$3, %rcx
	movq	%rcx, 128(%rsp)                 ## 8-byte Spill
	addq	336(%rsp), %r15                 ## 8-byte Folded Reload
	addq	%rbx, %r15
	movq	(%rsp), %r13                    ## 8-byte Reload
	leaq	3(%r13), %r11
	xorl	%r10d, %r10d
	movq	%rsi, 96(%rsp)                  ## 8-byte Spill
	jmp	LBB179_166
LBB179_165:                             ##   in Loop: Header=BB179_166 Depth=2
	movb	$-1, (%rdi,%rsi)
	addq	%rsi, %r13
	movq	16(%rsp), %rax                  ## 8-byte Reload
	addq	%rax, %rdi
	addq	%rax, %r9
	incq	%r10
	addq	%rax, 128(%rsp)                 ## 8-byte Folded Spill
	addq	%rax, %r15
	addq	%rsi, %r11
	movl	24(%rsp), %eax                  ## 4-byte Reload
	decl	%eax
	je	LBB179_289
LBB179_166:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB179_175 Depth 3
                                        ##       Child Loop BB179_179 Depth 3
                                        ##       Child Loop BB179_183 Depth 3
                                        ##       Child Loop BB179_187 Depth 3
	movl	%eax, 24(%rsp)                  ## 4-byte Spill
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	jle	LBB179_165
## %bb.167:                             ##   in Loop: Header=BB179_166 Depth=2
	cmpl	$16, 8(%rsp)                    ## 4-byte Folded Reload
	jb	LBB179_168
## %bb.169:                             ##   in Loop: Header=BB179_166 Depth=2
	movq	%r10, %rax
	imulq	16(%rsp), %rax                  ## 8-byte Folded Reload
	addq	64(%rsp), %rax                  ## 8-byte Folded Reload
	movq	%r10, %rcx
	imulq	%rsi, %rcx
	addq	(%rsp), %rcx                    ## 8-byte Folded Reload
	subq	%rcx, %rax
	cmpq	$128, %rax
	jb	LBB179_168
## %bb.170:                             ##   in Loop: Header=BB179_166 Depth=2
	movl	$0, %eax
	cmpl	$128, 36(%rsp)                  ## 4-byte Folded Reload
	jb	LBB179_181
## %bb.171:                             ##   in Loop: Header=BB179_166 Depth=2
	cmpl	$128, 8(%rsp)                   ## 4-byte Folded Reload
	jae	LBB179_174
## %bb.172:                             ##   in Loop: Header=BB179_166 Depth=2
	xorl	%ecx, %ecx
	jmp	LBB179_178
LBB179_168:                             ##   in Loop: Header=BB179_166 Depth=2
	xorl	%eax, %eax
LBB179_181:                             ##   in Loop: Header=BB179_166 Depth=2
	movq	%rax, %r14
	notq	%r14
	addq	224(%rsp), %r14                 ## 8-byte Folded Reload
	testq	%r8, %r8
	je	LBB179_185
## %bb.182:                             ##   in Loop: Header=BB179_166 Depth=2
	movq	%rax, %rcx
	negq	%rcx
	leaq	(%rdi,%rax), %r12
	leaq	(%r9,%rax), %rsi
	addq	%r13, %rax
	xorl	%edx, %edx
	.p2align	4, 0x90
LBB179_183:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_166 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	(%rsi,%rdx), %ebx
	addb	(%rax,%rdx), %bl
	movb	%bl, (%r12,%rdx)
	incq	%rdx
	decq	%rcx
	cmpq	%rdx, %r8
	jne	LBB179_183
## %bb.184:                             ##   in Loop: Header=BB179_166 Depth=2
	negq	%rcx
	movq	%rcx, %rax
	movq	96(%rsp), %rsi                  ## 8-byte Reload
LBB179_185:                             ##   in Loop: Header=BB179_166 Depth=2
	cmpq	$3, %r14
	jb	LBB179_165
## %bb.186:                             ##   in Loop: Header=BB179_166 Depth=2
	movq	224(%rsp), %rbx                 ## 8-byte Reload
	subq	%rax, %rbx
	movq	128(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%rcx,%rax), %r14
	leaq	(%r15,%rax), %rcx
	addq	%r11, %rax
	xorl	%r12d, %r12d
	.p2align	4, 0x90
LBB179_187:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_166 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	-3(%rcx,%r12), %edx
	addb	-3(%rax,%r12), %dl
	movb	%dl, -3(%r14,%r12)
	movzbl	-2(%rcx,%r12), %edx
	addb	-2(%rax,%r12), %dl
	movb	%dl, -2(%r14,%r12)
	movzbl	-1(%rcx,%r12), %edx
	addb	-1(%rax,%r12), %dl
	movb	%dl, -1(%r14,%r12)
	movzbl	(%rcx,%r12), %edx
	addb	(%rax,%r12), %dl
	movb	%dl, (%r14,%r12)
	addq	$4, %r12
	cmpq	%r12, %rbx
	jne	LBB179_187
	jmp	LBB179_165
LBB179_174:                             ##   in Loop: Header=BB179_166 Depth=2
	xorl	%eax, %eax
	movq	88(%rsp), %rcx                  ## 8-byte Reload
LBB179_175:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_166 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovdqu	(%r9,%rax), %ymm0
	vmovdqu	32(%r9,%rax), %ymm1
	vmovdqu	64(%r9,%rax), %ymm2
	vmovdqu	96(%r9,%rax), %ymm3
	vpaddb	(%r13,%rax), %ymm0, %ymm0
	vpaddb	32(%r13,%rax), %ymm1, %ymm1
	vpaddb	64(%r13,%rax), %ymm2, %ymm2
	vpaddb	96(%r13,%rax), %ymm3, %ymm3
	vmovdqu	%ymm0, (%rdi,%rax)
	vmovdqu	%ymm1, 32(%rdi,%rax)
	vmovdqu	%ymm2, 64(%rdi,%rax)
	vmovdqu	%ymm3, 96(%rdi,%rax)
	subq	$-128, %rax
	cmpq	%rax, %rcx
	jne	LBB179_175
## %bb.176:                             ##   in Loop: Header=BB179_166 Depth=2
	cmpq	224(%rsp), %rcx                 ## 8-byte Folded Reload
	je	LBB179_165
## %bb.177:                             ##   in Loop: Header=BB179_166 Depth=2
	movq	88(%rsp), %rax                  ## 8-byte Reload
	movq	%rax, %rcx
	testb	$112, 224(%rsp)                 ## 1-byte Folded Reload
	je	LBB179_181
LBB179_178:                             ##   in Loop: Header=BB179_166 Depth=2
	movq	176(%rsp), %rdx                 ## 8-byte Reload
LBB179_179:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_166 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovdqu	(%r9,%rcx), %xmm0
	vpaddb	(%r13,%rcx), %xmm0, %xmm0
	vmovdqu	%xmm0, (%rdi,%rcx)
	addq	$16, %rcx
	cmpq	%rcx, %rdx
	jne	LBB179_179
## %bb.180:                             ##   in Loop: Header=BB179_166 Depth=2
	movq	%rdx, %rax
	cmpq	224(%rsp), %rdx                 ## 8-byte Folded Reload
	je	LBB179_165
	jmp	LBB179_181
LBB179_188:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	32(%rsp), %r8d                  ## 4-byte Reload
	testl	%r8d, %r8d
	je	LBB179_288
## %bb.189:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	8(%rsp), %eax                   ## 4-byte Reload
	movslq	%eax, %r12
	movl	%eax, %r14d
	leaq	(%r15,%rbx), %rdx
	movl	%r14d, %eax
	andl	$-32, %eax
	movl	%r14d, %r11d
	andl	$-16, %r11d
	movq	%rax, 128(%rsp)                 ## 8-byte Spill
	addq	$-32, %rax
	movq	%rax, 224(%rsp)                 ## 8-byte Spill
	movq	%rax, %rcx
	shrq	$5, %rcx
	incq	%rcx
	movq	%rcx, %rax
	movq	%rcx, 96(%rsp)                  ## 8-byte Spill
	andq	$-2, %rcx
	movq	%rcx, 64(%rsp)                  ## 8-byte Spill
	movq	%r14, %rax
	negq	%rax
	movq	%rax, 24(%rsp)                  ## 8-byte Spill
	movq	344(%rsp), %rax                 ## 8-byte Reload
	leaq	(%r15,%rax), %rcx
	addq	%rbx, %rcx
	addq	80(%rsp), %r15                  ## 8-byte Folded Reload
	addq	%rbx, %r15
	movq	%r15, %rsi
	movq	%rdx, %r15
	xorl	%r10d, %r10d
	movq	(%rsp), %r13                    ## 8-byte Reload
	jmp	LBB179_191
LBB179_190:                             ##   in Loop: Header=BB179_191 Depth=2
	movb	$-1, (%rdi,%r12)
	addq	%r12, %r13
	movq	16(%rsp), %rax                  ## 8-byte Reload
	addq	%rax, %rdi
	addq	%rax, %r9
	incq	%r10
	addq	%rax, %rcx
	addq	%rax, %rsi
	decl	%r8d
	je	LBB179_289
LBB179_191:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB179_201 Depth 3
                                        ##       Child Loop BB179_209 Depth 3
                                        ##       Child Loop BB179_214 Depth 3
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	jle	LBB179_190
## %bb.192:                             ##   in Loop: Header=BB179_191 Depth=2
	cmpl	$16, 8(%rsp)                    ## 4-byte Folded Reload
	jae	LBB179_194
LBB179_193:                             ##   in Loop: Header=BB179_191 Depth=2
	xorl	%ebx, %ebx
LBB179_211:                             ##   in Loop: Header=BB179_191 Depth=2
	movq	%rbx, %rax
	testb	$1, %r14b
	je	LBB179_213
## %bb.212:                             ##   in Loop: Header=BB179_191 Depth=2
	movzbl	(%r9,%rbx), %eax
	movq	%rbx, %rdx
	subq	16(%rsp), %rdx                  ## 8-byte Folded Reload
	movzbl	(%rdi,%rdx), %edx
	addl	%eax, %edx
	shrl	%edx
	addb	(%r13,%rbx), %dl
	movb	%dl, (%rdi,%rbx)
	movq	%rbx, %rax
	orq	$1, %rax
LBB179_213:                             ##   in Loop: Header=BB179_191 Depth=2
	notq	%rbx
	cmpq	24(%rsp), %rbx                  ## 8-byte Folded Reload
	je	LBB179_190
	.p2align	4, 0x90
LBB179_214:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_191 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	(%r9,%rax), %edx
	movzbl	(%rsi,%rax), %ebx
	addl	%edx, %ebx
	shrl	%ebx
	addb	(%r13,%rax), %bl
	movb	%bl, (%rdi,%rax)
	movzbl	1(%r9,%rax), %edx
	movzbl	1(%rsi,%rax), %ebx
	addl	%edx, %ebx
	shrl	%ebx
	addb	1(%r13,%rax), %bl
	movb	%bl, 1(%rdi,%rax)
	addq	$2, %rax
	cmpq	%rax, %r14
	jne	LBB179_214
	jmp	LBB179_190
LBB179_194:                             ##   in Loop: Header=BB179_191 Depth=2
	movq	%r10, %rax
	imulq	16(%rsp), %rax                  ## 8-byte Folded Reload
	addq	%r15, %rax
	movq	%r10, %rdx
	imulq	%r12, %rdx
	addq	(%rsp), %rdx                    ## 8-byte Folded Reload
	subq	%rdx, %rax
	cmpq	$32, %rax
	jb	LBB179_193
## %bb.195:                             ##   in Loop: Header=BB179_191 Depth=2
	cmpl	$32, 36(%rsp)                   ## 4-byte Folded Reload
	jb	LBB179_193
## %bb.196:                             ##   in Loop: Header=BB179_191 Depth=2
	movl	$0, %ebx
	cmpl	$32, 44(%rsp)                   ## 4-byte Folded Reload
	jb	LBB179_211
## %bb.197:                             ##   in Loop: Header=BB179_191 Depth=2
	cmpl	$32, 8(%rsp)                    ## 4-byte Folded Reload
	jae	LBB179_199
## %bb.198:                             ##   in Loop: Header=BB179_191 Depth=2
	xorl	%eax, %eax
	jmp	LBB179_209
LBB179_199:                             ##   in Loop: Header=BB179_191 Depth=2
	cmpq	$0, 224(%rsp)                   ## 8-byte Folded Reload
	je	LBB179_204
## %bb.200:                             ##   in Loop: Header=BB179_191 Depth=2
	movq	64(%rsp), %rbx                  ## 8-byte Reload
	xorl	%eax, %eax
LBB179_201:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_191 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vpmovzxbw	16(%r9,%rax), %ymm0     ## ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	(%r9,%rax), %ymm1       ## ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	-16(%rcx,%rax), %ymm2   ## ymm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpaddw	%ymm0, %ymm2, %ymm0
	vpmovzxbw	-32(%rcx,%rax), %ymm2   ## ymm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpaddw	%ymm1, %ymm2, %ymm1
	vpsrlw	$1, %ymm0, %ymm0
	vpsrlw	$1, %ymm1, %ymm1
	vpackuswb	%ymm0, %ymm1, %ymm0
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpaddb	(%r13,%rax), %ymm0, %ymm0
	vmovdqu	%ymm0, (%rdi,%rax)
	vpmovzxbw	48(%r9,%rax), %ymm0     ## ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	32(%r9,%rax), %ymm1     ## ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	16(%rcx,%rax), %ymm2    ## ymm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	(%rcx,%rax), %ymm3      ## ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpaddw	%ymm0, %ymm2, %ymm0
	vpaddw	%ymm1, %ymm3, %ymm1
	vpsrlw	$1, %ymm0, %ymm0
	vpsrlw	$1, %ymm1, %ymm1
	vpackuswb	%ymm0, %ymm1, %ymm0
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpaddb	32(%r13,%rax), %ymm0, %ymm0
	vmovdqu	%ymm0, 32(%rdi,%rax)
	addq	$64, %rax
	addq	$-2, %rbx
	jne	LBB179_201
	jmp	LBB179_205
LBB179_204:                             ##   in Loop: Header=BB179_191 Depth=2
	xorl	%eax, %eax
LBB179_205:                             ##   in Loop: Header=BB179_191 Depth=2
	testb	$1, 96(%rsp)                    ## 1-byte Folded Reload
	je	LBB179_207
## %bb.206:                             ##   in Loop: Header=BB179_191 Depth=2
	vpmovzxbw	16(%r9,%rax), %ymm0     ## ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	(%r9,%rax), %ymm1       ## ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	movq	%rax, %rdx
	subq	16(%rsp), %rdx                  ## 8-byte Folded Reload
	vpmovzxbw	16(%rdi,%rdx), %ymm2    ## ymm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpaddw	%ymm0, %ymm2, %ymm0
	vpmovzxbw	(%rdi,%rdx), %ymm2      ## ymm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpaddw	%ymm1, %ymm2, %ymm1
	vpsrlw	$1, %ymm0, %ymm0
	vpsrlw	$1, %ymm1, %ymm1
	vpackuswb	%ymm0, %ymm1, %ymm0
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpaddb	(%r13,%rax), %ymm0, %ymm0
	vmovdqu	%ymm0, (%rdi,%rax)
LBB179_207:                             ##   in Loop: Header=BB179_191 Depth=2
	cmpq	%r14, 128(%rsp)                 ## 8-byte Folded Reload
	je	LBB179_190
## %bb.208:                             ##   in Loop: Header=BB179_191 Depth=2
	movq	128(%rsp), %rbx                 ## 8-byte Reload
	movq	%rbx, %rax
	testb	$16, %r14b
	je	LBB179_211
LBB179_209:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_191 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vpmovzxbw	(%r9,%rax), %ymm0       ## ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	(%rsi,%rax), %ymm1      ## ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpaddw	%ymm0, %ymm1, %ymm0
	vpsrlw	$1, %ymm0, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpackuswb	%xmm1, %xmm0, %xmm0
	vpaddb	(%r13,%rax), %xmm0, %xmm0
	vmovdqu	%xmm0, (%rdi,%rax)
	addq	$16, %rax
	cmpq	%rax, %r11
	jne	LBB179_209
## %bb.210:                             ##   in Loop: Header=BB179_191 Depth=2
	movq	%r11, %rbx
	cmpq	%r14, %r11
	je	LBB179_190
	jmp	LBB179_211
LBB179_215:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	32(%rsp), %eax                  ## 4-byte Reload
	testl	%eax, %eax
	je	LBB179_288
## %bb.216:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	8(%rsp), %ecx                   ## 4-byte Reload
	movslq	%ecx, %rdx
	movq	%rdx, 64(%rsp)                  ## 8-byte Spill
	movl	%ecx, %ecx
	leaq	(%r15,%rbx), %rdx
	movq	%rdx, 176(%rsp)                 ## 8-byte Spill
	movl	%ecx, %edx
	andl	$-32, %edx
	movq	%rdx, 280(%rsp)                 ## 8-byte Spill
	movq	%rcx, 24(%rsp)                  ## 8-byte Spill
                                        ## kill: def $ecx killed $ecx killed $rcx def $rcx
	andl	$-16, %ecx
	movq	%rcx, 360(%rsp)                 ## 8-byte Spill
	movq	352(%rsp), %rcx                 ## 8-byte Reload
	leaq	(%r15,%rcx), %r8
	addq	%rbx, %r8
	addq	80(%rsp), %r15                  ## 8-byte Folded Reload
	addq	%rbx, %r15
	xorl	%ecx, %ecx
	movq	%rcx, 88(%rsp)                  ## 8-byte Spill
	movq	(%rsp), %r13                    ## 8-byte Reload
	jmp	LBB179_218
LBB179_217:                             ##   in Loop: Header=BB179_218 Depth=2
	movq	64(%rsp), %rax                  ## 8-byte Reload
	movb	$-1, (%rdi,%rax)
	addq	%rax, %r13
	movq	16(%rsp), %rax                  ## 8-byte Reload
	addq	%rax, %rdi
	addq	%rax, %r9
	incq	88(%rsp)                        ## 8-byte Folded Spill
	addq	%rax, %r8
	addq	%rax, %rdx
	movq	%rdx, %r15
	movl	96(%rsp), %eax                  ## 4-byte Reload
	decl	%eax
	je	LBB179_289
LBB179_218:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB179_228 Depth 3
                                        ##       Child Loop BB179_232 Depth 3
                                        ##       Child Loop BB179_238 Depth 3
	movl	%eax, 96(%rsp)                  ## 4-byte Spill
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	movq	%r15, %rdx
	jle	LBB179_217
## %bb.219:                             ##   in Loop: Header=BB179_218 Depth=2
	cmpl	$16, 8(%rsp)                    ## 4-byte Folded Reload
	jae	LBB179_221
## %bb.220:                             ##   in Loop: Header=BB179_218 Depth=2
	xorl	%ebx, %ebx
	jmp	LBB179_238
LBB179_221:                             ##   in Loop: Header=BB179_218 Depth=2
	movq	88(%rsp), %rcx                  ## 8-byte Reload
	movq	%rcx, %rax
	imulq	16(%rsp), %rax                  ## 8-byte Folded Reload
	addq	176(%rsp), %rax                 ## 8-byte Folded Reload
	imulq	64(%rsp), %rcx                  ## 8-byte Folded Reload
	addq	(%rsp), %rcx                    ## 8-byte Folded Reload
	subq	%rcx, %rax
	cmpq	$32, %rax
	jb	LBB179_235
## %bb.222:                             ##   in Loop: Header=BB179_218 Depth=2
	cmpl	$32, 44(%rsp)                   ## 4-byte Folded Reload
	jb	LBB179_236
## %bb.223:                             ##   in Loop: Header=BB179_218 Depth=2
	cmpl	$32, 36(%rsp)                   ## 4-byte Folded Reload
	jb	LBB179_234
## %bb.224:                             ##   in Loop: Header=BB179_218 Depth=2
	movl	$0, %ebx
	cmpq	$32, 368(%rsp)                  ## 8-byte Folded Reload
	jb	LBB179_238
## %bb.225:                             ##   in Loop: Header=BB179_218 Depth=2
	cmpl	$32, 8(%rsp)                    ## 4-byte Folded Reload
	jae	LBB179_227
## %bb.226:                             ##   in Loop: Header=BB179_218 Depth=2
	xorl	%eax, %eax
	jmp	LBB179_231
LBB179_227:                             ##   in Loop: Header=BB179_218 Depth=2
	xorl	%eax, %eax
	movq	280(%rsp), %rcx                 ## 8-byte Reload
LBB179_228:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_218 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vpmovzxbd	16(%rdx,%rax), %ymm11   ## ymm11 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	(%rdx,%rax), %ymm1      ## ymm1 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpbroadcastq	24(%rdx,%rax), %xmm2
	vpmovzxbd	%xmm2, %ymm3            ## ymm3 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpbroadcastq	8(%rdx,%rax), %xmm5
	vpmovzxbd	16(%r9,%rax), %ymm2     ## ymm2 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	(%r9,%rax), %ymm4       ## ymm4 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	%xmm5, %ymm8            ## ymm8 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpbroadcastq	24(%r9,%rax), %xmm5
	vpmovzxbd	%xmm5, %ymm5            ## ymm5 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpbroadcastq	8(%r9,%rax), %xmm6
	vpbroadcastq	8(%r8,%rax), %xmm7
	vpmovzxbd	%xmm6, %ymm9            ## ymm9 = xmm6[0],zero,zero,zero,xmm6[1],zero,zero,zero,xmm6[2],zero,zero,zero,xmm6[3],zero,zero,zero,xmm6[4],zero,zero,zero,xmm6[5],zero,zero,zero,xmm6[6],zero,zero,zero,xmm6[7],zero,zero,zero
	vpmovzxbd	%xmm7, %ymm10           ## ymm10 = xmm7[0],zero,zero,zero,xmm7[1],zero,zero,zero,xmm7[2],zero,zero,zero,xmm7[3],zero,zero,zero,xmm7[4],zero,zero,zero,xmm7[5],zero,zero,zero,xmm7[6],zero,zero,zero,xmm7[7],zero,zero,zero
	vpbroadcastq	24(%r8,%rax), %xmm0
	vpmovzxbd	(%r8,%rax), %ymm6       ## ymm6 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	16(%r8,%rax), %ymm7     ## ymm7 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero,xmm0[4],zero,zero,zero,xmm0[5],zero,zero,zero,xmm0[6],zero,zero,zero,xmm0[7],zero,zero,zero
	vpaddd	%ymm8, %ymm9, %ymm12
	vpaddd	%ymm3, %ymm5, %ymm13
	vpsubd	%ymm10, %ymm12, %ymm12
	vpsubd	%ymm8, %ymm12, %ymm8
	vpsubd	%ymm9, %ymm12, %ymm9
	vpsubd	%ymm10, %ymm12, %ymm10
	vpaddd	%ymm1, %ymm4, %ymm12
	vpsubd	%ymm0, %ymm13, %ymm13
	vpsubd	%ymm3, %ymm13, %ymm3
	vpsubd	%ymm5, %ymm13, %ymm5
	vpsubd	%ymm0, %ymm13, %ymm13
	vpaddd	%ymm2, %ymm11, %ymm0
	vpsubd	%ymm7, %ymm0, %ymm14
	vpsubd	%ymm6, %ymm12, %ymm12
	vpsubd	%ymm1, %ymm12, %ymm0
	vmovdqa	%ymm0, 128(%rsp)                ## 32-byte Spill
	vpsubd	%ymm11, %ymm14, %ymm0
	vmovdqa	%ymm0, 224(%rsp)                ## 32-byte Spill
	vpabsd	%ymm3, %ymm3
	vpabsd	%ymm8, %ymm8
	vpsubd	%ymm4, %ymm12, %ymm15
	vpsubd	%ymm2, %ymm14, %ymm11
	vpabsd	%ymm5, %ymm1
	vpabsd	%ymm9, %ymm0
	vpsubd	%ymm6, %ymm12, %ymm5
	vpsubd	%ymm7, %ymm14, %ymm6
	vpabsd	%ymm13, %ymm4
	vpcmpeqd	%ymm13, %ymm13, %ymm13
	vpabsd	%ymm10, %ymm2
	vpminud	%ymm0, %ymm8, %ymm7
	vpcmpeqd	%ymm7, %ymm8, %ymm7
	vpxor	%ymm7, %ymm13, %ymm7
	vpminud	%ymm2, %ymm8, %ymm9
	vpcmpeqd	%ymm9, %ymm8, %ymm8
	vpminud	%ymm1, %ymm3, %ymm9
	vpcmpeqd	%ymm3, %ymm9, %ymm9
	vpxor	%ymm13, %ymm8, %ymm8
	vpor	%ymm7, %ymm8, %ymm7
	vpminud	%ymm4, %ymm3, %ymm8
	vpcmpeqd	%ymm3, %ymm8, %ymm3
	vpabsd	224(%rsp), %ymm8                ## 32-byte Folded Reload
	vpabsd	128(%rsp), %ymm10               ## 32-byte Folded Reload
	vpabsd	%ymm11, %ymm11
	vpabsd	%ymm15, %ymm12
	vpabsd	%ymm6, %ymm6
	vpabsd	%ymm5, %ymm5
	vpxor	%ymm13, %ymm9, %ymm9
	vpxor	%ymm3, %ymm13, %ymm3
	vpor	%ymm3, %ymm9, %ymm3
	vpminud	%ymm12, %ymm10, %ymm9
	vpcmpeqd	%ymm9, %ymm10, %ymm9
	vpxor	%ymm13, %ymm9, %ymm9
	vpackssdw	%ymm3, %ymm7, %ymm3
	vpminud	%ymm5, %ymm10, %ymm7
	vpcmpeqd	%ymm7, %ymm10, %ymm7
	vpminud	%ymm11, %ymm8, %ymm10
	vpcmpeqd	%ymm10, %ymm8, %ymm10
	vpxor	%ymm7, %ymm13, %ymm7
	vpor	%ymm7, %ymm9, %ymm7
	vpminud	%ymm6, %ymm8, %ymm9
	vpcmpeqd	%ymm9, %ymm8, %ymm8
	vpxor	%ymm13, %ymm10, %ymm9
	vpxor	%ymm13, %ymm8, %ymm8
	vpor	%ymm8, %ymm9, %ymm8
	vpackssdw	%ymm8, %ymm7, %ymm7
	vpermq	$216, %ymm7, %ymm7              ## ymm7 = ymm7[0,2,1,3]
	vpermq	$216, %ymm3, %ymm3              ## ymm3 = ymm3[0,2,1,3]
	vpacksswb	%ymm3, %ymm7, %ymm3
	vpminud	%ymm6, %ymm11, %ymm6
	vpcmpeqd	%ymm6, %ymm11, %ymm6
	vpminud	%ymm5, %ymm12, %ymm5
	vpcmpeqd	%ymm5, %ymm12, %ymm5
	vpxor	%ymm6, %ymm13, %ymm6
	vpxor	%ymm5, %ymm13, %ymm5
	vpackssdw	%ymm6, %ymm5, %ymm5
	vpminud	%ymm4, %ymm1, %ymm4
	vpcmpeqd	%ymm4, %ymm1, %ymm1
	vpminud	%ymm2, %ymm0, %ymm2
	vpcmpeqd	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm13, %ymm1
	vpxor	%ymm0, %ymm13, %ymm0
	vpackssdw	%ymm1, %ymm0, %ymm0
	vpermq	$216, %ymm5, %ymm1              ## ymm1 = ymm5[0,2,1,3]
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpacksswb	%ymm0, %ymm1, %ymm0
	vmovdqu	(%r9,%rax), %ymm1
	vpblendvb	%ymm0, (%r8,%rax), %ymm1, %ymm0
	vmovdqu	(%rdx,%rax), %ymm1
	vpblendvb	%ymm3, %ymm0, %ymm1, %ymm0
	vpaddb	(%r13,%rax), %ymm0, %ymm0
	vmovdqu	%ymm0, (%rdi,%rax)
	addq	$32, %rax
	cmpq	%rax, %rcx
	jne	LBB179_228
## %bb.229:                             ##   in Loop: Header=BB179_218 Depth=2
	cmpq	24(%rsp), %rcx                  ## 8-byte Folded Reload
	vmovdqa	LCPI179_1(%rip), %xmm14         ## xmm14 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	vmovdqa	LCPI179_0(%rip), %ymm15         ## ymm15 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	je	LBB179_217
## %bb.230:                             ##   in Loop: Header=BB179_218 Depth=2
	movq	280(%rsp), %rbx                 ## 8-byte Reload
	movq	%rbx, %rax
	testb	$16, 24(%rsp)                   ## 1-byte Folded Reload
	je	LBB179_238
LBB179_231:                             ##   in Loop: Header=BB179_218 Depth=2
	movq	360(%rsp), %rcx                 ## 8-byte Reload
LBB179_232:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_218 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rdx,%rax), %xmm8
	vpbroadcastq	8(%rdx,%rax), %xmm1
	vpmovzxbd	%xmm1, %ymm3            ## ymm3 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpmovzxbd	%xmm8, %ymm4            ## ymm4 = xmm8[0],zero,zero,zero,xmm8[1],zero,zero,zero,xmm8[2],zero,zero,zero,xmm8[3],zero,zero,zero,xmm8[4],zero,zero,zero,xmm8[5],zero,zero,zero,xmm8[6],zero,zero,zero,xmm8[7],zero,zero,zero
	vpbroadcastq	8(%r9,%rax), %xmm2
	vmovdqu	(%r9,%rax), %xmm12
	vpmovzxbd	%xmm2, %ymm5            ## ymm5 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpmovzxbd	%xmm12, %ymm6           ## ymm6 = xmm12[0],zero,zero,zero,xmm12[1],zero,zero,zero,xmm12[2],zero,zero,zero,xmm12[3],zero,zero,zero,xmm12[4],zero,zero,zero,xmm12[5],zero,zero,zero,xmm12[6],zero,zero,zero,xmm12[7],zero,zero,zero
	vmovdqu	(%r8,%rax), %xmm2
	vpmovzxbd	%xmm2, %ymm7            ## ymm7 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpbroadcastq	8(%r8,%rax), %xmm0
	vpmovzxbd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero,xmm0[4],zero,zero,zero,xmm0[5],zero,zero,zero,xmm0[6],zero,zero,zero,xmm0[7],zero,zero,zero
	vpaddd	%ymm4, %ymm6, %ymm9
	vpaddd	%ymm3, %ymm5, %ymm10
	vpsubd	%ymm0, %ymm10, %ymm10
	vpsubd	%ymm7, %ymm9, %ymm9
	vpsubd	%ymm4, %ymm9, %ymm4
	vpsubd	%ymm3, %ymm10, %ymm3
	vpabsd	%ymm3, %ymm11
	vpabsd	%ymm4, %ymm4
	vpsubd	%ymm6, %ymm9, %ymm3
	vpsubd	%ymm5, %ymm10, %ymm5
	vpabsd	%ymm5, %ymm5
	vpabsd	%ymm3, %ymm3
	vpsubd	%ymm7, %ymm9, %ymm6
	vpsubd	%ymm0, %ymm10, %ymm0
	vpabsd	%ymm0, %ymm0
	vpabsd	%ymm6, %ymm6
	vpminud	%ymm3, %ymm4, %ymm7
	vpcmpeqd	%ymm7, %ymm4, %ymm7
	vpxor	%ymm7, %ymm13, %ymm7
	vpminud	%ymm5, %ymm11, %ymm9
	vpcmpeqd	%ymm9, %ymm11, %ymm9
	vpxor	%ymm13, %ymm9, %ymm9
	vpminud	%ymm6, %ymm4, %ymm10
	vpcmpeqd	%ymm4, %ymm10, %ymm4
	vpxor	%ymm4, %ymm13, %ymm4
	vpor	%ymm4, %ymm7, %ymm4
	vpminud	%ymm0, %ymm11, %ymm7
	vpcmpeqd	%ymm7, %ymm11, %ymm7
	vpxor	%ymm7, %ymm13, %ymm7
	vpor	%ymm7, %ymm9, %ymm7
	vextracti128	$1, %ymm7, %xmm1
	vpackssdw	%xmm1, %xmm7, %xmm1
	vextracti128	$1, %ymm4, %xmm7
	vpackssdw	%xmm7, %xmm4, %xmm4
	vpacksswb	%xmm1, %xmm4, %xmm1
	vpminud	%ymm0, %ymm5, %ymm0
	vpcmpeqd	%ymm0, %ymm5, %ymm0
	vpxor	%ymm0, %ymm13, %ymm0
	vextracti128	$1, %ymm0, %xmm4
	vpackssdw	%xmm4, %xmm0, %xmm0
	vpminud	%ymm6, %ymm3, %ymm4
	vpcmpeqd	%ymm4, %ymm3, %ymm3
	vpxor	%ymm3, %ymm13, %ymm3
	vextracti128	$1, %ymm3, %xmm4
	vpackssdw	%xmm4, %xmm3, %xmm3
	vpacksswb	%xmm0, %xmm3, %xmm0
	vpblendvb	%xmm0, %xmm2, %xmm12, %xmm0
	vpblendvb	%xmm1, %xmm0, %xmm8, %xmm0
	vpaddb	(%r13,%rax), %xmm0, %xmm0
	vmovdqu	%xmm0, (%rdi,%rax)
	addq	$16, %rax
	cmpq	%rax, %rcx
	jne	LBB179_232
## %bb.233:                             ##   in Loop: Header=BB179_218 Depth=2
	movq	%rcx, %rbx
	cmpq	24(%rsp), %rcx                  ## 8-byte Folded Reload
	jne	LBB179_238
	jmp	LBB179_217
LBB179_234:                             ##   in Loop: Header=BB179_218 Depth=2
	xorl	%ebx, %ebx
	jmp	LBB179_238
LBB179_235:                             ##   in Loop: Header=BB179_218 Depth=2
	xorl	%ebx, %ebx
	jmp	LBB179_238
LBB179_236:                             ##   in Loop: Header=BB179_218 Depth=2
	xorl	%ebx, %ebx
	jmp	LBB179_238
	.p2align	4, 0x90
LBB179_237:                             ##   in Loop: Header=BB179_238 Depth=3
	cmpl	%r12d, %esi
	cmoval	%r10d, %eax
	cmpl	%r14d, %esi
	cmoval	%r10d, %eax
	addb	(%r13,%rbx), %al
	movb	%al, (%rdi,%rbx)
	incq	%rbx
	cmpq	%rbx, 24(%rsp)                  ## 8-byte Folded Reload
	movq	%r15, %rdx
	je	LBB179_217
LBB179_238:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_218 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	(%rdx,%rbx), %eax
	movzbl	(%r9,%rbx), %ecx
	movzbl	(%r8,%rbx), %r10d
	leal	(%rcx,%rax), %r11d
	subl	%r10d, %r11d
	movl	%r11d, %edx
	subl	%eax, %edx
	movl	%edx, %esi
	negl	%esi
	cmovsl	%edx, %esi
	movl	%r11d, %edx
	subl	%ecx, %edx
	movl	%edx, %r14d
	negl	%r14d
	cmovsl	%edx, %r14d
	subl	%r10d, %r11d
	movl	%r11d, %r12d
	negl	%r12d
	cmovsl	%r11d, %r12d
	cmpl	%r12d, %r14d
	ja	LBB179_237
## %bb.239:                             ##   in Loop: Header=BB179_238 Depth=3
	movl	%ecx, %r10d
	jmp	LBB179_237
LBB179_240:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	32(%rsp), %r10d                 ## 4-byte Reload
	testl	%r10d, %r10d
	je	LBB179_288
## %bb.241:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	8(%rsp), %eax                   ## 4-byte Reload
	movslq	%eax, %r12
	movl	%eax, %r14d
	leaq	(%r15,%rbx), %rdx
	movl	%r14d, %r11d
	andl	$-128, %r11d
	movl	%r14d, %r9d
	andl	$-16, %r9d
	movq	%r14, %rax
	negq	%rax
	movq	%rax, 24(%rsp)                  ## 8-byte Spill
	movq	160(%rsp), %rax                 ## 8-byte Reload
	movq	%rbx, %rcx
	leaq	(%r15,%rax), %rbx
	addq	%rcx, %rbx
	addq	80(%rsp), %r15                  ## 8-byte Folded Reload
	addq	%rcx, %r15
	movq	%r15, %rsi
	movq	%rdx, %r15
	xorl	%r8d, %r8d
	movq	(%rsp), %r13                    ## 8-byte Reload
	jmp	LBB179_243
LBB179_242:                             ##   in Loop: Header=BB179_243 Depth=2
	movb	$-1, (%rdi,%r12)
	addq	%r12, %r13
	movq	16(%rsp), %rax                  ## 8-byte Reload
	addq	%rax, %rdi
	incq	%r8
	addq	%rax, %rbx
	addq	%rax, %rsi
	decl	%r10d
	je	LBB179_289
LBB179_243:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB179_252 Depth 3
                                        ##       Child Loop BB179_255 Depth 3
                                        ##       Child Loop BB179_260 Depth 3
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	jle	LBB179_242
## %bb.244:                             ##   in Loop: Header=BB179_243 Depth=2
	cmpl	$16, 8(%rsp)                    ## 4-byte Folded Reload
	jb	LBB179_245
## %bb.246:                             ##   in Loop: Header=BB179_243 Depth=2
	movq	%r8, %rax
	imulq	16(%rsp), %rax                  ## 8-byte Folded Reload
	addq	%r15, %rax
	movq	%r8, %rcx
	imulq	%r12, %rcx
	addq	(%rsp), %rcx                    ## 8-byte Folded Reload
	subq	%rcx, %rax
	cmpq	$128, %rax
	jb	LBB179_245
## %bb.247:                             ##   in Loop: Header=BB179_243 Depth=2
	movl	$0, %edx
	cmpl	$128, 44(%rsp)                  ## 4-byte Folded Reload
	jb	LBB179_257
## %bb.248:                             ##   in Loop: Header=BB179_243 Depth=2
	cmpl	$128, 8(%rsp)                   ## 4-byte Folded Reload
	jae	LBB179_251
## %bb.249:                             ##   in Loop: Header=BB179_243 Depth=2
	xorl	%eax, %eax
	jmp	LBB179_255
LBB179_245:                             ##   in Loop: Header=BB179_243 Depth=2
	xorl	%edx, %edx
LBB179_257:                             ##   in Loop: Header=BB179_243 Depth=2
	movq	%rdx, %rax
	testb	$1, %r14b
	je	LBB179_259
## %bb.258:                             ##   in Loop: Header=BB179_243 Depth=2
	movq	%rdx, %rax
	subq	16(%rsp), %rax                  ## 8-byte Folded Reload
	movb	(%rdi,%rax), %al
	shrb	%al
	addb	(%r13,%rdx), %al
	movb	%al, (%rdi,%rdx)
	movq	%rdx, %rax
	orq	$1, %rax
LBB179_259:                             ##   in Loop: Header=BB179_243 Depth=2
	notq	%rdx
	cmpq	24(%rsp), %rdx                  ## 8-byte Folded Reload
	je	LBB179_242
	.p2align	4, 0x90
LBB179_260:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_243 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	(%rsi,%rax), %ecx
	shrb	%cl
	addb	(%r13,%rax), %cl
	movb	%cl, (%rdi,%rax)
	movzbl	1(%rsi,%rax), %ecx
	shrb	%cl
	addb	1(%r13,%rax), %cl
	movb	%cl, 1(%rdi,%rax)
	addq	$2, %rax
	cmpq	%rax, %r14
	jne	LBB179_260
	jmp	LBB179_242
LBB179_251:                             ##   in Loop: Header=BB179_243 Depth=2
	xorl	%eax, %eax
LBB179_252:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_243 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovdqu	-96(%rbx,%rax), %ymm0
	vmovdqu	-64(%rbx,%rax), %ymm1
	vmovdqu	-32(%rbx,%rax), %ymm2
	vmovdqu	(%rbx,%rax), %ymm3
	vpsrlw	$1, %ymm0, %ymm0
	vpand	%ymm0, %ymm15, %ymm0
	vpsrlw	$1, %ymm1, %ymm1
	vpand	%ymm1, %ymm15, %ymm1
	vpsrlw	$1, %ymm2, %ymm2
	vpand	%ymm2, %ymm15, %ymm2
	vpsrlw	$1, %ymm3, %ymm3
	vpand	%ymm3, %ymm15, %ymm3
	vpaddb	(%r13,%rax), %ymm0, %ymm0
	vpaddb	32(%r13,%rax), %ymm1, %ymm1
	vpaddb	64(%r13,%rax), %ymm2, %ymm2
	vpaddb	96(%r13,%rax), %ymm3, %ymm3
	vmovdqu	%ymm0, (%rdi,%rax)
	vmovdqu	%ymm1, 32(%rdi,%rax)
	vmovdqu	%ymm2, 64(%rdi,%rax)
	vmovdqu	%ymm3, 96(%rdi,%rax)
	subq	$-128, %rax
	cmpq	%rax, %r11
	jne	LBB179_252
## %bb.253:                             ##   in Loop: Header=BB179_243 Depth=2
	cmpq	%r14, %r11
	je	LBB179_242
## %bb.254:                             ##   in Loop: Header=BB179_243 Depth=2
	movq	%r11, %rax
	movq	%r11, %rdx
	testb	$112, %r14b
	je	LBB179_257
LBB179_255:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_243 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rsi,%rax), %xmm0
	vpsrlw	$1, %xmm0, %xmm0
	vpand	%xmm0, %xmm14, %xmm0
	vpaddb	(%r13,%rax), %xmm0, %xmm0
	vmovdqu	%xmm0, (%rdi,%rax)
	addq	$16, %rax
	cmpq	%rax, %r9
	jne	LBB179_255
## %bb.256:                             ##   in Loop: Header=BB179_243 Depth=2
	movq	%r9, %rdx
	cmpq	%r14, %r9
	je	LBB179_242
	jmp	LBB179_257
LBB179_261:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	32(%rsp), %r10d                 ## 4-byte Reload
	testl	%r10d, %r10d
	je	LBB179_288
## %bb.262:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	8(%rsp), %eax                   ## 4-byte Reload
	movslq	%eax, %r12
	movl	%eax, %r14d
	leaq	(%r15,%rbx), %rdx
	movl	%r14d, %r11d
	andl	$-128, %r11d
	movl	%r14d, %r9d
	andl	$-16, %r9d
	movq	%r14, %rax
	negq	%rax
	movq	%rax, 24(%rsp)                  ## 8-byte Spill
	movq	160(%rsp), %rax                 ## 8-byte Reload
	movq	%rbx, %rcx
	leaq	(%r15,%rax), %rbx
	addq	%rcx, %rbx
	addq	80(%rsp), %r15                  ## 8-byte Folded Reload
	addq	%rcx, %r15
	movq	%r15, %rsi
	movq	%rdx, %r15
	xorl	%r8d, %r8d
	movq	(%rsp), %r13                    ## 8-byte Reload
	jmp	LBB179_264
LBB179_263:                             ##   in Loop: Header=BB179_264 Depth=2
	movb	$-1, (%rdi,%r12)
	addq	%r12, %r13
	movq	16(%rsp), %rax                  ## 8-byte Reload
	addq	%rax, %rdi
	incq	%r8
	addq	%rax, %rbx
	addq	%rax, %rsi
	decl	%r10d
	je	LBB179_289
LBB179_264:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB179_273 Depth 3
                                        ##       Child Loop BB179_276 Depth 3
                                        ##       Child Loop BB179_281 Depth 3
	cmpl	$0, 8(%rsp)                     ## 4-byte Folded Reload
	jle	LBB179_263
## %bb.265:                             ##   in Loop: Header=BB179_264 Depth=2
	cmpl	$16, 8(%rsp)                    ## 4-byte Folded Reload
	jb	LBB179_266
## %bb.267:                             ##   in Loop: Header=BB179_264 Depth=2
	movq	%r8, %rax
	imulq	16(%rsp), %rax                  ## 8-byte Folded Reload
	addq	%r15, %rax
	movq	%r8, %rcx
	imulq	%r12, %rcx
	addq	(%rsp), %rcx                    ## 8-byte Folded Reload
	subq	%rcx, %rax
	cmpq	$128, %rax
	jb	LBB179_266
## %bb.268:                             ##   in Loop: Header=BB179_264 Depth=2
	movl	$0, %edx
	cmpl	$128, 44(%rsp)                  ## 4-byte Folded Reload
	jb	LBB179_278
## %bb.269:                             ##   in Loop: Header=BB179_264 Depth=2
	cmpl	$128, 8(%rsp)                   ## 4-byte Folded Reload
	jae	LBB179_272
## %bb.270:                             ##   in Loop: Header=BB179_264 Depth=2
	xorl	%eax, %eax
	jmp	LBB179_276
LBB179_266:                             ##   in Loop: Header=BB179_264 Depth=2
	xorl	%edx, %edx
LBB179_278:                             ##   in Loop: Header=BB179_264 Depth=2
	movq	%rdx, %rax
	testb	$1, %r14b
	je	LBB179_280
## %bb.279:                             ##   in Loop: Header=BB179_264 Depth=2
	movq	%rdx, %rax
	subq	16(%rsp), %rax                  ## 8-byte Folded Reload
	movb	(%rdi,%rax), %al
	addb	(%r13,%rdx), %al
	movb	%al, (%rdi,%rdx)
	movq	%rdx, %rax
	orq	$1, %rax
LBB179_280:                             ##   in Loop: Header=BB179_264 Depth=2
	notq	%rdx
	cmpq	24(%rsp), %rdx                  ## 8-byte Folded Reload
	je	LBB179_263
	.p2align	4, 0x90
LBB179_281:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_264 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movzbl	(%rsi,%rax), %ecx
	addb	(%r13,%rax), %cl
	movb	%cl, (%rdi,%rax)
	movzbl	1(%rsi,%rax), %ecx
	addb	1(%r13,%rax), %cl
	movb	%cl, 1(%rdi,%rax)
	addq	$2, %rax
	cmpq	%rax, %r14
	jne	LBB179_281
	jmp	LBB179_263
LBB179_272:                             ##   in Loop: Header=BB179_264 Depth=2
	xorl	%eax, %eax
LBB179_273:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_264 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovdqu	-96(%rbx,%rax), %ymm0
	vmovdqu	-64(%rbx,%rax), %ymm1
	vmovdqu	-32(%rbx,%rax), %ymm2
	vmovdqu	(%rbx,%rax), %ymm3
	vpaddb	(%r13,%rax), %ymm0, %ymm0
	vpaddb	32(%r13,%rax), %ymm1, %ymm1
	vpaddb	64(%r13,%rax), %ymm2, %ymm2
	vpaddb	96(%r13,%rax), %ymm3, %ymm3
	vmovdqu	%ymm0, (%rdi,%rax)
	vmovdqu	%ymm1, 32(%rdi,%rax)
	vmovdqu	%ymm2, 64(%rdi,%rax)
	vmovdqu	%ymm3, 96(%rdi,%rax)
	subq	$-128, %rax
	cmpq	%rax, %r11
	jne	LBB179_273
## %bb.274:                             ##   in Loop: Header=BB179_264 Depth=2
	cmpq	%r14, %r11
	je	LBB179_263
## %bb.275:                             ##   in Loop: Header=BB179_264 Depth=2
	movq	%r11, %rax
	movq	%r11, %rdx
	testb	$112, %r14b
	je	LBB179_278
LBB179_276:                             ##   Parent Loop BB179_37 Depth=1
                                        ##     Parent Loop BB179_264 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	vmovdqu	(%rsi,%rax), %xmm0
	vpaddb	(%r13,%rax), %xmm0, %xmm0
	vmovdqu	%xmm0, (%rdi,%rax)
	addq	$16, %rax
	cmpq	%rax, %r9
	jne	LBB179_276
## %bb.277:                             ##   in Loop: Header=BB179_264 Depth=2
	movq	%r9, %rdx
	cmpq	%r14, %r9
	je	LBB179_263
	jmp	LBB179_278
LBB179_288:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	(%rsp), %r13                    ## 8-byte Reload
LBB179_289:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	16(%rbp), %r14d
	cmpl	$16, %r14d
	jne	LBB179_299
## %bb.290:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	72(%rsp), %r9                   ## 8-byte Reload
	testl	%r9d, %r9d
	movq	112(%rsp), %r12                 ## 8-byte Reload
	movq	104(%rsp), %rbx                 ## 8-byte Reload
	movq	16(%rsp), %r8                   ## 8-byte Reload
	movl	216(%rsp), %r10d                ## 4-byte Reload
	movq	200(%rsp), %rdx                 ## 8-byte Reload
	je	LBB179_303
## %bb.291:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	296(%rsp), %rcx                 ## 8-byte Reload
	addq	24(%r12), %rcx
	movslq	8(%rsp), %rax                   ## 4-byte Folded Reload
	incq	%rax
	cmpl	$7, 32(%rsp)                    ## 4-byte Folded Reload
	jb	LBB179_295
## %bb.292:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rdx, %r11
	movq	%r8, %rdx
	subq	%rax, %rdx
	movl	212(%rsp), %esi                 ## 4-byte Reload
LBB179_293:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	%rcx, %rbx
	leaq	(%rcx,%rax), %rdi
	movb	$-1, (%rcx,%rax)
	movb	$-1, (%r8,%rdi)
	addq	%r8, %rdi
	movb	$-1, (%r8,%rdi)
	addq	%r8, %rdi
	movb	$-1, (%r8,%rdi)
	addq	%r8, %rdi
	movb	$-1, (%r8,%rdi)
	addq	%r8, %rdi
	movb	$-1, (%r8,%rdi)
	addq	%r8, %rdi
	movb	$-1, (%r8,%rdi)
	addq	%r8, %rdi
	leaq	(%rdi,%r8), %rcx
	addq	%rdx, %rcx
	movb	$-1, (%r8,%rdi)
	addl	$-8, %esi
	jne	LBB179_293
## %bb.294:                             ##   in Loop: Header=BB179_37 Depth=1
	addq	%r8, %rbx
	addq	%r8, %rbx
	addq	%r8, %rbx
	addq	%r8, %rbx
	addq	%r8, %rbx
	addq	%r8, %rbx
	addq	%r8, %rbx
	addq	%r8, %rbx
	movq	%rbx, %rcx
	movq	%r11, %rdx
	movq	104(%rsp), %rbx                 ## 8-byte Reload
LBB179_295:                             ##   in Loop: Header=BB179_37 Depth=1
	testl	%r10d, %r10d
	je	LBB179_298
## %bb.296:                             ##   in Loop: Header=BB179_37 Depth=1
	addq	%rax, %rcx
	movl	%r10d, %eax
LBB179_297:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movb	$-1, (%rcx)
	addq	%r8, %rcx
	decl	%eax
	jne	LBB179_297
LBB179_298:                             ##   in Loop: Header=BB179_37 Depth=1
	leaq	LJTI179_0(%rip), %rsi
	jmp	LBB179_301
LBB179_299:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	112(%rsp), %r12                 ## 8-byte Reload
LBB179_300:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	72(%rsp), %r9                   ## 8-byte Reload
	movq	104(%rsp), %rbx                 ## 8-byte Reload
	movq	16(%rsp), %r8                   ## 8-byte Reload
	leaq	LJTI179_0(%rip), %rsi
	movq	200(%rsp), %rdx                 ## 8-byte Reload
LBB179_301:                             ##   in Loop: Header=BB179_37 Depth=1
	incq	%rdx
	cmpq	184(%rsp), %rdx                 ## 8-byte Folded Reload
	je	LBB179_387
LBB179_302:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	36(%rsp), %eax                  ## 4-byte Reload
                                        ## kill: def $eax killed $eax def $rax
	imull	%edx, %eax
	movq	24(%r12), %r15
	movq	%rax, 296(%rsp)                 ## 8-byte Spill
	addq	%rax, %r15
	movb	(%r13), %r14b
	cmpb	$4, %r14b
	movl	52(%rsp), %r12d                 ## 4-byte Reload
	movq	120(%rsp), %r10                 ## 8-byte Reload
	jbe	LBB179_37
	jmp	LBB179_26
LBB179_303:                             ##   in Loop: Header=BB179_37 Depth=1
	incq	%rdx
	cmpq	184(%rsp), %rdx                 ## 8-byte Folded Reload
	leaq	LJTI179_0(%rip), %rsi
	jne	LBB179_302
	jmp	LBB179_29
LBB179_304:                             ##   in Loop: Header=BB179_37 Depth=1
	leaq	(%r15,%rbx), %rax
	subq	(%rsp), %rax                    ## 8-byte Folded Reload
	cmpq	$128, %rax
	jb	LBB179_93
## %bb.305:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	$0, %eax
	cmpl	$128, 8(%rsp)                   ## 4-byte Folded Reload
	jb	LBB179_94
## %bb.306:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpl	$128, %r10d
	jae	LBB179_332
## %bb.307:                             ##   in Loop: Header=BB179_37 Depth=1
	xorl	%eax, %eax
	jmp	LBB179_336
LBB179_308:                             ##   in Loop: Header=BB179_37 Depth=1
	leaq	(%r15,%rbx), %rcx
	subq	(%rsp), %rcx                    ## 8-byte Folded Reload
	cmpq	$128, %rcx
	jb	LBB179_101
## %bb.309:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	$0, %r11d
	cmpl	$128, 36(%rsp)                  ## 4-byte Folded Reload
	jb	LBB179_102
## %bb.310:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpl	$128, %r10d
	jae	LBB179_340
## %bb.311:                             ##   in Loop: Header=BB179_37 Depth=1
	xorl	%r11d, %r11d
	jmp	LBB179_344
LBB179_312:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%r15, %rax
	leaq	(%r15,%rbx), %rcx
	subq	(%rsp), %rcx                    ## 8-byte Folded Reload
	cmpq	$32, %rcx
	jb	LBB179_111
## %bb.313:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpl	$32, 36(%rsp)                   ## 4-byte Folded Reload
	jb	LBB179_111
## %bb.314:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	$0, %r11d
	cmpl	$32, 8(%rsp)                    ## 4-byte Folded Reload
	jb	LBB179_112
## %bb.315:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpl	$32, %r10d
	jae	LBB179_347
## %bb.316:                             ##   in Loop: Header=BB179_37 Depth=1
	xorl	%r11d, %r11d
	jmp	LBB179_381
LBB179_317:                             ##   in Loop: Header=BB179_37 Depth=1
	leaq	(%r15,%rbx), %rax
	subq	(%rsp), %rax                    ## 8-byte Folded Reload
	cmpq	$32, %rax
	jb	LBB179_119
## %bb.318:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpl	$32, 8(%rsp)                    ## 4-byte Folded Reload
	jb	LBB179_119
## %bb.319:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpl	$32, 36(%rsp)                   ## 4-byte Folded Reload
	jb	LBB179_119
## %bb.320:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	320(%rsp), %rax                 ## 8-byte Reload
	addq	%rdx, %rax
	movl	$0, %r8d
	cmpq	$32, %rax
	jb	LBB179_120
## %bb.321:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpl	$32, %r10d
	jae	LBB179_350
## %bb.322:                             ##   in Loop: Header=BB179_37 Depth=1
	xorl	%r8d, %r8d
	jmp	LBB179_354
LBB179_323:                             ##   in Loop: Header=BB179_37 Depth=1
	leaq	(%r15,%rbx), %rax
	subq	(%rsp), %rax                    ## 8-byte Folded Reload
	cmpq	$128, %rax
	jb	LBB179_126
## %bb.324:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	$0, %eax
	cmpl	$128, 8(%rsp)                   ## 4-byte Folded Reload
	jb	LBB179_127
## %bb.325:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpl	$128, %r10d
	jae	LBB179_358
## %bb.326:                             ##   in Loop: Header=BB179_37 Depth=1
	xorl	%eax, %eax
	jmp	LBB179_362
LBB179_327:                             ##   in Loop: Header=BB179_37 Depth=1
	leaq	(%r15,%rbx), %rax
	subq	(%rsp), %rax                    ## 8-byte Folded Reload
	cmpq	$128, %rax
	jb	LBB179_134
## %bb.328:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	$0, %eax
	cmpl	$128, 8(%rsp)                   ## 4-byte Folded Reload
	jb	LBB179_135
## %bb.329:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpl	$128, %r10d
	jae	LBB179_366
## %bb.330:                             ##   in Loop: Header=BB179_37 Depth=1
	xorl	%eax, %eax
	jmp	LBB179_370
LBB179_332:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	%r9d, %eax
	andl	$-128, %eax
	movq	%rbx, %rcx
	subq	%r8, %rcx
	movq	%r15, %rdx
	addq	%r15, %rcx
	addq	$96, %rcx
	movq	%rbx, %r10
	leaq	(%r15,%rbx), %rsi
	addq	$96, %rsi
	xorl	%edx, %edx
	movq	(%rsp), %rbx                    ## 8-byte Reload
LBB179_333:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	-96(%rcx,%rdx), %ymm0
	vmovdqu	-64(%rcx,%rdx), %ymm1
	vmovdqu	-32(%rcx,%rdx), %ymm2
	vmovdqu	(%rcx,%rdx), %ymm3
	vpaddb	(%rbx,%rdx), %ymm0, %ymm0
	vpaddb	32(%rbx,%rdx), %ymm1, %ymm1
	vpaddb	64(%rbx,%rdx), %ymm2, %ymm2
	vpaddb	96(%rbx,%rdx), %ymm3, %ymm3
	vmovdqu	%ymm0, -96(%rsi,%rdx)
	vmovdqu	%ymm1, -64(%rsi,%rdx)
	vmovdqu	%ymm2, -32(%rsi,%rdx)
	vmovdqu	%ymm3, (%rsi,%rdx)
	subq	$-128, %rdx
	cmpq	%rdx, %rax
	jne	LBB179_333
## %bb.334:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpq	%r9, %rax
	je	LBB179_140
## %bb.335:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%r10, %rbx
	testb	$112, %r9b
	je	LBB179_94
LBB179_336:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rax, %rcx
	movl	%r9d, %eax
	andl	$-16, %eax
	movq	%rbx, %rdx
	subq	%r8, %rdx
	addq	%r15, %rdx
	movq	(%rsp), %rsi                    ## 8-byte Reload
LBB179_337:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rdx,%rcx), %xmm0
	vpaddb	(%rsi,%rcx), %xmm0, %xmm0
	vmovdqu	%xmm0, (%rdi,%rcx)
	addq	$16, %rcx
	cmpq	%rcx, %rax
	jne	LBB179_337
## %bb.338:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpq	%r9, %rax
	jne	LBB179_94
	jmp	LBB179_140
LBB179_340:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	%eax, %r11d
	andl	$-128, %r11d
	movq	312(%rsp), %rcx                 ## 8-byte Reload
	movq	%r15, %rdx
	addq	%r15, %rcx
	addq	%rbx, %rcx
	movq	%rbx, %r8
	leaq	(%r15,%rbx), %rsi
	addq	$96, %rsi
	xorl	%ebx, %ebx
	movq	(%rsp), %rdx                    ## 8-byte Reload
LBB179_341:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	-96(%rcx,%rbx), %ymm0
	vmovdqu	-64(%rcx,%rbx), %ymm1
	vmovdqu	-32(%rcx,%rbx), %ymm2
	vmovdqu	(%rcx,%rbx), %ymm3
	vpaddb	(%rdx,%rbx), %ymm0, %ymm0
	vpaddb	32(%rdx,%rbx), %ymm1, %ymm1
	vpaddb	64(%rdx,%rbx), %ymm2, %ymm2
	vpaddb	96(%rdx,%rbx), %ymm3, %ymm3
	vmovdqu	%ymm0, -96(%rsi,%rbx)
	vmovdqu	%ymm1, -64(%rsi,%rbx)
	vmovdqu	%ymm2, -32(%rsi,%rbx)
	vmovdqu	%ymm3, (%rsi,%rbx)
	subq	$-128, %rbx
	cmpq	%rbx, %r11
	jne	LBB179_341
## %bb.342:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpq	%rax, %r11
	je	LBB179_140
## %bb.343:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%r8, %rbx
	testb	$112, %al
	je	LBB179_102
LBB179_344:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%r11, %rcx
	movl	%eax, %r11d
	andl	$-16, %r11d
	movq	(%rsp), %rdx                    ## 8-byte Reload
LBB179_345:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%r9,%rcx), %xmm0
	vpaddb	(%rdx,%rcx), %xmm0, %xmm0
	vmovdqu	%xmm0, (%rdi,%rcx)
	addq	$16, %rcx
	cmpq	%rcx, %r11
	jne	LBB179_345
## %bb.346:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpq	%rax, %r11
	jne	LBB179_102
	jmp	LBB179_140
LBB179_347:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rbx, 128(%rsp)                 ## 8-byte Spill
	movl	%r14d, %r11d
	andl	$-32, %r11d
	leaq	-32(%r11), %rdx
	movq	%rdx, %rcx
	shrq	$5, %rcx
	incq	%rcx
	testq	%rdx, %rdx
	je	LBB179_376
## %bb.348:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rcx, %rsi
	andq	$-2, %rsi
	movq	304(%rsp), %rax                 ## 8-byte Reload
	movq	%r15, %rbx
	leaq	(%r15,%rax), %r10
	movq	128(%rsp), %rax                 ## 8-byte Reload
	addq	%rax, %r10
	movq	%rax, %rdx
	subq	%r8, %rdx
	leaq	(%r15,%rdx), %r12
	addq	$32, %r12
	leaq	(%r15,%rax), %r13
	addq	$32, %r13
	xorl	%ebx, %ebx
	movq	(%rsp), %rax                    ## 8-byte Reload
LBB179_349:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vpmovzxbw	-16(%r10,%rbx), %ymm0   ## ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	-32(%r10,%rbx), %ymm1   ## ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	-16(%r12,%rbx), %ymm2   ## ymm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpaddw	%ymm0, %ymm2, %ymm0
	vpmovzxbw	-32(%r12,%rbx), %ymm2   ## ymm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpaddw	%ymm1, %ymm2, %ymm1
	vpsrlw	$1, %ymm0, %ymm0
	vpsrlw	$1, %ymm1, %ymm1
	vpackuswb	%ymm0, %ymm1, %ymm0
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpaddb	(%rax,%rbx), %ymm0, %ymm0
	vmovdqu	%ymm0, -32(%r13,%rbx)
	vpmovzxbw	16(%r10,%rbx), %ymm0    ## ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	(%r10,%rbx), %ymm1      ## ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	16(%r12,%rbx), %ymm2    ## ymm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	(%r12,%rbx), %ymm3      ## ymm3 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpaddw	%ymm0, %ymm2, %ymm0
	vpaddw	%ymm1, %ymm3, %ymm1
	vpsrlw	$1, %ymm0, %ymm0
	vpsrlw	$1, %ymm1, %ymm1
	vpackuswb	%ymm0, %ymm1, %ymm0
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpaddb	32(%rax,%rbx), %ymm0, %ymm0
	vmovdqu	%ymm0, (%r13,%rbx)
	addq	$64, %rbx
	addq	$-2, %rsi
	jne	LBB179_349
	jmp	LBB179_377
LBB179_350:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	%r12d, %r8d
	andl	$-32, %r8d
	movq	%rbx, %rsi
	movq	%rbx, %rax
	subq	%rdx, %rax
	leaq	(%r11,%rax), %r10
	addq	%r15, %rax
	xorl	%ebx, %ebx
	movq	(%rsp), %rcx                    ## 8-byte Reload
LBB179_351:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vpmovzxbd	16(%rax,%rbx), %ymm11   ## ymm11 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	(%rax,%rbx), %ymm1      ## ymm1 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpbroadcastq	24(%rax,%rbx), %xmm2
	vpmovzxbd	%xmm2, %ymm3            ## ymm3 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpbroadcastq	8(%rax,%rbx), %xmm5
	vpmovzxbd	16(%r9,%rbx), %ymm2     ## ymm2 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	(%r9,%rbx), %ymm4       ## ymm4 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	%xmm5, %ymm8            ## ymm8 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpbroadcastq	24(%r9,%rbx), %xmm5
	vpmovzxbd	%xmm5, %ymm5            ## ymm5 = xmm5[0],zero,zero,zero,xmm5[1],zero,zero,zero,xmm5[2],zero,zero,zero,xmm5[3],zero,zero,zero,xmm5[4],zero,zero,zero,xmm5[5],zero,zero,zero,xmm5[6],zero,zero,zero,xmm5[7],zero,zero,zero
	vpbroadcastq	8(%r9,%rbx), %xmm6
	vpbroadcastq	8(%r10,%rbx), %xmm7
	vpmovzxbd	%xmm6, %ymm9            ## ymm9 = xmm6[0],zero,zero,zero,xmm6[1],zero,zero,zero,xmm6[2],zero,zero,zero,xmm6[3],zero,zero,zero,xmm6[4],zero,zero,zero,xmm6[5],zero,zero,zero,xmm6[6],zero,zero,zero,xmm6[7],zero,zero,zero
	vpmovzxbd	%xmm7, %ymm10           ## ymm10 = xmm7[0],zero,zero,zero,xmm7[1],zero,zero,zero,xmm7[2],zero,zero,zero,xmm7[3],zero,zero,zero,xmm7[4],zero,zero,zero,xmm7[5],zero,zero,zero,xmm7[6],zero,zero,zero,xmm7[7],zero,zero,zero
	vpbroadcastq	24(%r10,%rbx), %xmm0
	vpmovzxbd	(%r10,%rbx), %ymm6      ## ymm6 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	16(%r10,%rbx), %ymm7    ## ymm7 = mem[0],zero,zero,zero,mem[1],zero,zero,zero,mem[2],zero,zero,zero,mem[3],zero,zero,zero,mem[4],zero,zero,zero,mem[5],zero,zero,zero,mem[6],zero,zero,zero,mem[7],zero,zero,zero
	vpmovzxbd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero,xmm0[4],zero,zero,zero,xmm0[5],zero,zero,zero,xmm0[6],zero,zero,zero,xmm0[7],zero,zero,zero
	vpaddd	%ymm8, %ymm9, %ymm12
	vpaddd	%ymm3, %ymm5, %ymm13
	vpsubd	%ymm10, %ymm12, %ymm12
	vpsubd	%ymm8, %ymm12, %ymm8
	vpsubd	%ymm9, %ymm12, %ymm9
	vpsubd	%ymm10, %ymm12, %ymm10
	vpaddd	%ymm1, %ymm4, %ymm12
	vpsubd	%ymm0, %ymm13, %ymm13
	vpsubd	%ymm3, %ymm13, %ymm3
	vpsubd	%ymm5, %ymm13, %ymm5
	vpsubd	%ymm0, %ymm13, %ymm13
	vpaddd	%ymm2, %ymm11, %ymm0
	vpsubd	%ymm7, %ymm0, %ymm14
	vpsubd	%ymm6, %ymm12, %ymm12
	vpsubd	%ymm1, %ymm12, %ymm0
	vmovdqa	%ymm0, 128(%rsp)                ## 32-byte Spill
	vpsubd	%ymm11, %ymm14, %ymm0
	vmovdqa	%ymm0, 224(%rsp)                ## 32-byte Spill
	vpabsd	%ymm3, %ymm3
	vpabsd	%ymm8, %ymm8
	vpsubd	%ymm4, %ymm12, %ymm15
	vpsubd	%ymm2, %ymm14, %ymm11
	vpabsd	%ymm5, %ymm1
	vpabsd	%ymm9, %ymm0
	vpsubd	%ymm6, %ymm12, %ymm5
	vpsubd	%ymm7, %ymm14, %ymm6
	vpabsd	%ymm13, %ymm4
	vpcmpeqd	%ymm13, %ymm13, %ymm13
	vpabsd	%ymm10, %ymm2
	vpminud	%ymm0, %ymm8, %ymm7
	vpcmpeqd	%ymm7, %ymm8, %ymm7
	vpxor	%ymm7, %ymm13, %ymm7
	vpminud	%ymm2, %ymm8, %ymm9
	vpcmpeqd	%ymm9, %ymm8, %ymm8
	vpminud	%ymm1, %ymm3, %ymm9
	vpcmpeqd	%ymm3, %ymm9, %ymm9
	vpxor	%ymm13, %ymm8, %ymm8
	vpor	%ymm7, %ymm8, %ymm7
	vpminud	%ymm4, %ymm3, %ymm8
	vpcmpeqd	%ymm3, %ymm8, %ymm3
	vpabsd	224(%rsp), %ymm8                ## 32-byte Folded Reload
	vpabsd	128(%rsp), %ymm10               ## 32-byte Folded Reload
	vpabsd	%ymm11, %ymm11
	vpabsd	%ymm15, %ymm12
	vpabsd	%ymm6, %ymm6
	vpabsd	%ymm5, %ymm5
	vpxor	%ymm13, %ymm9, %ymm9
	vpxor	%ymm3, %ymm13, %ymm3
	vpor	%ymm3, %ymm9, %ymm3
	vpminud	%ymm12, %ymm10, %ymm9
	vpcmpeqd	%ymm9, %ymm10, %ymm9
	vpxor	%ymm13, %ymm9, %ymm9
	vpackssdw	%ymm3, %ymm7, %ymm3
	vpminud	%ymm5, %ymm10, %ymm7
	vpcmpeqd	%ymm7, %ymm10, %ymm7
	vpminud	%ymm11, %ymm8, %ymm10
	vpcmpeqd	%ymm10, %ymm8, %ymm10
	vpxor	%ymm7, %ymm13, %ymm7
	vpor	%ymm7, %ymm9, %ymm7
	vpminud	%ymm6, %ymm8, %ymm9
	vpcmpeqd	%ymm9, %ymm8, %ymm8
	vpxor	%ymm13, %ymm10, %ymm9
	vpxor	%ymm13, %ymm8, %ymm8
	vpor	%ymm8, %ymm9, %ymm8
	vpackssdw	%ymm8, %ymm7, %ymm7
	vpermq	$216, %ymm7, %ymm7              ## ymm7 = ymm7[0,2,1,3]
	vpermq	$216, %ymm3, %ymm3              ## ymm3 = ymm3[0,2,1,3]
	vpacksswb	%ymm3, %ymm7, %ymm3
	vpminud	%ymm6, %ymm11, %ymm6
	vpcmpeqd	%ymm6, %ymm11, %ymm6
	vpminud	%ymm5, %ymm12, %ymm5
	vpcmpeqd	%ymm5, %ymm12, %ymm5
	vpxor	%ymm6, %ymm13, %ymm6
	vpxor	%ymm5, %ymm13, %ymm5
	vpackssdw	%ymm6, %ymm5, %ymm5
	vpminud	%ymm4, %ymm1, %ymm4
	vpcmpeqd	%ymm4, %ymm1, %ymm1
	vpminud	%ymm2, %ymm0, %ymm2
	vpcmpeqd	%ymm2, %ymm0, %ymm0
	vpxor	%ymm1, %ymm13, %ymm1
	vpxor	%ymm0, %ymm13, %ymm0
	vpackssdw	%ymm1, %ymm0, %ymm0
	vpermq	$216, %ymm5, %ymm1              ## ymm1 = ymm5[0,2,1,3]
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	vpacksswb	%ymm0, %ymm1, %ymm0
	vmovdqu	(%r9,%rbx), %ymm1
	vpblendvb	%ymm0, (%r10,%rbx), %ymm1, %ymm0
	vmovdqu	(%rax,%rbx), %ymm1
	vpblendvb	%ymm3, %ymm0, %ymm1, %ymm0
	vpaddb	(%rcx,%rbx), %ymm0, %ymm0
	vmovdqu	%ymm0, (%rdi,%rbx)
	addq	$32, %rbx
	cmpq	%rbx, %r8
	jne	LBB179_351
## %bb.352:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpq	%r12, %r8
	vmovdqa	LCPI179_1(%rip), %xmm14         ## xmm14 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	vmovdqa	LCPI179_0(%rip), %ymm15         ## ymm15 = [127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127]
	je	LBB179_140
## %bb.353:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rsi, %rbx
	testb	$16, %r12b
	je	LBB179_120
LBB179_354:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	%r12d, %eax
	andl	$-16, %eax
	movq	%rbx, 128(%rsp)                 ## 8-byte Spill
	subq	%rdx, %rbx
	leaq	(%r11,%rbx), %rsi
	addq	%r15, %rbx
	movq	%rax, %r14
	movq	%rdi, %r10
	movq	%r9, %rcx
	movq	(%rsp), %r13                    ## 8-byte Reload
LBB179_355:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rbx,%r8), %xmm8
	vpbroadcastq	8(%rbx,%r8), %xmm1
	vpmovzxbd	%xmm1, %ymm3            ## ymm3 = xmm1[0],zero,zero,zero,xmm1[1],zero,zero,zero,xmm1[2],zero,zero,zero,xmm1[3],zero,zero,zero,xmm1[4],zero,zero,zero,xmm1[5],zero,zero,zero,xmm1[6],zero,zero,zero,xmm1[7],zero,zero,zero
	vpmovzxbd	%xmm8, %ymm4            ## ymm4 = xmm8[0],zero,zero,zero,xmm8[1],zero,zero,zero,xmm8[2],zero,zero,zero,xmm8[3],zero,zero,zero,xmm8[4],zero,zero,zero,xmm8[5],zero,zero,zero,xmm8[6],zero,zero,zero,xmm8[7],zero,zero,zero
	vpbroadcastq	8(%rcx,%r8), %xmm2
	vmovdqu	(%rcx,%r8), %xmm12
	vpmovzxbd	%xmm2, %ymm5            ## ymm5 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpmovzxbd	%xmm12, %ymm6           ## ymm6 = xmm12[0],zero,zero,zero,xmm12[1],zero,zero,zero,xmm12[2],zero,zero,zero,xmm12[3],zero,zero,zero,xmm12[4],zero,zero,zero,xmm12[5],zero,zero,zero,xmm12[6],zero,zero,zero,xmm12[7],zero,zero,zero
	vmovdqu	(%rsi,%r8), %xmm2
	vpmovzxbd	%xmm2, %ymm7            ## ymm7 = xmm2[0],zero,zero,zero,xmm2[1],zero,zero,zero,xmm2[2],zero,zero,zero,xmm2[3],zero,zero,zero,xmm2[4],zero,zero,zero,xmm2[5],zero,zero,zero,xmm2[6],zero,zero,zero,xmm2[7],zero,zero,zero
	vpbroadcastq	8(%rsi,%r8), %xmm0
	vpmovzxbd	%xmm0, %ymm0            ## ymm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero,xmm0[4],zero,zero,zero,xmm0[5],zero,zero,zero,xmm0[6],zero,zero,zero,xmm0[7],zero,zero,zero
	vpaddd	%ymm4, %ymm6, %ymm9
	vpaddd	%ymm3, %ymm5, %ymm10
	vpsubd	%ymm0, %ymm10, %ymm10
	vpsubd	%ymm7, %ymm9, %ymm9
	vpsubd	%ymm4, %ymm9, %ymm4
	vpsubd	%ymm3, %ymm10, %ymm3
	vpabsd	%ymm3, %ymm11
	vpabsd	%ymm4, %ymm4
	vpsubd	%ymm6, %ymm9, %ymm3
	vpsubd	%ymm5, %ymm10, %ymm5
	vpabsd	%ymm5, %ymm5
	vpabsd	%ymm3, %ymm3
	vpsubd	%ymm7, %ymm9, %ymm6
	vpsubd	%ymm0, %ymm10, %ymm0
	vpabsd	%ymm0, %ymm0
	vpabsd	%ymm6, %ymm6
	vpminud	%ymm3, %ymm4, %ymm7
	vpcmpeqd	%ymm7, %ymm4, %ymm7
	vpxor	%ymm7, %ymm13, %ymm7
	vpminud	%ymm5, %ymm11, %ymm9
	vpcmpeqd	%ymm9, %ymm11, %ymm9
	vpxor	%ymm13, %ymm9, %ymm9
	vpminud	%ymm6, %ymm4, %ymm10
	vpcmpeqd	%ymm4, %ymm10, %ymm4
	vpxor	%ymm4, %ymm13, %ymm4
	vpor	%ymm4, %ymm7, %ymm4
	vpminud	%ymm0, %ymm11, %ymm7
	vpcmpeqd	%ymm7, %ymm11, %ymm7
	vpxor	%ymm7, %ymm13, %ymm7
	vpor	%ymm7, %ymm9, %ymm7
	vextracti128	$1, %ymm7, %xmm1
	vpackssdw	%xmm1, %xmm7, %xmm1
	vextracti128	$1, %ymm4, %xmm7
	vpackssdw	%xmm7, %xmm4, %xmm4
	vpacksswb	%xmm1, %xmm4, %xmm1
	vpminud	%ymm0, %ymm5, %ymm0
	vpcmpeqd	%ymm0, %ymm5, %ymm0
	vpxor	%ymm0, %ymm13, %ymm0
	vextracti128	$1, %ymm0, %xmm4
	vpackssdw	%xmm4, %xmm0, %xmm0
	vpminud	%ymm6, %ymm3, %ymm4
	vpcmpeqd	%ymm4, %ymm3, %ymm3
	vpxor	%ymm3, %ymm13, %ymm3
	vextracti128	$1, %ymm3, %xmm4
	vpackssdw	%xmm4, %xmm3, %xmm3
	vpacksswb	%xmm0, %xmm3, %xmm0
	vpblendvb	%xmm0, %xmm2, %xmm12, %xmm0
	vpblendvb	%xmm1, %xmm0, %xmm8, %xmm0
	vpaddb	(%r13,%r8), %xmm0, %xmm0
	vmovdqu	%xmm0, (%r10,%r8)
	addq	$16, %r13
	addq	$16, %rsi
	addq	$16, %rbx
	addq	$16, %rcx
	addq	$16, %r10
	addq	$-16, %rax
	cmpq	%rax, %r8
	jne	LBB179_355
## %bb.356:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%r14, %r8
	cmpq	%r12, %r14
	movq	128(%rsp), %rbx                 ## 8-byte Reload
	jne	LBB179_120
	jmp	LBB179_140
LBB179_358:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	%r9d, %eax
	andl	$-128, %eax
	movq	%rbx, %rcx
	subq	%r8, %rcx
	movq	%r15, %rdx
	leaq	(%r15,%rcx), %rsi
	addq	$96, %rsi
	movq	%rbx, %r10
	leaq	(%r15,%rbx), %rdx
	addq	$96, %rdx
	xorl	%ecx, %ecx
	movq	(%rsp), %rbx                    ## 8-byte Reload
LBB179_359:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	-96(%rsi,%rcx), %ymm0
	vmovdqu	-64(%rsi,%rcx), %ymm1
	vmovdqu	-32(%rsi,%rcx), %ymm2
	vmovdqu	(%rsi,%rcx), %ymm3
	vpsrlw	$1, %ymm0, %ymm0
	vpand	%ymm0, %ymm15, %ymm0
	vpsrlw	$1, %ymm1, %ymm1
	vpand	%ymm1, %ymm15, %ymm1
	vpsrlw	$1, %ymm2, %ymm2
	vpand	%ymm2, %ymm15, %ymm2
	vpsrlw	$1, %ymm3, %ymm3
	vpand	%ymm3, %ymm15, %ymm3
	vpaddb	(%rbx,%rcx), %ymm0, %ymm0
	vpaddb	32(%rbx,%rcx), %ymm1, %ymm1
	vpaddb	64(%rbx,%rcx), %ymm2, %ymm2
	vpaddb	96(%rbx,%rcx), %ymm3, %ymm3
	vmovdqu	%ymm0, -96(%rdx,%rcx)
	vmovdqu	%ymm1, -64(%rdx,%rcx)
	vmovdqu	%ymm2, -32(%rdx,%rcx)
	vmovdqu	%ymm3, (%rdx,%rcx)
	subq	$-128, %rcx
	cmpq	%rcx, %rax
	jne	LBB179_359
## %bb.360:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpq	%r9, %rax
	je	LBB179_140
## %bb.361:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%r10, %rbx
	testb	$112, %r9b
	je	LBB179_127
LBB179_362:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rax, %rcx
	movl	%r9d, %eax
	andl	$-16, %eax
	movq	%rbx, %rdx
	subq	%r8, %rdx
	addq	%r15, %rdx
	movq	(%rsp), %rsi                    ## 8-byte Reload
LBB179_363:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rdx,%rcx), %xmm0
	vpsrlw	$1, %xmm0, %xmm0
	vpand	%xmm0, %xmm14, %xmm0
	vpaddb	(%rsi,%rcx), %xmm0, %xmm0
	vmovdqu	%xmm0, (%rdi,%rcx)
	addq	$16, %rcx
	cmpq	%rcx, %rax
	jne	LBB179_363
## %bb.364:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpq	%r9, %rax
	jne	LBB179_127
	jmp	LBB179_140
LBB179_366:                             ##   in Loop: Header=BB179_37 Depth=1
	movl	%r9d, %eax
	andl	$-128, %eax
	movq	%rbx, %rcx
	subq	%r8, %rcx
	movq	%r15, %rdx
	addq	%r15, %rcx
	addq	$96, %rcx
	movq	%rbx, %r10
	leaq	(%r15,%rbx), %rsi
	addq	$96, %rsi
	xorl	%edx, %edx
	movq	(%rsp), %rbx                    ## 8-byte Reload
LBB179_367:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	-96(%rcx,%rdx), %ymm0
	vmovdqu	-64(%rcx,%rdx), %ymm1
	vmovdqu	-32(%rcx,%rdx), %ymm2
	vmovdqu	(%rcx,%rdx), %ymm3
	vpaddb	(%rbx,%rdx), %ymm0, %ymm0
	vpaddb	32(%rbx,%rdx), %ymm1, %ymm1
	vpaddb	64(%rbx,%rdx), %ymm2, %ymm2
	vpaddb	96(%rbx,%rdx), %ymm3, %ymm3
	vmovdqu	%ymm0, -96(%rsi,%rdx)
	vmovdqu	%ymm1, -64(%rsi,%rdx)
	vmovdqu	%ymm2, -32(%rsi,%rdx)
	vmovdqu	%ymm3, (%rsi,%rdx)
	subq	$-128, %rdx
	cmpq	%rdx, %rax
	jne	LBB179_367
## %bb.368:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpq	%r9, %rax
	je	LBB179_140
## %bb.369:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%r10, %rbx
	testb	$112, %r9b
	je	LBB179_135
LBB179_370:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%rax, %rcx
	movl	%r9d, %eax
	andl	$-16, %eax
	movq	%rbx, %rdx
	subq	%r8, %rdx
	addq	%r15, %rdx
	movq	(%rsp), %rsi                    ## 8-byte Reload
LBB179_371:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vmovdqu	(%rdx,%rcx), %xmm0
	vpaddb	(%rsi,%rcx), %xmm0, %xmm0
	vmovdqu	%xmm0, (%rdi,%rcx)
	addq	$16, %rcx
	cmpq	%rcx, %rax
	jne	LBB179_371
## %bb.372:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpq	%r9, %rax
	jne	LBB179_135
	jmp	LBB179_140
LBB179_376:                             ##   in Loop: Header=BB179_37 Depth=1
	xorl	%ebx, %ebx
LBB179_377:                             ##   in Loop: Header=BB179_37 Depth=1
	testb	$1, %cl
	je	LBB179_379
## %bb.378:                             ##   in Loop: Header=BB179_37 Depth=1
	vpmovzxbw	16(%r9,%rbx), %ymm0     ## ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	(%r9,%rbx), %ymm1       ## ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	movq	%rbx, %rcx
	subq	%r8, %rcx
	vpmovzxbw	16(%rdi,%rcx), %ymm2    ## ymm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpaddw	%ymm0, %ymm2, %ymm0
	vpmovzxbw	(%rdi,%rcx), %ymm2      ## ymm2 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpaddw	%ymm1, %ymm2, %ymm1
	vpsrlw	$1, %ymm0, %ymm0
	vpsrlw	$1, %ymm1, %ymm1
	vpackuswb	%ymm0, %ymm1, %ymm0
	vpermq	$216, %ymm0, %ymm0              ## ymm0 = ymm0[0,2,1,3]
	movq	(%rsp), %rax                    ## 8-byte Reload
	vpaddb	(%rax,%rbx), %ymm0, %ymm0
	vmovdqu	%ymm0, (%rdi,%rbx)
LBB179_379:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpq	%r14, %r11
	movq	128(%rsp), %rbx                 ## 8-byte Reload
	je	LBB179_140
## %bb.380:                             ##   in Loop: Header=BB179_37 Depth=1
	testb	$16, %r14b
	je	LBB179_112
LBB179_381:                             ##   in Loop: Header=BB179_37 Depth=1
	movq	%r11, %rcx
	movl	%r14d, %r11d
	andl	$-16, %r11d
	movq	%rbx, %rsi
	subq	%r8, %rsi
	addq	%r15, %rsi
	movq	(%rsp), %rax                    ## 8-byte Reload
LBB179_382:                             ##   Parent Loop BB179_37 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	vpmovzxbw	(%r9,%rcx), %ymm0       ## ymm0 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpmovzxbw	(%rsi,%rcx), %ymm1      ## ymm1 = mem[0],zero,mem[1],zero,mem[2],zero,mem[3],zero,mem[4],zero,mem[5],zero,mem[6],zero,mem[7],zero,mem[8],zero,mem[9],zero,mem[10],zero,mem[11],zero,mem[12],zero,mem[13],zero,mem[14],zero,mem[15],zero
	vpaddw	%ymm0, %ymm1, %ymm0
	vpsrlw	$1, %ymm0, %ymm0
	vextracti128	$1, %ymm0, %xmm1
	vpackuswb	%xmm1, %xmm0, %xmm0
	vpaddb	(%rax,%rcx), %xmm0, %xmm0
	vmovdqu	%xmm0, (%rdi,%rcx)
	addq	$16, %rcx
	cmpq	%rcx, %r11
	jne	LBB179_382
## %bb.383:                             ##   in Loop: Header=BB179_37 Depth=1
	cmpq	%r14, %r11
	jne	LBB179_112
	jmp	LBB179_140
LBB179_387:
	cmpl	$8, %r14d
	jge	LBB179_432
## %bb.388:
	movl	168(%rsp), %r8d                 ## 4-byte Reload
	movl	%ebx, %r10d
	movslq	%r14d, %rax
	movq	%rax, 24(%rsp)                  ## 8-byte Spill
	movslq	32(%rsp), %rcx                  ## 4-byte Folded Reload
	movl	48(%rsp), %eax                  ## 4-byte Reload
	imull	%r9d, %eax
	imull	52(%rsp), %eax                  ## 4-byte Folded Reload
	movl	%eax, 48(%rsp)                  ## 4-byte Spill
	movq	%r8, %rax
	subq	%r10, %rax
	movq	%rax, 8(%rsp)                   ## 8-byte Spill
	negq	%r10
	leaq	(%rcx,%rcx,2), %rax
	addq	$2, %rax
	movq	%rax, (%rsp)                    ## 8-byte Spill
	leal	-4(,%r9,4), %eax
	movl	%eax, 128(%rsp)                 ## 4-byte Spill
	decq	%rcx
	movq	%rcx, 16(%rsp)                  ## 8-byte Spill
	leal	(%r9,%r9), %eax
	decl	%eax
	movl	%eax, 72(%rsp)                  ## 4-byte Spill
	xorl	%r9d, %r9d
	xorl	%r11d, %r11d
	jmp	LBB179_390
LBB179_389:                             ##   in Loop: Header=BB179_390 Depth=1
	incq	%r11
	addl	48(%rsp), %r9d                  ## 4-byte Folded Reload
	movl	$1, %eax
	cmpq	184(%rsp), %r11                 ## 8-byte Folded Reload
	movl	16(%rbp), %r14d
	je	LBB179_12
LBB179_390:                             ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB179_397 Depth 2
                                        ##     Child Loop BB179_415 Depth 2
                                        ##     Child Loop BB179_409 Depth 2
                                        ##     Child Loop BB179_430 Depth 2
                                        ##     Child Loop BB179_426 Depth 2
	movq	24(%r12), %r12
	movl	36(%rsp), %eax                  ## 4-byte Reload
	movl	%eax, %r13d
	imull	%r11d, %r13d
	leaq	(%r12,%r13), %r15
	leaq	(%r15,%r8), %rdx
	movb	$1, %cl
	cmpl	$0, 24(%rbp)
	jne	LBB179_392
## %bb.391:                             ##   in Loop: Header=BB179_390 Depth=1
	movq	24(%rsp), %rax                  ## 8-byte Reload
	leaq	__ZL23stbi__depth_scale_table(%rip), %rcx
	movb	(%rax,%rcx), %cl
LBB179_392:                             ##   in Loop: Header=BB179_390 Depth=1
	addq	%r10, %rdx
	movl	%r9d, %r9d
	cmpl	$4, %r14d
	je	LBB179_407
## %bb.393:                             ##   in Loop: Header=BB179_390 Depth=1
	cmpl	$2, %r14d
	je	LBB179_413
## %bb.394:                             ##   in Loop: Header=BB179_390 Depth=1
	cmpl	$1, %r14d
	jne	LBB179_422
## %bb.395:                             ##   in Loop: Header=BB179_390 Depth=1
	movl	56(%rsp), %eax                  ## 4-byte Reload
	movl	%eax, %r14d
	cmpl	$8, %eax
	jl	LBB179_399
## %bb.396:                             ##   in Loop: Header=BB179_390 Depth=1
	movq	8(%rsp), %rdx                   ## 8-byte Reload
	addq	%r12, %rdx
	movl	%eax, %r14d
LBB179_397:                             ##   Parent Loop BB179_390 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%r14d, %edi
	movzbl	(%rdx,%r9), %eax
	sarb	$7, %al
	andb	%cl, %al
	movb	%al, (%r12,%r9)
	movzbl	(%rdx,%r9), %eax
	shrb	$6, %al
	andb	$1, %al
	mulb	%cl
	movb	%al, 1(%r12,%r9)
	movzbl	(%rdx,%r9), %eax
	shrb	$5, %al
	andb	$1, %al
	mulb	%cl
	movb	%al, 2(%r12,%r9)
	movzbl	(%rdx,%r9), %eax
	shrb	$4, %al
	andb	$1, %al
	mulb	%cl
	movb	%al, 3(%r12,%r9)
	movzbl	(%rdx,%r9), %eax
	shrb	$3, %al
	andb	$1, %al
	mulb	%cl
	movb	%al, 4(%r12,%r9)
	movzbl	(%rdx,%r9), %eax
	shrb	$2, %al
	andb	$1, %al
	mulb	%cl
	movb	%al, 5(%r12,%r9)
	movzbl	(%rdx,%r9), %eax
	shrb	%al
	andb	$1, %al
	mulb	%cl
	movb	%al, 6(%r12,%r9)
	movzbl	(%rdx,%r9), %eax
	andb	$1, %al
	mulb	%cl
	movb	%al, 7(%r12,%r9)
	leal	-8(%rdi), %r14d
	incq	%rdx
	addq	$8, %r12
	cmpl	$15, %edi
	ja	LBB179_397
## %bb.398:                             ##   in Loop: Header=BB179_390 Depth=1
	addq	%r9, %rdx
	addq	%r9, %r12
	movq	%r12, %r15
LBB179_399:                             ##   in Loop: Header=BB179_390 Depth=1
	testl	%r14d, %r14d
	jle	LBB179_422
## %bb.400:                             ##   in Loop: Header=BB179_390 Depth=1
	movb	(%rdx), %al
	sarb	$7, %al
	andb	%cl, %al
	movb	%al, (%r15)
	cmpl	$1, %r14d
	je	LBB179_422
## %bb.401:                             ##   in Loop: Header=BB179_390 Depth=1
	movb	(%rdx), %al
	shrb	$6, %al
	andb	$1, %al
	mulb	%cl
	movb	%al, 1(%r15)
	cmpl	$3, %r14d
	jb	LBB179_422
## %bb.402:                             ##   in Loop: Header=BB179_390 Depth=1
	movb	(%rdx), %al
	shrb	$5, %al
	andb	$1, %al
	mulb	%cl
	movb	%al, 2(%r15)
	cmpl	$3, %r14d
	je	LBB179_422
## %bb.403:                             ##   in Loop: Header=BB179_390 Depth=1
	movb	(%rdx), %al
	shrb	$4, %al
	andb	$1, %al
	mulb	%cl
	movb	%al, 3(%r15)
	cmpl	$5, %r14d
	jb	LBB179_422
## %bb.404:                             ##   in Loop: Header=BB179_390 Depth=1
	movb	(%rdx), %al
	shrb	$3, %al
	andb	$1, %al
	mulb	%cl
	movb	%al, 4(%r15)
	cmpl	$5, %r14d
	je	LBB179_422
## %bb.405:                             ##   in Loop: Header=BB179_390 Depth=1
	movb	(%rdx), %al
	shrb	$2, %al
	andb	$1, %al
	mulb	%cl
	movb	%al, 5(%r15)
	cmpl	$7, %r14d
	jb	LBB179_422
## %bb.406:                             ##   in Loop: Header=BB179_390 Depth=1
	addq	$6, %r15
	movb	(%rdx), %al
	shrb	%al
	andb	$1, %al
	jmp	LBB179_421
LBB179_407:                             ##   in Loop: Header=BB179_390 Depth=1
	movl	56(%rsp), %esi                  ## 4-byte Reload
	movl	%esi, %eax
	cmpl	$2, %esi
	jl	LBB179_411
## %bb.408:                             ##   in Loop: Header=BB179_390 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	leaq	(%r12,%rax), %rdx
	movl	%esi, %eax
LBB179_409:                             ##   Parent Loop BB179_390 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%eax, %edi
	movzbl	(%rdx,%r9), %eax
	shrb	$4, %al
	mulb	%cl
	movb	%al, (%r12,%r9)
	movzbl	(%rdx,%r9), %eax
	andb	$15, %al
	mulb	%cl
	movb	%al, 1(%r12,%r9)
	leal	-2(%rdi), %eax
	incq	%rdx
	addq	$2, %r12
	cmpl	$3, %edi
	ja	LBB179_409
## %bb.410:                             ##   in Loop: Header=BB179_390 Depth=1
	addq	%r9, %rdx
	addq	%r9, %r12
	movq	%r12, %r15
LBB179_411:                             ##   in Loop: Header=BB179_390 Depth=1
	cmpl	$1, %eax
	jne	LBB179_422
## %bb.412:                             ##   in Loop: Header=BB179_390 Depth=1
	movb	(%rdx), %al
	shrb	$4, %al
	jmp	LBB179_421
LBB179_413:                             ##   in Loop: Header=BB179_390 Depth=1
	movl	56(%rsp), %eax                  ## 4-byte Reload
	movl	%eax, %edi
	cmpl	$4, %eax
	jl	LBB179_417
## %bb.414:                             ##   in Loop: Header=BB179_390 Depth=1
	movq	8(%rsp), %rax                   ## 8-byte Reload
	leaq	(%r12,%rax), %rdx
	movl	56(%rsp), %edi                  ## 4-byte Reload
LBB179_415:                             ##   Parent Loop BB179_390 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	%edi, %ebx
	movzbl	(%rdx,%r9), %eax
	shrb	$6, %al
	mulb	%cl
	movb	%al, (%r12,%r9)
	movzbl	(%rdx,%r9), %eax
	shrb	$4, %al
	andb	$3, %al
	mulb	%cl
	movb	%al, 1(%r12,%r9)
	movzbl	(%rdx,%r9), %eax
	shrb	$2, %al
	andb	$3, %al
	mulb	%cl
	movb	%al, 2(%r12,%r9)
	movzbl	(%rdx,%r9), %eax
	andb	$3, %al
	mulb	%cl
	movb	%al, 3(%r12,%r9)
	leal	-4(%rbx), %edi
	incq	%rdx
	addq	$4, %r12
	cmpl	$7, %ebx
	ja	LBB179_415
## %bb.416:                             ##   in Loop: Header=BB179_390 Depth=1
	addq	%r9, %rdx
	addq	%r9, %r12
	movq	%r12, %r15
LBB179_417:                             ##   in Loop: Header=BB179_390 Depth=1
	testl	%edi, %edi
	jle	LBB179_422
## %bb.418:                             ##   in Loop: Header=BB179_390 Depth=1
	movb	(%rdx), %al
	shrb	$6, %al
	mulb	%cl
	movb	%al, (%r15)
	cmpl	$1, %edi
	je	LBB179_422
## %bb.419:                             ##   in Loop: Header=BB179_390 Depth=1
	movb	(%rdx), %al
	shrb	$4, %al
	andb	$3, %al
	mulb	%cl
	movb	%al, 1(%r15)
	cmpl	$3, %edi
	jb	LBB179_422
## %bb.420:                             ##   in Loop: Header=BB179_390 Depth=1
	addq	$2, %r15
	movb	(%rdx), %al
	shrb	$2, %al
	andb	$3, %al
LBB179_421:                             ##   in Loop: Header=BB179_390 Depth=1
	mulb	%cl
	movb	%al, (%r15)
LBB179_422:                             ##   in Loop: Header=BB179_390 Depth=1
	movq	120(%rsp), %rax                 ## 8-byte Reload
	cmpl	52(%rsp), %eax                  ## 4-byte Folded Reload
	movq	112(%rsp), %r12                 ## 8-byte Reload
	je	LBB179_389
## %bb.423:                             ##   in Loop: Header=BB179_390 Depth=1
	movq	24(%r12), %rax
	addq	%rax, %r13
	movq	120(%rsp), %rcx                 ## 8-byte Reload
	cmpl	$1, %ecx
	jne	LBB179_427
## %bb.424:                             ##   in Loop: Header=BB179_390 Depth=1
	cmpl	$0, 32(%rsp)                    ## 4-byte Folded Reload
	js	LBB179_389
## %bb.425:                             ##   in Loop: Header=BB179_390 Depth=1
	addq	%r9, %rax
	movq	16(%rsp), %rcx                  ## 8-byte Reload
	movl	72(%rsp), %edi                  ## 4-byte Reload
	movq	%rcx, %rdx
LBB179_426:                             ##   Parent Loop BB179_390 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movslq	%edi, %rbx
	decl	%edi
	movb	$-1, (%r13,%rbx)
	movzbl	1(%rax,%rcx), %r14d
	movslq	%edi, %rdi
	movb	%r14b, (%r13,%rdi)
	addl	$-2, %ebx
	decq	%rdx
	movl	%ebx, %edi
	testl	$-2147483648, %ecx              ## imm = 0x80000000
	movq	%rdx, %rcx
	je	LBB179_426
	jmp	LBB179_389
LBB179_427:                             ##   in Loop: Header=BB179_390 Depth=1
	cmpl	$3, %ecx
	movl	32(%rsp), %ecx                  ## 4-byte Reload
	jne	LBB179_435
## %bb.428:                             ##   in Loop: Header=BB179_390 Depth=1
	testl	%ecx, %ecx
	js	LBB179_389
## %bb.429:                             ##   in Loop: Header=BB179_390 Depth=1
	addq	(%rsp), %rax                    ## 8-byte Folded Reload
	addq	%r9, %rax
	movq	16(%rsp), %rcx                  ## 8-byte Reload
	movl	128(%rsp), %edx                 ## 4-byte Reload
                                        ## kill: def $edx killed $edx def $rdx
	movq	%rcx, %rdi
LBB179_430:                             ##   Parent Loop BB179_390 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	leal	3(%rdx), %ebx
	movslq	%ebx, %rbx
	movb	$-1, (%r13,%rbx)
	movzbl	(%rax), %ebx
	leal	2(%rdx), %esi
	movslq	%esi, %rsi
	movb	%bl, (%r13,%rsi)
	movzbl	-1(%rax), %ebx
	leal	1(%rdx), %esi
	movslq	%esi, %rsi
	movb	%bl, (%r13,%rsi)
	movzbl	-2(%rax), %ebx
	movslq	%edx, %rdx
	movb	%bl, (%r13,%rdx)
	addq	$-3, %rax
	addl	$-4, %edx
	decq	%rdi
	testl	$-2147483648, %ecx              ## imm = 0x80000000
	movq	%rdi, %rcx
	je	LBB179_430
	jmp	LBB179_389
LBB179_431:
	leaq	L_.str.137(%rip), %rbx
	jmp	LBB179_10
LBB179_432:
	movl	$1, %eax
	cmpl	$16, %r14d
	jne	LBB179_12
	jmp	LBB179_29
LBB179_433:
	callq	__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii.cold.3
	jmp	LBB179_11
LBB179_434:
	vzeroupper
	callq	__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii.cold.2
	jmp	LBB179_11
LBB179_435:
	vzeroupper
	callq	__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii.cold.1
	jmp	LBB179_11
	.cfi_endproc
	.p2align	2, 0x90
	.data_region jt32
.set L179_0_set_44, LBB179_44-LJTI179_0
.set L179_0_set_49, LBB179_49-LJTI179_0
.set L179_0_set_50, LBB179_50-LJTI179_0
LJTI179_0:
	.long	L179_0_set_44
	.long	L179_0_set_44
	.long	L179_0_set_49
	.long	L179_0_set_50
	.long	L179_0_set_49
	.long	L179_0_set_44
	.long	L179_0_set_44
.set L179_1_set_67, LBB179_67-LJTI179_1
.set L179_1_set_142, LBB179_142-LJTI179_1
.set L179_1_set_163, LBB179_163-LJTI179_1
.set L179_1_set_188, LBB179_188-LJTI179_1
.set L179_1_set_215, LBB179_215-LJTI179_1
.set L179_1_set_240, LBB179_240-LJTI179_1
.set L179_1_set_261, LBB179_261-LJTI179_1
LJTI179_1:
	.long	L179_1_set_67
	.long	L179_1_set_142
	.long	L179_1_set_163
	.long	L179_1_set_188
	.long	L179_1_set_215
	.long	L179_1_set_240
	.long	L179_1_set_261
.set L179_2_set_63, LBB179_63-LJTI179_2
.set L179_2_set_91, LBB179_91-LJTI179_2
.set L179_2_set_99, LBB179_99-LJTI179_2
.set L179_2_set_109, LBB179_109-LJTI179_2
.set L179_2_set_117, LBB179_117-LJTI179_2
.set L179_2_set_124, LBB179_124-LJTI179_2
.set L179_2_set_132, LBB179_132-LJTI179_2
LJTI179_2:
	.long	L179_2_set_63
	.long	L179_2_set_91
	.long	L179_2_set_99
	.long	L179_2_set_109
	.long	L179_2_set_117
	.long	L179_2_set_124
	.long	L179_2_set_132
	.end_data_region
                                        ## -- End function
	.section	__TEXT,__const
	.p2align	5                               ## -- Begin function _ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi
LCPI180_0:
	.long	4                               ## 0x4
	.long	8                               ## 0x8
	.long	16                              ## 0x10
	.long	32                              ## 0x20
	.long	64                              ## 0x40
	.long	128                             ## 0x80
	.long	256                             ## 0x100
	.long	512                             ## 0x200
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4
LCPI180_1:
	.long	4096                            ## 0x1000
	.long	8192                            ## 0x2000
	.long	16384                           ## 0x4000
	.long	32768                           ## 0x8000
	.section	__TEXT,__text,regular,pure_instructions
	.p2align	4, 0x90
__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi: ## @_ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	andq	$-32, %rsp
	subq	$160, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r15d
	movq	%rsi, %rbx
	movq	%rdi, %r14
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, 144(%rsp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovaps	%ymm0, 32(%rsp)
	vmovaps	%ymm0, (%rsp)
	movl	$0, 64(%rsp)
	movl	$1024, %esi                     ## imm = 0x400
	vzeroupper
	callq	___bzero
	testl	%r15d, %r15d
	jle	LBB180_1
## %bb.14:
	movl	%r15d, %edx
	leaq	-1(%rdx), %rcx
	movl	%edx, %eax
	andl	$3, %eax
	cmpq	$3, %rcx
	jae	LBB180_16
## %bb.15:
	xorl	%ecx, %ecx
	jmp	LBB180_18
LBB180_1:
	xorl	%eax, %eax
	jmp	LBB180_2
LBB180_16:
	andl	$-4, %edx
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB180_17:                              ## =>This Inner Loop Header: Depth=1
	movzbl	(%rbx,%rcx), %esi
	incl	(%rsp,%rsi,4)
	movzbl	1(%rbx,%rcx), %esi
	incl	(%rsp,%rsi,4)
	movzbl	2(%rbx,%rcx), %esi
	incl	(%rsp,%rsi,4)
	movzbl	3(%rbx,%rcx), %esi
	incl	(%rsp,%rsi,4)
	addq	$4, %rcx
	cmpq	%rcx, %rdx
	jne	LBB180_17
LBB180_18:
	testq	%rax, %rax
	je	LBB180_21
## %bb.19:
	addq	%rbx, %rcx
	xorl	%edx, %edx
	.p2align	4, 0x90
LBB180_20:                              ## =>This Inner Loop Header: Depth=1
	movzbl	(%rcx,%rdx), %esi
	incl	(%rsp,%rsi,4)
	incq	%rdx
	cmpq	%rdx, %rax
	jne	LBB180_20
LBB180_21:
	movl	4(%rsp), %eax
	movl	$0, (%rsp)
	cmpl	$2, %eax
	jle	LBB180_2
## %bb.22:
	leaq	L_.str.149(%rip), %r8
	jmp	LBB180_23
LBB180_2:
	vmovdqu	8(%rsp), %ymm0
	vpcmpgtd	LCPI180_0(%rip), %ymm0, %ymm0
	vmovmskps	%ymm0, %ecx
	leaq	L_.str.149(%rip), %r8
	testl	%ecx, %ecx
	jne	LBB180_23
## %bb.3:
	cmpl	$1024, 40(%rsp)                 ## imm = 0x400
	jg	LBB180_23
## %bb.4:
	cmpl	$2048, 44(%rsp)                 ## imm = 0x800
	jg	LBB180_23
## %bb.5:
	vmovdqa	48(%rsp), %xmm0
	vpcmpgtd	LCPI180_1(%rip), %xmm0, %xmm0
	vmovmskps	%xmm0, %ecx
	testb	$1, %cl
	jne	LBB180_23
## %bb.6:
	movl	%ecx, %edx
	andb	$2, %dl
	shrb	%dl
	jne	LBB180_23
## %bb.7:
	movl	%ecx, %edx
	andb	$4, %dl
	shrb	$2, %dl
	jne	LBB180_23
## %bb.8:
	shrb	$3, %cl
	jne	LBB180_23
## %bb.9:
	movl	$0, 84(%rsp)
	movw	$0, 1026(%r14)
	movw	$0, 1126(%r14)
	leaq	L_.str.150(%rip), %r8
	cmpl	$2, %eax
	jg	LBB180_23
## %bb.10:
	xorl	%edi, %edi
	movl	$15, %r9d
	xorl	%r10d, %r10d
	movl	%eax, %esi
	.p2align	4, 0x90
LBB180_11:                              ## =>This Inner Loop Header: Depth=1
	movl	%eax, %edx
	movl	%r9d, %ecx
	shll	%cl, %edx
	movl	%edx, 1060(%r14,%rdi,4)
	cmpq	$14, %rdi
	je	LBB180_24
## %bb.12:                              ##   in Loop: Header=BB180_11 Depth=1
	addl	%esi, %r10d
	leal	(%rax,%rax), %ecx
	movl	8(%rsp,%rdi,4), %esi
	movl	%ecx, 88(%rsp,%rdi,4)
	movw	%cx, 1028(%r14,%rdi,2)
	movw	%r10w, 1128(%r14,%rdi,2)
	leal	2(%rdi), %ecx
	movl	$1, %edx
                                        ## kill: def $cl killed $cl killed $ecx
	shll	%cl, %edx
	leal	(%rsi,%rax,2), %eax
	decl	%r9d
	incq	%rdi
	testl	%esi, %esi
	je	LBB180_11
## %bb.13:                              ##   in Loop: Header=BB180_11 Depth=1
	cmpl	%edx, %eax
	jle	LBB180_11
LBB180_23:
	movq	__ZL22stbi__g_failure_reason@TLVP(%rip), %rdi
	vzeroupper
	callq	*(%rdi)
	movq	%r8, (%rax)
	xorl	%eax, %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	144(%rsp), %rcx
	jne	LBB180_36
LBB180_35:
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	vzeroupper
	retq
LBB180_24:
	movl	$65536, 1120(%r14)              ## imm = 0x10000
	testl	%r15d, %r15d
	jle	LBB180_33
## %bb.25:
	movl	%r15d, %r8d
	xorl	%esi, %esi
	jmp	LBB180_26
	.p2align	4, 0x90
LBB180_31:                              ##   in Loop: Header=BB180_26 Depth=1
	incl	%r9d
	movl	%r9d, 80(%rsp,%rax,4)
LBB180_32:                              ##   in Loop: Header=BB180_26 Depth=1
	incq	%rsi
	cmpq	%r8, %rsi
	je	LBB180_33
LBB180_26:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB180_30 Depth 2
	movzbl	(%rbx,%rsi), %eax
	testl	%eax, %eax
	je	LBB180_32
## %bb.27:                              ##   in Loop: Header=BB180_26 Depth=1
	movl	80(%rsp,%rax,4), %r9d
	movzwl	1024(%r14,%rax,2), %ecx
	movl	%r9d, %edx
	subl	%ecx, %edx
	movzwl	1124(%r14,%rax,2), %ecx
	movslq	%edx, %rdx
	addq	%rcx, %rdx
	movb	%al, 1156(%r14,%rdx)
	movw	%si, 1444(%r14,%rdx,2)
	cmpb	$9, %al
	ja	LBB180_31
## %bb.28:                              ##   in Loop: Header=BB180_26 Depth=1
	movl	%r9d, %ecx
	rolw	$8, %cx
	movl	%ecx, %edx
	andl	$3855, %edx                     ## imm = 0xF0F
	shll	$4, %edx
	shrl	$4, %ecx
	andl	$3855, %ecx                     ## imm = 0xF0F
	orl	%edx, %ecx
	movl	%ecx, %edx
	andl	$13107, %edx                    ## imm = 0x3333
	shrl	$2, %ecx
	andl	$13107, %ecx                    ## imm = 0x3333
	leal	(%rcx,%rdx,4), %ecx
	movl	%ecx, %edx
	andl	$21845, %edx                    ## imm = 0x5555
	shrl	%ecx
	andl	$21845, %ecx                    ## imm = 0x5555
	leal	(%rcx,%rdx,2), %edx
	movb	$16, %cl
	subb	%al, %cl
	shrl	%cl, %edx
	cmpl	$511, %edx                      ## imm = 0x1FF
	ja	LBB180_31
## %bb.29:                              ##   in Loop: Header=BB180_26 Depth=1
	movl	%eax, %r10d
	movl	$1, %edi
	movl	%eax, %ecx
	shll	%cl, %edi
	shll	$9, %r10d
	movl	%esi, %ecx
	orl	%r10d, %ecx
	movl	%edx, %edx
	movslq	%edi, %rdi
	.p2align	4, 0x90
LBB180_30:                              ##   Parent Loop BB180_26 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movw	%cx, (%r14,%rdx,2)
	addq	%rdi, %rdx
	cmpq	$512, %rdx                      ## imm = 0x200
	jl	LBB180_30
	jmp	LBB180_31
LBB180_33:
	movl	$1, %eax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	cmpq	144(%rsp), %rcx
	je	LBB180_35
LBB180_36:
	vzeroupper
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z10push_size_PKciP5Arenam15ArenaPushParams.cold.1
__Z10push_size_PKciP5Arenam15ArenaPushParams.cold.1: ## @_Z10push_size_PKciP5Arenam15ArenaPushParams.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z10init_arenaP5ArenaS0_m.cold.1
__Z10init_arenaP5ArenaS0_m.cold.1:      ## @_Z10init_arenaP5ArenaS0_m.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rcx
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.4(%rip), %rsi
	pushq	$92
	popq	%rdx
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z10init_arenaP5ArenaS0_m.cold.2
__Z10init_arenaP5ArenaS0_m.cold.2:      ## @_Z10init_arenaP5ArenaS0_m.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z16read_entire_fileP5ArenaPKc.cold.1
__Z16read_entire_fileP5ArenaPKc.cold.1: ## @_Z16read_entire_fileP5ArenaPKc.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rsi
	leaq	L_.str.6(%rip), %rdi
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z16read_entire_fileP5ArenaPKc(%rip), %rdi
	leaq	L_.str.7(%rip), %rsi
	leaq	L_.str.8(%rip), %rcx
	pushq	$19
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z16read_entire_fileP5ArenaPKc.cold.2
__Z16read_entire_fileP5ArenaPKc.cold.2: ## @_Z16read_entire_fileP5ArenaPKc.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rcx
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.9(%rip), %rsi
	pushq	$25
	popq	%rdx
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z16read_entire_fileP5ArenaPKc.cold.3
__Z16read_entire_fileP5ArenaPKc.cold.3: ## @_Z16read_entire_fileP5ArenaPKc.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z16read_entire_fileP5ArenaPKc(%rip), %rdi
	leaq	L_.str.7(%rip), %rsi
	leaq	L_.str.10(%rip), %rcx
	pushq	$26
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z16read_entire_fileP5ArenaPKc.cold.4
__Z16read_entire_fileP5ArenaPKc.cold.4: ## @_Z16read_entire_fileP5ArenaPKc.cold.4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z10string_dupP5Arena6String.cold.1
__Z10string_dupP5Arena6String.cold.1:   ## @_Z10string_dupP5Arena6String.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rcx
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.9(%rip), %rsi
	pushq	$49
	popq	%rdx
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z10string_dupP5Arena6String.cold.2
__Z10string_dupP5Arena6String.cold.2:   ## @_Z10string_dupP5Arena6String.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.1
__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.1: ## @_Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rcx
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.11(%rip), %rsi
	pushq	$24
	popq	%rdx
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.2
__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.2: ## @_Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rcx
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.11(%rip), %rsi
	pushq	$26
	popq	%rdx
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.3
__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.3: ## @_Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rcx
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.11(%rip), %rsi
	pushq	$31
	popq	%rdx
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.4
__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.4: ## @_Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.11(%rip), %rsi
	pushq	$32
	popq	%rdx
	movl	$12800000, %ecx                 ## imm = 0xC35000
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.5
__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.5: ## @_Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.5
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z18new_render_contextP5ArenaP4Game7Texturefffi(%rip), %rdi
	leaq	L_.str.12(%rip), %rsi
	leaq	L_.str.13(%rip), %rcx
	pushq	$34
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.6
__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.6: ## @_Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.6
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rcx
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.11(%rip), %rsi
	pushq	$44
	popq	%rdx
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.7
__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.7: ## @_Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.7
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.8
__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.8: ## @_Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.8
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.9
__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.9: ## @_Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.9
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.10
__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.10: ## @_Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.10
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.11
__Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.11: ## @_Z18new_render_contextP5ArenaP4Game7Texturefffi.cold.11
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_FindGlyphIndex.cold.1
_stbtt_FindGlyphIndex.cold.1:           ## @stbtt_FindGlyphIndex.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__.stbtt_FindGlyphIndex(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	movl	$1585, %edx                     ## imm = 0x631
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_FindGlyphIndex.cold.2
_stbtt_FindGlyphIndex.cold.2:           ## @stbtt_FindGlyphIndex.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__.stbtt_FindGlyphIndex(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	movl	$1514, %edx                     ## imm = 0x5EA
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_GetGlyphShape.cold.1
_stbtt_GetGlyphShape.cold.1:            ## @stbtt_GetGlyphShape.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL22stbtt__GetGlyphShapeTTPK14stbtt_fontinfoiPP12stbtt_vertex(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	movl	$1838, %edx                     ## imm = 0x72E
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_GetGlyphShape.cold.2
_stbtt_GetGlyphShape.cold.2:            ## @stbtt_GetGlyphShape.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL22stbtt__GetGlyphShapeT2PK14stbtt_fontinfoiPP12stbtt_vertex(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.69(%rip), %rcx
	movl	$2278, %edx                     ## imm = 0x8E6
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi.cold.1
__ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi.cold.1: ## @_ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.62(%rip), %rcx
	movl	$1607, %edx                     ## imm = 0x647
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.1
_stbtt_Rasterize.cold.1:                ## @stbtt_Rasterize.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL28stbtt__fill_active_edges_newPfS_iP18stbtt__active_edgef(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.74(%rip), %rcx
	movl	$3090, %edx                     ## imm = 0xC12
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.2
_stbtt_Rasterize.cold.2:                ## @stbtt_Rasterize.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL28stbtt__fill_active_edges_newPfS_iP18stbtt__active_edgef(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.75(%rip), %rcx
	movl	$3109, %edx                     ## imm = 0xC25
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.3
_stbtt_Rasterize.cold.3:                ## @stbtt_Rasterize.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL28stbtt__fill_active_edges_newPfS_iP18stbtt__active_edgef(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.76(%rip), %rcx
	movl	$3137, %edx                     ## imm = 0xC41
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.4
_stbtt_Rasterize.cold.4:                ## @stbtt_Rasterize.cold.4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL27stbtt__sized_trapezoid_areafff(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.89(%rip), %rcx
	movl	$3067, %edx                     ## imm = 0xBFB
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.5
_stbtt_Rasterize.cold.5:                ## @stbtt_Rasterize.cold.5
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL27stbtt__sized_trapezoid_areafff(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.90(%rip), %rcx
	movl	$3068, %edx                     ## imm = 0xBFC
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.6
_stbtt_Rasterize.cold.6:                ## @stbtt_Rasterize.cold.6
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL28stbtt__fill_active_edges_newPfS_iP18stbtt__active_edgef(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.77(%rip), %rcx
	movl	$3155, %edx                     ## imm = 0xC53
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.7
_stbtt_Rasterize.cold.7:                ## @stbtt_Rasterize.cold.7
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL28stbtt__fill_active_edges_newPfS_iP18stbtt__active_edgef(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.78(%rip), %rcx
	movl	$3156, %edx                     ## imm = 0xC54
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.8
_stbtt_Rasterize.cold.8:                ## @stbtt_Rasterize.cold.8
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL28stbtt__fill_active_edges_newPfS_iP18stbtt__active_edgef(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.79(%rip), %rcx
	movl	$3220, %edx                     ## imm = 0xC94
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.9
_stbtt_Rasterize.cold.9:                ## @stbtt_Rasterize.cold.9
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL28stbtt__fill_active_edges_newPfS_iP18stbtt__active_edgef(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.80(%rip), %rcx
	movl	$3221, %edx                     ## imm = 0xC95
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.10
_stbtt_Rasterize.cold.10:               ## @stbtt_Rasterize.cold.10
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL27stbtt__sized_trapezoid_areafff(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.89(%rip), %rcx
	movl	$3067, %edx                     ## imm = 0xBFB
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.11
_stbtt_Rasterize.cold.11:               ## @stbtt_Rasterize.cold.11
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL27stbtt__sized_trapezoid_areafff(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.90(%rip), %rcx
	movl	$3068, %edx                     ## imm = 0xBFC
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.12
_stbtt_Rasterize.cold.12:               ## @stbtt_Rasterize.cold.12
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL17stbtt__new_activeP12stbtt__hheapP11stbtt__edgeifPv(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.73(%rip), %rcx
	movl	$2861, %edx                     ## imm = 0xB2D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.13
_stbtt_Rasterize.cold.13:               ## @stbtt_Rasterize.cold.13
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL29stbtt__rasterize_sorted_edgesP13stbtt__bitmapP11stbtt__edgeiiiiPv(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.72(%rip), %rcx
	movl	$3350, %edx                     ## imm = 0xD16
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_Rasterize.cold.14
_stbtt_Rasterize.cold.14:               ## @stbtt_Rasterize.cold.14
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL29stbtt__rasterize_sorted_edgesP13stbtt__bitmapP11stbtt__edgeiiiiPv(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.71(%rip), %rcx
	movl	$3331, %edx                     ## imm = 0xD03
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_PackSetOversampling.cold.1
_stbtt_PackSetOversampling.cold.1:      ## @stbtt_PackSetOversampling.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__.stbtt_PackSetOversampling(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.19(%rip), %rcx
	movl	$3998, %edx                     ## imm = 0xF9E
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_PackSetOversampling.cold.2
_stbtt_PackSetOversampling.cold.2:      ## @stbtt_PackSetOversampling.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__.stbtt_PackSetOversampling(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.18(%rip), %rcx
	movl	$3997, %edx                     ## imm = 0xF9D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL18stbtt__h_prefilterPhiiij.cold.1
__ZL18stbtt__h_prefilterPhiiij.cold.1:  ## @_ZL18stbtt__h_prefilterPhiiij.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL18stbtt__h_prefilterPhiiij(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.91(%rip), %rcx
	movl	$4065, %edx                     ## imm = 0xFE1
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL18stbtt__v_prefilterPhiiij.cold.1
__ZL18stbtt__v_prefilterPhiiij.cold.1:  ## @_ZL18stbtt__v_prefilterPhiiij.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL18stbtt__v_prefilterPhiiij(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.92(%rip), %rcx
	movl	$4127, %edx                     ## imm = 0x101F
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_PackFontRangesRenderIntoRects.cold.1
_stbtt_PackFontRangesRenderIntoRects.cold.1: ## @stbtt_PackFontRangesRenderIntoRects.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL18stbtt__h_prefilterPhiiij(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.91(%rip), %rcx
	movl	$4065, %edx                     ## imm = 0xFE1
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_InitFont.cold.1
_stbtt_InitFont.cold.1:                 ## @stbtt_InitFont.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_InitFont.cold.2
_stbtt_InitFont.cold.2:                 ## @stbtt_InitFont.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_InitFont.cold.3
_stbtt_InitFont.cold.3:                 ## @stbtt_InitFont.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_InitFont.cold.4
_stbtt_InitFont.cold.4:                 ## @stbtt_InitFont.cold.4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_GetGlyphSDF.cold.1
_stbtt_GetGlyphSDF.cold.1:              ## @stbtt_GetGlyphSDF.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__.stbtt_GetGlyphSDF(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.20(%rip), %rcx
	movl	$4659, %edx                     ## imm = 0x1233
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function stbtt_BakeFontBitmap.cold.1
_stbtt_BakeFontBitmap.cold.1:           ## @stbtt_BakeFontBitmap.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL29stbtt_BakeFontBitmap_internalPhifS_iiiiP15stbtt_bakedchar(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.93(%rip), %rcx
	movl	$3842, %edx                     ## imm = 0xF02
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i.cold.1
__ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i.cold.1: ## @_ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i(%rip), %rdi
	leaq	L_.str.109(%rip), %rsi
	leaq	L_.str.110(%rip), %rcx
	movl	$1249, %edx                     ## imm = 0x4E1
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i.cold.1
__ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i.cold.1: ## @_ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i(%rip), %rdi
	leaq	L_.str.109(%rip), %rsi
	leaq	L_.str.110(%rip), %rcx
	movl	$1275, %edx                     ## imm = 0x4FB
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z12load_textureP5ArenaPKc.cold.1
__Z12load_textureP5ArenaPKc.cold.1:     ## @_Z12load_textureP5ArenaPKc.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rsi
	leaq	L_.str.27(%rip), %rdi
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z12load_textureP5ArenaPKc(%rip), %rdi
	leaq	L_.str.28(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$25
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z12load_textureP5ArenaPKc.cold.2
__Z12load_textureP5ArenaPKc.cold.2:     ## @_Z12load_textureP5ArenaPKc.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z12load_textureP5ArenaPKc(%rip), %rdi
	leaq	L_.str.28(%rip), %rsi
	leaq	L_.str.29(%rip), %rcx
	pushq	$27
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z12load_textureP5ArenaPKc.cold.3
__Z12load_textureP5ArenaPKc.cold.3:     ## @_Z12load_textureP5ArenaPKc.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rcx
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.30(%rip), %rsi
	pushq	$31
	popq	%rdx
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z12load_textureP5ArenaPKc.cold.4
__Z12load_textureP5ArenaPKc.cold.4:     ## @_Z12load_textureP5ArenaPKc.cold.4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.1
__Z9load_meshP5ArenaPKcP7Texture.cold.1: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.30(%rip), %rsi
	pushq	$78
	popq	%rdx
	movl	$134217728, %ecx                ## imm = 0x8000000
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.2
__Z9load_meshP5ArenaPKcP7Texture.cold.2: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.30(%rip), %rsi
	pushq	$84
	popq	%rdx
	movl	$8388608, %ecx                  ## imm = 0x800000
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.3
__Z9load_meshP5ArenaPKcP7Texture.cold.3: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.30(%rip), %rsi
	pushq	$85
	popq	%rdx
	movl	$12582912, %ecx                 ## imm = 0xC00000
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.4
__Z9load_meshP5ArenaPKcP7Texture.cold.4: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.30(%rip), %rsi
	pushq	$86
	popq	%rdx
	movl	$12582912, %ecx                 ## imm = 0xC00000
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.5
__Z9load_meshP5ArenaPKcP7Texture.cold.5: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.5
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z9load_meshP5ArenaPKcP7Texture(%rip), %rdi
	leaq	L_.str.28(%rip), %rsi
	leaq	L_.str.32(%rip), %rcx
	pushq	$111
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.6
__Z9load_meshP5ArenaPKcP7Texture.cold.6: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.6
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z9load_meshP5ArenaPKcP7Texture(%rip), %rdi
	leaq	L_.str.28(%rip), %rsi
	leaq	L_.str.33(%rip), %rcx
	movl	$128, %edx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.7
__Z9load_meshP5ArenaPKcP7Texture.cold.7: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.7
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z9load_meshP5ArenaPKcP7Texture(%rip), %rdi
	leaq	L_.str.28(%rip), %rsi
	leaq	L_.str.36(%rip), %rcx
	movl	$146, %edx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.8
__Z9load_meshP5ArenaPKcP7Texture.cold.8: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.8
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z9load_meshP5ArenaPKcP7Texture(%rip), %rdi
	leaq	L_.str.28(%rip), %rsi
	leaq	L_.str.35(%rip), %rcx
	movl	$139, %edx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.9
__Z9load_meshP5ArenaPKcP7Texture.cold.9: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.9
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z9load_meshP5ArenaPKcP7Texture(%rip), %rdi
	leaq	L_.str.28(%rip), %rsi
	leaq	L_.str.34(%rip), %rcx
	movl	$131, %edx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.10
__Z9load_meshP5ArenaPKcP7Texture.cold.10: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.10
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.11
__Z9load_meshP5ArenaPKcP7Texture.cold.11: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.11
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.12
__Z9load_meshP5ArenaPKcP7Texture.cold.12: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.12
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _Z9load_meshP5ArenaPKcP7Texture.cold.13
__Z9load_meshP5ArenaPKcP7Texture.cold.13: ## @_Z9load_meshP5ArenaPKcP7Texture.cold.13
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.1
_game_update_and_render.cold.1:         ## @game_update_and_render.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.4(%rip), %rsi
	pushq	$92
	popq	%rdx
	movl	$67108864, %ecx                 ## imm = 0x4000000
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.2
_game_update_and_render.cold.2:         ## @game_update_and_render.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.4(%rip), %rsi
	pushq	$92
	popq	%rdx
	movl	$67108864, %ecx                 ## imm = 0x4000000
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.3
_game_update_and_render.cold.3:         ## @game_update_and_render.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.4(%rip), %rsi
	pushq	$92
	popq	%rdx
	movl	$536870912, %ecx                ## imm = 0x20000000
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.4
_game_update_and_render.cold.4:         ## @game_update_and_render.cold.4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.4(%rip), %rsi
	pushq	$92
	popq	%rdx
	movl	$3221225472, %ecx               ## imm = 0xC0000000
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.5
_game_update_and_render.cold.5:         ## @game_update_and_render.cold.5
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.30(%rip), %rsi
	pushq	$16
	popq	%rcx
	movl	$254, %edx
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.6
_game_update_and_render.cold.6:         ## @game_update_and_render.cold.6
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.30(%rip), %rsi
	movl	$395104, %ecx                   ## imm = 0x60760
	movl	$281, %edx                      ## imm = 0x119
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.7
_game_update_and_render.cold.7:         ## @game_update_and_render.cold.7
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__.game_update_and_render(%rip), %rdi
	leaq	L_.str.28(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	movl	$292, %edx                      ## imm = 0x124
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.8
_game_update_and_render.cold.8:         ## @game_update_and_render.cold.8
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rcx
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.30(%rip), %rsi
	movl	$319, %edx                      ## imm = 0x13F
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.9
_game_update_and_render.cold.9:         ## @game_update_and_render.cold.9
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, %rcx
	leaq	L_.str.2(%rip), %rdi
	leaq	L_.str.30(%rip), %rsi
	movl	$330, %edx                      ## imm = 0x14A
	xorl	%eax, %eax
	callq	_printf
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	pushq	$72
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.10
_game_update_and_render.cold.10:        ## @game_update_and_render.cold.10
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__.game_update_and_render(%rip), %rdi
	leaq	L_.str.28(%rip), %rsi
	leaq	L_.str.51(%rip), %rcx
	movl	$350, %edx                      ## imm = 0x15E
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.11
_game_update_and_render.cold.11:        ## @game_update_and_render.cold.11
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.12
_game_update_and_render.cold.12:        ## @game_update_and_render.cold.12
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.13
_game_update_and_render.cold.13:        ## @game_update_and_render.cold.13
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.14
_game_update_and_render.cold.14:        ## @game_update_and_render.cold.14
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.15
_game_update_and_render.cold.15:        ## @game_update_and_render.cold.15
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.16
_game_update_and_render.cold.16:        ## @game_update_and_render.cold.16
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.17
_game_update_and_render.cold.17:        ## @game_update_and_render.cold.17
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function game_update_and_render.cold.18
_game_update_and_render.cold.18:        ## @game_update_and_render.cold.18
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	pushq	$67
	popq	%rdx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function main.cold.1
_main.cold.1:                           ## @main.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__.main(%rip), %rdi
	leaq	L_.str.52(%rip), %rsi
	leaq	L_.str.60(%rip), %rcx
	movl	$237, %edx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.1
__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.1: ## @_ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.2
__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.2: ## @_ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.3
__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.3: ## @_ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.4
__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.4: ## @_ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.5
__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.5: ## @_ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.5
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.6
__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.6: ## @_ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.6
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL20stbtt__cff_index_get10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.63(%rip), %rcx
	movl	$1266, %edx                     ## imm = 0x4F2
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.7
__ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.7: ## @_ZL21stbtt__run_charstringPK14stbtt_fontinfoiP12stbtt__csctx.cold.7
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__cff_index_get10stbtt__bufi.cold.1
__ZL20stbtt__cff_index_get10stbtt__bufi.cold.1: ## @_ZL20stbtt__cff_index_get10stbtt__bufi.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__cff_index_get10stbtt__bufi.cold.2
__ZL20stbtt__cff_index_get10stbtt__bufi.cold.2: ## @_ZL20stbtt__cff_index_get10stbtt__bufi.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL20stbtt__cff_index_get10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.63(%rip), %rcx
	movl	$1266, %edx                     ## imm = 0x4F2
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__cff_index_get10stbtt__bufi.cold.3
__ZL20stbtt__cff_index_get10stbtt__bufi.cold.3: ## @_ZL20stbtt__cff_index_get10stbtt__bufi.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL20stbtt__cff_index_get10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.64(%rip), %rcx
	movl	$1267, %edx                     ## imm = 0x4F3
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__cff_index_get10stbtt__bufi.cold.4
__ZL20stbtt__cff_index_get10stbtt__bufi.cold.4: ## @_ZL20stbtt__cff_index_get10stbtt__bufi.cold.4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL14stbtt__cff_intP10stbtt__buf.cold.1
__ZL14stbtt__cff_intP10stbtt__buf.cold.1: ## @_ZL14stbtt__cff_intP10stbtt__buf.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL14stbtt__cff_intP10stbtt__buf(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	movl	$1212, %edx                     ## imm = 0x4BC
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL16stbtt__get_subrs10stbtt__bufS_.cold.1
__ZL16stbtt__get_subrs10stbtt__bufS_.cold.1: ## @_ZL16stbtt__get_subrs10stbtt__bufS_.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__dict_get_intsP10stbtt__bufiiPj.cold.1
__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj.cold.1: ## @_ZL20stbtt__dict_get_intsP10stbtt__bufiiPj.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__dict_get_intsP10stbtt__bufiiPj.cold.2
__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj.cold.2: ## @_ZL20stbtt__dict_get_intsP10stbtt__bufiiPj.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__dict_get_intsP10stbtt__bufiiPj.cold.3
__ZL20stbtt__dict_get_intsP10stbtt__bufiiPj.cold.3: ## @_ZL20stbtt__dict_get_intsP10stbtt__bufiiPj.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL14stbtt__cff_intP10stbtt__buf(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	movl	$1212, %edx                     ## imm = 0x4BC
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__cff_get_indexP10stbtt__buf.cold.1
__ZL20stbtt__cff_get_indexP10stbtt__buf.cold.1: ## @_ZL20stbtt__cff_get_indexP10stbtt__buf.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL20stbtt__cff_get_indexP10stbtt__buf(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.64(%rip), %rcx
	movl	$1197, %edx                     ## imm = 0x4AD
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__cff_get_indexP10stbtt__buf.cold.2
__ZL20stbtt__cff_get_indexP10stbtt__buf.cold.2: ## @_ZL20stbtt__cff_get_indexP10stbtt__buf.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL20stbtt__cff_get_indexP10stbtt__buf.cold.3
__ZL20stbtt__cff_get_indexP10stbtt__buf.cold.3: ## @_ZL20stbtt__cff_get_indexP10stbtt__buf.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbtt__buf_seekP10stbtt__bufi(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.65(%rip), %rcx
	movl	$1149, %edx                     ## imm = 0x47D
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.1
__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.1: ## @_ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.81(%rip), %rcx
	movl	$3031, %edx                     ## imm = 0xBD7
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.2
__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.2: ## @_ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.82(%rip), %rcx
	movl	$3032, %edx                     ## imm = 0xBD8
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.3
__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.3: ## @_ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.83(%rip), %rcx
	movl	$3045, %edx                     ## imm = 0xBE5
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.4
__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.4: ## @_ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.4
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.88(%rip), %rcx
	movl	$3060, %edx                     ## imm = 0xBF4
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.5
__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.5: ## @_ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.5
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.84(%rip), %rcx
	movl	$3047, %edx                     ## imm = 0xBE7
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.6
__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.6: ## @_ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.6
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.87(%rip), %rcx
	movl	$3053, %edx                     ## imm = 0xBED
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.7
__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.7: ## @_ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.7
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.86(%rip), %rcx
	movl	$3051, %edx                     ## imm = 0xBEB
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.8
__ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.8: ## @_ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff.cold.8
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff(%rip), %rdi
	leaq	L_.str.16(%rip), %rsi
	leaq	L_.str.85(%rip), %rcx
	movl	$3049, %edx                     ## imm = 0xBE9
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi.cold.1
__ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi.cold.1: ## @_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL20stbi__convert_formatPhiijj(%rip), %rdi
	leaq	L_.str.109(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	movl	$1770, %edx                     ## imm = 0x6EA
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi.cold.2
__ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi.cold.2: ## @_ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL22stbi__convert_format16Ptiijj(%rip), %rdi
	leaq	L_.str.109(%rip), %rsi
	leaq	L_.str.3(%rip), %rcx
	movl	$1827, %edx                     ## imm = 0x723
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL28stbi__compute_transparency16P9stbi__pngPti.cold.1
__ZL28stbi__compute_transparency16P9stbi__pngPti.cold.1: ## @_ZL28stbi__compute_transparency16P9stbi__pngPti.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL28stbi__compute_transparency16P9stbi__pngPti(%rip), %rdi
	leaq	L_.str.109(%rip), %rsi
	leaq	L_.str.140(%rip), %rcx
	movl	$4884, %edx                     ## imm = 0x1314
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL26stbi__compute_transparencyP9stbi__pngPhi.cold.1
__ZL26stbi__compute_transparencyP9stbi__pngPhi.cold.1: ## @_ZL26stbi__compute_transparencyP9stbi__pngPhi.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL26stbi__compute_transparencyP9stbi__pngPhi(%rip), %rdi
	leaq	L_.str.109(%rip), %rsi
	leaq	L_.str.140(%rip), %rcx
	movl	$4859, %edx                     ## imm = 0x12FB
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL15stbi__de_iphoneP9stbi__png.cold.1
__ZL15stbi__de_iphoneP9stbi__png.cold.1: ## @_ZL15stbi__de_iphoneP9stbi__png.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL15stbi__de_iphoneP9stbi__png(%rip), %rdi
	leaq	L_.str.109(%rip), %rsi
	leaq	L_.str.141(%rip), %rcx
	movl	$4992, %edx                     ## imm = 0x1380
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii.cold.1
__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii.cold.1: ## @_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii.cold.1
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii(%rip), %rdi
	leaq	L_.str.109(%rip), %rsi
	leaq	L_.str.139(%rip), %rcx
	movl	$4780, %edx                     ## imm = 0x12AC
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii.cold.2
__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii.cold.2: ## @_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii.cold.2
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii(%rip), %rdi
	leaq	L_.str.109(%rip), %rsi
	leaq	L_.str.138(%rip), %rcx
	movl	$4691, %edx                     ## imm = 0x1253
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.p2align	4, 0x90                         ## -- Begin function _ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii.cold.3
__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii.cold.3: ## @_ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii.cold.3
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	leaq	L___func__._ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii(%rip), %rdi
	leaq	L_.str.109(%rip), %rsi
	leaq	L_.str.134(%rip), %rcx
	movl	$4607, %edx                     ## imm = 0x11FF
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__cstring,cstring_literals
L___func__._Z10push_size_PKciP5Arenam15ArenaPushParams: ## @__func__._Z10push_size_PKciP5Arenam15ArenaPushParams
	.asciz	"push_size_"

L_.str:                                 ## @.str
	.asciz	"arena.h"

L_.str.1:                               ## @.str.1
	.asciz	"(uintptr_t)(a->base + offset) % params.alignment == 0"

L_.str.2:                               ## @.str.2
	.asciz	"%s:%d: failed to allocate %lu bytes\n"

L_.str.3:                               ## @.str.3
	.asciz	"0"

L_.str.4:                               ## @.str.4
	.asciz	"code/arena.h"

.tbss _g_thread_info$tlv$init, 520, 2   ## @g_thread_info

	.section	__DATA,__thread_vars,thread_local_variables
_g_thread_info:
	.quad	__tlv_bootstrap
	.quad	0
	.quad	_g_thread_info$tlv$init

	.globl	_timed_blocks1                  ## @timed_blocks1
.zerofill __DATA,__common,_timed_blocks1,28672,4
	.globl	_timed_blocks2                  ## @timed_blocks2
.zerofill __DATA,__common,_timed_blocks2,28672,4
	.section	__DATA,__data
	.globl	_timed_blocks                   ## @timed_blocks
	.p2align	3
_timed_blocks:
	.quad	_timed_blocks1

	.section	__TEXT,__cstring,cstring_literals
L_.str.5:                               ## @.str.5
	.asciz	"rb"

L_.str.6:                               ## @.str.6
	.asciz	"failed to load file: %s\n"

L___func__._Z16read_entire_fileP5ArenaPKc: ## @__func__._Z16read_entire_fileP5ArenaPKc
	.asciz	"read_entire_file"

L_.str.7:                               ## @.str.7
	.asciz	"utils.cpp"

L_.str.8:                               ## @.str.8
	.asciz	"f"

L_.str.9:                               ## @.str.9
	.asciz	"code/utils.cpp"

L_.str.10:                              ## @.str.10
	.asciz	"result"

.zerofill __DATA,__bss,__ZZ12random_floatffE9rng_state,4,2 ## @_ZZ12random_floatffE9rng_state
L_.str.11:                              ## @.str.11
	.asciz	"code/renderer.cpp"

L___func__._Z18new_render_contextP5ArenaP4Game7Texturefffi: ## @__func__._Z18new_render_contextP5ArenaP4Game7Texturefffi
	.asciz	"new_render_context"

L_.str.12:                              ## @.str.12
	.asciz	"renderer.cpp"

L_.str.13:                              ## @.str.13
	.asciz	"r.buffer_aa.pixels && r.triangles"

L___FUNCTION__._Z13push_triangleP14Render_ContextP8Triangle: ## @__FUNCTION__._Z13push_triangleP14Render_ContextP8Triangle
	.asciz	"push_triangle"

L_.str.14:                              ## @.str.14
	.asciz	"r->triangle_count < r->max_triangle_count"

L___FUNCTION__._Z9push_meshP14Render_ContextP4Mesh2v3S3_S3_2v4: ## @__FUNCTION__._Z9push_meshP14Render_ContextP4Mesh2v3S3_S3_2v4
	.asciz	"push_mesh"

L___FUNCTION__._Z11render_tileP14Render_Contexti: ## @__FUNCTION__._Z11render_tileP14Render_Contexti
	.asciz	"render_tile"

L_.str.15:                              ## @.str.15
	.asciz	"samples to pixels"

L___func__.stbtt_FindGlyphIndex:        ## @__func__.stbtt_FindGlyphIndex
	.asciz	"stbtt_FindGlyphIndex"

L_.str.16:                              ## @.str.16
	.asciz	"stb_truetype.h"

L___func__.stbtt_PackSetOversampling:   ## @__func__.stbtt_PackSetOversampling
	.asciz	"stbtt_PackSetOversampling"

L_.str.18:                              ## @.str.18
	.asciz	"h_oversample <= 8"

L_.str.19:                              ## @.str.19
	.asciz	"v_oversample <= 8"

L___func__.stbtt_GetGlyphSDF:           ## @__func__.stbtt_GetGlyphSDF
	.asciz	"stbtt_GetGlyphSDF"

L_.str.20:                              ## @.str.20
	.asciz	"i != 0"

.tbss __ZL22stbi__g_failure_reason$tlv$init, 8, 3 ## @_ZL22stbi__g_failure_reason

	.section	__DATA,__thread_vars,thread_local_variables
__ZL22stbi__g_failure_reason:
	.quad	__tlv_bootstrap
	.quad	0
	.quad	__ZL22stbi__g_failure_reason$tlv$init

.zerofill __DATA,__bss,__ZL36stbi__vertically_flip_on_load_global,4,2 ## @_ZL36stbi__vertically_flip_on_load_global
.tbss __ZL35stbi__vertically_flip_on_load_local$tlv$init, 4, 2 ## @_ZL35stbi__vertically_flip_on_load_local

__ZL35stbi__vertically_flip_on_load_local:
	.quad	__tlv_bootstrap
	.quad	0
	.quad	__ZL35stbi__vertically_flip_on_load_local$tlv$init

.tbss __ZL33stbi__vertically_flip_on_load_set$tlv$init, 1, 2 ## @_ZL33stbi__vertically_flip_on_load_set

__ZL33stbi__vertically_flip_on_load_set:
	.quad	__tlv_bootstrap
	.quad	0
	.quad	__ZL33stbi__vertically_flip_on_load_set$tlv$init

	.section	__TEXT,__cstring,cstring_literals
L_.str.22:                              ## @.str.22
	.asciz	"can't fopen"

	.section	__DATA,__data
	.p2align	2                               ## @_ZL15stbi__l2h_gamma
__ZL15stbi__l2h_gamma:
	.long	0x400ccccd                      ## float 2.20000005

	.p2align	2                               ## @_ZL15stbi__l2h_scale
__ZL15stbi__l2h_scale:
	.long	0x3f800000                      ## float 1

.zerofill __DATA,__bss,__ZL34stbi__unpremultiply_on_load_global,4,2 ## @_ZL34stbi__unpremultiply_on_load_global
.zerofill __DATA,__bss,__ZL27stbi__de_iphone_flag_global,4,2 ## @_ZL27stbi__de_iphone_flag_global
.tbss __ZL33stbi__unpremultiply_on_load_local$tlv$init, 4, 2 ## @_ZL33stbi__unpremultiply_on_load_local

	.section	__DATA,__thread_vars,thread_local_variables
__ZL33stbi__unpremultiply_on_load_local:
	.quad	__tlv_bootstrap
	.quad	0
	.quad	__ZL33stbi__unpremultiply_on_load_local$tlv$init

.tbss __ZL31stbi__unpremultiply_on_load_set$tlv$init, 1, 2 ## @_ZL31stbi__unpremultiply_on_load_set

__ZL31stbi__unpremultiply_on_load_set:
	.quad	__tlv_bootstrap
	.quad	0
	.quad	__ZL31stbi__unpremultiply_on_load_set$tlv$init

.tbss __ZL26stbi__de_iphone_flag_local$tlv$init, 4, 2 ## @_ZL26stbi__de_iphone_flag_local

__ZL26stbi__de_iphone_flag_local:
	.quad	__tlv_bootstrap
	.quad	0
	.quad	__ZL26stbi__de_iphone_flag_local$tlv$init

.tbss __ZL24stbi__de_iphone_flag_set$tlv$init, 1, 2 ## @_ZL24stbi__de_iphone_flag_set

__ZL24stbi__de_iphone_flag_set:
	.quad	__tlv_bootstrap
	.quad	0
	.quad	__ZL24stbi__de_iphone_flag_set$tlv$init

	.section	__TEXT,__cstring,cstring_literals
L_.str.23:                              ## @.str.23
	.asciz	"%.2fms %dfps %d records %d threads %d tiles"

L_.str.24:                              ## @.str.24
	.asciz	"pause"

L_.str.25:                              ## @.str.25
	.asciz	"%5.2lf%% %10.0lfcy %5.0lfh %s (%s:%d)"

L_.str.26:                              ## @.str.26
	.asciz	"%5.2lf%% %10.0lfcy %5.0lfh tid:%d"

L_.str.27:                              ## @.str.27
	.asciz	"failed to load %s\n"

L___func__._Z12load_textureP5ArenaPKc:  ## @__func__._Z12load_textureP5ArenaPKc
	.asciz	"load_texture"

L_.str.28:                              ## @.str.28
	.asciz	"game.cpp"

L_.str.29:                              ## @.str.29
	.asciz	"n == 3 || n == 4"

L_.str.30:                              ## @.str.30
	.asciz	"code/game.cpp"

L_.str.31:                              ## @.str.31
	.asciz	"loaded %s %d %d\n"

L___func__._Z9load_meshP5ArenaPKcP7Texture: ## @__func__._Z9load_meshP5ArenaPKcP7Texture
	.asciz	"load_mesh"

L_.str.32:                              ## @.str.32
	.asciz	"vertex_count < max_vertices_count"

L_.str.33:                              ## @.str.33
	.asciz	"mesh.triangle_count < max_triangle_count"

L_.str.34:                              ## @.str.34
	.asciz	"f0[0] > 0 && f1[0] > 0 && f2[0] > 0"

L_.str.35:                              ## @.str.35
	.asciz	"f0[1] > 0 && f1[1] > 0 && f2[1] > 0"

L_.str.36:                              ## @.str.36
	.asciz	"f0[2] > 0 && f1[2] > 0 && f2[2] > 0"

L_.str.37:                              ## @.str.37
	.asciz	"loaded %d triangles\n"

L_.str.38:                              ## @.str.38
	.asciz	"data/starwars.png"

L_.str.39:                              ## @.str.39
	.asciz	"data/grass.png"

L_.str.40:                              ## @.str.40
	.asciz	"data/grass_top.png"

L_.str.41:                              ## @.str.41
	.asciz	"data/ground.png"

L_.str.42:                              ## @.str.42
	.asciz	"data/gun_tex.png"

L_.str.43:                              ## @.str.43
	.asciz	"data/starwars.obj"

L_.str.44:                              ## @.str.44
	.asciz	"data/gun.obj"

L_.str.45:                              ## @.str.45
	.asciz	"data/cow.obj"

L_.str.46:                              ## @.str.46
	.asciz	"data/monkey.obj"

L_.str.47:                              ## @.str.47
	.asciz	"data/african_head.png"

L_.str.48:                              ## @.str.48
	.asciz	"data/african_head.obj"

L_.str.49:                              ## @.str.49
	.asciz	"data/tree.obj"

L_.str.50:                              ## @.str.50
	.asciz	"data/liberation-mono.ttf"

L___func__.game_update_and_render:      ## @__func__.game_update_and_render
	.asciz	"game_update_and_render"

L_.str.51:                              ## @.str.51
	.asciz	"(int)ceilf(ax * scale) == font_advance_x"

L___func__.main:                        ## @__func__.main
	.asciz	"main"

L_.str.52:                              ## @.str.52
	.asciz	"main.cpp"

L_.str.56:                              ## @.str.56
	.asciz	"SDL FAILURE: %s\n"

L_.str.57:                              ## @.str.57
	.asciz	"Core count: %d\n"

L_.str.58:                              ## @.str.58
	.asciz	"game"

L_.str.60:                              ## @.str.60
	.asciz	"keystate_len <= ARRAY_LENGTH(game_input.buttons)"

L_.str.61:                              ## @.str.61
	.asciz	"%.2fms"

L___func__._ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi: ## @__func__._ZL20stbtt__GetGlyfOffsetPK14stbtt_fontinfoi
	.asciz	"stbtt__GetGlyfOffset"

L_.str.62:                              ## @.str.62
	.asciz	"!info->cff.size"

L___func__._ZL20stbtt__cff_index_get10stbtt__bufi: ## @__func__._ZL20stbtt__cff_index_get10stbtt__bufi
	.asciz	"stbtt__cff_index_get"

L_.str.63:                              ## @.str.63
	.asciz	"i >= 0 && i < count"

L_.str.64:                              ## @.str.64
	.asciz	"offsize >= 1 && offsize <= 4"

L___func__._ZL15stbtt__buf_seekP10stbtt__bufi: ## @__func__._ZL15stbtt__buf_seekP10stbtt__bufi
	.asciz	"stbtt__buf_seek"

L_.str.65:                              ## @.str.65
	.asciz	"!(o > b->size || o < 0)"

L___func__._ZL20stbtt__cff_get_indexP10stbtt__buf: ## @__func__._ZL20stbtt__cff_get_indexP10stbtt__buf
	.asciz	"stbtt__cff_get_index"

L___func__._ZL14stbtt__cff_intP10stbtt__buf: ## @__func__._ZL14stbtt__cff_intP10stbtt__buf
	.asciz	"stbtt__cff_int"

L___func__._ZL22stbtt__GetGlyphShapeTTPK14stbtt_fontinfoiPP12stbtt_vertex: ## @__func__._ZL22stbtt__GetGlyphShapeTTPK14stbtt_fontinfoiPP12stbtt_vertex
	.asciz	"stbtt__GetGlyphShapeTT"

L___func__._ZL22stbtt__GetGlyphShapeT2PK14stbtt_fontinfoiPP12stbtt_vertex: ## @__func__._ZL22stbtt__GetGlyphShapeT2PK14stbtt_fontinfoiPP12stbtt_vertex
	.asciz	"stbtt__GetGlyphShapeT2"

L_.str.69:                              ## @.str.69
	.asciz	"output_ctx.num_vertices == count_ctx.num_vertices"

L___func__._ZL29stbtt__rasterize_sorted_edgesP13stbtt__bitmapP11stbtt__edgeiiiiPv: ## @__func__._ZL29stbtt__rasterize_sorted_edgesP13stbtt__bitmapP11stbtt__edgeiiiiPv
	.asciz	"stbtt__rasterize_sorted_edges"

L_.str.71:                              ## @.str.71
	.asciz	"z->direction"

L_.str.72:                              ## @.str.72
	.asciz	"z->ey >= scan_y_top"

L___func__._ZL17stbtt__new_activeP12stbtt__hheapP11stbtt__edgeifPv: ## @__func__._ZL17stbtt__new_activeP12stbtt__hheapP11stbtt__edgeifPv
	.asciz	"stbtt__new_active"

L_.str.73:                              ## @.str.73
	.asciz	"z != __null"

L___func__._ZL28stbtt__fill_active_edges_newPfS_iP18stbtt__active_edgef: ## @__func__._ZL28stbtt__fill_active_edges_newPfS_iP18stbtt__active_edgef
	.asciz	"stbtt__fill_active_edges_new"

L_.str.74:                              ## @.str.74
	.asciz	"e->ey >= y_top"

L_.str.75:                              ## @.str.75
	.asciz	"e->sy <= y_bottom && e->ey >= y_top"

L_.str.76:                              ## @.str.76
	.asciz	"x >= 0 && x < len"

L_.str.77:                              ## @.str.77
	.asciz	"dy >= 0"

L_.str.78:                              ## @.str.78
	.asciz	"dx >= 0"

L_.str.79:                              ## @.str.79
	.asciz	"fabs(area) <= 1.01f"

L_.str.80:                              ## @.str.80
	.asciz	"sy1 > y_final-0.01f"

L___func__._ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff: ## @__func__._ZL26stbtt__handle_clipped_edgePfiP18stbtt__active_edgeffff
	.asciz	"stbtt__handle_clipped_edge"

L_.str.81:                              ## @.str.81
	.asciz	"y0 < y1"

L_.str.82:                              ## @.str.82
	.asciz	"e->sy <= e->ey"

L_.str.83:                              ## @.str.83
	.asciz	"x1 <= x+1"

L_.str.84:                              ## @.str.84
	.asciz	"x1 >= x"

L_.str.85:                              ## @.str.85
	.asciz	"x1 <= x"

L_.str.86:                              ## @.str.86
	.asciz	"x1 >= x+1"

L_.str.87:                              ## @.str.87
	.asciz	"x1 >= x && x1 <= x+1"

L_.str.88:                              ## @.str.88
	.asciz	"x0 >= x && x0 <= x+1 && x1 >= x && x1 <= x+1"

L___func__._ZL27stbtt__sized_trapezoid_areafff: ## @__func__._ZL27stbtt__sized_trapezoid_areafff
	.asciz	"stbtt__sized_trapezoid_area"

L_.str.89:                              ## @.str.89
	.asciz	"top_width >= 0"

L_.str.90:                              ## @.str.90
	.asciz	"bottom_width >= 0"

L___func__._ZL18stbtt__h_prefilterPhiiij: ## @__func__._ZL18stbtt__h_prefilterPhiiij
	.asciz	"stbtt__h_prefilter"

L_.str.91:                              ## @.str.91
	.asciz	"pixels[i] == 0"

L___func__._ZL18stbtt__v_prefilterPhiiij: ## @__func__._ZL18stbtt__v_prefilterPhiiij
	.asciz	"stbtt__v_prefilter"

L_.str.92:                              ## @.str.92
	.asciz	"pixels[i*stride_in_bytes] == 0"

L___func__._ZL29stbtt_BakeFontBitmap_internalPhifS_iiiiP15stbtt_bakedchar: ## @__func__._ZL29stbtt_BakeFontBitmap_internalPhifS_iiiiP15stbtt_bakedchar
	.asciz	"stbtt_BakeFontBitmap_internal"

L_.str.93:                              ## @.str.93
	.asciz	"x+gw < pw"

	.section	__DATA,__const
	.p2align	3                               ## @_ZL21stbi__stdio_callbacks
__ZL21stbi__stdio_callbacks:
	.quad	__ZL16stbi__stdio_readPvPci
	.quad	__ZL16stbi__stdio_skipPvi
	.quad	__ZL15stbi__stdio_eofPv

	.section	__TEXT,__cstring,cstring_literals
L___func__._ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i: ## @__func__._ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i
	.asciz	"stbi__load_and_postprocess_8bit"

L_.str.109:                             ## @.str.109
	.asciz	"stb_image.h"

L_.str.110:                             ## @.str.110
	.asciz	"ri.bits_per_channel == 8 || ri.bits_per_channel == 16"

L_.str.111:                             ## @.str.111
	.asciz	"unknown image type"

L_.str.112:                             ## @.str.112
	.asciz	"bad png sig"

L_.str.113:                             ## @.str.113
	.asciz	"bad req_comp"

L_.str.114:                             ## @.str.114
	.asciz	"bad bits_per_channel"

L_.str.115:                             ## @.str.115
	.asciz	"multiple IHDR"

L_.str.116:                             ## @.str.116
	.asciz	"bad IHDR len"

L_.str.117:                             ## @.str.117
	.asciz	"too large"

L_.str.118:                             ## @.str.118
	.asciz	"1/2/4/8/16-bit only"

L_.str.119:                             ## @.str.119
	.asciz	"bad ctype"

L_.str.120:                             ## @.str.120
	.asciz	"bad comp method"

L_.str.121:                             ## @.str.121
	.asciz	"bad filter method"

L_.str.122:                             ## @.str.122
	.asciz	"bad interlace method"

L_.str.123:                             ## @.str.123
	.asciz	"0-pixel image"

L_.str.124:                             ## @.str.124
	.asciz	"first not IHDR"

L_.str.125:                             ## @.str.125
	.asciz	"invalid PLTE"

L_.str.126:                             ## @.str.126
	.asciz	"tRNS after IDAT"

L_.str.127:                             ## @.str.127
	.asciz	"tRNS before PLTE"

L_.str.128:                             ## @.str.128
	.asciz	"bad tRNS len"

L_.str.129:                             ## @.str.129
	.asciz	"tRNS with alpha"

	.section	__TEXT,__const
__ZL23stbi__depth_scale_table:          ## @_ZL23stbi__depth_scale_table
	.ascii	"\000\377U\000\021\000\000\000\001"

	.section	__TEXT,__cstring,cstring_literals
L_.str.130:                             ## @.str.130
	.asciz	"no PLTE"

L_.str.131:                             ## @.str.131
	.asciz	"outofmem"

L_.str.132:                             ## @.str.132
	.asciz	"outofdata"

L_.str.133:                             ## @.str.133
	.asciz	"no IDAT"

	.section	__DATA,__data
	.p2align	4                               ## @_ZZL20stbi__parse_png_fileP9stbi__pngiiE13invalid_chunk
__ZZL20stbi__parse_png_fileP9stbi__pngiiE13invalid_chunk:
	.asciz	"XXXX PNG chunk not known"

	.section	__TEXT,__const
	.p2align	4                               ## @__const._ZL22stbi__create_png_imageP9stbi__pngPhjiiii.xorig
l___const._ZL22stbi__create_png_imageP9stbi__pngPhjiiii.xorig:
	.long	0                               ## 0x0
	.long	4                               ## 0x4
	.long	0                               ## 0x0
	.long	2                               ## 0x2
	.long	0                               ## 0x0
	.long	1                               ## 0x1
	.long	0                               ## 0x0

	.p2align	4                               ## @__const._ZL22stbi__create_png_imageP9stbi__pngPhjiiii.yorig
l___const._ZL22stbi__create_png_imageP9stbi__pngPhjiiii.yorig:
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.long	4                               ## 0x4
	.long	0                               ## 0x0
	.long	2                               ## 0x2
	.long	0                               ## 0x0
	.long	1                               ## 0x1

	.p2align	4                               ## @__const._ZL22stbi__create_png_imageP9stbi__pngPhjiiii.xspc
l___const._ZL22stbi__create_png_imageP9stbi__pngPhjiiii.xspc:
	.long	8                               ## 0x8
	.long	8                               ## 0x8
	.long	4                               ## 0x4
	.long	4                               ## 0x4
	.long	2                               ## 0x2
	.long	2                               ## 0x2
	.long	1                               ## 0x1

	.p2align	4                               ## @__const._ZL22stbi__create_png_imageP9stbi__pngPhjiiii.yspc
l___const._ZL22stbi__create_png_imageP9stbi__pngPhjiiii.yspc:
	.long	8                               ## 0x8
	.long	8                               ## 0x8
	.long	8                               ## 0x8
	.long	4                               ## 0x4
	.long	4                               ## 0x4
	.long	2                               ## 0x2
	.long	2                               ## 0x2

	.section	__TEXT,__cstring,cstring_literals
L___func__._ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii: ## @__func__._ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii
	.asciz	"stbi__create_png_image_raw"

L_.str.134:                             ## @.str.134
	.asciz	"out_n == s->img_n || out_n == s->img_n+1"

L_.str.135:                             ## @.str.135
	.asciz	"not enough pixels"

L_.str.136:                             ## @.str.136
	.asciz	"invalid filter"

L_.str.137:                             ## @.str.137
	.asciz	"invalid width"

	.section	__TEXT,__const
__ZL16first_row_filter:                 ## @_ZL16first_row_filter
	.ascii	"\000\001\000\005\006"

	.section	__TEXT,__cstring,cstring_literals
L_.str.138:                             ## @.str.138
	.asciz	"img_n+1 == out_n"

L_.str.139:                             ## @.str.139
	.asciz	"img_n == 3"

L___func__._ZL28stbi__compute_transparency16P9stbi__pngPti: ## @__func__._ZL28stbi__compute_transparency16P9stbi__pngPti
	.asciz	"stbi__compute_transparency16"

L_.str.140:                             ## @.str.140
	.asciz	"out_n == 2 || out_n == 4"

L___func__._ZL26stbi__compute_transparencyP9stbi__pngPhi: ## @__func__._ZL26stbi__compute_transparencyP9stbi__pngPhi
	.asciz	"stbi__compute_transparency"

L___func__._ZL15stbi__de_iphoneP9stbi__png: ## @__func__._ZL15stbi__de_iphoneP9stbi__png
	.asciz	"stbi__de_iphone"

L_.str.141:                             ## @.str.141
	.asciz	"s->img_out_n == 4"

L___func__._ZL20stbi__convert_formatPhiijj: ## @__func__._ZL20stbi__convert_formatPhiijj
	.asciz	"stbi__convert_format"

L___func__._ZL22stbi__convert_format16Ptiijj: ## @__func__._ZL22stbi__convert_format16Ptiijj
	.asciz	"stbi__convert_format16"

L___func__._ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i: ## @__func__._ZL32stbi__load_and_postprocess_16bitP13stbi__contextPiS1_S1_i
	.asciz	"stbi__load_and_postprocess_16bit"

	.section	__TEXT,__const
	.p2align	4                               ## @_ZL21stbi__zdefault_length
__ZL21stbi__zdefault_length:
	.ascii	"\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\b\b\b\b\b\b\b\b"

	.p2align	4                               ## @_ZL23stbi__zdefault_distance
__ZL23stbi__zdefault_distance:
	.space	32,5

	.section	__TEXT,__cstring,cstring_literals
L_.str.143:                             ## @.str.143
	.asciz	"bad zlib header"

L_.str.144:                             ## @.str.144
	.asciz	"no preset dict"

L_.str.145:                             ## @.str.145
	.asciz	"bad compression"

L_.str.146:                             ## @.str.146
	.asciz	"zlib corrupt"

L_.str.147:                             ## @.str.147
	.asciz	"read past buffer"

L_.str.148:                             ## @.str.148
	.asciz	"output buffer limit"

L_.str.149:                             ## @.str.149
	.asciz	"bad sizes"

L_.str.150:                             ## @.str.150
	.asciz	"bad codelengths"

	.section	__TEXT,__const
	.p2align	4                               ## @_ZZL27stbi__compute_huffman_codesP10stbi__zbufE15length_dezigzag
__ZZL27stbi__compute_huffman_codesP10stbi__zbufE15length_dezigzag:
	.ascii	"\020\021\022\000\b\007\t\006\n\005\013\004\f\003\r\002\016\001\017"

	.section	__TEXT,__cstring,cstring_literals
L_.str.152:                             ## @.str.152
	.asciz	"bad huffman code"

	.section	__TEXT,__const
	.p2align	4                               ## @_ZL18stbi__zlength_base
__ZL18stbi__zlength_base:
	.long	3                               ## 0x3
	.long	4                               ## 0x4
	.long	5                               ## 0x5
	.long	6                               ## 0x6
	.long	7                               ## 0x7
	.long	8                               ## 0x8
	.long	9                               ## 0x9
	.long	10                              ## 0xa
	.long	11                              ## 0xb
	.long	13                              ## 0xd
	.long	15                              ## 0xf
	.long	17                              ## 0x11
	.long	19                              ## 0x13
	.long	23                              ## 0x17
	.long	27                              ## 0x1b
	.long	31                              ## 0x1f
	.long	35                              ## 0x23
	.long	43                              ## 0x2b
	.long	51                              ## 0x33
	.long	59                              ## 0x3b
	.long	67                              ## 0x43
	.long	83                              ## 0x53
	.long	99                              ## 0x63
	.long	115                             ## 0x73
	.long	131                             ## 0x83
	.long	163                             ## 0xa3
	.long	195                             ## 0xc3
	.long	227                             ## 0xe3
	.long	258                             ## 0x102
	.long	0                               ## 0x0
	.long	0                               ## 0x0

	.p2align	4                               ## @_ZL19stbi__zlength_extra
__ZL19stbi__zlength_extra:
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.long	1                               ## 0x1
	.long	1                               ## 0x1
	.long	1                               ## 0x1
	.long	1                               ## 0x1
	.long	2                               ## 0x2
	.long	2                               ## 0x2
	.long	2                               ## 0x2
	.long	2                               ## 0x2
	.long	3                               ## 0x3
	.long	3                               ## 0x3
	.long	3                               ## 0x3
	.long	3                               ## 0x3
	.long	4                               ## 0x4
	.long	4                               ## 0x4
	.long	4                               ## 0x4
	.long	4                               ## 0x4
	.long	5                               ## 0x5
	.long	5                               ## 0x5
	.long	5                               ## 0x5
	.long	5                               ## 0x5
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.long	0                               ## 0x0

	.p2align	4                               ## @_ZL16stbi__zdist_base
__ZL16stbi__zdist_base:
	.long	1                               ## 0x1
	.long	2                               ## 0x2
	.long	3                               ## 0x3
	.long	4                               ## 0x4
	.long	5                               ## 0x5
	.long	7                               ## 0x7
	.long	9                               ## 0x9
	.long	13                              ## 0xd
	.long	17                              ## 0x11
	.long	25                              ## 0x19
	.long	33                              ## 0x21
	.long	49                              ## 0x31
	.long	65                              ## 0x41
	.long	97                              ## 0x61
	.long	129                             ## 0x81
	.long	193                             ## 0xc1
	.long	257                             ## 0x101
	.long	385                             ## 0x181
	.long	513                             ## 0x201
	.long	769                             ## 0x301
	.long	1025                            ## 0x401
	.long	1537                            ## 0x601
	.long	2049                            ## 0x801
	.long	3073                            ## 0xc01
	.long	4097                            ## 0x1001
	.long	6145                            ## 0x1801
	.long	8193                            ## 0x2001
	.long	12289                           ## 0x3001
	.long	16385                           ## 0x4001
	.long	24577                           ## 0x6001
	.long	0                               ## 0x0
	.long	0                               ## 0x0

	.p2align	4                               ## @_ZL17stbi__zdist_extra
__ZL17stbi__zdist_extra:
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.long	0                               ## 0x0
	.long	1                               ## 0x1
	.long	1                               ## 0x1
	.long	2                               ## 0x2
	.long	2                               ## 0x2
	.long	3                               ## 0x3
	.long	3                               ## 0x3
	.long	4                               ## 0x4
	.long	4                               ## 0x4
	.long	5                               ## 0x5
	.long	5                               ## 0x5
	.long	6                               ## 0x6
	.long	6                               ## 0x6
	.long	7                               ## 0x7
	.long	7                               ## 0x7
	.long	8                               ## 0x8
	.long	8                               ## 0x8
	.long	9                               ## 0x9
	.long	9                               ## 0x9
	.long	10                              ## 0xa
	.long	10                              ## 0xa
	.long	11                              ## 0xb
	.long	11                              ## 0xb
	.long	12                              ## 0xc
	.long	12                              ## 0xc
	.long	13                              ## 0xd
	.long	13                              ## 0xd
	.long	0                               ## 0x0
	.long	0                               ## 0x0

	.section	__TEXT,__cstring,cstring_literals
L_.str.153:                             ## @.str.153
	.asciz	"bad dist"

.subsections_via_symbols
